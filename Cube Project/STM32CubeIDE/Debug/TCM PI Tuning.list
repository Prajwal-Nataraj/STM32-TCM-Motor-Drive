
TCM PI Tuning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a94c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000458  0800ab30  0800ab30  0001ab30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af88  0800af88  000205b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800af88  0800af88  0001af88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af90  0800af90  000205b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af90  0800af90  0001af90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af94  0800af94  0001af94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005b4  20000000  0800af98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200005b4  0800b54c  000205b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000858  0800b54c  00020858  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205b4  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002a921  00000000  00000000  000205e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   000577f3  00000000  00000000  0004af05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00007c00  00000000  00000000  000a26f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001c20  00000000  00000000  000aa2f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00139841  00000000  00000000  000abf18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00004d88  00000000  00000000  001e5760  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    000225f2  00000000  00000000  001ea4e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00034234  00000000  00000000  0020cada  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00240d0e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000060d4  00000000  00000000  00240d8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200005b4 	.word	0x200005b4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800ab14 	.word	0x0800ab14

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200005b8 	.word	0x200005b8
 800021c:	0800ab14 	.word	0x0800ab14

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b972 	b.w	8000f94 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9e08      	ldr	r6, [sp, #32]
 8000cce:	4604      	mov	r4, r0
 8000cd0:	4688      	mov	r8, r1
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d14b      	bne.n	8000d6e <__udivmoddi4+0xa6>
 8000cd6:	428a      	cmp	r2, r1
 8000cd8:	4615      	mov	r5, r2
 8000cda:	d967      	bls.n	8000dac <__udivmoddi4+0xe4>
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0720 	rsb	r7, r2, #32
 8000ce6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cea:	fa20 f707 	lsr.w	r7, r0, r7
 8000cee:	4095      	lsls	r5, r2
 8000cf0:	ea47 0803 	orr.w	r8, r7, r3
 8000cf4:	4094      	lsls	r4, r2
 8000cf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cfa:	0c23      	lsrs	r3, r4, #16
 8000cfc:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d00:	fa1f fc85 	uxth.w	ip, r5
 8000d04:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d08:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d0c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d10:	4299      	cmp	r1, r3
 8000d12:	d909      	bls.n	8000d28 <__udivmoddi4+0x60>
 8000d14:	18eb      	adds	r3, r5, r3
 8000d16:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d1a:	f080 811b 	bcs.w	8000f54 <__udivmoddi4+0x28c>
 8000d1e:	4299      	cmp	r1, r3
 8000d20:	f240 8118 	bls.w	8000f54 <__udivmoddi4+0x28c>
 8000d24:	3f02      	subs	r7, #2
 8000d26:	442b      	add	r3, r5
 8000d28:	1a5b      	subs	r3, r3, r1
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d38:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d3c:	45a4      	cmp	ip, r4
 8000d3e:	d909      	bls.n	8000d54 <__udivmoddi4+0x8c>
 8000d40:	192c      	adds	r4, r5, r4
 8000d42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d46:	f080 8107 	bcs.w	8000f58 <__udivmoddi4+0x290>
 8000d4a:	45a4      	cmp	ip, r4
 8000d4c:	f240 8104 	bls.w	8000f58 <__udivmoddi4+0x290>
 8000d50:	3802      	subs	r0, #2
 8000d52:	442c      	add	r4, r5
 8000d54:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d58:	eba4 040c 	sub.w	r4, r4, ip
 8000d5c:	2700      	movs	r7, #0
 8000d5e:	b11e      	cbz	r6, 8000d68 <__udivmoddi4+0xa0>
 8000d60:	40d4      	lsrs	r4, r2
 8000d62:	2300      	movs	r3, #0
 8000d64:	e9c6 4300 	strd	r4, r3, [r6]
 8000d68:	4639      	mov	r1, r7
 8000d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d909      	bls.n	8000d86 <__udivmoddi4+0xbe>
 8000d72:	2e00      	cmp	r6, #0
 8000d74:	f000 80eb 	beq.w	8000f4e <__udivmoddi4+0x286>
 8000d78:	2700      	movs	r7, #0
 8000d7a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d7e:	4638      	mov	r0, r7
 8000d80:	4639      	mov	r1, r7
 8000d82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d86:	fab3 f783 	clz	r7, r3
 8000d8a:	2f00      	cmp	r7, #0
 8000d8c:	d147      	bne.n	8000e1e <__udivmoddi4+0x156>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d302      	bcc.n	8000d98 <__udivmoddi4+0xd0>
 8000d92:	4282      	cmp	r2, r0
 8000d94:	f200 80fa 	bhi.w	8000f8c <__udivmoddi4+0x2c4>
 8000d98:	1a84      	subs	r4, r0, r2
 8000d9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000d9e:	2001      	movs	r0, #1
 8000da0:	4698      	mov	r8, r3
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d0e0      	beq.n	8000d68 <__udivmoddi4+0xa0>
 8000da6:	e9c6 4800 	strd	r4, r8, [r6]
 8000daa:	e7dd      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000dac:	b902      	cbnz	r2, 8000db0 <__udivmoddi4+0xe8>
 8000dae:	deff      	udf	#255	; 0xff
 8000db0:	fab2 f282 	clz	r2, r2
 8000db4:	2a00      	cmp	r2, #0
 8000db6:	f040 808f 	bne.w	8000ed8 <__udivmoddi4+0x210>
 8000dba:	1b49      	subs	r1, r1, r5
 8000dbc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dc0:	fa1f f885 	uxth.w	r8, r5
 8000dc4:	2701      	movs	r7, #1
 8000dc6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dca:	0c23      	lsrs	r3, r4, #16
 8000dcc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000dd0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dd4:	fb08 f10c 	mul.w	r1, r8, ip
 8000dd8:	4299      	cmp	r1, r3
 8000dda:	d907      	bls.n	8000dec <__udivmoddi4+0x124>
 8000ddc:	18eb      	adds	r3, r5, r3
 8000dde:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000de2:	d202      	bcs.n	8000dea <__udivmoddi4+0x122>
 8000de4:	4299      	cmp	r1, r3
 8000de6:	f200 80cd 	bhi.w	8000f84 <__udivmoddi4+0x2bc>
 8000dea:	4684      	mov	ip, r0
 8000dec:	1a59      	subs	r1, r3, r1
 8000dee:	b2a3      	uxth	r3, r4
 8000df0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000df4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000df8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000dfc:	fb08 f800 	mul.w	r8, r8, r0
 8000e00:	45a0      	cmp	r8, r4
 8000e02:	d907      	bls.n	8000e14 <__udivmoddi4+0x14c>
 8000e04:	192c      	adds	r4, r5, r4
 8000e06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e0a:	d202      	bcs.n	8000e12 <__udivmoddi4+0x14a>
 8000e0c:	45a0      	cmp	r8, r4
 8000e0e:	f200 80b6 	bhi.w	8000f7e <__udivmoddi4+0x2b6>
 8000e12:	4618      	mov	r0, r3
 8000e14:	eba4 0408 	sub.w	r4, r4, r8
 8000e18:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e1c:	e79f      	b.n	8000d5e <__udivmoddi4+0x96>
 8000e1e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e22:	40bb      	lsls	r3, r7
 8000e24:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e28:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e2c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e30:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e34:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e38:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e3c:	4325      	orrs	r5, r4
 8000e3e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e42:	0c2c      	lsrs	r4, r5, #16
 8000e44:	fb08 3319 	mls	r3, r8, r9, r3
 8000e48:	fa1f fa8e 	uxth.w	sl, lr
 8000e4c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e50:	fb09 f40a 	mul.w	r4, r9, sl
 8000e54:	429c      	cmp	r4, r3
 8000e56:	fa02 f207 	lsl.w	r2, r2, r7
 8000e5a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e5e:	d90b      	bls.n	8000e78 <__udivmoddi4+0x1b0>
 8000e60:	eb1e 0303 	adds.w	r3, lr, r3
 8000e64:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e68:	f080 8087 	bcs.w	8000f7a <__udivmoddi4+0x2b2>
 8000e6c:	429c      	cmp	r4, r3
 8000e6e:	f240 8084 	bls.w	8000f7a <__udivmoddi4+0x2b2>
 8000e72:	f1a9 0902 	sub.w	r9, r9, #2
 8000e76:	4473      	add	r3, lr
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	b2ad      	uxth	r5, r5
 8000e7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e80:	fb08 3310 	mls	r3, r8, r0, r3
 8000e84:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e88:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e8c:	45a2      	cmp	sl, r4
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x1da>
 8000e90:	eb1e 0404 	adds.w	r4, lr, r4
 8000e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e98:	d26b      	bcs.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9a:	45a2      	cmp	sl, r4
 8000e9c:	d969      	bls.n	8000f72 <__udivmoddi4+0x2aa>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	4474      	add	r4, lr
 8000ea2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000ea6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eaa:	eba4 040a 	sub.w	r4, r4, sl
 8000eae:	454c      	cmp	r4, r9
 8000eb0:	46c2      	mov	sl, r8
 8000eb2:	464b      	mov	r3, r9
 8000eb4:	d354      	bcc.n	8000f60 <__udivmoddi4+0x298>
 8000eb6:	d051      	beq.n	8000f5c <__udivmoddi4+0x294>
 8000eb8:	2e00      	cmp	r6, #0
 8000eba:	d069      	beq.n	8000f90 <__udivmoddi4+0x2c8>
 8000ebc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ec0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ec4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	40fc      	lsrs	r4, r7
 8000ecc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ed0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ed4:	2700      	movs	r7, #0
 8000ed6:	e747      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000ed8:	f1c2 0320 	rsb	r3, r2, #32
 8000edc:	fa20 f703 	lsr.w	r7, r0, r3
 8000ee0:	4095      	lsls	r5, r2
 8000ee2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ee6:	fa21 f303 	lsr.w	r3, r1, r3
 8000eea:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000eee:	4338      	orrs	r0, r7
 8000ef0:	0c01      	lsrs	r1, r0, #16
 8000ef2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000ef6:	fa1f f885 	uxth.w	r8, r5
 8000efa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000efe:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f02:	fb07 f308 	mul.w	r3, r7, r8
 8000f06:	428b      	cmp	r3, r1
 8000f08:	fa04 f402 	lsl.w	r4, r4, r2
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x256>
 8000f0e:	1869      	adds	r1, r5, r1
 8000f10:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f14:	d22f      	bcs.n	8000f76 <__udivmoddi4+0x2ae>
 8000f16:	428b      	cmp	r3, r1
 8000f18:	d92d      	bls.n	8000f76 <__udivmoddi4+0x2ae>
 8000f1a:	3f02      	subs	r7, #2
 8000f1c:	4429      	add	r1, r5
 8000f1e:	1acb      	subs	r3, r1, r3
 8000f20:	b281      	uxth	r1, r0
 8000f22:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f26:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f2e:	fb00 f308 	mul.w	r3, r0, r8
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x27e>
 8000f36:	1869      	adds	r1, r5, r1
 8000f38:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f3c:	d217      	bcs.n	8000f6e <__udivmoddi4+0x2a6>
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d915      	bls.n	8000f6e <__udivmoddi4+0x2a6>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4429      	add	r1, r5
 8000f46:	1ac9      	subs	r1, r1, r3
 8000f48:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f4c:	e73b      	b.n	8000dc6 <__udivmoddi4+0xfe>
 8000f4e:	4637      	mov	r7, r6
 8000f50:	4630      	mov	r0, r6
 8000f52:	e709      	b.n	8000d68 <__udivmoddi4+0xa0>
 8000f54:	4607      	mov	r7, r0
 8000f56:	e6e7      	b.n	8000d28 <__udivmoddi4+0x60>
 8000f58:	4618      	mov	r0, r3
 8000f5a:	e6fb      	b.n	8000d54 <__udivmoddi4+0x8c>
 8000f5c:	4541      	cmp	r1, r8
 8000f5e:	d2ab      	bcs.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f60:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f64:	eb69 020e 	sbc.w	r2, r9, lr
 8000f68:	3801      	subs	r0, #1
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	e7a4      	b.n	8000eb8 <__udivmoddi4+0x1f0>
 8000f6e:	4660      	mov	r0, ip
 8000f70:	e7e9      	b.n	8000f46 <__udivmoddi4+0x27e>
 8000f72:	4618      	mov	r0, r3
 8000f74:	e795      	b.n	8000ea2 <__udivmoddi4+0x1da>
 8000f76:	4667      	mov	r7, ip
 8000f78:	e7d1      	b.n	8000f1e <__udivmoddi4+0x256>
 8000f7a:	4681      	mov	r9, r0
 8000f7c:	e77c      	b.n	8000e78 <__udivmoddi4+0x1b0>
 8000f7e:	3802      	subs	r0, #2
 8000f80:	442c      	add	r4, r5
 8000f82:	e747      	b.n	8000e14 <__udivmoddi4+0x14c>
 8000f84:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f88:	442b      	add	r3, r5
 8000f8a:	e72f      	b.n	8000dec <__udivmoddi4+0x124>
 8000f8c:	4638      	mov	r0, r7
 8000f8e:	e708      	b.n	8000da2 <__udivmoddi4+0xda>
 8000f90:	4637      	mov	r7, r6
 8000f92:	e6e9      	b.n	8000d68 <__udivmoddi4+0xa0>

08000f94 <__aeabi_idiv0>:
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f9a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f9c:	f002 fd20 	bl	80039e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fa0:	480c      	ldr	r0, [pc, #48]	; (8000fd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fa2:	490d      	ldr	r1, [pc, #52]	; (8000fd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fa4:	4a0d      	ldr	r2, [pc, #52]	; (8000fdc <LoopForever+0xe>)
  movs r3, #0
 8000fa6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000fa8:	e002      	b.n	8000fb0 <LoopCopyDataInit>

08000faa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000faa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fae:	3304      	adds	r3, #4

08000fb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fb4:	d3f9      	bcc.n	8000faa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fb6:	4a0a      	ldr	r2, [pc, #40]	; (8000fe0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fb8:	4c0a      	ldr	r4, [pc, #40]	; (8000fe4 <LoopForever+0x16>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fbc:	e001      	b.n	8000fc2 <LoopFillZerobss>

08000fbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fc0:	3204      	adds	r2, #4

08000fc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fc4:	d3fb      	bcc.n	8000fbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000fc6:	f007 fd39 	bl	8008a3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000fca:	f000 fce9 	bl	80019a0 <main>

08000fce <LoopForever>:

LoopForever:
    b LoopForever
 8000fce:	e7fe      	b.n	8000fce <LoopForever>
  ldr   r0, =_estack
 8000fd0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000fd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fd8:	200005b4 	.word	0x200005b4
  ldr r2, =_sidata
 8000fdc:	0800af98 	.word	0x0800af98
  ldr r2, =_sbss
 8000fe0:	200005b4 	.word	0x200005b4
  ldr r4, =_ebss
 8000fe4:	20000858 	.word	0x20000858

08000fe8 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000fe8:	e7fe      	b.n	8000fe8 <ADC3_IRQHandler>
	...

08000fec <CmdProc_Direction>:
		return;
	}
}

void CmdProc_Direction(uint8_t *CmdBuf, uint32_t CmdLen, uint8_t *RspBuf, uint32_t *RspLen)
{
 8000fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t *pCmdBuf = &CMDBYTE_DATA0;
	uint8_t argGS = GetArgUINT8(pCmdBuf);
 8000fee:	78c4      	ldrb	r4, [r0, #3]

	uint8_t dir = 0;

	if(argGS == CMD_GET)
 8000ff0:	2c01      	cmp	r4, #1
{
 8000ff2:	4605      	mov	r5, r0
 8000ff4:	4616      	mov	r6, r2
 8000ff6:	461f      	mov	r7, r3
	if(argGS == CMD_GET)
 8000ff8:	d015      	beq.n	8001026 <CmdProc_Direction+0x3a>

		RESP(CMDBYTE_FUNCCODE, (uint8_t*)&dir, sizeof(dir), RspBuf, RspLen);
		return;
	}

	if(argGS == CMD_SET)
 8000ffa:	2c02      	cmp	r4, #2
 8000ffc:	d000      	beq.n	8001000 <CmdProc_Direction+0x14>
			NACK(CMDBYTE_FUNCCODE, CMD_RET_WRONGARGS, RspBuf, RspLen);
		else
			ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
		return;
	}
}
 8000ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(!Motor_SetDirection(dir))
 8001000:	7900      	ldrb	r0, [r0, #4]
 8001002:	3000      	adds	r0, #0
 8001004:	bf18      	it	ne
 8001006:	2001      	movne	r0, #1
 8001008:	f000 fafe 	bl	8001608 <Motor_SetDirection>
			NACK(CMDBYTE_FUNCCODE, CMD_RET_WRONGARGS, RspBuf, RspLen);
 800100c:	786b      	ldrb	r3, [r5, #1]
    RspBuf[1] = FuncCode;
 800100e:	7073      	strb	r3, [r6, #1]
		if(!Motor_SetDirection(dir))
 8001010:	b998      	cbnz	r0, 800103a <CmdProc_Direction+0x4e>
    RspBuf[0] = GetAddr();
 8001012:	2001      	movs	r0, #1
    RspBuf[3] = CMD_EXC_CMDS;
 8001014:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 8001016:	2203      	movs	r2, #3
    RspBuf[2] = 0x02;
 8001018:	70b4      	strb	r4, [r6, #2]
    *RspLen = 5;
 800101a:	2305      	movs	r3, #5
    RspBuf[0] = GetAddr();
 800101c:	7030      	strb	r0, [r6, #0]
    RspBuf[3] = CMD_EXC_CMDS;
 800101e:	70f1      	strb	r1, [r6, #3]
    RspBuf[4] = Exception;
 8001020:	7132      	strb	r2, [r6, #4]
    *RspLen = 5;
 8001022:	603b      	str	r3, [r7, #0]
}
 8001024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dir = Motor_GetDirection();
 8001026:	f000 faf5 	bl	8001614 <Motor_GetDirection>
		RESP(CMDBYTE_FUNCCODE, (uint8_t*)&dir, sizeof(dir), RspBuf, RspLen);
 800102a:	786b      	ldrb	r3, [r5, #1]
    RspBuf[1] = FuncCode;
 800102c:	7073      	strb	r3, [r6, #1]
        RspBuf[3 + i] = *pData++;
 800102e:	70f0      	strb	r0, [r6, #3]
    *RspLen = (3 + DataLen);
 8001030:	2304      	movs	r3, #4
    RspBuf[0] = GetAddr();
 8001032:	7034      	strb	r4, [r6, #0]
    RspBuf[2] = DataLen;
 8001034:	70b4      	strb	r4, [r6, #2]
    *RspLen = (3 + DataLen);
 8001036:	603b      	str	r3, [r7, #0]
}
 8001038:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    RspBuf[0] = GetAddr();
 800103a:	2301      	movs	r3, #1
    RspBuf[3] = 0x00;
 800103c:	2100      	movs	r1, #0
    *RspLen = 4;
 800103e:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 8001040:	7033      	strb	r3, [r6, #0]
    RspBuf[2] = 0x01;
 8001042:	70b3      	strb	r3, [r6, #2]
    RspBuf[3] = 0x00;
 8001044:	70f1      	strb	r1, [r6, #3]
    *RspLen = 4;
 8001046:	603a      	str	r2, [r7, #0]
}
 8001048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800104a:	bf00      	nop

0800104c <CmdProc_SetZero>:
	else
		NACK(CMDBYTE_FUNCCODE, CMD_RET_GENERROR, RspBuf, RspLen);
}

void CmdProc_SetZero(uint8_t *CmdBuf, uint32_t CmdLen, uint8_t *RspBuf, uint32_t *RspLen)
{
 800104c:	b570      	push	{r4, r5, r6, lr}
 800104e:	4606      	mov	r6, r0
 8001050:	4614      	mov	r4, r2
 8001052:	461d      	mov	r5, r3
	if(Motor_SetZero())
 8001054:	f000 fba8 	bl	80017a8 <Motor_SetZero>
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
 8001058:	7873      	ldrb	r3, [r6, #1]
    RspBuf[1] = FuncCode;
 800105a:	7063      	strb	r3, [r4, #1]
    RspBuf[0] = GetAddr();
 800105c:	2301      	movs	r3, #1
	if(Motor_SetZero())
 800105e:	b948      	cbnz	r0, 8001074 <CmdProc_SetZero+0x28>
    RspBuf[2] = 0x02;
 8001060:	2002      	movs	r0, #2
    RspBuf[3] = CMD_EXC_CMDS;
 8001062:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 8001064:	2206      	movs	r2, #6
    RspBuf[0] = GetAddr();
 8001066:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x02;
 8001068:	70a0      	strb	r0, [r4, #2]
    *RspLen = 5;
 800106a:	2305      	movs	r3, #5
    RspBuf[3] = CMD_EXC_CMDS;
 800106c:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 800106e:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 8001070:	602b      	str	r3, [r5, #0]
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
	else
		NACK(CMDBYTE_FUNCCODE, CMD_RET_GENERROR, RspBuf, RspLen);
}
 8001072:	bd70      	pop	{r4, r5, r6, pc}
    RspBuf[3] = 0x00;
 8001074:	2100      	movs	r1, #0
    *RspLen = 4;
 8001076:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 8001078:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 800107a:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 800107c:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 800107e:	602a      	str	r2, [r5, #0]
}
 8001080:	bd70      	pop	{r4, r5, r6, pc}
 8001082:	bf00      	nop

08001084 <CmdProc_Speed>:
{
 8001084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t argGS = GetArgUINT8(pCmdBuf);
 8001086:	78c5      	ldrb	r5, [r0, #3]
	if(argGS == CMD_GET)
 8001088:	2d01      	cmp	r5, #1
{
 800108a:	4606      	mov	r6, r0
 800108c:	4614      	mov	r4, r2
 800108e:	461f      	mov	r7, r3
	if(argGS == CMD_GET)
 8001090:	d002      	beq.n	8001098 <CmdProc_Speed+0x14>
	if(argGS == CMD_SET)
 8001092:	2d02      	cmp	r5, #2
 8001094:	d016      	beq.n	80010c4 <CmdProc_Speed+0x40>
}
 8001096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		speed = Motor_GetSpeed();
 8001098:	f000 fab0 	bl	80015fc <Motor_GetSpeed>
    memcpy((void*)Buf, (void*)&Val, sizeof(float32_t));
 800109c:	ee10 3a10 	vmov	r3, s0
		RESP(CMDBYTE_FUNCCODE, (uint8_t*)data, sizeof(data), RspBuf, RspLen);
 80010a0:	7872      	ldrb	r2, [r6, #1]
    RspBuf[1] = FuncCode;
 80010a2:	7062      	strb	r2, [r4, #1]
        RspBuf[3 + i] = *pData++;
 80010a4:	f3c3 2607 	ubfx	r6, r3, #8, #8
 80010a8:	f3c3 4007 	ubfx	r0, r3, #16, #8
 80010ac:	f3c3 6107 	ubfx	r1, r3, #24, #8
    RspBuf[2] = DataLen;
 80010b0:	2204      	movs	r2, #4
        RspBuf[3 + i] = *pData++;
 80010b2:	70e3      	strb	r3, [r4, #3]
    RspBuf[0] = GetAddr();
 80010b4:	7025      	strb	r5, [r4, #0]
        RspBuf[3 + i] = *pData++;
 80010b6:	7126      	strb	r6, [r4, #4]
    *RspLen = (3 + DataLen);
 80010b8:	2307      	movs	r3, #7
        RspBuf[3 + i] = *pData++;
 80010ba:	7160      	strb	r0, [r4, #5]
 80010bc:	71a1      	strb	r1, [r4, #6]
    RspBuf[2] = DataLen;
 80010be:	70a2      	strb	r2, [r4, #2]
    *RspLen = (3 + DataLen);
 80010c0:	603b      	str	r3, [r7, #0]
}
 80010c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(!Motor_SetSpeed(speed))
 80010c4:	6843      	ldr	r3, [r0, #4]
 80010c6:	ee00 3a10 	vmov	s0, r3
 80010ca:	f000 fa8f 	bl	80015ec <Motor_SetSpeed>
			NACK(CMDBYTE_FUNCCODE, CMD_RET_WRONGARGS, RspBuf, RspLen);
 80010ce:	7873      	ldrb	r3, [r6, #1]
    RspBuf[1] = FuncCode;
 80010d0:	7063      	strb	r3, [r4, #1]
		if(!Motor_SetSpeed(speed))
 80010d2:	b138      	cbz	r0, 80010e4 <CmdProc_Speed+0x60>
    RspBuf[0] = GetAddr();
 80010d4:	2301      	movs	r3, #1
    RspBuf[3] = 0x00;
 80010d6:	2100      	movs	r1, #0
    *RspLen = 4;
 80010d8:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 80010da:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 80010dc:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 80010de:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 80010e0:	603a      	str	r2, [r7, #0]
}
 80010e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    RspBuf[0] = GetAddr();
 80010e4:	2001      	movs	r0, #1
    RspBuf[3] = CMD_EXC_CMDS;
 80010e6:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 80010e8:	2203      	movs	r2, #3
    RspBuf[2] = 0x02;
 80010ea:	70a5      	strb	r5, [r4, #2]
    *RspLen = 5;
 80010ec:	2305      	movs	r3, #5
    RspBuf[0] = GetAddr();
 80010ee:	7020      	strb	r0, [r4, #0]
    RspBuf[3] = CMD_EXC_CMDS;
 80010f0:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 80010f2:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 80010f4:	603b      	str	r3, [r7, #0]
}
 80010f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080010f8 <CmdProc_RTZ>:

void CmdProc_RTZ(uint8_t *CmdBuf, uint32_t CmdLen, uint8_t *RspBuf, uint32_t *RspLen)
{
 80010f8:	b570      	push	{r4, r5, r6, lr}
 80010fa:	4606      	mov	r6, r0
 80010fc:	4614      	mov	r4, r2
 80010fe:	461d      	mov	r5, r3
	if(Motor_RTZ())
 8001100:	f000 fb5a 	bl	80017b8 <Motor_RTZ>
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
 8001104:	7873      	ldrb	r3, [r6, #1]
    RspBuf[1] = FuncCode;
 8001106:	7063      	strb	r3, [r4, #1]
    RspBuf[0] = GetAddr();
 8001108:	2301      	movs	r3, #1
	if(Motor_RTZ())
 800110a:	b948      	cbnz	r0, 8001120 <CmdProc_RTZ+0x28>
    RspBuf[2] = 0x02;
 800110c:	2002      	movs	r0, #2
    RspBuf[3] = CMD_EXC_CMDS;
 800110e:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 8001110:	2206      	movs	r2, #6
    RspBuf[0] = GetAddr();
 8001112:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x02;
 8001114:	70a0      	strb	r0, [r4, #2]
    *RspLen = 5;
 8001116:	2305      	movs	r3, #5
    RspBuf[3] = CMD_EXC_CMDS;
 8001118:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 800111a:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 800111c:	602b      	str	r3, [r5, #0]
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
	else
		NACK(CMDBYTE_FUNCCODE, CMD_RET_GENERROR, RspBuf, RspLen);
}
 800111e:	bd70      	pop	{r4, r5, r6, pc}
    RspBuf[3] = 0x00;
 8001120:	2100      	movs	r1, #0
    *RspLen = 4;
 8001122:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 8001124:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 8001126:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 8001128:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 800112a:	602a      	str	r2, [r5, #0]
}
 800112c:	bd70      	pop	{r4, r5, r6, pc}
 800112e:	bf00      	nop

08001130 <CmdProc_Init>:
{
 8001130:	b570      	push	{r4, r5, r6, lr}
 8001132:	4606      	mov	r6, r0
 8001134:	4614      	mov	r4, r2
 8001136:	461d      	mov	r5, r3
	if(Motor_Init())
 8001138:	f000 fa38 	bl	80015ac <Motor_Init>
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
 800113c:	7873      	ldrb	r3, [r6, #1]
    RspBuf[1] = FuncCode;
 800113e:	7063      	strb	r3, [r4, #1]
    RspBuf[0] = GetAddr();
 8001140:	2301      	movs	r3, #1
	if(Motor_Init())
 8001142:	b948      	cbnz	r0, 8001158 <CmdProc_Init+0x28>
    RspBuf[2] = 0x02;
 8001144:	2002      	movs	r0, #2
    RspBuf[3] = CMD_EXC_CMDS;
 8001146:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 8001148:	2206      	movs	r2, #6
    RspBuf[0] = GetAddr();
 800114a:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x02;
 800114c:	70a0      	strb	r0, [r4, #2]
    *RspLen = 5;
 800114e:	2305      	movs	r3, #5
    RspBuf[3] = CMD_EXC_CMDS;
 8001150:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 8001152:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 8001154:	602b      	str	r3, [r5, #0]
}
 8001156:	bd70      	pop	{r4, r5, r6, pc}
    RspBuf[3] = 0x00;
 8001158:	2100      	movs	r1, #0
    *RspLen = 4;
 800115a:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 800115c:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 800115e:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 8001160:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 8001162:	602a      	str	r2, [r5, #0]
}
 8001164:	bd70      	pop	{r4, r5, r6, pc}
 8001166:	bf00      	nop

08001168 <CmdProc_ResetParams>:
{
 8001168:	b570      	push	{r4, r5, r6, lr}
 800116a:	4606      	mov	r6, r0
 800116c:	4614      	mov	r4, r2
 800116e:	461d      	mov	r5, r3
	if(Motor_ResetParams())
 8001170:	f000 fa64 	bl	800163c <Motor_ResetParams>
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
 8001174:	7873      	ldrb	r3, [r6, #1]
    RspBuf[1] = FuncCode;
 8001176:	7063      	strb	r3, [r4, #1]
    RspBuf[0] = GetAddr();
 8001178:	2301      	movs	r3, #1
	if(Motor_ResetParams())
 800117a:	b948      	cbnz	r0, 8001190 <CmdProc_ResetParams+0x28>
    RspBuf[2] = 0x02;
 800117c:	2002      	movs	r0, #2
    RspBuf[3] = CMD_EXC_CMDS;
 800117e:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 8001180:	2206      	movs	r2, #6
    RspBuf[0] = GetAddr();
 8001182:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x02;
 8001184:	70a0      	strb	r0, [r4, #2]
    *RspLen = 5;
 8001186:	2305      	movs	r3, #5
    RspBuf[3] = CMD_EXC_CMDS;
 8001188:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 800118a:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 800118c:	602b      	str	r3, [r5, #0]
}
 800118e:	bd70      	pop	{r4, r5, r6, pc}
    RspBuf[3] = 0x00;
 8001190:	2100      	movs	r1, #0
    *RspLen = 4;
 8001192:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 8001194:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 8001196:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 8001198:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 800119a:	602a      	str	r2, [r5, #0]
}
 800119c:	bd70      	pop	{r4, r5, r6, pc}
 800119e:	bf00      	nop

080011a0 <CmdProc_Start>:
{
 80011a0:	b570      	push	{r4, r5, r6, lr}
 80011a2:	4606      	mov	r6, r0
 80011a4:	4614      	mov	r4, r2
 80011a6:	461d      	mov	r5, r3
	if(Motor_Start())
 80011a8:	f000 fa5c 	bl	8001664 <Motor_Start>
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
 80011ac:	7873      	ldrb	r3, [r6, #1]
    RspBuf[1] = FuncCode;
 80011ae:	7063      	strb	r3, [r4, #1]
    RspBuf[0] = GetAddr();
 80011b0:	2301      	movs	r3, #1
	if(Motor_Start())
 80011b2:	b948      	cbnz	r0, 80011c8 <CmdProc_Start+0x28>
    RspBuf[2] = 0x02;
 80011b4:	2002      	movs	r0, #2
    RspBuf[3] = CMD_EXC_CMDS;
 80011b6:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 80011b8:	2206      	movs	r2, #6
    RspBuf[0] = GetAddr();
 80011ba:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x02;
 80011bc:	70a0      	strb	r0, [r4, #2]
    *RspLen = 5;
 80011be:	2305      	movs	r3, #5
    RspBuf[3] = CMD_EXC_CMDS;
 80011c0:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 80011c2:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 80011c4:	602b      	str	r3, [r5, #0]
}
 80011c6:	bd70      	pop	{r4, r5, r6, pc}
    RspBuf[3] = 0x00;
 80011c8:	2100      	movs	r1, #0
    *RspLen = 4;
 80011ca:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 80011cc:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 80011ce:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 80011d0:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 80011d2:	602a      	str	r2, [r5, #0]
}
 80011d4:	bd70      	pop	{r4, r5, r6, pc}
 80011d6:	bf00      	nop

080011d8 <CmdProc_Stop>:
{
 80011d8:	b570      	push	{r4, r5, r6, lr}
 80011da:	4605      	mov	r5, r0
	if(Motor_Stop(ready))
 80011dc:	78c0      	ldrb	r0, [r0, #3]
 80011de:	3000      	adds	r0, #0
 80011e0:	bf18      	it	ne
 80011e2:	2001      	movne	r0, #1
{
 80011e4:	4614      	mov	r4, r2
 80011e6:	461e      	mov	r6, r3
	if(Motor_Stop(ready))
 80011e8:	f000 fa4a 	bl	8001680 <Motor_Stop>
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
 80011ec:	786b      	ldrb	r3, [r5, #1]
    RspBuf[1] = FuncCode;
 80011ee:	7063      	strb	r3, [r4, #1]
    RspBuf[0] = GetAddr();
 80011f0:	2301      	movs	r3, #1
	if(Motor_Stop(ready))
 80011f2:	b948      	cbnz	r0, 8001208 <CmdProc_Stop+0x30>
    RspBuf[2] = 0x02;
 80011f4:	2002      	movs	r0, #2
    RspBuf[3] = CMD_EXC_CMDS;
 80011f6:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 80011f8:	2206      	movs	r2, #6
    RspBuf[0] = GetAddr();
 80011fa:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x02;
 80011fc:	70a0      	strb	r0, [r4, #2]
    *RspLen = 5;
 80011fe:	2305      	movs	r3, #5
    RspBuf[3] = CMD_EXC_CMDS;
 8001200:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 8001202:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 8001204:	6033      	str	r3, [r6, #0]
}
 8001206:	bd70      	pop	{r4, r5, r6, pc}
    RspBuf[3] = 0x00;
 8001208:	2100      	movs	r1, #0
    *RspLen = 4;
 800120a:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 800120c:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 800120e:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 8001210:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 8001212:	6032      	str	r2, [r6, #0]
}
 8001214:	bd70      	pop	{r4, r5, r6, pc}
 8001216:	bf00      	nop

08001218 <CmdProc_Run>:
{
 8001218:	b570      	push	{r4, r5, r6, lr}
 800121a:	4606      	mov	r6, r0
	if(Motor_Run(true))
 800121c:	2001      	movs	r0, #1
{
 800121e:	4614      	mov	r4, r2
 8001220:	461d      	mov	r5, r3
	if(Motor_Run(true))
 8001222:	f000 fa45 	bl	80016b0 <Motor_Run>
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
 8001226:	7873      	ldrb	r3, [r6, #1]
    RspBuf[1] = FuncCode;
 8001228:	7063      	strb	r3, [r4, #1]
    RspBuf[0] = GetAddr();
 800122a:	2301      	movs	r3, #1
	if(Motor_Run(true))
 800122c:	b948      	cbnz	r0, 8001242 <CmdProc_Run+0x2a>
    RspBuf[2] = 0x02;
 800122e:	2002      	movs	r0, #2
    RspBuf[3] = CMD_EXC_CMDS;
 8001230:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 8001232:	2206      	movs	r2, #6
    RspBuf[0] = GetAddr();
 8001234:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x02;
 8001236:	70a0      	strb	r0, [r4, #2]
    *RspLen = 5;
 8001238:	2305      	movs	r3, #5
    RspBuf[3] = CMD_EXC_CMDS;
 800123a:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 800123c:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 800123e:	602b      	str	r3, [r5, #0]
}
 8001240:	bd70      	pop	{r4, r5, r6, pc}
    RspBuf[3] = 0x00;
 8001242:	2100      	movs	r1, #0
    *RspLen = 4;
 8001244:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 8001246:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 8001248:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 800124a:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 800124c:	602a      	str	r2, [r5, #0]
}
 800124e:	bd70      	pop	{r4, r5, r6, pc}

08001250 <CmdProc_Distance>:
{
 8001250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t argGS = GetArgUINT8(pCmdBuf);
 8001252:	78c5      	ldrb	r5, [r0, #3]
	if(argGS == CMD_GET)
 8001254:	2d01      	cmp	r5, #1
{
 8001256:	4606      	mov	r6, r0
 8001258:	4614      	mov	r4, r2
 800125a:	461f      	mov	r7, r3
	if(argGS == CMD_GET)
 800125c:	d002      	beq.n	8001264 <CmdProc_Distance+0x14>
	if(argGS == CMD_SET)
 800125e:	2d02      	cmp	r5, #2
 8001260:	d016      	beq.n	8001290 <CmdProc_Distance+0x40>
}
 8001262:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		distance = Motor_GetDistance();
 8001264:	f000 f9bc 	bl	80015e0 <Motor_GetDistance>
    memcpy((void*)Buf, (void*)&Val, sizeof(float32_t));
 8001268:	ee10 3a10 	vmov	r3, s0
		RESP(CMDBYTE_FUNCCODE, (uint8_t*)data, sizeof(data), RspBuf, RspLen);
 800126c:	7872      	ldrb	r2, [r6, #1]
    RspBuf[1] = FuncCode;
 800126e:	7062      	strb	r2, [r4, #1]
        RspBuf[3 + i] = *pData++;
 8001270:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8001274:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8001278:	f3c3 6107 	ubfx	r1, r3, #24, #8
    RspBuf[2] = DataLen;
 800127c:	2204      	movs	r2, #4
        RspBuf[3 + i] = *pData++;
 800127e:	70e3      	strb	r3, [r4, #3]
    RspBuf[0] = GetAddr();
 8001280:	7025      	strb	r5, [r4, #0]
        RspBuf[3 + i] = *pData++;
 8001282:	7126      	strb	r6, [r4, #4]
    *RspLen = (3 + DataLen);
 8001284:	2307      	movs	r3, #7
        RspBuf[3 + i] = *pData++;
 8001286:	7160      	strb	r0, [r4, #5]
 8001288:	71a1      	strb	r1, [r4, #6]
    RspBuf[2] = DataLen;
 800128a:	70a2      	strb	r2, [r4, #2]
    *RspLen = (3 + DataLen);
 800128c:	603b      	str	r3, [r7, #0]
}
 800128e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(!Motor_SetDistance(distance))
 8001290:	6843      	ldr	r3, [r0, #4]
 8001292:	ee00 3a10 	vmov	s0, r3
 8001296:	f000 f99b 	bl	80015d0 <Motor_SetDistance>
			NACK(CMDBYTE_FUNCCODE, CMD_RET_WRONGARGS, RspBuf, RspLen);
 800129a:	7873      	ldrb	r3, [r6, #1]
    RspBuf[1] = FuncCode;
 800129c:	7063      	strb	r3, [r4, #1]
		if(!Motor_SetDistance(distance))
 800129e:	b138      	cbz	r0, 80012b0 <CmdProc_Distance+0x60>
    RspBuf[0] = GetAddr();
 80012a0:	2301      	movs	r3, #1
    RspBuf[3] = 0x00;
 80012a2:	2100      	movs	r1, #0
    *RspLen = 4;
 80012a4:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 80012a6:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 80012a8:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 80012aa:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 80012ac:	603a      	str	r2, [r7, #0]
}
 80012ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    RspBuf[0] = GetAddr();
 80012b0:	2001      	movs	r0, #1
    RspBuf[3] = CMD_EXC_CMDS;
 80012b2:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 80012b4:	2203      	movs	r2, #3
    RspBuf[2] = 0x02;
 80012b6:	70a5      	strb	r5, [r4, #2]
    *RspLen = 5;
 80012b8:	2305      	movs	r3, #5
    RspBuf[0] = GetAddr();
 80012ba:	7020      	strb	r0, [r4, #0]
    RspBuf[3] = CMD_EXC_CMDS;
 80012bc:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 80012be:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 80012c0:	603b      	str	r3, [r7, #0]
}
 80012c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080012c4 <Cmd_Process>:
		{ 	CMD_SETZERO		, 		CmdProc_SetZero		},
		{ 	CMD_RTZ			, 		CmdProc_RTZ 		},
};

StdReturn_t Cmd_Process(uint8_t *CmdBuf, uint8_t *RspBuf, uint32_t *RspLen)
{
 80012c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(0 == checkCRC(CmdBuf, CMDBYTE_DATALEN))
 80012c8:	f890 c002 	ldrb.w	ip, [r0, #2]
    dividend = Buf[0];
 80012cc:	f890 e000 	ldrb.w	lr, [r0]
    size = 4 + len;
 80012d0:	f10c 0604 	add.w	r6, ip, #4
 80012d4:	b2f6      	uxtb	r6, r6
    for(uint8_t i = 1; i < size; i++)
 80012d6:	2e01      	cmp	r6, #1
 80012d8:	f240 80ab 	bls.w	8001432 <Cmd_Process+0x16e>
 80012dc:	1c43      	adds	r3, r0, #1
 80012de:	f10c 0702 	add.w	r7, ip, #2
 80012e2:	fa53 f787 	uxtab	r7, r3, r7
 80012e6:	3e01      	subs	r6, #1
 80012e8:	4605      	mov	r5, r0
    dividend = Buf[0];
 80012ea:	4673      	mov	r3, lr
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80012ec:	f013 0f80 	tst.w	r3, #128	; 0x80
        nextDiv = Buf[i];
 80012f0:	f815 4f01 	ldrb.w	r4, [r5, #1]!
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80012f4:	bf18      	it	ne
 80012f6:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            dividend <<= 1;
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 80012fe:	f014 0f80 	tst.w	r4, #128	; 0x80
                dividend |= 0x01;
 8001302:	bf18      	it	ne
 8001304:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001308:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 800130c:	ea4f 0844 	mov.w	r8, r4, lsl #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001310:	bf18      	it	ne
 8001312:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 8001316:	fa5f f888 	uxtb.w	r8, r8
            dividend <<= 1;
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 800131e:	f018 0f80 	tst.w	r8, #128	; 0x80
                dividend |= 0x01;
 8001322:	bf18      	it	ne
 8001324:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001328:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 800132c:	ea4f 0884 	mov.w	r8, r4, lsl #2
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001330:	bf18      	it	ne
 8001332:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 8001336:	fa5f f888 	uxtb.w	r8, r8
            dividend <<= 1;
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 800133e:	f018 0f80 	tst.w	r8, #128	; 0x80
                dividend |= 0x01;
 8001342:	bf18      	it	ne
 8001344:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001348:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 800134c:	ea4f 08c4 	mov.w	r8, r4, lsl #3
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001350:	bf18      	it	ne
 8001352:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 8001356:	fa5f f888 	uxtb.w	r8, r8
            dividend <<= 1;
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 800135e:	f018 0f80 	tst.w	r8, #128	; 0x80
                dividend |= 0x01;
 8001362:	bf18      	it	ne
 8001364:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001368:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 800136c:	ea4f 1804 	mov.w	r8, r4, lsl #4
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001370:	bf18      	it	ne
 8001372:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 8001376:	fa5f f888 	uxtb.w	r8, r8
            dividend <<= 1;
 800137a:	005b      	lsls	r3, r3, #1
 800137c:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 800137e:	f018 0f80 	tst.w	r8, #128	; 0x80
                dividend |= 0x01;
 8001382:	bf18      	it	ne
 8001384:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001388:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 800138c:	ea4f 1844 	mov.w	r8, r4, lsl #5
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001390:	bf18      	it	ne
 8001392:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 8001396:	fa5f f888 	uxtb.w	r8, r8
            dividend <<= 1;
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 800139e:	f018 0f80 	tst.w	r8, #128	; 0x80
                dividend |= 0x01;
 80013a2:	bf18      	it	ne
 80013a4:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80013a8:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 80013ac:	ea4f 1884 	mov.w	r8, r4, lsl #6
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80013b0:	bf18      	it	ne
 80013b2:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 80013b6:	fa5f f888 	uxtb.w	r8, r8
            dividend <<= 1;
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 80013be:	f018 0f80 	tst.w	r8, #128	; 0x80
                dividend |= 0x01;
 80013c2:	bf18      	it	ne
 80013c4:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80013c8:	f013 0f80 	tst.w	r3, #128	; 0x80
            if((i == size - 1) && (j == 7))
 80013cc:	eba5 0800 	sub.w	r8, r5, r0
            nextDiv <<= 1;
 80013d0:	ea4f 14c4 	mov.w	r4, r4, lsl #7
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80013d4:	bf18      	it	ne
 80013d6:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            if((i == size - 1) && (j == 7))
 80013da:	45b0      	cmp	r8, r6
            nextDiv <<= 1;
 80013dc:	b2e4      	uxtb	r4, r4
            if((i == size - 1) && (j == 7))
 80013de:	d004      	beq.n	80013ea <Cmd_Process+0x126>
            dividend <<= 1;
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 80013e4:	b10c      	cbz	r4, 80013ea <Cmd_Process+0x126>
                dividend |= 0x01;
 80013e6:	f043 0301 	orr.w	r3, r3, #1
    for(uint8_t i = 1; i < size; i++)
 80013ea:	42bd      	cmp	r5, r7
 80013ec:	f47f af7e 	bne.w	80012ec <Cmd_Process+0x28>
    return dividend << 1;
 80013f0:	005b      	lsls	r3, r3, #1
	if(0 == checkCRC(CmdBuf, CMDBYTE_DATALEN))
 80013f2:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80013f6:	d119      	bne.n	800142c <Cmd_Process+0x168>
	if(DEVADDR == devAddr)
 80013f8:	f1be 0f01 	cmp.w	lr, #1
 80013fc:	d113      	bne.n	8001426 <Cmd_Process+0x162>
	{
		if(RET_OK == Check_DevAddr(CMDBYTE_DEVADDR))
		{
			if(CMDBYTE_FUNCCODE == CmdTable[CMDBYTE_FUNCCODE].FuncCode)
 80013fe:	7845      	ldrb	r5, [r0, #1]
 8001400:	4b5e      	ldr	r3, [pc, #376]	; (800157c <Cmd_Process+0x2b8>)
 8001402:	f813 7035 	ldrb.w	r7, [r3, r5, lsl #3]
 8001406:	42af      	cmp	r7, r5
 8001408:	f040 80b5 	bne.w	8001576 <Cmd_Process+0x2b2>
				CmdTable[CMDBYTE_FUNCCODE].FuncHandler(CmdBuf, CMDBYTE_DATALEN, RspBuf, RspLen);
 800140c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8001410:	4615      	mov	r5, r2
 8001412:	460e      	mov	r6, r1
 8001414:	685f      	ldr	r7, [r3, #4]
 8001416:	4661      	mov	r1, ip
 8001418:	4613      	mov	r3, r2
 800141a:	4632      	mov	r2, r6
 800141c:	47b8      	blx	r7
			else
				return RET_NO_IMPL;

			if (*RspLen != 0)
 800141e:	6828      	ldr	r0, [r5, #0]
 8001420:	b948      	cbnz	r0, 8001436 <Cmd_Process+0x172>
	}
	else
		return RET_CRC_NOK;

	return RET_OK;
}
 8001422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return RET_DEVADDR_NOK;
 8001426:	200c      	movs	r0, #12
}
 8001428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return RET_CRC_NOK;
 800142c:	200a      	movs	r0, #10
}
 800142e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dividend = Buf[0];
 8001432:	4673      	mov	r3, lr
 8001434:	e7dc      	b.n	80013f0 <Cmd_Process+0x12c>
				RspBuf[*RspLen] = 0x00;								// Appending zeros for CRC calculation.
 8001436:	5434      	strb	r4, [r6, r0]
				RspBuf[*RspLen] = GetCRC(RspBuf, (*RspLen)-3);		// Send only the no. of data bytes for CRC calculation.
 8001438:	682f      	ldr	r7, [r5, #0]
    dividend = Buf[0];
 800143a:	7833      	ldrb	r3, [r6, #0]
				RspBuf[*RspLen] = GetCRC(RspBuf, (*RspLen)-3);		// Send only the no. of data bytes for CRC calculation.
 800143c:	b2fa      	uxtb	r2, r7
    size = 4 + len;
 800143e:	1c54      	adds	r4, r2, #1
 8001440:	b2e4      	uxtb	r4, r4
    for(uint8_t i = 1; i < size; i++)
 8001442:	2c01      	cmp	r4, #1
 8001444:	f240 8088 	bls.w	8001558 <Cmd_Process+0x294>
 8001448:	3a01      	subs	r2, #1
 800144a:	1c70      	adds	r0, r6, #1
 800144c:	3c01      	subs	r4, #1
 800144e:	fa50 f082 	uxtab	r0, r0, r2
 8001452:	4631      	mov	r1, r6
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001454:	f013 0f80 	tst.w	r3, #128	; 0x80
        nextDiv = Buf[i];
 8001458:	f811 2f01 	ldrb.w	r2, [r1, #1]!
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 800145c:	bf18      	it	ne
 800145e:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            dividend <<= 1;
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 8001466:	f012 0f80 	tst.w	r2, #128	; 0x80
                dividend |= 0x01;
 800146a:	bf18      	it	ne
 800146c:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001470:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 8001474:	ea4f 0c42 	mov.w	ip, r2, lsl #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001478:	bf18      	it	ne
 800147a:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 800147e:	fa5f fc8c 	uxtb.w	ip, ip
            dividend <<= 1;
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 8001486:	f01c 0f80 	tst.w	ip, #128	; 0x80
                dividend |= 0x01;
 800148a:	bf18      	it	ne
 800148c:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001490:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 8001494:	ea4f 0c82 	mov.w	ip, r2, lsl #2
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001498:	bf18      	it	ne
 800149a:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 800149e:	fa5f fc8c 	uxtb.w	ip, ip
            dividend <<= 1;
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 80014a6:	f01c 0f80 	tst.w	ip, #128	; 0x80
                dividend |= 0x01;
 80014aa:	bf18      	it	ne
 80014ac:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80014b0:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 80014b4:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80014b8:	bf18      	it	ne
 80014ba:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 80014be:	fa5f fc8c 	uxtb.w	ip, ip
            dividend <<= 1;
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 80014c6:	f01c 0f80 	tst.w	ip, #128	; 0x80
                dividend |= 0x01;
 80014ca:	bf18      	it	ne
 80014cc:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80014d0:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 80014d4:	ea4f 1c02 	mov.w	ip, r2, lsl #4
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80014d8:	bf18      	it	ne
 80014da:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 80014de:	fa5f fc8c 	uxtb.w	ip, ip
            dividend <<= 1;
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 80014e6:	f01c 0f80 	tst.w	ip, #128	; 0x80
                dividend |= 0x01;
 80014ea:	bf18      	it	ne
 80014ec:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80014f0:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 80014f4:	ea4f 1c42 	mov.w	ip, r2, lsl #5
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80014f8:	bf18      	it	ne
 80014fa:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 80014fe:	fa5f fc8c 	uxtb.w	ip, ip
            dividend <<= 1;
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 8001506:	f01c 0f80 	tst.w	ip, #128	; 0x80
                dividend |= 0x01;
 800150a:	bf18      	it	ne
 800150c:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001510:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 8001514:	ea4f 1c82 	mov.w	ip, r2, lsl #6
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001518:	bf18      	it	ne
 800151a:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 800151e:	fa5f fc8c 	uxtb.w	ip, ip
            dividend <<= 1;
 8001522:	005b      	lsls	r3, r3, #1
 8001524:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 8001526:	f01c 0f80 	tst.w	ip, #128	; 0x80
                dividend |= 0x01;
 800152a:	bf18      	it	ne
 800152c:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001530:	f013 0f80 	tst.w	r3, #128	; 0x80
            if((i == size - 1) && (j == 7))
 8001534:	eba1 0c06 	sub.w	ip, r1, r6
            nextDiv <<= 1;
 8001538:	ea4f 12c2 	mov.w	r2, r2, lsl #7
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 800153c:	bf18      	it	ne
 800153e:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            if((i == size - 1) && (j == 7))
 8001542:	45a4      	cmp	ip, r4
            nextDiv <<= 1;
 8001544:	b2d2      	uxtb	r2, r2
            if((i == size - 1) && (j == 7))
 8001546:	d004      	beq.n	8001552 <Cmd_Process+0x28e>
            dividend <<= 1;
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 800154c:	b10a      	cbz	r2, 8001552 <Cmd_Process+0x28e>
                dividend |= 0x01;
 800154e:	f043 0301 	orr.w	r3, r3, #1
    for(uint8_t i = 1; i < size; i++)
 8001552:	4288      	cmp	r0, r1
 8001554:	f47f af7e 	bne.w	8001454 <Cmd_Process+0x190>
    return dividend << 1;
 8001558:	005b      	lsls	r3, r3, #1
				RspBuf[*RspLen] = GetCRC(RspBuf, (*RspLen)-3);		// Send only the no. of data bytes for CRC calculation.
 800155a:	55f3      	strb	r3, [r6, r7]
				*RspLen += 1;										// +1 for CRC byte.
 800155c:	682a      	ldr	r2, [r5, #0]
				HAL_UART_Transmit(&huart_MD, RspBuf, *RspLen, 500);
 800155e:	4808      	ldr	r0, [pc, #32]	; (8001580 <Cmd_Process+0x2bc>)
				*RspLen += 1;										// +1 for CRC byte.
 8001560:	3201      	adds	r2, #1
 8001562:	602a      	str	r2, [r5, #0]
				HAL_UART_Transmit(&huart_MD, RspBuf, *RspLen, 500);
 8001564:	4631      	mov	r1, r6
 8001566:	b292      	uxth	r2, r2
 8001568:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800156c:	f005 f9b0 	bl	80068d0 <HAL_UART_Transmit>
	return RET_OK;
 8001570:	2000      	movs	r0, #0
}
 8001572:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return RET_NO_IMPL;
 8001576:	2006      	movs	r0, #6
 8001578:	e753      	b.n	8001422 <Cmd_Process+0x15e>
 800157a:	bf00      	nop
 800157c:	0800ab30 	.word	0x0800ab30
 8001580:	20000658 	.word	0x20000658

08001584 <Send_ErrorMsg>:
void Send_ErrorMsg(uint8_t stdRet)
{
	HAL_UART_Transmit(&huart_MD, (uint8_t *)Error_msg[stdRet], strlen(Error_msg[stdRet]), 100);
 8001584:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <Send_ErrorMsg+0x20>)
{
 8001586:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart_MD, (uint8_t *)Error_msg[stdRet], strlen(Error_msg[stdRet]), 100);
 8001588:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 800158c:	4620      	mov	r0, r4
 800158e:	f7fe fe47 	bl	8000220 <strlen>
 8001592:	4621      	mov	r1, r4
 8001594:	b282      	uxth	r2, r0
 8001596:	2364      	movs	r3, #100	; 0x64
 8001598:	4803      	ldr	r0, [pc, #12]	; (80015a8 <Send_ErrorMsg+0x24>)
}
 800159a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart_MD, (uint8_t *)Error_msg[stdRet], strlen(Error_msg[stdRet]), 100);
 800159e:	f005 b997 	b.w	80068d0 <HAL_UART_Transmit>
 80015a2:	bf00      	nop
 80015a4:	20000000 	.word	0x20000000
 80015a8:	20000658 	.word	0x20000658

080015ac <Motor_Init>:
	Motor.zeroPosition -= Motor.distance * ((Motor.direction) ? 1 : -1);
}

/* Initialize/Reset Motor Parameters */
bool Motor_Init(void)
{
 80015ac:	b508      	push	{r3, lr}
}

/* Stop Vertical Movement */
bool Motor_Stop(bool ready)
{
	MC_StopMotor1();
 80015ae:	f000 fcd1 	bl	8001f54 <MC_StopMotor1>
	HAL_Delay(1000);
 80015b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b6:	f002 fa71 	bl	8003a9c <HAL_Delay>
	Motor.distance = 0;
 80015ba:	4b04      	ldr	r3, [pc, #16]	; (80015cc <Motor_Init+0x20>)
 80015bc:	2200      	movs	r2, #0
	Motor.direction = 0;
 80015be:	2100      	movs	r1, #0
 80015c0:	7219      	strb	r1, [r3, #8]
	Motor.distance = 0;
 80015c2:	601a      	str	r2, [r3, #0]
	Motor.speed = 0;
 80015c4:	605a      	str	r2, [r3, #4]
	Motor.zeroPosition = 0;
 80015c6:	60da      	str	r2, [r3, #12]
}
 80015c8:	2001      	movs	r0, #1
 80015ca:	bd08      	pop	{r3, pc}
 80015cc:	20000644 	.word	0x20000644

080015d0 <Motor_SetDistance>:
	Motor.distance = distance;
 80015d0:	4b02      	ldr	r3, [pc, #8]	; (80015dc <Motor_SetDistance+0xc>)
}
 80015d2:	2001      	movs	r0, #1
	Motor.distance = distance;
 80015d4:	ed83 0a00 	vstr	s0, [r3]
}
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	20000644 	.word	0x20000644

080015e0 <Motor_GetDistance>:
	return Motor.distance;
 80015e0:	4b01      	ldr	r3, [pc, #4]	; (80015e8 <Motor_GetDistance+0x8>)
}
 80015e2:	ed93 0a00 	vldr	s0, [r3]
 80015e6:	4770      	bx	lr
 80015e8:	20000644 	.word	0x20000644

080015ec <Motor_SetSpeed>:
	Motor.speed = speed;
 80015ec:	4b02      	ldr	r3, [pc, #8]	; (80015f8 <Motor_SetSpeed+0xc>)
}
 80015ee:	2001      	movs	r0, #1
	Motor.speed = speed;
 80015f0:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000644 	.word	0x20000644

080015fc <Motor_GetSpeed>:
	return Motor.speed;
 80015fc:	4b01      	ldr	r3, [pc, #4]	; (8001604 <Motor_GetSpeed+0x8>)
}
 80015fe:	ed93 0a01 	vldr	s0, [r3, #4]
 8001602:	4770      	bx	lr
 8001604:	20000644 	.word	0x20000644

08001608 <Motor_SetDirection>:
	Motor.direction = dir;
 8001608:	4b01      	ldr	r3, [pc, #4]	; (8001610 <Motor_SetDirection+0x8>)
 800160a:	7218      	strb	r0, [r3, #8]
}
 800160c:	2001      	movs	r0, #1
 800160e:	4770      	bx	lr
 8001610:	20000644 	.word	0x20000644

08001614 <Motor_GetDirection>:
	return Motor.direction;
 8001614:	4b01      	ldr	r3, [pc, #4]	; (800161c <Motor_GetDirection+0x8>)
}
 8001616:	7a18      	ldrb	r0, [r3, #8]
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000644 	.word	0x20000644

08001620 <Motor_SetZeroPos>:
	Motor.zeroPosition = dist;
 8001620:	4b02      	ldr	r3, [pc, #8]	; (800162c <Motor_SetZeroPos+0xc>)
}
 8001622:	2001      	movs	r0, #1
	Motor.zeroPosition = dist;
 8001624:	ed83 0a03 	vstr	s0, [r3, #12]
}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000644 	.word	0x20000644

08001630 <Motor_GetZeroPos>:
	return Motor.zeroPosition;
 8001630:	4b01      	ldr	r3, [pc, #4]	; (8001638 <Motor_GetZeroPos+0x8>)
}
 8001632:	ed93 0a03 	vldr	s0, [r3, #12]
 8001636:	4770      	bx	lr
 8001638:	20000644 	.word	0x20000644

0800163c <Motor_ResetParams>:
{
 800163c:	b508      	push	{r3, lr}
	MC_StopMotor1();
 800163e:	f000 fc89 	bl	8001f54 <MC_StopMotor1>
	HAL_Delay(1000);
 8001642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001646:	f002 fa29 	bl	8003a9c <HAL_Delay>
	Motor.distance = 0;
 800164a:	4b04      	ldr	r3, [pc, #16]	; (800165c <Motor_ResetParams+0x20>)
 800164c:	2200      	movs	r2, #0
	Motor.direction = 0;
 800164e:	2100      	movs	r1, #0
 8001650:	7219      	strb	r1, [r3, #8]
	Motor.distance = 0;
 8001652:	601a      	str	r2, [r3, #0]
	Motor.speed = 0;
 8001654:	605a      	str	r2, [r3, #4]
	Motor.zeroPosition = 0;
 8001656:	60da      	str	r2, [r3, #12]
}
 8001658:	2001      	movs	r0, #1
 800165a:	bd08      	pop	{r3, pc}
 800165c:	20000644 	.word	0x20000644

08001660 <Motor_ResetDriveParams>:
	FOC_Init();
 8001660:	f000 bfd8 	b.w	8002614 <FOC_Init>

08001664 <Motor_Start>:
{
 8001664:	b508      	push	{r3, lr}
	MC_StartMotor1();
 8001666:	f000 fc6f 	bl	8001f48 <MC_StartMotor1>
	HAL_Delay(1500);
 800166a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800166e:	f002 fa15 	bl	8003a9c <HAL_Delay>
	while(MC_GetAlignmentStatusMotor1() != TC_ALIGNMENT_COMPLETED){}
 8001672:	f000 fc81 	bl	8001f78 <MC_GetAlignmentStatusMotor1>
 8001676:	2802      	cmp	r0, #2
 8001678:	d1fb      	bne.n	8001672 <Motor_Start+0xe>
}
 800167a:	2001      	movs	r0, #1
 800167c:	bd08      	pop	{r3, pc}
 800167e:	bf00      	nop

08001680 <Motor_Stop>:
{
 8001680:	b510      	push	{r4, lr}
 8001682:	4604      	mov	r4, r0
	MC_StopMotor1();
 8001684:	f000 fc66 	bl	8001f54 <MC_StopMotor1>
	HAL_Delay(1000);
 8001688:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800168c:	f002 fa06 	bl	8003a9c <HAL_Delay>

	if(ready)
 8001690:	b90c      	cbnz	r4, 8001696 <Motor_Stop+0x16>
		Motor_Start();

	return true;
}
 8001692:	2001      	movs	r0, #1
 8001694:	bd10      	pop	{r4, pc}
	MC_StartMotor1();
 8001696:	f000 fc57 	bl	8001f48 <MC_StartMotor1>
	HAL_Delay(1500);
 800169a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800169e:	f002 f9fd 	bl	8003a9c <HAL_Delay>
	while(MC_GetAlignmentStatusMotor1() != TC_ALIGNMENT_COMPLETED){}
 80016a2:	f000 fc69 	bl	8001f78 <MC_GetAlignmentStatusMotor1>
 80016a6:	2802      	cmp	r0, #2
 80016a8:	d1fb      	bne.n	80016a2 <Motor_Stop+0x22>
}
 80016aa:	2001      	movs	r0, #1
 80016ac:	bd10      	pop	{r4, pc}
 80016ae:	bf00      	nop

080016b0 <Motor_Run>:

/* Start the Vertical Movement (post Motor_Start()) */
bool Motor_Run(bool updateZeroPos)
{
 80016b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	float rot = 0, set_rot = 0;
	float pos = 0, time = 0;

	rot = (Motor.distance) * (GEAR_RATIO / MM_PER_THREAD);
 80016b4:	4c36      	ldr	r4, [pc, #216]	; (8001790 <Motor_Run+0xe0>)
 80016b6:	eddf 7a37 	vldr	s15, [pc, #220]	; 8001794 <Motor_Run+0xe4>
{
 80016ba:	ed2d 8b02 	vpush	{d8}
	rot = (Motor.distance) * (GEAR_RATIO / MM_PER_THREAD);
 80016be:	edd4 8a00 	vldr	s17, [r4]
	set_rot = (rot + 0.058) / 1.5001;
 80016c2:	ee68 7aa7 	vmul.f32	s15, s17, s15
{
 80016c6:	4605      	mov	r5, r0
	set_rot = (rot + 0.058) / 1.5001;
 80016c8:	ee17 0a90 	vmov	r0, s15
 80016cc:	f7fe ff64 	bl	8000598 <__aeabi_f2d>
 80016d0:	a329      	add	r3, pc, #164	; (adr r3, 8001778 <Motor_Run+0xc8>)
 80016d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d6:	f7fe fe01 	bl	80002dc <__adddf3>
 80016da:	a329      	add	r3, pc, #164	; (adr r3, 8001780 <Motor_Run+0xd0>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe ffb2 	bl	8000648 <__aeabi_dmul>
 80016e4:	f7ff fa88 	bl	8000bf8 <__aeabi_d2f>
	pos = (set_rot * 2 * M_PI) * ((Motor.direction) ? 1 : -1);
 80016e8:	ee07 0a90 	vmov	s15, r0
 80016ec:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80016f0:	2600      	movs	r6, #0
 80016f2:	ee17 0a90 	vmov	r0, s15
 80016f6:	f7fe ff4f 	bl	8000598 <__aeabi_f2d>
 80016fa:	7a23      	ldrb	r3, [r4, #8]
 80016fc:	4680      	mov	r8, r0
 80016fe:	4689      	mov	r9, r1
 8001700:	b39b      	cbz	r3, 800176a <Motor_Run+0xba>
 8001702:	4f25      	ldr	r7, [pc, #148]	; (8001798 <Motor_Run+0xe8>)
	time = 60.0 * (Motor.distance / Motor.speed);
 8001704:	edd4 7a01 	vldr	s15, [r4, #4]
 8001708:	eddf 0a24 	vldr	s1, [pc, #144]	; 800179c <Motor_Run+0xec>
 800170c:	ee88 8aa7 	vdiv.f32	s16, s17, s15

	HAL_Delay(500);
 8001710:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	time = 60.0 * (Motor.distance / Motor.speed);
 8001714:	ee28 8a20 	vmul.f32	s16, s16, s1
	HAL_Delay(500);
 8001718:	f002 f9c0 	bl	8003a9c <HAL_Delay>
	pos = (set_rot * 2 * M_PI) * ((Motor.direction) ? 1 : -1);
 800171c:	a31a      	add	r3, pc, #104	; (adr r3, 8001788 <Motor_Run+0xd8>)
 800171e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001722:	4640      	mov	r0, r8
 8001724:	4649      	mov	r1, r9
 8001726:	f7fe ff8f 	bl	8000648 <__aeabi_dmul>
 800172a:	463b      	mov	r3, r7
 800172c:	4632      	mov	r2, r6
 800172e:	f7fe ff8b 	bl	8000648 <__aeabi_dmul>
 8001732:	f7ff fa61 	bl	8000bf8 <__aeabi_d2f>

	MC_ProgramPositionCommandMotor1(pos, time);
 8001736:	eef0 0a48 	vmov.f32	s1, s16
 800173a:	ee00 0a10 	vmov	s0, r0
 800173e:	f000 fc0f 	bl	8001f60 <MC_ProgramPositionCommandMotor1>
	sendSpeed.prev_time_send = HAL_GetTick();
 8001742:	f002 f9a5 	bl	8003a90 <HAL_GetTick>
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <Motor_Run+0xf0>)
 8001748:	6018      	str	r0, [r3, #0]

	if(updateZeroPos)
 800174a:	b14d      	cbz	r5, 8001760 <Motor_Run+0xb0>
	Motor.zeroPosition -= Motor.distance * ((Motor.direction) ? 1 : -1);
 800174c:	7a23      	ldrb	r3, [r4, #8]
 800174e:	edd4 7a03 	vldr	s15, [r4, #12]
 8001752:	ed94 7a00 	vldr	s14, [r4]
 8001756:	b153      	cbz	r3, 800176e <Motor_Run+0xbe>
 8001758:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800175c:	edc4 7a03 	vstr	s15, [r4, #12]
		Update_ZeroPos();

	return true;
}
 8001760:	ecbd 8b02 	vpop	{d8}
 8001764:	2001      	movs	r0, #1
 8001766:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	pos = (set_rot * 2 * M_PI) * ((Motor.direction) ? 1 : -1);
 800176a:	4f0e      	ldr	r7, [pc, #56]	; (80017a4 <Motor_Run+0xf4>)
 800176c:	e7ca      	b.n	8001704 <Motor_Run+0x54>
 800176e:	eeb1 7a47 	vneg.f32	s14, s14
 8001772:	e7f1      	b.n	8001758 <Motor_Run+0xa8>
 8001774:	f3af 8000 	nop.w
 8001778:	0e560419 	.word	0x0e560419
 800177c:	3fadb22d 	.word	0x3fadb22d
 8001780:	21fe99c3 	.word	0x21fe99c3
 8001784:	3fe554f8 	.word	0x3fe554f8
 8001788:	54442d18 	.word	0x54442d18
 800178c:	400921fb 	.word	0x400921fb
 8001790:	20000644 	.word	0x20000644
 8001794:	3f972e5d 	.word	0x3f972e5d
 8001798:	3ff00000 	.word	0x3ff00000
 800179c:	42700000 	.word	0x42700000
 80017a0:	20000654 	.word	0x20000654
 80017a4:	bff00000 	.word	0xbff00000

080017a8 <Motor_SetZero>:

bool Motor_SetZero(void)
{
	Motor.zeroPosition = 0;
 80017a8:	4b02      	ldr	r3, [pc, #8]	; (80017b4 <Motor_SetZero+0xc>)
 80017aa:	2200      	movs	r2, #0
	return true;
}
 80017ac:	2001      	movs	r0, #1
	Motor.zeroPosition = 0;
 80017ae:	60da      	str	r2, [r3, #12]
}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	20000644 	.word	0x20000644

080017b8 <Motor_RTZ>:

bool Motor_RTZ(void)
{
 80017b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool prevDir = 0;
	float prevDist = 0;
	float prevSpeed = 0;

	prevDir = Motor.direction;
 80017bc:	4c40      	ldr	r4, [pc, #256]	; (80018c0 <Motor_RTZ+0x108>)
	rot = (Motor.distance) * (GEAR_RATIO / MM_PER_THREAD);
 80017be:	eddf 7a41 	vldr	s15, [pc, #260]	; 80018c4 <Motor_RTZ+0x10c>
	prevDist = Motor.distance;
	prevSpeed = Motor.speed;

	Motor.distance = fabs(Motor.zeroPosition);
	Motor.direction = (Motor.zeroPosition < 0) ? 0 : 1;
	Motor.speed = 1000.0;
 80017c2:	4b41      	ldr	r3, [pc, #260]	; (80018c8 <Motor_RTZ+0x110>)
	prevSpeed = Motor.speed;
 80017c4:	6865      	ldr	r5, [r4, #4]
	Motor.speed = 1000.0;
 80017c6:	6063      	str	r3, [r4, #4]
{
 80017c8:	ed2d 8b02 	vpush	{d8}
	Motor.distance = fabs(Motor.zeroPosition);
 80017cc:	edd4 8a03 	vldr	s17, [r4, #12]
	prevDist = Motor.distance;
 80017d0:	f8d4 a000 	ldr.w	sl, [r4]
	prevDir = Motor.direction;
 80017d4:	f894 b008 	ldrb.w	fp, [r4, #8]
	Motor.direction = (Motor.zeroPosition < 0) ? 0 : 1;
 80017d8:	eef5 8ac0 	vcmpe.f32	s17, #0.0
	Motor.distance = fabs(Motor.zeroPosition);
 80017dc:	eeb0 8ae8 	vabs.f32	s16, s17
	Motor.direction = (Motor.zeroPosition < 0) ? 0 : 1;
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	set_rot = (rot + 0.058) / 1.5001;
 80017e4:	ee68 7a27 	vmul.f32	s15, s16, s15
	Motor.direction = (Motor.zeroPosition < 0) ? 0 : 1;
 80017e8:	bfac      	ite	ge
 80017ea:	2301      	movge	r3, #1
 80017ec:	2300      	movlt	r3, #0
	set_rot = (rot + 0.058) / 1.5001;
 80017ee:	ee17 0a90 	vmov	r0, s15
	Motor.distance = fabs(Motor.zeroPosition);
 80017f2:	ed84 8a00 	vstr	s16, [r4]
	Motor.direction = (Motor.zeroPosition < 0) ? 0 : 1;
 80017f6:	7223      	strb	r3, [r4, #8]
	set_rot = (rot + 0.058) / 1.5001;
 80017f8:	f7fe fece 	bl	8000598 <__aeabi_f2d>
 80017fc:	a32a      	add	r3, pc, #168	; (adr r3, 80018a8 <Motor_RTZ+0xf0>)
 80017fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001802:	f7fe fd6b 	bl	80002dc <__adddf3>
 8001806:	a32a      	add	r3, pc, #168	; (adr r3, 80018b0 <Motor_RTZ+0xf8>)
 8001808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180c:	f7fe ff1c 	bl	8000648 <__aeabi_dmul>
 8001810:	f7ff f9f2 	bl	8000bf8 <__aeabi_d2f>
	pos = (set_rot * 2 * M_PI) * ((Motor.direction) ? 1 : -1);
 8001814:	ee07 0a90 	vmov	s15, r0
 8001818:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800181c:	2600      	movs	r6, #0
 800181e:	ee17 0a90 	vmov	r0, s15
 8001822:	f7fe feb9 	bl	8000598 <__aeabi_f2d>
 8001826:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182e:	4680      	mov	r8, r0
	HAL_Delay(500);
 8001830:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	pos = (set_rot * 2 * M_PI) * ((Motor.direction) ? 1 : -1);
 8001834:	bfac      	ite	ge
 8001836:	4f25      	ldrge	r7, [pc, #148]	; (80018cc <Motor_RTZ+0x114>)
 8001838:	4f25      	ldrlt	r7, [pc, #148]	; (80018d0 <Motor_RTZ+0x118>)
 800183a:	4689      	mov	r9, r1
	HAL_Delay(500);
 800183c:	f002 f92e 	bl	8003a9c <HAL_Delay>
	time = 60.0 * (Motor.distance / Motor.speed);
 8001840:	eddf 0a24 	vldr	s1, [pc, #144]	; 80018d4 <Motor_RTZ+0x11c>
	pos = (set_rot * 2 * M_PI) * ((Motor.direction) ? 1 : -1);
 8001844:	a31c      	add	r3, pc, #112	; (adr r3, 80018b8 <Motor_RTZ+0x100>)
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	4640      	mov	r0, r8
 800184c:	4649      	mov	r1, r9
	time = 60.0 * (Motor.distance / Motor.speed);
 800184e:	ee28 8a20 	vmul.f32	s16, s16, s1
	pos = (set_rot * 2 * M_PI) * ((Motor.direction) ? 1 : -1);
 8001852:	f7fe fef9 	bl	8000648 <__aeabi_dmul>
 8001856:	4632      	mov	r2, r6
 8001858:	463b      	mov	r3, r7
 800185a:	f7fe fef5 	bl	8000648 <__aeabi_dmul>
 800185e:	f7ff f9cb 	bl	8000bf8 <__aeabi_d2f>
	MC_ProgramPositionCommandMotor1(pos, time);
 8001862:	eef0 0a48 	vmov.f32	s1, s16
 8001866:	ee00 0a10 	vmov	s0, r0
 800186a:	f000 fb79 	bl	8001f60 <MC_ProgramPositionCommandMotor1>
	sendSpeed.prev_time_send = HAL_GetTick();
 800186e:	f002 f90f 	bl	8003a90 <HAL_GetTick>
 8001872:	4a19      	ldr	r2, [pc, #100]	; (80018d8 <Motor_RTZ+0x120>)
	Motor.zeroPosition -= Motor.distance * ((Motor.direction) ? 1 : -1);
 8001874:	7a23      	ldrb	r3, [r4, #8]
	sendSpeed.prev_time_send = HAL_GetTick();
 8001876:	6010      	str	r0, [r2, #0]
	Motor.zeroPosition -= Motor.distance * ((Motor.direction) ? 1 : -1);
 8001878:	edd4 7a03 	vldr	s15, [r4, #12]
 800187c:	ed94 7a00 	vldr	s14, [r4]
 8001880:	b90b      	cbnz	r3, 8001886 <Motor_RTZ+0xce>
 8001882:	eeb1 7a47 	vneg.f32	s14, s14
		Motor.distance = prevDist;
		Motor.speed = prevSpeed;
	}

	return true;
}
 8001886:	ecbd 8b02 	vpop	{d8}
	Motor.zeroPosition -= Motor.distance * ((Motor.direction) ? 1 : -1);
 800188a:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 800188e:	2001      	movs	r0, #1
		Motor.direction = prevDir;
 8001890:	f884 b008 	strb.w	fp, [r4, #8]
	Motor.zeroPosition -= Motor.distance * ((Motor.direction) ? 1 : -1);
 8001894:	edc4 7a03 	vstr	s15, [r4, #12]
		Motor.distance = prevDist;
 8001898:	f8c4 a000 	str.w	sl, [r4]
		Motor.speed = prevSpeed;
 800189c:	6065      	str	r5, [r4, #4]
}
 800189e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018a2:	bf00      	nop
 80018a4:	f3af 8000 	nop.w
 80018a8:	0e560419 	.word	0x0e560419
 80018ac:	3fadb22d 	.word	0x3fadb22d
 80018b0:	21fe99c3 	.word	0x21fe99c3
 80018b4:	3fe554f8 	.word	0x3fe554f8
 80018b8:	54442d18 	.word	0x54442d18
 80018bc:	400921fb 	.word	0x400921fb
 80018c0:	20000644 	.word	0x20000644
 80018c4:	3f972e5d 	.word	0x3f972e5d
 80018c8:	447a0000 	.word	0x447a0000
 80018cc:	3ff00000 	.word	0x3ff00000
 80018d0:	bff00000 	.word	0xbff00000
 80018d4:	3d75c290 	.word	0x3d75c290
 80018d8:	20000654 	.word	0x20000654

080018dc <Motor_GetRunTick>:

unsigned long Motor_GetRunTick(void)
{
	return sendSpeed.prev_time_send;
 80018dc:	4b01      	ldr	r3, [pc, #4]	; (80018e4 <Motor_GetRunTick+0x8>)
}
 80018de:	6818      	ldr	r0, [r3, #0]
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000654 	.word	0x20000654

080018e8 <Motor_SetRunTick>:

void Motor_SetRunTick(unsigned long val)
{
	sendSpeed.prev_time_send = val;
 80018e8:	4b01      	ldr	r3, [pc, #4]	; (80018f0 <Motor_SetRunTick+0x8>)
 80018ea:	6018      	str	r0, [r3, #0]
}
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	20000654 	.word	0x20000654

080018f4 <sendToPort>:

bool sendToPort(UART_HandleTypeDef *phuart_MD, float sendData)
{
 80018f4:	b510      	push	{r4, lr}
 80018f6:	4604      	mov	r4, r0
 80018f8:	b084      	sub	sp, #16
	char sendBuf[15];
	HAL_StatusTypeDef retVal;

	sprintf(sendBuf, "%.2f\r\n", sendData);
 80018fa:	ee10 0a10 	vmov	r0, s0
 80018fe:	f7fe fe4b 	bl	8000598 <__aeabi_f2d>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4668      	mov	r0, sp
 8001908:	4906      	ldr	r1, [pc, #24]	; (8001924 <sendToPort+0x30>)
 800190a:	f007 fd2b 	bl	8009364 <siprintf>
	retVal = HAL_UART_Transmit(phuart_MD, (uint8_t *)sendBuf, 15, 100);
 800190e:	4669      	mov	r1, sp
 8001910:	4620      	mov	r0, r4
 8001912:	2364      	movs	r3, #100	; 0x64
 8001914:	220f      	movs	r2, #15
 8001916:	f004 ffdb 	bl	80068d0 <HAL_UART_Transmit>

	if(HAL_OK == retVal)
		return true;

	return false;
}
 800191a:	fab0 f080 	clz	r0, r0
 800191e:	0940      	lsrs	r0, r0, #5
 8001920:	b004      	add	sp, #16
 8001922:	bd10      	pop	{r4, pc}
 8001924:	0800ac44 	.word	0x0800ac44

08001928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001928:	b510      	push	{r4, lr}
 800192a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800192c:	2238      	movs	r2, #56	; 0x38
 800192e:	2100      	movs	r1, #0
 8001930:	a806      	add	r0, sp, #24
 8001932:	f007 f8b2 	bl	8008a9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001936:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001938:	4618      	mov	r0, r3
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800193a:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800193e:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001942:	9305      	str	r3, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001944:	f003 f970 	bl	8004c28 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001948:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800194a:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800194c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001950:	2403      	movs	r4, #3
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001952:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001954:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001956:	2106      	movs	r1, #6
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001958:	2255      	movs	r2, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800195a:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800195c:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001960:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001962:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001964:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001968:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196c:	f003 f9e2 	bl	8004d34 <HAL_RCC_OscConfig>
 8001970:	b108      	cbz	r0, 8001976 <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001972:	b672      	cpsid	i
 8001974:	e7fe      	b.n	8001974 <SystemClock_Config+0x4c>
 8001976:	4603      	mov	r3, r0
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001978:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800197a:	a801      	add	r0, sp, #4
 800197c:	2104      	movs	r1, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800197e:	e9cd 4302 	strd	r4, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001982:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001986:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001988:	f003 fc22 	bl	80051d0 <HAL_RCC_ClockConfig>
 800198c:	b108      	cbz	r0, 8001992 <SystemClock_Config+0x6a>
 800198e:	b672      	cpsid	i
 8001990:	e7fe      	b.n	8001990 <SystemClock_Config+0x68>
    Error_Handler();
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001992:	f003 fded 	bl	8005570 <HAL_RCC_EnableCSS>
}
 8001996:	b014      	add	sp, #80	; 0x50
 8001998:	bd10      	pop	{r4, pc}
 800199a:	bf00      	nop
 800199c:	0000      	movs	r0, r0
	...

080019a0 <main>:
{
 80019a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019a4:	ed2d 8b04 	vpush	{d8-d9}
 80019a8:	f5ad 7d0a 	sub.w	sp, sp, #552	; 0x228
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	2600      	movs	r6, #0
  HAL_Init();
 80019ae:	f002 f847 	bl	8003a40 <HAL_Init>
  SystemClock_Config();
 80019b2:	f7ff ffb9 	bl	8001928 <SystemClock_Config>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b6:	4b9e      	ldr	r3, [pc, #632]	; (8001c30 <main+0x290>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b8:	964d      	str	r6, [sp, #308]	; 0x134
 80019ba:	964c      	str	r6, [sp, #304]	; 0x130
 80019bc:	964e      	str	r6, [sp, #312]	; 0x138
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019be:	6cda      	ldr	r2, [r3, #76]	; 0x4c

  /*Configure GPIO pin : Start_Stop_Pin */
  GPIO_InitStruct.Pin = Start_Stop_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80019c0:	489c      	ldr	r0, [pc, #624]	; (8001c34 <main+0x294>)
  hadc1.Instance = ADC1;
 80019c2:	4d9d      	ldr	r5, [pc, #628]	; (8001c38 <main+0x298>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c4:	f042 0204 	orr.w	r2, r2, #4
 80019c8:	64da      	str	r2, [r3, #76]	; 0x4c
 80019ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019cc:	f002 0204 	and.w	r2, r2, #4
 80019d0:	9200      	str	r2, [sp, #0]
 80019d2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019d6:	f042 0220 	orr.w	r2, r2, #32
 80019da:	64da      	str	r2, [r3, #76]	; 0x4c
 80019dc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019de:	f002 0220 	and.w	r2, r2, #32
 80019e2:	9201      	str	r2, [sp, #4]
 80019e4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019e8:	f042 0201 	orr.w	r2, r2, #1
 80019ec:	64da      	str	r2, [r3, #76]	; 0x4c
 80019ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019f0:	f002 0201 	and.w	r2, r2, #1
 80019f4:	9202      	str	r2, [sp, #8]
 80019f6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019f8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80019fa:	f042 0202 	orr.w	r2, r2, #2
 80019fe:	64da      	str	r2, [r3, #76]	; 0x4c
 8001a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a02:	ac4a      	add	r4, sp, #296	; 0x128
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001a0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a0e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001a12:	4621      	mov	r1, r4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a14:	e9c4 2300 	strd	r2, r3, [r4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a18:	9f03      	ldr	r7, [sp, #12]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a1a:	f04f 0820 	mov.w	r8, #32
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001a1e:	f003 f81d 	bl	8004a5c <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001a22:	4631      	mov	r1, r6
 8001a24:	223c      	movs	r2, #60	; 0x3c
 8001a26:	4620      	mov	r0, r4
  ADC_MultiModeTypeDef multimode = {0};
 8001a28:	e9cd 6607 	strd	r6, r6, [sp, #28]
 8001a2c:	9609      	str	r6, [sp, #36]	; 0x24
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001a2e:	f007 f834 	bl	8008a9a <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a32:	4631      	mov	r1, r6
 8001a34:	4642      	mov	r2, r8
 8001a36:	a80a      	add	r0, sp, #40	; 0x28
 8001a38:	f007 f82f 	bl	8008a9a <memset>
  hadc1.Instance = ADC1;
 8001a3c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a40:	2704      	movs	r7, #4
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001a42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a46:	2201      	movs	r2, #1
  hadc1.Instance = ADC1;
 8001a48:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a4a:	4628      	mov	r0, r5
  hadc1.Init.NbrOfConversion = 2;
 8001a4c:	2302      	movs	r3, #2
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a4e:	e9c5 6601 	strd	r6, r6, [r5, #4]
  hadc1.Init.GainCompensation = 0;
 8001a52:	612e      	str	r6, [r5, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001a54:	772e      	strb	r6, [r5, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a56:	776e      	strb	r6, [r5, #29]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a58:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001a5c:	e9c5 660b 	strd	r6, r6, [r5, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001a60:	f885 6038 	strb.w	r6, [r5, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a64:	63ee      	str	r6, [r5, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001a66:	f885 6040 	strb.w	r6, [r5, #64]	; 0x40
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001a6a:	60e9      	str	r1, [r5, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a6c:	616a      	str	r2, [r5, #20]
  hadc1.Init.NbrOfConversion = 2;
 8001a6e:	622b      	str	r3, [r5, #32]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a70:	61af      	str	r7, [r5, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a72:	f002 f825 	bl	8003ac0 <HAL_ADC_Init>
 8001a76:	b108      	cbz	r0, 8001a7c <main+0xdc>
 8001a78:	b672      	cpsid	i
 8001a7a:	e7fe      	b.n	8001a7a <main+0xda>
 8001a7c:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a7e:	a907      	add	r1, sp, #28
 8001a80:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001a82:	9307      	str	r3, [sp, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001a84:	f002 feac 	bl	80047e0 <HAL_ADCEx_MultiModeConfigChannel>
 8001a88:	b108      	cbz	r0, 8001a8e <main+0xee>
 8001a8a:	b672      	cpsid	i
 8001a8c:	e7fe      	b.n	8001a8c <main+0xec>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001a8e:	4a6b      	ldr	r2, [pc, #428]	; (8001c3c <main+0x29c>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001a90:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001a94:	2309      	movs	r3, #9
 8001a96:	e9c4 2300 	strd	r2, r3, [r4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	237f      	movs	r3, #127	; 0x7f
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001a9e:	2103      	movs	r1, #3
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001aa0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sConfigInjected.AutoInjectedConv = DISABLE;
 8001aac:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001ab0:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001ab4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001ab8:	2280      	movs	r2, #128	; 0x80
 8001aba:	2380      	movs	r3, #128	; 0x80
  sConfigInjected.InjectedNbrOfConversion = 3;
 8001abc:	6221      	str	r1, [r4, #32]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001abe:	4628      	mov	r0, r5
 8001ac0:	4621      	mov	r1, r4
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001ac2:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001ac6:	f002 fb87 	bl	80041d8 <HAL_ADCEx_InjectedConfigChannel>
 8001aca:	b108      	cbz	r0, 8001ad0 <main+0x130>
 8001acc:	b672      	cpsid	i
 8001ace:	e7fe      	b.n	8001ace <main+0x12e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8001ad0:	4b5b      	ldr	r3, [pc, #364]	; (8001c40 <main+0x2a0>)
 8001ad2:	6023      	str	r3, [r4, #0]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001ad4:	4621      	mov	r1, r4
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001ad6:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001ada:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001adc:	6063      	str	r3, [r4, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001ade:	f002 fb7b 	bl	80041d8 <HAL_ADCEx_InjectedConfigChannel>
 8001ae2:	b108      	cbz	r0, 8001ae8 <main+0x148>
 8001ae4:	b672      	cpsid	i
 8001ae6:	e7fe      	b.n	8001ae6 <main+0x146>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8001ae8:	4b56      	ldr	r3, [pc, #344]	; (8001c44 <main+0x2a4>)
 8001aea:	6023      	str	r3, [r4, #0]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001aec:	4621      	mov	r1, r4
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001aee:	f240 2315 	movw	r3, #533	; 0x215
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001af2:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001af4:	6063      	str	r3, [r4, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001af6:	f002 fb6f 	bl	80041d8 <HAL_ADCEx_InjectedConfigChannel>
 8001afa:	b108      	cbz	r0, 8001b00 <main+0x160>
 8001afc:	b672      	cpsid	i
 8001afe:	e7fe      	b.n	8001afe <main+0x15e>
  sConfig.Channel = ADC_CHANNEL_2;
 8001b00:	4951      	ldr	r1, [pc, #324]	; (8001c48 <main+0x2a8>)
  sConfig.Offset = 0;
 8001b02:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b04:	2206      	movs	r2, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b06:	237f      	movs	r3, #127	; 0x7f
  sConfig.Channel = ADC_CHANNEL_2;
 8001b08:	910a      	str	r1, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b0a:	4628      	mov	r0, r5
 8001b0c:	a90a      	add	r1, sp, #40	; 0x28
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 8001b0e:	970c      	str	r7, [sp, #48]	; 0x30
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b10:	970e      	str	r7, [sp, #56]	; 0x38
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b12:	920b      	str	r2, [sp, #44]	; 0x2c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b14:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b16:	f002 f8ff 	bl	8003d18 <HAL_ADC_ConfigChannel>
 8001b1a:	b108      	cbz	r0, 8001b20 <main+0x180>
 8001b1c:	b672      	cpsid	i
 8001b1e:	e7fe      	b.n	8001b1e <main+0x17e>
  sConfig.Channel = ADC_CHANNEL_8;
 8001b20:	4b4a      	ldr	r3, [pc, #296]	; (8001c4c <main+0x2ac>)
 8001b22:	930a      	str	r3, [sp, #40]	; 0x28
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b24:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b26:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b28:	a90a      	add	r1, sp, #40	; 0x28
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b2a:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b2c:	f002 f8f4 	bl	8003d18 <HAL_ADC_ConfigChannel>
 8001b30:	b108      	cbz	r0, 8001b36 <main+0x196>
 8001b32:	b672      	cpsid	i
 8001b34:	e7fe      	b.n	8001b34 <main+0x194>
  hcordic.Instance = CORDIC;
 8001b36:	4846      	ldr	r0, [pc, #280]	; (8001c50 <main+0x2b0>)
 8001b38:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <main+0x2b4>)
 8001b3a:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001b3c:	f002 fefe 	bl	800493c <HAL_CORDIC_Init>
 8001b40:	4605      	mov	r5, r0
 8001b42:	b108      	cbz	r0, 8001b48 <main+0x1a8>
 8001b44:	b672      	cpsid	i
 8001b46:	e7fe      	b.n	8001b46 <main+0x1a6>
  htim1.Instance = TIM1;
 8001b48:	4e43      	ldr	r6, [pc, #268]	; (8001c58 <main+0x2b8>)
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001b4a:	9007      	str	r0, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b4c:	4601      	mov	r1, r0
 8001b4e:	2234      	movs	r2, #52	; 0x34
 8001b50:	4620      	mov	r0, r4
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001b52:	e9cd 5508 	strd	r5, r5, [sp, #32]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b56:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 8001b5a:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
 8001b5e:	e9cd 550e 	strd	r5, r5, [sp, #56]	; 0x38
 8001b62:	9510      	str	r5, [sp, #64]	; 0x40
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b64:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8001b68:	9506      	str	r5, [sp, #24]
  htim1.Instance = TIM1;
 8001b6a:	4f3c      	ldr	r7, [pc, #240]	; (8001c5c <main+0x2bc>)
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b6c:	f006 ff95 	bl	8008a9a <memset>
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001b70:	2305      	movs	r3, #5
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001b72:	f640 3111 	movw	r1, #2833	; 0xb11
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001b76:	f44f 7280 	mov.w	r2, #256	; 0x100
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b7a:	4630      	mov	r0, r6
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001b7c:	6173      	str	r3, [r6, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001b7e:	6075      	str	r5, [r6, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001b80:	f8c6 8008 	str.w	r8, [r6, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b84:	61b5      	str	r5, [r6, #24]
  htim1.Instance = TIM1;
 8001b86:	6037      	str	r7, [r6, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001b88:	e9c6 1203 	strd	r1, r2, [r6, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b8c:	f003 fe80 	bl	8005890 <HAL_TIM_PWM_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	b108      	cbz	r0, 8001b98 <main+0x1f8>
 8001b94:	b672      	cpsid	i
 8001b96:	e7fe      	b.n	8001b96 <main+0x1f6>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001b98:	2270      	movs	r2, #112	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b9a:	4630      	mov	r0, r6
 8001b9c:	a904      	add	r1, sp, #16
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9e:	e9cd 3305 	strd	r3, r3, [sp, #20]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001ba2:	9204      	str	r2, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ba4:	f004 fa62 	bl	800606c <HAL_TIMEx_MasterConfigSynchronization>
 8001ba8:	b108      	cbz	r0, 8001bae <main+0x20e>
 8001baa:	b672      	cpsid	i
 8001bac:	e7fe      	b.n	8001bac <main+0x20c>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001bae:	2701      	movs	r7, #1
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001bb0:	4639      	mov	r1, r7
 8001bb2:	aa07      	add	r2, sp, #28
 8001bb4:	4828      	ldr	r0, [pc, #160]	; (8001c58 <main+0x2b8>)
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 8001bb6:	9709      	str	r7, [sp, #36]	; 0x24
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8001bb8:	e9cd 7707 	strd	r7, r7, [sp, #28]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001bbc:	f004 fb06 	bl	80061cc <HAL_TIMEx_ConfigBreakInput>
 8001bc0:	b108      	cbz	r0, 8001bc6 <main+0x226>
 8001bc2:	b672      	cpsid	i
 8001bc4:	e7fe      	b.n	8001bc4 <main+0x224>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc6:	2160      	movs	r1, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bc8:	4602      	mov	r2, r0
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001bca:	f44f 66b1 	mov.w	r6, #1416	; 0x588
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001bce:	2508      	movs	r5, #8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd0:	900c      	str	r0, [sp, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bd2:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001bd6:	f44f 7300 	mov.w	r3, #512	; 0x200
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bda:	910a      	str	r1, [sp, #40]	; 0x28
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bdc:	481e      	ldr	r0, [pc, #120]	; (8001c58 <main+0x2b8>)
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001bde:	960b      	str	r6, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001be0:	a90a      	add	r1, sp, #40	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001be2:	950d      	str	r5, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8001be4:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001be6:	f004 f801 	bl	8005bec <HAL_TIM_PWM_ConfigChannel>
 8001bea:	b108      	cbz	r0, 8001bf0 <main+0x250>
 8001bec:	b672      	cpsid	i
 8001bee:	e7fe      	b.n	8001bee <main+0x24e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	a90a      	add	r1, sp, #40	; 0x28
 8001bf4:	4818      	ldr	r0, [pc, #96]	; (8001c58 <main+0x2b8>)
 8001bf6:	f003 fff9 	bl	8005bec <HAL_TIM_PWM_ConfigChannel>
 8001bfa:	b108      	cbz	r0, 8001c00 <main+0x260>
 8001bfc:	b672      	cpsid	i
 8001bfe:	e7fe      	b.n	8001bfe <main+0x25e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c00:	462a      	mov	r2, r5
 8001c02:	a90a      	add	r1, sp, #40	; 0x28
 8001c04:	4814      	ldr	r0, [pc, #80]	; (8001c58 <main+0x2b8>)
 8001c06:	f003 fff1 	bl	8005bec <HAL_TIM_PWM_ConfigChannel>
 8001c0a:	b108      	cbz	r0, 8001c10 <main+0x270>
 8001c0c:	b672      	cpsid	i
 8001c0e:	e7fe      	b.n	8001c0e <main+0x26e>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001c10:	2570      	movs	r5, #112	; 0x70
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001c12:	f44f 6331 	mov.w	r3, #2832	; 0xb10
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c16:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c18:	9010      	str	r0, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c1a:	220c      	movs	r2, #12
 8001c1c:	a90a      	add	r1, sp, #40	; 0x28
 8001c1e:	480e      	ldr	r0, [pc, #56]	; (8001c58 <main+0x2b8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001c20:	950a      	str	r5, [sp, #40]	; 0x28
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001c22:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c24:	f003 ffe2 	bl	8005bec <HAL_TIM_PWM_ConfigChannel>
 8001c28:	b1d0      	cbz	r0, 8001c60 <main+0x2c0>
 8001c2a:	b672      	cpsid	i
 8001c2c:	e7fe      	b.n	8001c2c <main+0x28c>
 8001c2e:	bf00      	nop
 8001c30:	40021000 	.word	0x40021000
 8001c34:	48000800 	.word	0x48000800
 8001c38:	200006ec 	.word	0x200006ec
 8001c3c:	04300002 	.word	0x04300002
 8001c40:	1d500080 	.word	0x1d500080
 8001c44:	19200040 	.word	0x19200040
 8001c48:	08600004 	.word	0x08600004
 8001c4c:	21800100 	.word	0x21800100
 8001c50:	20000758 	.word	0x20000758
 8001c54:	40020c00 	.word	0x40020c00
 8001c58:	20000780 	.word	0x20000780
 8001c5c:	40012c00 	.word	0x40012c00
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001c64:	2348      	movs	r3, #72	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001c66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001c6a:	f44f 6580 	mov.w	r5, #1024	; 0x400
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c6e:	60a0      	str	r0, [r4, #8]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c70:	e9c4 0007 	strd	r0, r0, [r4, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c74:	e9c4 000b 	strd	r0, r0, [r4, #44]	; 0x2c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001c78:	6022      	str	r2, [r4, #0]
  sBreakDeadTimeConfig.BreakFilter = 3;
 8001c7a:	f04f 0803 	mov.w	r8, #3
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001c82:	60e3      	str	r3, [r4, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001c84:	6121      	str	r1, [r4, #16]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c8a:	4621      	mov	r1, r4
 8001c8c:	48a4      	ldr	r0, [pc, #656]	; (8001f20 <main+0x580>)
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001c8e:	6065      	str	r5, [r4, #4]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c90:	6162      	str	r2, [r4, #20]
  sBreakDeadTimeConfig.BreakFilter = 3;
 8001c92:	f8c4 8018 	str.w	r8, [r4, #24]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c96:	e9c4 3809 	strd	r3, r8, [r4, #36]	; 0x24
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c9a:	f004 fa45 	bl	8006128 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c9e:	4605      	mov	r5, r0
 8001ca0:	b108      	cbz	r0, 8001ca6 <main+0x306>
 8001ca2:	b672      	cpsid	i
 8001ca4:	e7fe      	b.n	8001ca4 <main+0x304>
  htim2.Instance = TIM2;
 8001ca6:	4e9f      	ldr	r6, [pc, #636]	; (8001f24 <main+0x584>)
  HAL_TIM_MspPostInit(&htim1);
 8001ca8:	489d      	ldr	r0, [pc, #628]	; (8001f20 <main+0x580>)
 8001caa:	f001 fdb5 	bl	8003818 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cae:	954b      	str	r5, [sp, #300]	; 0x12c
  htim2.Init.Period = M1_PULSE_NBR;
 8001cb0:	f644 631f 	movw	r3, #19999	; 0x4e1f
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb4:	60a7      	str	r7, [r4, #8]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb6:	61a7      	str	r7, [r4, #24]
  htim2.Instance = TIM2;
 8001cb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8001cbc:	270c      	movs	r7, #12
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001cbe:	4630      	mov	r0, r6
 8001cc0:	4621      	mov	r1, r4
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cc2:	f8c4 8000 	str.w	r8, [r4]
  htim2.Init.Period = M1_PULSE_NBR;
 8001cc6:	60f3      	str	r3, [r6, #12]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cc8:	954d      	str	r5, [sp, #308]	; 0x134
 8001cca:	954f      	str	r5, [sp, #316]	; 0x13c
 8001ccc:	9551      	str	r5, [sp, #324]	; 0x144
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cce:	e9cd 550a 	strd	r5, r5, [sp, #40]	; 0x28
 8001cd2:	950c      	str	r5, [sp, #48]	; 0x30
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd4:	e9c6 5501 	strd	r5, r5, [r6, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cd8:	6135      	str	r5, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cda:	61b5      	str	r5, [r6, #24]
  htim2.Instance = TIM2;
 8001cdc:	6032      	str	r2, [r6, #0]
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8001cde:	6127      	str	r7, [r4, #16]
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8001ce0:	6227      	str	r7, [r4, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001ce2:	f003 fe95 	bl	8005a10 <HAL_TIM_Encoder_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	b108      	cbz	r0, 8001cee <main+0x34e>
 8001cea:	b672      	cpsid	i
 8001cec:	e7fe      	b.n	8001cec <main+0x34c>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cee:	4630      	mov	r0, r6
 8001cf0:	a90a      	add	r1, sp, #40	; 0x28
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf2:	930a      	str	r3, [sp, #40]	; 0x28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf4:	930c      	str	r3, [sp, #48]	; 0x30
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cf6:	f004 f9b9 	bl	800606c <HAL_TIMEx_MasterConfigSynchronization>
 8001cfa:	4606      	mov	r6, r0
 8001cfc:	b108      	cbz	r0, 8001d02 <main+0x362>
 8001cfe:	b672      	cpsid	i
 8001d00:	e7fe      	b.n	8001d00 <main+0x360>
	huart_MD.Instance = USART2;
 8001d02:	4d89      	ldr	r5, [pc, #548]	; (8001f28 <main+0x588>)
  MX_MotorControl_Init();
 8001d04:	f000 ff0c 	bl	8002b20 <MX_MotorControl_Init>
	huart_MD.Instance = USART2;
 8001d08:	4a88      	ldr	r2, [pc, #544]	; (8001f2c <main+0x58c>)
	huart_MD.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d0a:	62ae      	str	r6, [r5, #40]	; 0x28
	huart_MD.Init.BaudRate = 115200;
 8001d0c:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	if (HAL_UART_Init(&huart_MD) != HAL_OK)
 8001d10:	4628      	mov	r0, r5
	huart_MD.Init.StopBits = UART_STOPBITS_1;
 8001d12:	e9c5 6602 	strd	r6, r6, [r5, #8]
	huart_MD.Init.Mode = UART_MODE_TX_RX;
 8001d16:	e9c5 6704 	strd	r6, r7, [r5, #16]
	huart_MD.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d1a:	e9c5 6606 	strd	r6, r6, [r5, #24]
	huart_MD.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001d1e:	e9c5 6608 	strd	r6, r6, [r5, #32]
	huart_MD.Init.BaudRate = 115200;
 8001d22:	e9c5 2300 	strd	r2, r3, [r5]
	if (HAL_UART_Init(&huart_MD) != HAL_OK)
 8001d26:	f004 fb11 	bl	800634c <HAL_UART_Init>
 8001d2a:	4601      	mov	r1, r0
 8001d2c:	b108      	cbz	r0, 8001d32 <main+0x392>
 8001d2e:	b672      	cpsid	i
 8001d30:	e7fe      	b.n	8001d30 <main+0x390>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart_MD, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d32:	4628      	mov	r0, r5
 8001d34:	f004 ff54 	bl	8006be0 <HAL_UARTEx_SetTxFifoThreshold>
 8001d38:	b108      	cbz	r0, 8001d3e <main+0x39e>
 8001d3a:	b672      	cpsid	i
 8001d3c:	e7fe      	b.n	8001d3c <main+0x39c>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart_MD, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001d3e:	2100      	movs	r1, #0
 8001d40:	4879      	ldr	r0, [pc, #484]	; (8001f28 <main+0x588>)
 8001d42:	f004 ff8b 	bl	8006c5c <HAL_UARTEx_SetRxFifoThreshold>
 8001d46:	b108      	cbz	r0, 8001d4c <main+0x3ac>
 8001d48:	b672      	cpsid	i
 8001d4a:	e7fe      	b.n	8001d4a <main+0x3aa>
	if (HAL_UARTEx_DisableFifoMode(&huart_MD) != HAL_OK)
 8001d4c:	4876      	ldr	r0, [pc, #472]	; (8001f28 <main+0x588>)
 8001d4e:	f004 ff29 	bl	8006ba4 <HAL_UARTEx_DisableFifoMode>
 8001d52:	4605      	mov	r5, r0
 8001d54:	b108      	cbz	r0, 8001d5a <main+0x3ba>
 8001d56:	b672      	cpsid	i
 8001d58:	e7fe      	b.n	8001d58 <main+0x3b8>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2104      	movs	r1, #4
 8001d5e:	2018      	movs	r0, #24
 8001d60:	f002 fe18 	bl	8004994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001d64:	2018      	movs	r0, #24
 8001d66:	f002 fe4b 	bl	8004a00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d6a:	462a      	mov	r2, r5
 8001d6c:	4629      	mov	r1, r5
 8001d6e:	2019      	movs	r0, #25
 8001d70:	f002 fe10 	bl	8004994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d74:	2019      	movs	r0, #25
 8001d76:	f002 fe43 	bl	8004a00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001d7a:	462a      	mov	r2, r5
 8001d7c:	2102      	movs	r1, #2
 8001d7e:	2012      	movs	r0, #18
 8001d80:	f002 fe08 	bl	8004994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d84:	2012      	movs	r0, #18
 8001d86:	f002 fe3b 	bl	8004a00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8001d8a:	462a      	mov	r2, r5
 8001d8c:	2103      	movs	r1, #3
 8001d8e:	201c      	movs	r0, #28
 8001d90:	f002 fe00 	bl	8004994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d94:	201c      	movs	r0, #28
 8001d96:	f002 fe33 	bl	8004a00 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001d9a:	462a      	mov	r2, r5
 8001d9c:	2103      	movs	r1, #3
 8001d9e:	2028      	movs	r0, #40	; 0x28
 8001da0:	f002 fdf8 	bl	8004994 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001da4:	2028      	movs	r0, #40	; 0x28
 8001da6:	f002 fe2b 	bl	8004a00 <HAL_NVIC_EnableIRQ>
  	uint8_t CmdBuf[256] = {0};
 8001daa:	4629      	mov	r1, r5
 8001dac:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001db0:	a80a      	add	r0, sp, #40	; 0x28
 8001db2:	f006 fe72 	bl	8008a9a <memset>
    uint8_t RspBuf[256] = {0};
 8001db6:	4629      	mov	r1, r5
 8001db8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dbc:	4620      	mov	r0, r4
 8001dbe:	f006 fe6c 	bl	8008a9a <memset>
    HAL_UART_Transmit(&huart_MD, (uint8_t *)"Welcome to TCM Motor Drive", 28, UART_TICK_TIMEOUT);
 8001dc2:	2364      	movs	r3, #100	; 0x64
 8001dc4:	221c      	movs	r2, #28
 8001dc6:	495a      	ldr	r1, [pc, #360]	; (8001f30 <main+0x590>)
 8001dc8:	4857      	ldr	r0, [pc, #348]	; (8001f28 <main+0x588>)
    uint32_t RspLen = 0;
 8001dca:	9507      	str	r5, [sp, #28]
    HAL_UART_Transmit(&huart_MD, (uint8_t *)"Welcome to TCM Motor Drive", 28, UART_TICK_TIMEOUT);
 8001dcc:	f004 fd80 	bl	80068d0 <HAL_UART_Transmit>
 8001dd0:	f8df 816c 	ldr.w	r8, [pc, #364]	; 8001f40 <main+0x5a0>
 8001dd4:	4f57      	ldr	r7, [pc, #348]	; (8001f34 <main+0x594>)
	  HAL_UART_Receive(&huart_MD, CmdBuf, 256, 100);
 8001dd6:	4d54      	ldr	r5, [pc, #336]	; (8001f28 <main+0x588>)
 8001dd8:	2364      	movs	r3, #100	; 0x64
 8001dda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001dde:	a90a      	add	r1, sp, #40	; 0x28
 8001de0:	4628      	mov	r0, r5
 8001de2:	f004 fde9 	bl	80069b8 <HAL_UART_Receive>
	  if(CmdBuf[0] != 0)
 8001de6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8001dea:	bb8b      	cbnz	r3, 8001e50 <main+0x4b0>
	  userButton = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001dec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001df0:	4851      	ldr	r0, [pc, #324]	; (8001f38 <main+0x598>)
 8001df2:	f002 ff13 	bl	8004c1c <HAL_GPIO_ReadPin>
	  if(userButton == GPIO_PIN_SET)
 8001df6:	2801      	cmp	r0, #1
 8001df8:	d037      	beq.n	8001e6a <main+0x4ca>
	  if((HAL_GetTick() - Motor_GetRunTick() > UART_TICK_TIMEOUT) && (pMCI[M1]->pPosCtrl->PositionCtrlStatus == TC_MOVEMENT_ON_GOING))
 8001dfa:	f001 fe49 	bl	8003a90 <HAL_GetTick>
 8001dfe:	4606      	mov	r6, r0
 8001e00:	f7ff fd6c 	bl	80018dc <Motor_GetRunTick>
 8001e04:	1a30      	subs	r0, r6, r0
 8001e06:	2864      	cmp	r0, #100	; 0x64
 8001e08:	d9e6      	bls.n	8001dd8 <main+0x438>
 8001e0a:	f8d8 3000 	ldr.w	r3, [r8]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d1df      	bne.n	8001dd8 <main+0x438>
		  Motor_SetRunTick(HAL_GetTick());
 8001e18:	f001 fe3a 	bl	8003a90 <HAL_GetTick>
 8001e1c:	f7ff fd64 	bl	80018e8 <Motor_SetRunTick>
		  mm_min_send = (((float)(SpeednTorqCtrlM1.SPD->hAvrMecSpeedUnit))/6.0)*5.08;
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8001e26:	ee07 0a90 	vmov	s15, r0
 8001e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2e:	ee17 0a90 	vmov	r0, s15
 8001e32:	f7fe fbb1 	bl	8000598 <__aeabi_f2d>
 8001e36:	a336      	add	r3, pc, #216	; (adr r3, 8001f10 <main+0x570>)
 8001e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3c:	f7fe fc04 	bl	8000648 <__aeabi_dmul>
 8001e40:	f7fe feda 	bl	8000bf8 <__aeabi_d2f>
		  sendToPort(&huart_MD, mm_min_send);
 8001e44:	ee00 0a10 	vmov	s0, r0
 8001e48:	4628      	mov	r0, r5
 8001e4a:	f7ff fd53 	bl	80018f4 <sendToPort>
 8001e4e:	e7c3      	b.n	8001dd8 <main+0x438>
		  stdRet = Cmd_Process(CmdBuf, RspBuf, &RspLen);
 8001e50:	aa07      	add	r2, sp, #28
 8001e52:	4621      	mov	r1, r4
 8001e54:	a80a      	add	r0, sp, #40	; 0x28
 8001e56:	f7ff fa35 	bl	80012c4 <Cmd_Process>
		  CmdBuf[0] = 0;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
		  if(RET_OK != stdRet)
 8001e60:	2800      	cmp	r0, #0
 8001e62:	d0c3      	beq.n	8001dec <main+0x44c>
			  Send_ErrorMsg(stdRet);		// Change to Send_ErrorCode(stdRet) afterwords.
 8001e64:	f7ff fb8e 	bl	8001584 <Send_ErrorMsg>
 8001e68:	e7c0      	b.n	8001dec <main+0x44c>
		  prevDist = Motor_GetDistance();
 8001e6a:	f7ff fbb9 	bl	80015e0 <Motor_GetDistance>
 8001e6e:	eeb0 9a40 	vmov.f32	s18, s0
		  Motor_SetDistance(500);
 8001e72:	ed9f 0a32 	vldr	s0, [pc, #200]	; 8001f3c <main+0x59c>
			  userButton = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001e76:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8001f38 <main+0x598>
		  Motor_SetDistance(500);
 8001e7a:	f7ff fba9 	bl	80015d0 <Motor_SetDistance>
		  Motor_Run(false);
 8001e7e:	2000      	movs	r0, #0
 8001e80:	f7ff fc16 	bl	80016b0 <Motor_Run>
		  prev_time = HAL_GetTick();
 8001e84:	f001 fe04 	bl	8003a90 <HAL_GetTick>
 8001e88:	4681      	mov	r9, r0
			  userButton = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001e8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001e8e:	4650      	mov	r0, sl
 8001e90:	f002 fec4 	bl	8004c1c <HAL_GPIO_ReadPin>
			  if(userButton == GPIO_PIN_RESET)
 8001e94:	2800      	cmp	r0, #0
 8001e96:	d1f8      	bne.n	8001e8a <main+0x4ea>
 8001e98:	4606      	mov	r6, r0
				  pres_time = HAL_GetTick();
 8001e9a:	f001 fdf9 	bl	8003a90 <HAL_GetTick>
 8001e9e:	4682      	mov	sl, r0
				  jogDist = Motor_GetSpeed() * jogTime * ((Motor_GetDirection()) ? 1 : -1);
 8001ea0:	f7ff fbac 	bl	80015fc <Motor_GetSpeed>
				  jogTime = (pres_time - prev_time) / (1000.0 * 60.0);		// Minutes		// Should be done by calculating the mechanical angle later
 8001ea4:	ebaa 0009 	sub.w	r0, sl, r9
				  jogDist = Motor_GetSpeed() * jogTime * ((Motor_GetDirection()) ? 1 : -1);
 8001ea8:	eef0 8a40 	vmov.f32	s17, s0
				  jogTime = (pres_time - prev_time) / (1000.0 * 60.0);		// Minutes		// Should be done by calculating the mechanical angle later
 8001eac:	f7fe fb52 	bl	8000554 <__aeabi_ui2d>
 8001eb0:	a319      	add	r3, pc, #100	; (adr r3, 8001f18 <main+0x578>)
 8001eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb6:	f7fe fbc7 	bl	8000648 <__aeabi_dmul>
 8001eba:	f7fe fe9d 	bl	8000bf8 <__aeabi_d2f>
				  jogDist = Motor_GetSpeed() * jogTime * ((Motor_GetDirection()) ? 1 : -1);
 8001ebe:	ee07 0a90 	vmov	s15, r0
 8001ec2:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8001ec6:	f7ff fba5 	bl	8001614 <Motor_GetDirection>
 8001eca:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8001ece:	2800      	cmp	r0, #0
 8001ed0:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001ed4:	bf08      	it	eq
 8001ed6:	eeb0 8a67 	vmoveq.f32	s16, s15
				  Motor_SetZeroPos(Motor_GetZeroPos() - jogDist);
 8001eda:	f7ff fba9 	bl	8001630 <Motor_GetZeroPos>
 8001ede:	eea8 0ac8 	vfms.f32	s0, s17, s16
 8001ee2:	f7ff fb9d 	bl	8001620 <Motor_SetZeroPos>
				  HAL_Delay(500);
 8001ee6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001eea:	f001 fdd7 	bl	8003a9c <HAL_Delay>
				  Motor_Stop(false);
 8001eee:	4630      	mov	r0, r6
 8001ef0:	f7ff fbc6 	bl	8001680 <Motor_Stop>
				  Motor_ResetDriveParams();//MX_MotorControl_Init();
 8001ef4:	f7ff fbb4 	bl	8001660 <Motor_ResetDriveParams>
		  Motor_SetDistance(prevDist);
 8001ef8:	eeb0 0a49 	vmov.f32	s0, s18
 8001efc:	f7ff fb68 	bl	80015d0 <Motor_SetDistance>
		  HAL_Delay(500);
 8001f00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001f04:	f001 fdca 	bl	8003a9c <HAL_Delay>
		  Motor_Start();
 8001f08:	f7ff fbac 	bl	8001664 <Motor_Start>
 8001f0c:	e775      	b.n	8001dfa <main+0x45a>
 8001f0e:	bf00      	nop
 8001f10:	b17e4b18 	.word	0xb17e4b18
 8001f14:	3feb17e4 	.word	0x3feb17e4
 8001f18:	9cbd821e 	.word	0x9cbd821e
 8001f1c:	3ef179ec 	.word	0x3ef179ec
 8001f20:	20000780 	.word	0x20000780
 8001f24:	200007cc 	.word	0x200007cc
 8001f28:	20000658 	.word	0x20000658
 8001f2c:	40004400 	.word	0x40004400
 8001f30:	0800ac4c 	.word	0x0800ac4c
 8001f34:	20000250 	.word	0x20000250
 8001f38:	48000800 	.word	0x48000800
 8001f3c:	43fa0000 	.word	0x43fa0000
 8001f40:	2000084c 	.word	0x2000084c

08001f44 <Error_Handler>:
 8001f44:	b672      	cpsid	i
 8001f46:	e7fe      	b.n	8001f46 <Error_Handler+0x2>

08001f48 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8001f48:	4b01      	ldr	r3, [pc, #4]	; (8001f50 <MC_StartMotor1+0x8>)
 8001f4a:	6818      	ldr	r0, [r3, #0]
 8001f4c:	f000 b8b8 	b.w	80020c0 <MCI_StartMotor>
 8001f50:	2000084c 	.word	0x2000084c

08001f54 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8001f54:	4b01      	ldr	r3, [pc, #4]	; (8001f5c <MC_StopMotor1+0x8>)
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	f000 b8ca 	b.w	80020f0 <MCI_StopMotor>
 8001f5c:	2000084c 	.word	0x2000084c

08001f60 <MC_ProgramPositionCommandMotor1>:
  * @param  fDuration Duration of the movement expressed in seconds.
  *         It is possible to set 0 to perform an instantaneous angular change (follow mode).
  */
__weak void MC_ProgramPositionCommandMotor1(float_t fTargetPosition, float_t fDuration)
{
  MCI_ExecPositionCommand(pMCI[M1], fTargetPosition, fDuration);
 8001f60:	4b01      	ldr	r3, [pc, #4]	; (8001f68 <MC_ProgramPositionCommandMotor1+0x8>)
 8001f62:	6818      	ldr	r0, [r3, #0]
 8001f64:	f000 b820 	b.w	8001fa8 <MCI_ExecPositionCommand>
 8001f68:	2000084c 	.word	0x2000084c

08001f6c <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 8001f6c:	4b01      	ldr	r3, [pc, #4]	; (8001f74 <MC_GetSTMStateMotor1+0x8>)
 8001f6e:	6818      	ldr	r0, [r3, #0]
 8001f70:	f000 b89a 	b.w	80020a8 <MCI_GetSTMState>
 8001f74:	2000084c 	.word	0x2000084c

08001f78 <MC_GetAlignmentStatusMotor1>:
/**
 * @brief returns the alignment state of Motor 1.
 *   */
__weak AlignStatus_t MC_GetAlignmentStatusMotor1(void)
{
  return (MCI_GetAlignmentStatus(pMCI[M1]));
 8001f78:	4b01      	ldr	r3, [pc, #4]	; (8001f80 <MC_GetAlignmentStatusMotor1+0x8>)
 8001f7a:	6818      	ldr	r0, [r3, #0]
 8001f7c:	f000 b898 	b.w	80020b0 <MCI_GetAlignmentStatus>
 8001f80:	2000084c 	.word	0x2000084c

08001f84 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop

08001f88 <MC_APP_PostMediumFrequencyHook_M1>:
 8001f88:	4770      	bx	lr
 8001f8a:	bf00      	nop

08001f8c <MCI_ExecSpeedRamp>:
  * function.
  *
  * @sa MCI_ExecSpeedRamp
  */
__weak void MCI_ExecSpeedRamp(MCI_Handle_t *pHandle, int16_t hFinalSpeed, uint16_t hDurationms)
{
 8001f8c:	b410      	push	{r4}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001f8e:	2301      	movs	r3, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 8001f90:	2403      	movs	r4, #3
 8001f92:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
    pHandle->hFinalSpeed = hFinalSpeed;
 8001f96:	8241      	strh	r1, [r0, #18]
    pHandle->hDurationms = hDurationms;
 8001f98:	8402      	strh	r2, [r0, #32]
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001f9a:	7403      	strb	r3, [r0, #16]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001f9c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop

08001fa8 <MCI_ExecPositionCommand>:
  *
  * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
  * function.
  */
__weak void MCI_ExecPositionCommand(MCI_Handle_t *pHandle, float_t FinalPosition, float_t Duration)
{
 8001fa8:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    pHandle->pFOCVars->bDriveInput = INTERNAL;
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001faa:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8001fae:	ed2d 8b02 	vpush	{d8}
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001fb2:	2100      	movs	r1, #0
{
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	4604      	mov	r4, r0
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001fb8:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001fbc:	6958      	ldr	r0, [r3, #20]
{
 8001fbe:	eeb0 8a60 	vmov.f32	s16, s1
 8001fc2:	eef0 8a40 	vmov.f32	s17, s0
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001fc6:	f006 f9d5 	bl	8008374 <SPD_GetMecAngle>
    if (Duration > 0)
 8001fca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001fce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001fd2:	9001      	str	r0, [sp, #4]
    if (Duration > 0)
 8001fd4:	dd15      	ble.n	8002002 <MCI_ExecPositionCommand+0x5a>
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001fd6:	ee07 0a90 	vmov	s15, r0
 8001fda:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8002010 <MCI_ExecPositionCommand+0x68>
    {
      TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition/* - currentPositionRad*/, Duration);
 8001fde:	68e0      	ldr	r0, [r4, #12]
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001fe0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition/* - currentPositionRad*/, Duration);
 8001fe4:	eeb0 1a48 	vmov.f32	s2, s16
 8001fe8:	eef0 0a68 	vmov.f32	s1, s17
 8001fec:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001ff0:	f006 fac6 	bl	8008580 <TC_MoveCommand>
    else
    {
      TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
    }

    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8001ff4:	2304      	movs	r3, #4
 8001ff6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001ffa:	b002      	add	sp, #8
 8001ffc:	ecbd 8b02 	vpop	{d8}
 8002000:	bd10      	pop	{r4, pc}
      TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
 8002002:	eeb0 0a68 	vmov.f32	s0, s17
 8002006:	68e0      	ldr	r0, [r4, #12]
 8002008:	f006 fb18 	bl	800863c <TC_FollowCommand>
 800200c:	e7f2      	b.n	8001ff4 <MCI_ExecPositionCommand+0x4c>
 800200e:	bf00      	nop
 8002010:	38c90fdb 	.word	0x38c90fdb

08002014 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8002014:	8c83      	ldrh	r3, [r0, #36]	; 0x24
{
 8002016:	b410      	push	{r4}
    pHandle->PastFaults |= hSetErrors;
 8002018:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 800201a:	430b      	orrs	r3, r1
 800201c:	ea23 0202 	bic.w	r2, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8002020:	4321      	orrs	r1, r4
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8002022:	8482      	strh	r2, [r0, #36]	; 0x24
    pHandle->PastFaults |= hSetErrors;
 8002024:	84c1      	strh	r1, [r0, #38]	; 0x26
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002026:	f85d 4b04 	ldr.w	r4, [sp], #4
 800202a:	4770      	bx	lr

0800202c <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 800202c:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8002030:	2b01      	cmp	r3, #1
 8002032:	d000      	beq.n	8002036 <MCI_ExecBufferedCommands+0xa>
 8002034:	4770      	bx	lr
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8002036:	7c02      	ldrb	r2, [r0, #16]
 8002038:	2a02      	cmp	r2, #2
{
 800203a:	b510      	push	{r4, lr}
 800203c:	4604      	mov	r4, r0
      switch (pHandle->lastCommand)
 800203e:	d022      	beq.n	8002086 <MCI_ExecBufferedCommands+0x5a>
 8002040:	2a03      	cmp	r2, #3
 8002042:	d005      	beq.n	8002050 <MCI_ExecBufferedCommands+0x24>
 8002044:	2a01      	cmp	r2, #1
 8002046:	d00d      	beq.n	8002064 <MCI_ExecBufferedCommands+0x38>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8002048:	2303      	movs	r3, #3
 800204a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800204e:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8002050:	6842      	ldr	r2, [r0, #4]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8002052:	f8d0 1016 	ldr.w	r1, [r0, #22]
 8002056:	6111      	str	r1, [r2, #16]
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8002058:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 800205c:	2302      	movs	r3, #2
 800205e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8002062:	bd10      	pop	{r4, pc}
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8002064:	e9d0 0300 	ldrd	r0, r3, [r0]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002068:	2200      	movs	r2, #0
 800206a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 800206e:	2103      	movs	r1, #3
 8002070:	f006 f9d4 	bl	800841c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8002074:	8c22      	ldrh	r2, [r4, #32]
 8002076:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800207a:	6820      	ldr	r0, [r4, #0]
 800207c:	f006 f9d2 	bl	8008424 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8002080:	2800      	cmp	r0, #0
 8002082:	d0e1      	beq.n	8002048 <MCI_ExecBufferedCommands+0x1c>
 8002084:	e7ea      	b.n	800205c <MCI_ExecBufferedCommands+0x30>
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8002086:	e9d0 0300 	ldrd	r0, r3, [r0]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800208a:	2200      	movs	r2, #0
 800208c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8002090:	2104      	movs	r1, #4
 8002092:	f006 f9c3 	bl	800841c <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8002096:	8c22      	ldrh	r2, [r4, #32]
 8002098:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 800209c:	6820      	ldr	r0, [r4, #0]
 800209e:	f006 f9c1 	bl	8008424 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 80020a2:	2800      	cmp	r0, #0
 80020a4:	d0d0      	beq.n	8002048 <MCI_ExecBufferedCommands+0x1c>
 80020a6:	e7d9      	b.n	800205c <MCI_ExecBufferedCommands+0x30>

080020a8 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 80020a8:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop

080020b0 <MCI_GetAlignmentStatus>:
__weak AlignStatus_t MCI_GetAlignmentStatus(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? TC_ALIGNMENT_ERROR : TC_GetAlignmentStatus(pHandle->pPosCtrl));
#else
  return ((TC_GetAlignmentStatus(pHandle->pPosCtrl)));
 80020b0:	68c0      	ldr	r0, [r0, #12]
 80020b2:	f006 bc63 	b.w	800897c <TC_GetAlignmentStatus>
 80020b6:	bf00      	nop

080020b8 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 80020b8:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 80020ba:	4770      	bx	lr

080020bc <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 80020bc:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 80020be:	4770      	bx	lr

080020c0 <MCI_StartMotor>:
{
 80020c0:	b510      	push	{r4, lr}
 80020c2:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80020c4:	f7ff fff0 	bl	80020a8 <MCI_GetSTMState>
 80020c8:	b108      	cbz	r0, 80020ce <MCI_StartMotor+0xe>
  bool retVal = false;
 80020ca:	2000      	movs	r0, #0
}
 80020cc:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80020ce:	4620      	mov	r0, r4
 80020d0:	f7ff fff2 	bl	80020b8 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80020d4:	2800      	cmp	r0, #0
 80020d6:	d1f8      	bne.n	80020ca <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80020d8:	4620      	mov	r0, r4
 80020da:	f7ff ffef 	bl	80020bc <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80020de:	2800      	cmp	r0, #0
 80020e0:	d1f3      	bne.n	80020ca <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 80020e2:	2001      	movs	r0, #1
 80020e4:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80020e8:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 80020ec:	bd10      	pop	{r4, pc}
 80020ee:	bf00      	nop

080020f0 <MCI_StopMotor>:
{
 80020f0:	b538      	push	{r3, r4, r5, lr}
 80020f2:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 80020f4:	f7ff ffd8 	bl	80020a8 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 80020f8:	b150      	cbz	r0, 8002110 <MCI_StopMotor+0x20>
 80020fa:	f1b0 040c 	subs.w	r4, r0, #12
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80020fe:	4628      	mov	r0, r5
    if ((IDLE == State) || (ICLWAIT == State))
 8002100:	bf18      	it	ne
 8002102:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002104:	f7ff ffd8 	bl	80020b8 <MCI_GetOccurredFaults>
 8002108:	b140      	cbz	r0, 800211c <MCI_StopMotor+0x2c>
  bool retVal = false;
 800210a:	2400      	movs	r4, #0
}
 800210c:	4620      	mov	r0, r4
 800210e:	bd38      	pop	{r3, r4, r5, pc}
      status = false;
 8002110:	4604      	mov	r4, r0
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002112:	4628      	mov	r0, r5
 8002114:	f7ff ffd0 	bl	80020b8 <MCI_GetOccurredFaults>
 8002118:	2800      	cmp	r0, #0
 800211a:	d1f6      	bne.n	800210a <MCI_StopMotor+0x1a>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800211c:	4628      	mov	r0, r5
 800211e:	f7ff ffcd 	bl	80020bc <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002122:	2800      	cmp	r0, #0
 8002124:	d1f1      	bne.n	800210a <MCI_StopMotor+0x1a>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8002126:	2c00      	cmp	r4, #0
 8002128:	d0ef      	beq.n	800210a <MCI_StopMotor+0x1a>
      pHandle->DirectCommand = MCI_STOP;
 800212a:	2305      	movs	r3, #5
 800212c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
}
 8002130:	4620      	mov	r0, r4
 8002132:	bd38      	pop	{r3, r4, r5, pc}

08002134 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8002134:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8002136:	8c80      	ldrh	r0, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8002138:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop

08002140 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8002140:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8002144:	b202      	sxth	r2, r0
 8002146:	f3c0 430f 	ubfx	r3, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 800214a:	fb12 f001 	smulbb	r0, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800214e:	fb13 f301 	smulbb	r3, r3, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8002152:	4240      	negs	r0, r0
 8002154:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8002158:	13c0      	asrs	r0, r0, #15
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 800215a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
{
 800215e:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 8002160:	da04      	bge.n	800216c <MCM_Clarke+0x2c>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8002162:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8002166:	da0c      	bge.n	8002182 <MCM_Clarke+0x42>

  Output.beta = hbeta_tmp;

  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <MCM_Clarke+0x48>)
 800216a:	e001      	b.n	8002170 <MCM_Clarke+0x30>
    hbeta_tmp = INT16_MAX;
 800216c:	f647 73ff 	movw	r3, #32767	; 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 8002170:	b292      	uxth	r2, r2
 8002172:	2000      	movs	r0, #0
 8002174:	b29b      	uxth	r3, r3
 8002176:	f362 000f 	bfi	r0, r2, #0, #16
 800217a:	f363 401f 	bfi	r0, r3, #16, #16
}
 800217e:	b004      	add	sp, #16
 8002180:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8002182:	b203      	sxth	r3, r0
  if (((int16_t )-32768) == Output.beta)
 8002184:	d1f4      	bne.n	8002170 <MCM_Clarke+0x30>
 8002186:	e7ef      	b.n	8002168 <MCM_Clarke+0x28>
 8002188:	ffff8001 	.word	0xffff8001

0800218c <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A�Conversion�should�not�be�performed�between�a�
   * pointer�to�object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <MCM_Trig_Functions+0x28>)
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed�between�a
   * pointer�to�object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 800218e:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 8002192:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8002196:	f04f 1260 	mov.w	r2, #6291552	; 0x600060
 800219a:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 800219c:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 800219e:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed between�a
   * pointer�to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
 80021a0:	2000      	movs	r0, #0
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	f362 000f 	bfi	r0, r2, #0, #16
 80021a8:	0c1b      	lsrs	r3, r3, #16
{
 80021aa:	b082      	sub	sp, #8
  return (CosSin.Components); //cstat !UNION-type-punning
 80021ac:	f363 401f 	bfi	r0, r3, #16, #16
}
 80021b0:	b002      	add	sp, #8
 80021b2:	4770      	bx	lr
 80021b4:	40020c00 	.word	0x40020c00

080021b8 <MCM_Park>:
{
 80021b8:	b530      	push	{r4, r5, lr}
 80021ba:	b085      	sub	sp, #20
 80021bc:	b204      	sxth	r4, r0
 80021be:	9001      	str	r0, [sp, #4]
 80021c0:	1405      	asrs	r5, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80021c2:	4608      	mov	r0, r1
 80021c4:	f7ff ffe2 	bl	800218c <MCM_Trig_Functions>
 80021c8:	b201      	sxth	r1, r0
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 80021ca:	fb04 f301 	mul.w	r3, r4, r1
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80021ce:	1400      	asrs	r0, r0, #16
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80021d0:	fb05 3310 	mls	r3, r5, r0, r3
 80021d4:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 80021d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80021da:	da04      	bge.n	80021e6 <MCM_Park+0x2e>
  else if (wqd_tmp < (-32768))
 80021dc:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80021e0:	da1e      	bge.n	8002220 <MCM_Park+0x68>
    Output.q = -32767;
 80021e2:	4a11      	ldr	r2, [pc, #68]	; (8002228 <MCM_Park+0x70>)
 80021e4:	e001      	b.n	80021ea <MCM_Park+0x32>
    hqd_tmp = INT16_MAX;
 80021e6:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80021ea:	fb01 f105 	mul.w	r1, r1, r5
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80021ee:	fb04 1000 	mla	r0, r4, r0, r1
 80021f2:	13c0      	asrs	r0, r0, #15
  if (wqd_tmp > INT16_MAX)
 80021f4:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80021f8:	da04      	bge.n	8002204 <MCM_Park+0x4c>
  else if (wqd_tmp < (-32768))
 80021fa:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80021fe:	da0c      	bge.n	800221a <MCM_Park+0x62>
    Output.d = -32767;
 8002200:	4b09      	ldr	r3, [pc, #36]	; (8002228 <MCM_Park+0x70>)
 8002202:	e001      	b.n	8002208 <MCM_Park+0x50>
    hqd_tmp = INT16_MAX;
 8002204:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 8002208:	b292      	uxth	r2, r2
 800220a:	2000      	movs	r0, #0
 800220c:	b29b      	uxth	r3, r3
 800220e:	f362 000f 	bfi	r0, r2, #0, #16
 8002212:	f363 401f 	bfi	r0, r3, #16, #16
}
 8002216:	b005      	add	sp, #20
 8002218:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 800221a:	b203      	sxth	r3, r0
  if (((int16_t)-32768) == Output.d)
 800221c:	d1f4      	bne.n	8002208 <MCM_Park+0x50>
 800221e:	e7ef      	b.n	8002200 <MCM_Park+0x48>
    hqd_tmp = ((int16_t)wqd_tmp);
 8002220:	b21a      	sxth	r2, r3
  if (((int16_t)-32768) == Output.q)
 8002222:	d1e2      	bne.n	80021ea <MCM_Park+0x32>
 8002224:	e7dd      	b.n	80021e2 <MCM_Park+0x2a>
 8002226:	bf00      	nop
 8002228:	ffff8001 	.word	0xffff8001

0800222c <MCM_Rev_Park>:
{
 800222c:	b530      	push	{r4, r5, lr}
 800222e:	b085      	sub	sp, #20
 8002230:	b204      	sxth	r4, r0
 8002232:	1405      	asrs	r5, r0, #16
 8002234:	9001      	str	r0, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8002236:	4608      	mov	r0, r1
 8002238:	f7ff ffa8 	bl	800218c <MCM_Trig_Functions>
 800223c:	1403      	asrs	r3, r0, #16
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 800223e:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8002242:	b200      	sxth	r0, r0
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8002244:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8002248:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 800224c:	fb04 0313 	mls	r3, r4, r3, r0
  return (Output);
 8002250:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 8002254:	2000      	movs	r0, #0
 8002256:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800225a:	f362 000f 	bfi	r0, r2, #0, #16
 800225e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8002262:	b005      	add	sp, #20
 8002264:	bd30      	pop	{r4, r5, pc}
 8002266:	bf00      	nop

08002268 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8002268:	2800      	cmp	r0, #0
 800226a:	dd09      	ble.n	8002280 <MCM_Sqrt+0x18>
 800226c:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* Disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 800226e:	4b05      	ldr	r3, [pc, #20]	; (8002284 <MCM_Sqrt+0x1c>)
 8002270:	f240 1269 	movw	r2, #361	; 0x169
 8002274:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8002276:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8002278:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800227a:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 800227c:	b662      	cpsie	i
 800227e:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8002280:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8002282:	4770      	bx	lr
 8002284:	40020c00 	.word	0x40020c00

08002288 <MCboot>:
{
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 8002288:	b1f8      	cbz	r0, 80022ca <MCboot+0x42>
{
 800228a:	b538      	push	{r3, r4, r5, lr}
    /* Nothing to do */
  }
  else
  {

    bMCBootCompleted = (uint8_t )0;
 800228c:	4d0f      	ldr	r5, [pc, #60]	; (80022cc <MCboot+0x44>)
 800228e:	2300      	movs	r3, #0
 8002290:	702b      	strb	r3, [r5, #0]
 8002292:	4604      	mov	r4, r0

    /*************************************************/
    /*    FOC initialization         */
    /*************************************************/
    FOC_Init();
 8002294:	f000 f9be 	bl	8002614 <FOC_Init>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002298:	480d      	ldr	r0, [pc, #52]	; (80022d0 <MCboot+0x48>)
 800229a:	f004 ff45 	bl	8007128 <PID_HandleInit>

    /****************************************************/
    /*   Virtual speed sensor component initialization  */
    /****************************************************/
    VSS_Init(&VirtualSpeedSensorM1);
 800229e:	480d      	ldr	r0, [pc, #52]	; (80022d4 <MCboot+0x4c>)
 80022a0:	f006 fb88 	bl	80089b4 <VSS_Init>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 80022a4:	480c      	ldr	r0, [pc, #48]	; (80022d8 <MCboot+0x50>)
 80022a6:	f000 fe73 	bl	8002f90 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 80022aa:	480c      	ldr	r0, [pc, #48]	; (80022dc <MCboot+0x54>)
 80022ac:	f005 fffa 	bl	80082a4 <RVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 80022b0:	480b      	ldr	r0, [pc, #44]	; (80022e0 <MCboot+0x58>)
 80022b2:	f000 fe6d 	bl	8002f90 <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 80022b6:	480b      	ldr	r0, [pc, #44]	; (80022e4 <MCboot+0x5c>)
 80022b8:	f004 ff0c 	bl	80070d4 <NTC_Init>

    pMCIList[M1] = &Mci[M1];
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <MCboot+0x60>)
 80022be:	6023      	str	r3, [r4, #0]

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 80022c0:	f7ff fe60 	bl	8001f84 <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 80022c4:	2301      	movs	r3, #1
 80022c6:	702b      	strb	r3, [r5, #0]
  }
}
 80022c8:	bd38      	pop	{r3, r4, r5, pc}
 80022ca:	4770      	bx	lr
 80022cc:	200005dc 	.word	0x200005dc
 80022d0:	200000bc 	.word	0x200000bc
 80022d4:	2000038c 	.word	0x2000038c
 80022d8:	2000037c 	.word	0x2000037c
 80022dc:	20000298 	.word	0x20000298
 80022e0:	20000350 	.word	0x20000350
 80022e4:	20000360 	.word	0x20000360
 80022e8:	20000038 	.word	0x20000038

080022ec <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80022ec:	4b01      	ldr	r3, [pc, #4]	; (80022f4 <TSK_SetChargeBootCapDelayM1+0x8>)
 80022ee:	8018      	strh	r0, [r3, #0]
}
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	200005de 	.word	0x200005de

080022f8 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 80022fa:	8818      	ldrh	r0, [r3, #0]
 80022fc:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80022fe:	fab0 f080 	clz	r0, r0
 8002302:	0940      	lsrs	r0, r0, #5
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	200005de 	.word	0x200005de

0800230c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 800230c:	4b01      	ldr	r3, [pc, #4]	; (8002314 <TSK_SetStopPermanencyTimeM1+0x8>)
 800230e:	8018      	strh	r0, [r3, #0]
}
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	200005e2 	.word	0x200005e2

08002318 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8002318:	4b03      	ldr	r3, [pc, #12]	; (8002328 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800231a:	8818      	ldrh	r0, [r3, #0]
 800231c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800231e:	fab0 f080 	clz	r0, r0
 8002322:	0940      	lsrs	r0, r0, #5
 8002324:	4770      	bx	lr
 8002326:	bf00      	nop
 8002328:	200005e2 	.word	0x200005e2

0800232c <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 800232c:	b508      	push	{r3, lr}
  uint8_t bMotorNbr;
  bMotorNbr = 0;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  FOC_HighFrequencyTask(bMotorNbr);
 800232e:	2000      	movs	r0, #0
 8002330:	f000 fb82 	bl	8002a38 <FOC_HighFrequencyTask>

  /* USER CODE END HighFrequencyTask 1 */

  return (bMotorNbr);

}
 8002334:	2000      	movs	r0, #0
 8002336:	bd08      	pop	{r3, pc}

08002338 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002338:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 800233a:	4604      	mov	r4, r0
 800233c:	b320      	cbz	r0, 8002388 <TSK_SafetyTask_PWMOFF+0x50>
  {
    /* Nothing to do */
  }

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 800233e:	4e20      	ldr	r6, [pc, #128]	; (80023c0 <TSK_SafetyTask_PWMOFF+0x88>)
 8002340:	6830      	ldr	r0, [r6, #0]
 8002342:	f000 fe09 	bl	8002f58 <PWMC_IsFaultOccurred>
 8002346:	4601      	mov	r1, r0
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8002348:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800234c:	4d1d      	ldr	r5, [pc, #116]	; (80023c4 <TSK_SafetyTask_PWMOFF+0x8c>)
 800234e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8002352:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8002356:	43ca      	mvns	r2, r1
 8002358:	4628      	mov	r0, r5
 800235a:	b292      	uxth	r2, r2
 800235c:	f7ff fe5a 	bl	8002014 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8002360:	4628      	mov	r0, r5
 8002362:	f7ff fee7 	bl	8002134 <MCI_GetFaultState>
 8002366:	b170      	cbz	r0, 8002386 <TSK_SafetyTask_PWMOFF+0x4e>
  {
    /* Reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 8002368:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <TSK_SafetyTask_PWMOFF+0x90>)
 800236a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800236e:	b10b      	cbz	r3, 8002374 <TSK_SafetyTask_PWMOFF+0x3c>
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 8002370:	2200      	movs	r2, #0
 8002372:	73da      	strb	r2, [r3, #15]
    }
    else
    {
      /* Nothing to do */
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002374:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002378:	f000 fd96 	bl	8002ea8 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 800237c:	4620      	mov	r0, r4
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800237e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    FOC_Clear(bMotor);
 8002382:	f000 b909 	b.w	8002598 <FOC_Clear>
}
 8002386:	bd70      	pop	{r4, r5, r6, pc}
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8002388:	4810      	ldr	r0, [pc, #64]	; (80023cc <TSK_SafetyTask_PWMOFF+0x94>)
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 800238a:	4e0d      	ldr	r6, [pc, #52]	; (80023c0 <TSK_SafetyTask_PWMOFF+0x88>)
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 800238c:	f000 fed8 	bl	8003140 <RCM_ExecRegularConv>
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8002390:	4601      	mov	r1, r0
 8002392:	480f      	ldr	r0, [pc, #60]	; (80023d0 <TSK_SafetyTask_PWMOFF+0x98>)
 8002394:	f004 feb0 	bl	80070f8 <NTC_CalcAvTemp>
 8002398:	4605      	mov	r5, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 800239a:	6830      	ldr	r0, [r6, #0]
 800239c:	f000 fddc 	bl	8002f58 <PWMC_IsFaultOccurred>
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 80023a0:	f005 050e 	and.w	r5, r5, #14
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80023a4:	4305      	orrs	r5, r0
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 80023a6:	480b      	ldr	r0, [pc, #44]	; (80023d4 <TSK_SafetyTask_PWMOFF+0x9c>)
 80023a8:	f000 feca 	bl	8003140 <RCM_ExecRegularConv>
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 80023ac:	4601      	mov	r1, r0
 80023ae:	480a      	ldr	r0, [pc, #40]	; (80023d8 <TSK_SafetyTask_PWMOFF+0xa0>)
 80023b0:	f005 ffac 	bl	800830c <RVBS_CalcAvVbus>
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80023b4:	b2ad      	uxth	r5, r5
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 80023b6:	f000 010e 	and.w	r1, r0, #14
 80023ba:	4329      	orrs	r1, r5
 80023bc:	e7c4      	b.n	8002348 <TSK_SafetyTask_PWMOFF+0x10>
 80023be:	bf00      	nop
 80023c0:	20000844 	.word	0x20000844
 80023c4:	20000038 	.word	0x20000038
 80023c8:	20000848 	.word	0x20000848
 80023cc:	20000350 	.word	0x20000350
 80023d0:	20000360 	.word	0x20000360
 80023d4:	2000037c 	.word	0x2000037c
 80023d8:	20000298 	.word	0x20000298

080023dc <TSK_SafetyTask>:
{
 80023dc:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 80023de:	4b06      	ldr	r3, [pc, #24]	; (80023f8 <TSK_SafetyTask+0x1c>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d000      	beq.n	80023e8 <TSK_SafetyTask+0xc>
}
 80023e6:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7ff ffa5 	bl	8002338 <TSK_SafetyTask_PWMOFF>
}
 80023ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 80023f2:	f000 bf67 	b.w	80032c4 <RCM_ExecUserConv>
 80023f6:	bf00      	nop
 80023f8:	200005dc 	.word	0x200005dc

080023fc <MC_RunMotorControlTasks>:
{
 80023fc:	b538      	push	{r3, r4, r5, lr}
  if (0U == bMCBootCompleted)
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <MC_RunMotorControlTasks+0x44>)
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	b1b3      	cbz	r3, 8002432 <MC_RunMotorControlTasks+0x36>
    if(hMFTaskCounterM1 > 0u)
 8002404:	4d0f      	ldr	r5, [pc, #60]	; (8002444 <MC_RunMotorControlTasks+0x48>)
 8002406:	882c      	ldrh	r4, [r5, #0]
 8002408:	b1a4      	cbz	r4, 8002434 <MC_RunMotorControlTasks+0x38>
      hMFTaskCounterM1--;
 800240a:	3c01      	subs	r4, #1
 800240c:	802c      	strh	r4, [r5, #0]
    if(hBootCapDelayCounterM1 > 0U)
 800240e:	4a0e      	ldr	r2, [pc, #56]	; (8002448 <MC_RunMotorControlTasks+0x4c>)
 8002410:	8813      	ldrh	r3, [r2, #0]
 8002412:	b29b      	uxth	r3, r3
 8002414:	b11b      	cbz	r3, 800241e <MC_RunMotorControlTasks+0x22>
      hBootCapDelayCounterM1--;
 8002416:	8813      	ldrh	r3, [r2, #0]
 8002418:	3b01      	subs	r3, #1
 800241a:	b29b      	uxth	r3, r3
 800241c:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 800241e:	4a0b      	ldr	r2, [pc, #44]	; (800244c <MC_RunMotorControlTasks+0x50>)
 8002420:	8813      	ldrh	r3, [r2, #0]
 8002422:	b29b      	uxth	r3, r3
 8002424:	b11b      	cbz	r3, 800242e <MC_RunMotorControlTasks+0x32>
      hStopPermanencyCounterM1--;
 8002426:	8813      	ldrh	r3, [r2, #0]
 8002428:	3b01      	subs	r3, #1
 800242a:	b29b      	uxth	r3, r3
 800242c:	8013      	strh	r3, [r2, #0]
    TSK_SafetyTask();
 800242e:	f7ff ffd5 	bl	80023dc <TSK_SafetyTask>
}
 8002432:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8002434:	f000 f99a 	bl	800276c <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8002438:	f7ff fda6 	bl	8001f88 <MC_APP_PostMediumFrequencyHook_M1>
      hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 800243c:	802c      	strh	r4, [r5, #0]
 800243e:	e7e6      	b.n	800240e <MC_RunMotorControlTasks+0x12>
 8002440:	200005dc 	.word	0x200005dc
 8002444:	200005e0 	.word	0x200005e0
 8002448:	200005de 	.word	0x200005de
 800244c:	200005e2 	.word	0x200005e2

08002450 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002450:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   FOC_Clear(M1);
 8002452:	2000      	movs	r0, #0
 8002454:	f000 f8a0 	bl	8002598 <FOC_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8002458:	2200      	movs	r2, #0
 800245a:	2180      	movs	r1, #128	; 0x80
 800245c:	4802      	ldr	r0, [pc, #8]	; (8002468 <TSK_HardwareFaultTask+0x18>)

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 800245e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8002462:	f7ff bdd7 	b.w	8002014 <MCI_FaultProcessing>
 8002466:	bf00      	nop
 8002468:	20000038 	.word	0x20000038

0800246c <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 800246c:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 800246e:	f7ff fd7d 	bl	8001f6c <MC_GetSTMStateMotor1>
 8002472:	b118      	cbz	r0, 800247c <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002474:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8002478:	f7ff bd6c 	b.w	8001f54 <MC_StopMotor1>
}
 800247c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8002480:	f7ff bd62 	b.w	8001f48 <MC_StartMotor1>

08002484 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8002484:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002486:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800248a:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 800248e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002492:	61da      	str	r2, [r3, #28]
 8002494:	b08e      	sub	sp, #56	; 0x38
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002496:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002498:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 800249a:	69d9      	ldr	r1, [r3, #28]
 800249c:	910d      	str	r1, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800249e:	4a36      	ldr	r2, [pc, #216]	; (8002578 <mc_lock_pins+0xf4>)
  (void) temp;
 80024a0:	980d      	ldr	r0, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024a2:	4936      	ldr	r1, [pc, #216]	; (800257c <mc_lock_pins+0xf8>)
 80024a4:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024a6:	2008      	movs	r0, #8
 80024a8:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024aa:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024ac:	69d1      	ldr	r1, [r2, #28]
 80024ae:	910c      	str	r1, [sp, #48]	; 0x30
  (void) temp;
 80024b0:	980c      	ldr	r0, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024b2:	4933      	ldr	r1, [pc, #204]	; (8002580 <mc_lock_pins+0xfc>)
 80024b4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024b6:	f44f 7080 	mov.w	r0, #256	; 0x100
 80024ba:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024bc:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024be:	69d9      	ldr	r1, [r3, #28]
 80024c0:	910b      	str	r1, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024c2:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024c6:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  (void) temp;
 80024ca:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024cc:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024ce:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024d0:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024d2:	69d9      	ldr	r1, [r3, #28]
 80024d4:	910a      	str	r1, [sp, #40]	; 0x28
  (void) temp;
 80024d6:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024d8:	492a      	ldr	r1, [pc, #168]	; (8002584 <mc_lock_pins+0x100>)
 80024da:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024dc:	2040      	movs	r0, #64	; 0x40
 80024de:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024e0:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024e2:	69d9      	ldr	r1, [r3, #28]
 80024e4:	9109      	str	r1, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024e6:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  (void) temp;
 80024ec:	9809      	ldr	r0, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024ee:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024f0:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024f2:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80024f4:	69d0      	ldr	r0, [r2, #28]
 80024f6:	9008      	str	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80024f8:	f44f 6580 	mov.w	r5, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80024fc:	f44f 3082 	mov.w	r0, #66560	; 0x10400
  (void) temp;
 8002500:	9e08      	ldr	r6, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002502:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002504:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002506:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002508:	69d8      	ldr	r0, [r3, #28]
 800250a:	9007      	str	r0, [sp, #28]
  (void) temp;
 800250c:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800250e:	481e      	ldr	r0, [pc, #120]	; (8002588 <mc_lock_pins+0x104>)
 8002510:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002512:	2502      	movs	r5, #2
 8002514:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002516:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002518:	69d2      	ldr	r2, [r2, #28]
 800251a:	9206      	str	r2, [sp, #24]
  (void) temp;
 800251c:	9e06      	ldr	r6, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800251e:	4a1b      	ldr	r2, [pc, #108]	; (800258c <mc_lock_pins+0x108>)
 8002520:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002522:	2680      	movs	r6, #128	; 0x80
 8002524:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002526:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002528:	69de      	ldr	r6, [r3, #28]
 800252a:	9605      	str	r6, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800252c:	4a18      	ldr	r2, [pc, #96]	; (8002590 <mc_lock_pins+0x10c>)
  (void) temp;
 800252e:	9f05      	ldr	r7, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002530:	4e18      	ldr	r6, [pc, #96]	; (8002594 <mc_lock_pins+0x110>)
 8002532:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002534:	2704      	movs	r7, #4
 8002536:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002538:	61d6      	str	r6, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800253a:	69d6      	ldr	r6, [r2, #28]
 800253c:	9604      	str	r6, [sp, #16]
  (void) temp;
 800253e:	9e04      	ldr	r6, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002540:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002542:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002544:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002546:	69d6      	ldr	r6, [r2, #28]
 8002548:	9603      	str	r6, [sp, #12]
  (void) temp;
 800254a:	9e03      	ldr	r6, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800254c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800254e:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002550:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002552:	69d2      	ldr	r2, [r2, #28]
 8002554:	9202      	str	r2, [sp, #8]
  (void) temp;
 8002556:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002558:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800255a:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800255c:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800255e:	69da      	ldr	r2, [r3, #28]
 8002560:	9201      	str	r2, [sp, #4]
  (void) temp;
 8002562:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002564:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002566:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002568:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800256a:	69db      	ldr	r3, [r3, #28]
 800256c:	9300      	str	r3, [sp, #0]
  (void) temp;
 800256e:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
}
 8002570:	b00e      	add	sp, #56	; 0x38
 8002572:	bcf0      	pop	{r4, r5, r6, r7}
 8002574:	4770      	bx	lr
 8002576:	bf00      	nop
 8002578:	48000400 	.word	0x48000400
 800257c:	00010008 	.word	0x00010008
 8002580:	00010100 	.word	0x00010100
 8002584:	00010040 	.word	0x00010040
 8002588:	00010002 	.word	0x00010002
 800258c:	00010080 	.word	0x00010080
 8002590:	48000800 	.word	0x48000800
 8002594:	00010004 	.word	0x00010004

08002598 <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8002598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800259a:	eb00 03c0 	add.w	r3, r0, r0, lsl #3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 800259e:	4a18      	ldr	r2, [pc, #96]	; (8002600 <FOC_Clear+0x68>)
 80025a0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80025a4:	005b      	lsls	r3, r3, #1
 80025a6:	2400      	movs	r4, #0
 80025a8:	189f      	adds	r7, r3, r2
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  FOCVars[bMotor].Iqd = NULL_qd;
 80025aa:	f103 060c 	add.w	r6, r3, #12
  FOCVars[bMotor].Iab = NULL_ab;
 80025ae:	509c      	str	r4, [r3, r2]
{
 80025b0:	4605      	mov	r5, r0
    FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
 80025b2:	f103 0116 	add.w	r1, r3, #22
  FOCVars[bMotor].hTeref = (int16_t)0;
 80025b6:	2326      	movs	r3, #38	; 0x26
  FOCVars[bMotor].Iab = NULL_ab;
 80025b8:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 80025ba:	fb03 2305 	mla	r3, r3, r5, r2
  FOCVars[bMotor].Iqd = NULL_qd;
 80025be:	50b4      	str	r4, [r6, r2]
 80025c0:	18b7      	adds	r7, r6, r2
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80025c2:	4810      	ldr	r0, [pc, #64]	; (8002604 <FOC_Clear+0x6c>)
  FOCVars[bMotor].Iqd = NULL_qd;
 80025c4:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].Vqd = NULL_qd;
 80025c6:	188e      	adds	r6, r1, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
 80025c8:	83dc      	strh	r4, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80025ca:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 80025ce:	508c      	str	r4, [r1, r2]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80025d0:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 80025d2:	6074      	str	r4, [r6, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 80025d4:	841c      	strh	r4, [r3, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80025d6:	f004 fdaf 	bl	8007138 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 80025da:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <FOC_Clear+0x70>)
 80025dc:	4621      	mov	r1, r4
 80025de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80025e2:	f004 fda9 	bl	8007138 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 80025e6:	4b09      	ldr	r3, [pc, #36]	; (800260c <FOC_Clear+0x74>)
 80025e8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80025ec:	f005 ff0e 	bl	800840c <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80025f0:	4b07      	ldr	r3, [pc, #28]	; (8002610 <FOC_Clear+0x78>)
 80025f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80025f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80025fa:	f000 bc55 	b.w	8002ea8 <PWMC_SwitchOffPWM>
 80025fe:	bf00      	nop
 8002600:	20000818 	.word	0x20000818
 8002604:	2000028c 	.word	0x2000028c
 8002608:	20000288 	.word	0x20000288
 800260c:	20000294 	.word	0x20000294
 8002610:	20000844 	.word	0x20000844

08002614 <FOC_Init>:
{
 8002614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002618:	4b2e      	ldr	r3, [pc, #184]	; (80026d4 <FOC_Init+0xc0>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 800261a:	4f2f      	ldr	r7, [pc, #188]	; (80026d8 <FOC_Init+0xc4>)
    ENC_Init (&ENCODER_M1);
 800261c:	4e2f      	ldr	r6, [pc, #188]	; (80026dc <FOC_Init+0xc8>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800261e:	4830      	ldr	r0, [pc, #192]	; (80026e0 <FOC_Init+0xcc>)
 8002620:	6018      	str	r0, [r3, #0]
{
 8002622:	b083      	sub	sp, #12
    R3_1_Init(&PWM_Handle_M1);
 8002624:	f005 f882 	bl	800772c <R3_1_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8002628:	4d2e      	ldr	r5, [pc, #184]	; (80026e4 <FOC_Init+0xd0>)
 800262a:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8002718 <FOC_Init+0x104>
    PID_HandleInit(&PID_PosParamsM1);
 800262e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800271c <FOC_Init+0x108>
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002632:	4c2d      	ldr	r4, [pc, #180]	; (80026e8 <FOC_Init+0xd4>)
    startTimers();
 8002634:	f000 fa92 	bl	8002b5c <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002638:	4638      	mov	r0, r7
 800263a:	f004 fd75 	bl	8007128 <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 800263e:	4630      	mov	r0, r6
 8002640:	f004 fbcc 	bl	8006ddc <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8002644:	6829      	ldr	r1, [r5, #0]
 8002646:	4a29      	ldr	r2, [pc, #164]	; (80026ec <FOC_Init+0xd8>)
 8002648:	4633      	mov	r3, r6
 800264a:	4648      	mov	r0, r9
 800264c:	f004 fb78 	bl	8006d40 <EAC_Init>
    pEAC[M1] = &EncAlignCtrlM1;
 8002650:	4b27      	ldr	r3, [pc, #156]	; (80026f0 <FOC_Init+0xdc>)
    PID_HandleInit(&PID_PosParamsM1);
 8002652:	4640      	mov	r0, r8
    pEAC[M1] = &EncAlignCtrlM1;
 8002654:	f8c3 9000 	str.w	r9, [r3]
    PID_HandleInit(&PID_PosParamsM1);
 8002658:	f004 fd66 	bl	8007128 <PID_HandleInit>
    TC_Init(&PosCtrlM1, &PID_PosParamsM1, &SpeednTorqCtrlM1, &ENCODER_M1);
 800265c:	4633      	mov	r3, r6
 800265e:	4641      	mov	r1, r8
 8002660:	4a24      	ldr	r2, [pc, #144]	; (80026f4 <FOC_Init+0xe0>)
 8002662:	4825      	ldr	r0, [pc, #148]	; (80026f8 <FOC_Init+0xe4>)
 8002664:	f005 ff68 	bl	8008538 <TC_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8002668:	4632      	mov	r2, r6
 800266a:	4639      	mov	r1, r7
 800266c:	6828      	ldr	r0, [r5, #0]
 800266e:	f005 feb7 	bl	80083e0 <STC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8002672:	4822      	ldr	r0, [pc, #136]	; (80026fc <FOC_Init+0xe8>)
 8002674:	f004 fd58 	bl	8007128 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8002678:	4821      	ldr	r0, [pc, #132]	; (8002700 <FOC_Init+0xec>)
 800267a:	f004 fd55 	bl	8007128 <PID_HandleInit>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 800267e:	4a21      	ldr	r2, [pc, #132]	; (8002704 <FOC_Init+0xf0>)
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002680:	4b21      	ldr	r3, [pc, #132]	; (8002708 <FOC_Init+0xf4>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	4821      	ldr	r0, [pc, #132]	; (800270c <FOC_Init+0xf8>)
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002686:	4922      	ldr	r1, [pc, #136]	; (8002710 <FOC_Init+0xfc>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002688:	e9c2 4002 	strd	r4, r0, [r2, #8]
    REMNG_Init(pREMNG[M1]);
 800268c:	4618      	mov	r0, r3
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 800268e:	600b      	str	r3, [r1, #0]
    REMNG_Init(pREMNG[M1]);
 8002690:	f005 fe68 	bl	8008364 <REMNG_Init>
    FOC_Clear(M1);
 8002694:	2000      	movs	r0, #0
 8002696:	f7ff ff7f 	bl	8002598 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 800269a:	2301      	movs	r3, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800269c:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 800269e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80026a2:	f005 ff35 	bl	8008510 <STC_GetDefaultIqdref>
 80026a6:	f3c0 420f 	ubfx	r2, r0, #16, #16
 80026aa:	4603      	mov	r3, r0
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80026ac:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80026ae:	8262      	strh	r2, [r4, #18]
 80026b0:	8223      	strh	r3, [r4, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80026b2:	f005 ff2d 	bl	8008510 <STC_GetDefaultIqdref>
 80026b6:	f3c0 430f 	ubfx	r3, r0, #16, #16
    MCI_ExecSpeedRamp(&Mci[M1],
 80026ba:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80026bc:	82a3      	strh	r3, [r4, #20]
    MCI_ExecSpeedRamp(&Mci[M1],
 80026be:	f005 ff23 	bl	8008508 <STC_GetMecSpeedRefUnitDefault>
 80026c2:	4601      	mov	r1, r0
 80026c4:	4813      	ldr	r0, [pc, #76]	; (8002714 <FOC_Init+0x100>)
 80026c6:	2200      	movs	r2, #0
}
 80026c8:	b003      	add	sp, #12
 80026ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    MCI_ExecSpeedRamp(&Mci[M1],
 80026ce:	f7ff bc5d 	b.w	8001f8c <MCI_ExecSpeedRamp>
 80026d2:	bf00      	nop
 80026d4:	20000844 	.word	0x20000844
 80026d8:	200000bc 	.word	0x200000bc
 80026dc:	200002b4 	.word	0x200002b4
 80026e0:	20000124 	.word	0x20000124
 80026e4:	20000294 	.word	0x20000294
 80026e8:	20000818 	.word	0x20000818
 80026ec:	2000038c 	.word	0x2000038c
 80026f0:	20000848 	.word	0x20000848
 80026f4:	20000250 	.word	0x20000250
 80026f8:	200001c8 	.word	0x200001c8
 80026fc:	20000090 	.word	0x20000090
 8002700:	20000064 	.word	0x20000064
 8002704:	20000284 	.word	0x20000284
 8002708:	20000238 	.word	0x20000238
 800270c:	20000298 	.word	0x20000298
 8002710:	20000840 	.word	0x20000840
 8002714:	20000038 	.word	0x20000038
 8002718:	20000334 	.word	0x20000334
 800271c:	200000e8 	.word	0x200000e8

08002720 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop

08002724 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8002724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8002728:	b672      	cpsid	i

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference latching */
  /* to avoid MF task writing them while HF task reading them */
  __disable_irq();
  IqdTmp = FOCVars[bMotor].Iqdref;
 800272a:	4e0e      	ldr	r6, [pc, #56]	; (8002764 <FOC_CalcCurrRef+0x40>)
 800272c:	2326      	movs	r3, #38	; 0x26
 800272e:	2410      	movs	r4, #16
 8002730:	fb13 4400 	smlabb	r4, r3, r0, r4
 8002734:	19a7      	adds	r7, r4, r6
 8002736:	5fa2      	ldrsh	r2, [r4, r6]
 8002738:	f9b7 8002 	ldrsh.w	r8, [r7, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 800273c:	b662      	cpsie	i
  __enable_irq();

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 800273e:	fb03 6500 	mla	r5, r3, r0, r6
 8002742:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 8002746:	b933      	cbnz	r3, 8002756 <FOC_CalcCurrRef+0x32>
  {
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8002748:	4b07      	ldr	r3, [pc, #28]	; (8002768 <FOC_CalcCurrRef+0x44>)
 800274a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800274e:	f005 feaf 	bl	80084b0 <STC_CalcTorqueReference>
 8002752:	4602      	mov	r2, r0
 8002754:	83e8      	strh	r0, [r5, #30]
  __ASM volatile ("cpsid i" : : : "memory");
 8002756:	b672      	cpsid	i
  }

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference restoring */
  __disable_irq();
  FOCVars[bMotor].Iqdref = IqdTmp;
 8002758:	53a2      	strh	r2, [r4, r6]
 800275a:	f8a7 8002 	strh.w	r8, [r7, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 800275e:	b662      	cpsie	i
  /* Exit critical section */
  __enable_irq();
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8002760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002764:	20000818 	.word	0x20000818
 8002768:	20000294 	.word	0x20000294

0800276c <TSK_MediumFrequencyTaskM1>:
{
 800276c:	b570      	push	{r4, r5, r6, lr}
 800276e:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8002770:	a902      	add	r1, sp, #8
 8002772:	2300      	movs	r3, #0
 8002774:	f821 3d02 	strh.w	r3, [r1, #-2]!
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8002778:	48a6      	ldr	r0, [pc, #664]	; (8002a14 <TSK_MediumFrequencyTaskM1+0x2a8>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 800277a:	4ca7      	ldr	r4, [pc, #668]	; (8002a18 <TSK_MediumFrequencyTaskM1+0x2ac>)
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 800277c:	f004 fb96 	bl	8006eac <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8002780:	4ba6      	ldr	r3, [pc, #664]	; (8002a1c <TSK_MediumFrequencyTaskM1+0x2b0>)
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	f004 fd3e 	bl	8007204 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002788:	4620      	mov	r0, r4
 800278a:	f7ff fc97 	bl	80020bc <MCI_GetCurrentFaults>
 800278e:	b120      	cbz	r0, 800279a <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 8002790:	230a      	movs	r3, #10
 8002792:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
 8002796:	b002      	add	sp, #8
 8002798:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 800279a:	4620      	mov	r0, r4
 800279c:	f7ff fc8c 	bl	80020b8 <MCI_GetOccurredFaults>
 80027a0:	bb80      	cbnz	r0, 8002804 <TSK_MediumFrequencyTaskM1+0x98>
      switch (Mci[M1].State)
 80027a2:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 80027a6:	2b14      	cmp	r3, #20
 80027a8:	d8f5      	bhi.n	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
 80027aa:	a201      	add	r2, pc, #4	; (adr r2, 80027b0 <TSK_MediumFrequencyTaskM1+0x44>)
 80027ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b0:	08002975 	.word	0x08002975
 80027b4:	08002797 	.word	0x08002797
 80027b8:	08002925 	.word	0x08002925
 80027bc:	08002797 	.word	0x08002797
 80027c0:	08002797 	.word	0x08002797
 80027c4:	08002797 	.word	0x08002797
 80027c8:	08002907 	.word	0x08002907
 80027cc:	08002797 	.word	0x08002797
 80027d0:	080028fb 	.word	0x080028fb
 80027d4:	08002797 	.word	0x08002797
 80027d8:	08002805 	.word	0x08002805
 80027dc:	080028e5 	.word	0x080028e5
 80027e0:	08002797 	.word	0x08002797
 80027e4:	08002797 	.word	0x08002797
 80027e8:	08002797 	.word	0x08002797
 80027ec:	08002797 	.word	0x08002797
 80027f0:	08002891 	.word	0x08002891
 80027f4:	08002859 	.word	0x08002859
 80027f8:	08002797 	.word	0x08002797
 80027fc:	08002797 	.word	0x08002797
 8002800:	0800280f 	.word	0x0800280f
      Mci[M1].State = FAULT_OVER;
 8002804:	230b      	movs	r3, #11
 8002806:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
 800280a:	b002      	add	sp, #8
 800280c:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 800280e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002812:	2b05      	cmp	r3, #5
 8002814:	f000 80c0 	beq.w	8002998 <TSK_MediumFrequencyTaskM1+0x22c>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 8002818:	f7ff fd7e 	bl	8002318 <TSK_StopPermanencyTimeHasElapsedM1>
 800281c:	2800      	cmp	r0, #0
 800281e:	d0ba      	beq.n	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
              ENC_Clear(&ENCODER_M1);
 8002820:	487c      	ldr	r0, [pc, #496]	; (8002a14 <TSK_MediumFrequencyTaskM1+0x2a8>)
 8002822:	f004 fb17 	bl	8006e54 <ENC_Clear>
              R3_1_SwitchOnPWM(pwmcHandle[M1]);
 8002826:	4b7e      	ldr	r3, [pc, #504]	; (8002a20 <TSK_MediumFrequencyTaskM1+0x2b4>)
 8002828:	6818      	ldr	r0, [r3, #0]
 800282a:	f004 fe3f 	bl	80074ac <R3_1_SwitchOnPWM>
              TC_EncAlignmentCommand(pPosCtrl[M1]);
 800282e:	4b7d      	ldr	r3, [pc, #500]	; (8002a24 <TSK_MediumFrequencyTaskM1+0x2b8>)
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	f006 f817 	bl	8008864 <TC_EncAlignmentCommand>
              FOC_InitAdditionalMethods(M1);
 8002836:	2000      	movs	r0, #0
 8002838:	f7ff ff72 	bl	8002720 <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 800283c:	4b7a      	ldr	r3, [pc, #488]	; (8002a28 <TSK_MediumFrequencyTaskM1+0x2bc>)
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	f005 fe72 	bl	8008528 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8002844:	4874      	ldr	r0, [pc, #464]	; (8002a18 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8002846:	f7ff fbf1 	bl	800202c <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 800284a:	2000      	movs	r0, #0
 800284c:	f7ff ff6a 	bl	8002724 <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 8002850:	2306      	movs	r3, #6
 8002852:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8002856:	e79e      	b.n	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002858:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800285c:	4d70      	ldr	r5, [pc, #448]	; (8002a20 <TSK_MediumFrequencyTaskM1+0x2b4>)
 800285e:	2b05      	cmp	r3, #5
 8002860:	6828      	ldr	r0, [r5, #0]
 8002862:	f000 809b 	beq.w	800299c <TSK_MediumFrequencyTaskM1+0x230>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8002866:	2101      	movs	r1, #1
 8002868:	f000 fb22 	bl	8002eb0 <PWMC_CurrentReadingCalibr>
 800286c:	2800      	cmp	r0, #0
 800286e:	d092      	beq.n	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8002870:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002874:	2b03      	cmp	r3, #3
 8002876:	f000 80ac 	beq.w	80029d2 <TSK_MediumFrequencyTaskM1+0x266>
                R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 800287a:	6828      	ldr	r0, [r5, #0]
 800287c:	2100      	movs	r1, #0
 800287e:	f004 ff09 	bl	8007694 <R3_1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8002882:	2014      	movs	r0, #20
 8002884:	f7ff fd32 	bl	80022ec <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8002888:	2310      	movs	r3, #16
 800288a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 800288e:	e782      	b.n	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002890:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002894:	2b05      	cmp	r3, #5
 8002896:	d07f      	beq.n	8002998 <TSK_MediumFrequencyTaskM1+0x22c>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8002898:	f7ff fd2e 	bl	80022f8 <TSK_ChargeBootCapDelayHasElapsedM1>
 800289c:	2800      	cmp	r0, #0
 800289e:	f43f af7a 	beq.w	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80028a2:	4e5f      	ldr	r6, [pc, #380]	; (8002a20 <TSK_MediumFrequencyTaskM1+0x2b4>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80028a4:	4d60      	ldr	r5, [pc, #384]	; (8002a28 <TSK_MediumFrequencyTaskM1+0x2bc>)
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80028a6:	6830      	ldr	r0, [r6, #0]
 80028a8:	f004 fe4a 	bl	8007540 <R3_1_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 80028ac:	4b5f      	ldr	r3, [pc, #380]	; (8002a2c <TSK_MediumFrequencyTaskM1+0x2c0>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80028ae:	4960      	ldr	r1, [pc, #384]	; (8002a30 <TSK_MediumFrequencyTaskM1+0x2c4>)
 80028b0:	6828      	ldr	r0, [r5, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80028b8:	f005 fda6 	bl	8008408 <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 80028bc:	4855      	ldr	r0, [pc, #340]	; (8002a14 <TSK_MediumFrequencyTaskM1+0x2a8>)
 80028be:	f004 fac9 	bl	8006e54 <ENC_Clear>
              FOC_Clear( M1 );
 80028c2:	2000      	movs	r0, #0
 80028c4:	f7ff fe68 	bl	8002598 <FOC_Clear>
              if (EAC_IsAligned(&EncAlignCtrlM1) == false)
 80028c8:	485a      	ldr	r0, [pc, #360]	; (8002a34 <TSK_MediumFrequencyTaskM1+0x2c8>)
 80028ca:	7b83      	ldrb	r3, [r0, #14]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f040 8089 	bne.w	80029e4 <TSK_MediumFrequencyTaskM1+0x278>
                EAC_StartAlignment(&EncAlignCtrlM1);
 80028d2:	f004 fa3f 	bl	8006d54 <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 80028d6:	2302      	movs	r3, #2
 80028d8:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80028dc:	6830      	ldr	r0, [r6, #0]
 80028de:	f000 fae5 	bl	8002eac <PWMC_SwitchOnPWM>
 80028e2:	e758      	b.n	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 80028e4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	f47f af54 	bne.w	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80028ee:	2300      	movs	r3, #0
 80028f0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
            Mci[M1].State = IDLE;
 80028f4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 80028f8:	e74d      	b.n	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 80028fa:	f7ff fd0d 	bl	8002318 <TSK_StopPermanencyTimeHasElapsedM1>
 80028fe:	2800      	cmp	r0, #0
 8002900:	f43f af49 	beq.w	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
 8002904:	e7f3      	b.n	80028ee <TSK_MediumFrequencyTaskM1+0x182>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002906:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800290a:	2b05      	cmp	r3, #5
 800290c:	d044      	beq.n	8002998 <TSK_MediumFrequencyTaskM1+0x22c>
            TC_PositionRegulation(pPosCtrl[M1]);
 800290e:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <TSK_MediumFrequencyTaskM1+0x2b8>)
 8002910:	6818      	ldr	r0, [r3, #0]
 8002912:	f005 fed9 	bl	80086c8 <TC_PositionRegulation>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8002916:	4840      	ldr	r0, [pc, #256]	; (8002a18 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8002918:	f7ff fb88 	bl	800202c <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 800291c:	2000      	movs	r0, #0
 800291e:	f7ff ff01 	bl	8002724 <FOC_CalcCurrRef>
 8002922:	e738      	b.n	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002924:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002928:	2b05      	cmp	r3, #5
 800292a:	d035      	beq.n	8002998 <TSK_MediumFrequencyTaskM1+0x22c>
            bool isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 800292c:	4841      	ldr	r0, [pc, #260]	; (8002a34 <TSK_MediumFrequencyTaskM1+0x2c8>)
 800292e:	7b85      	ldrb	r5, [r0, #14]
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 8002930:	f004 fa3c 	bl	8006dac <EAC_Exec>
 8002934:	4606      	mov	r6, r0
            if ((isAligned == false)  && (EACDone == false))
 8002936:	b90d      	cbnz	r5, 800293c <TSK_MediumFrequencyTaskM1+0x1d0>
 8002938:	2800      	cmp	r0, #0
 800293a:	d042      	beq.n	80029c2 <TSK_MediumFrequencyTaskM1+0x256>
              R3_1_SwitchOffPWM( pwmcHandle[M1] );
 800293c:	4d38      	ldr	r5, [pc, #224]	; (8002a20 <TSK_MediumFrequencyTaskM1+0x2b4>)
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 800293e:	4e3a      	ldr	r6, [pc, #232]	; (8002a28 <TSK_MediumFrequencyTaskM1+0x2bc>)
              R3_1_SwitchOffPWM( pwmcHandle[M1] );
 8002940:	6828      	ldr	r0, [r5, #0]
 8002942:	f004 fdfd 	bl	8007540 <R3_1_SwitchOffPWM>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8002946:	6830      	ldr	r0, [r6, #0]
 8002948:	2103      	movs	r1, #3
 800294a:	f005 fd67 	bl	800841c <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 800294e:	4931      	ldr	r1, [pc, #196]	; (8002a14 <TSK_MediumFrequencyTaskM1+0x2a8>)
 8002950:	6830      	ldr	r0, [r6, #0]
 8002952:	f005 fd59 	bl	8008408 <STC_SetSpeedSensor>
              FOC_Clear(M1);
 8002956:	2000      	movs	r0, #0
 8002958:	f7ff fe1e 	bl	8002598 <FOC_Clear>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 800295c:	6828      	ldr	r0, [r5, #0]
 800295e:	2100      	movs	r1, #0
 8002960:	f004 fe98 	bl	8007694 <R3_1_TurnOnLowSides>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8002964:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002968:	f7ff fcd0 	bl	800230c <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 800296c:	2314      	movs	r3, #20
 800296e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8002972:	e710      	b.n	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8002974:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002978:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 800297c:	2b01      	cmp	r3, #1
 800297e:	f47f af0a 	bne.w	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8002982:	4d27      	ldr	r5, [pc, #156]	; (8002a20 <TSK_MediumFrequencyTaskM1+0x2b4>)
 8002984:	6828      	ldr	r0, [r5, #0]
 8002986:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
 800298a:	b9a1      	cbnz	r1, 80029b6 <TSK_MediumFrequencyTaskM1+0x24a>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 800298c:	f000 fa90 	bl	8002eb0 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8002990:	2311      	movs	r3, #17
 8002992:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8002996:	e6fe      	b.n	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8002998:	4b21      	ldr	r3, [pc, #132]	; (8002a20 <TSK_MediumFrequencyTaskM1+0x2b4>)
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	f004 fdd0 	bl	8007540 <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 80029a0:	2000      	movs	r0, #0
 80029a2:	f7ff fdf9 	bl	8002598 <FOC_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 80029a6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80029aa:	f7ff fcaf 	bl	800230c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 80029ae:	2308      	movs	r3, #8
 80029b0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 80029b4:	e6ef      	b.n	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 80029b6:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80029ba:	4619      	mov	r1, r3
 80029bc:	f000 fa78 	bl	8002eb0 <PWMC_CurrentReadingCalibr>
 80029c0:	e75b      	b.n	800287a <TSK_MediumFrequencyTaskM1+0x10e>
              IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 80029c2:	4b19      	ldr	r3, [pc, #100]	; (8002a28 <TSK_MediumFrequencyTaskM1+0x2bc>)
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	f005 fd73 	bl	80084b0 <STC_CalcTorqueReference>
              FOCVars[M1].Iqdref = IqdRef;
 80029ca:	4b18      	ldr	r3, [pc, #96]	; (8002a2c <TSK_MediumFrequencyTaskM1+0x2c0>)
 80029cc:	8258      	strh	r0, [r3, #18]
 80029ce:	821e      	strh	r6, [r3, #16]
            {
 80029d0:	e6e1      	b.n	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
                FOC_Clear(M1);
 80029d2:	2000      	movs	r0, #0
 80029d4:	f7ff fde0 	bl	8002598 <FOC_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80029d8:	2300      	movs	r3, #0
 80029da:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
                Mci[M1].State = IDLE;
 80029de:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 80029e2:	e6d8      	b.n	8002796 <TSK_MediumFrequencyTaskM1+0x2a>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 80029e4:	2103      	movs	r1, #3
 80029e6:	6828      	ldr	r0, [r5, #0]
 80029e8:	f005 fd18 	bl	800841c <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 80029ec:	4909      	ldr	r1, [pc, #36]	; (8002a14 <TSK_MediumFrequencyTaskM1+0x2a8>)
 80029ee:	6828      	ldr	r0, [r5, #0]
 80029f0:	f005 fd0a 	bl	8008408 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 80029f4:	2000      	movs	r0, #0
 80029f6:	f7ff fe93 	bl	8002720 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 80029fa:	2000      	movs	r0, #0
 80029fc:	f7ff fe92 	bl	8002724 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8002a00:	6828      	ldr	r0, [r5, #0]
 8002a02:	f005 fd91 	bl	8008528 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8002a06:	4804      	ldr	r0, [pc, #16]	; (8002a18 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8002a08:	f7ff fb10 	bl	800202c <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8002a0c:	2306      	movs	r3, #6
 8002a0e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8002a12:	e763      	b.n	80028dc <TSK_MediumFrequencyTaskM1+0x170>
 8002a14:	200002b4 	.word	0x200002b4
 8002a18:	20000038 	.word	0x20000038
 8002a1c:	20000284 	.word	0x20000284
 8002a20:	20000844 	.word	0x20000844
 8002a24:	20000290 	.word	0x20000290
 8002a28:	20000294 	.word	0x20000294
 8002a2c:	20000818 	.word	0x20000818
 8002a30:	2000038c 	.word	0x2000038c
 8002a34:	20000334 	.word	0x20000334

08002a38 <FOC_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
{
 8002a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a3c:	4607      	mov	r7, r0
 8002a3e:	b087      	sub	sp, #28
  uint16_t hFOCreturn;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8002a40:	482f      	ldr	r0, [pc, #188]	; (8002b00 <FOC_HighFrequencyTask+0xc8>)
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002a42:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8002b1c <FOC_HighFrequencyTask+0xe4>
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002a46:	4c2f      	ldr	r4, [pc, #188]	; (8002b04 <FOC_HighFrequencyTask+0xcc>)
  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8002a48:	f004 fa16 	bl	8006e78 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002a4c:	4b2e      	ldr	r3, [pc, #184]	; (8002b08 <FOC_HighFrequencyTask+0xd0>)
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002a4e:	f8d8 0000 	ldr.w	r0, [r8]
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002a52:	681a      	ldr	r2, [r3, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8002a54:	6803      	ldr	r3, [r0, #0]
  hElAngle = SPD_GetElAngle(speedHandle);
 8002a56:	6952      	ldr	r2, [r2, #20]
 8002a58:	a903      	add	r1, sp, #12
 8002a5a:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 8002a5e:	4798      	blx	r3
  RCM_ReadOngoingConv();
 8002a60:	f000 fd6e 	bl	8003540 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8002a64:	f000 fd2a 	bl	80034bc <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8002a68:	9803      	ldr	r0, [sp, #12]
 8002a6a:	f7ff fb69 	bl	8002140 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002a6e:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8002a70:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002a72:	f7ff fba1 	bl	80021b8 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002a76:	4b25      	ldr	r3, [pc, #148]	; (8002b0c <FOC_HighFrequencyTask+0xd4>)
 8002a78:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002a7c:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002a7e:	b200      	sxth	r0, r0
 8002a80:	1a09      	subs	r1, r1, r0
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	f004 fb5a 	bl	800713c <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002a88:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 8002a8c:	4b20      	ldr	r3, [pc, #128]	; (8002b10 <FOC_HighFrequencyTask+0xd8>)
 8002a8e:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002a92:	4605      	mov	r5, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002a94:	1a89      	subs	r1, r1, r2
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	f004 fb50 	bl	800713c <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002a9c:	f8ad 5008 	strh.w	r5, [sp, #8]
 8002aa0:	f8ad 000a 	strh.w	r0, [sp, #10]
 8002aa4:	9902      	ldr	r1, [sp, #8]
 8002aa6:	481b      	ldr	r0, [pc, #108]	; (8002b14 <FOC_HighFrequencyTask+0xdc>)
 8002aa8:	f004 f916 	bl	8006cd8 <Circle_Limitation>
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002aac:	4631      	mov	r1, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002aae:	fa0f f980 	sxth.w	r9, r0
 8002ab2:	1405      	asrs	r5, r0, #16
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002ab4:	f7ff fbba 	bl	800222c <MCM_Rev_Park>
 8002ab8:	4603      	mov	r3, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002aba:	4601      	mov	r1, r0
 8002abc:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002ac0:	9305      	str	r3, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002ac2:	f000 f8b3 	bl	8002c2c <PWMC_SetPhaseVoltage>
 8002ac6:	4601      	mov	r1, r0

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8002ac8:	9803      	ldr	r0, [sp, #12]
 8002aca:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002acc:	9804      	ldr	r0, [sp, #16]
 8002ace:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8002ad0:	9801      	ldr	r0, [sp, #4]
 8002ad2:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_DURATION)
 8002ad4:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8002ad6:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].hElAngle = hElAngle;
 8002ad8:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Vqd = Vqd;
 8002ada:	f8a4 9016 	strh.w	r9, [r4, #22]
 8002ade:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002ae0:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_DURATION)
 8002ae4:	d003      	beq.n	8002aee <FOC_HighFrequencyTask+0xb6>
}
 8002ae6:	4638      	mov	r0, r7
 8002ae8:	b007      	add	sp, #28
 8002aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	4809      	ldr	r0, [pc, #36]	; (8002b18 <FOC_HighFrequencyTask+0xe0>)
 8002af2:	f7ff fa8f 	bl	8002014 <MCI_FaultProcessing>
}
 8002af6:	4638      	mov	r0, r7
 8002af8:	b007      	add	sp, #28
 8002afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002afe:	bf00      	nop
 8002b00:	200002b4 	.word	0x200002b4
 8002b04:	20000818 	.word	0x20000818
 8002b08:	20000294 	.word	0x20000294
 8002b0c:	2000028c 	.word	0x2000028c
 8002b10:	20000288 	.word	0x20000288
 8002b14:	20000034 	.word	0x20000034
 8002b18:	20000038 	.word	0x20000038
 8002b1c:	20000844 	.word	0x20000844

08002b20 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002b20:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8002b22:	f002 fcfb 	bl	800551c <HAL_RCC_GetHCLKFreq>
 8002b26:	4b0a      	ldr	r3, [pc, #40]	; (8002b50 <MX_MotorControl_Init+0x30>)
 8002b28:	fba3 3000 	umull	r3, r0, r3, r0
 8002b2c:	09c0      	lsrs	r0, r0, #7
 8002b2e:	f001 ff75 	bl	8004a1c <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <MX_MotorControl_Init+0x34>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	6819      	ldr	r1, [r3, #0]
 8002b38:	f04f 30ff 	mov.w	r0, #4294967295
 8002b3c:	f001 ff2a 	bl	8004994 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002b40:	4805      	ldr	r0, [pc, #20]	; (8002b58 <MX_MotorControl_Init+0x38>)
 8002b42:	f7ff fba1 	bl	8002288 <MCboot>
  mc_lock_pins();
}
 8002b46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002b4a:	f7ff bc9b 	b.w	8002484 <mc_lock_pins>
 8002b4e:	bf00      	nop
 8002b50:	10624dd3 	.word	0x10624dd3
 8002b54:	200003e0 	.word	0x200003e0
 8002b58:	2000084c 	.word	0x2000084c

08002b5c <startTimers>:
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8002b5c:	4a21      	ldr	r2, [pc, #132]	; (8002be4 <startTimers+0x88>)
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8002b5e:	4922      	ldr	r1, [pc, #136]	; (8002be8 <startTimers+0x8c>)
 8002b60:	6893      	ldr	r3, [r2, #8]
 8002b62:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8002b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6a:	f043 0310 	orr.w	r3, r3, #16
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 8002b6e:	b430      	push	{r4, r5}
 8002b70:	6093      	str	r3, [r2, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8002b72:	6893      	ldr	r3, [r2, #8]
 8002b74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b78:	f023 0307 	bic.w	r3, r3, #7
 8002b7c:	f043 0306 	orr.w	r3, r3, #6
 8002b80:	6093      	str	r3, [r2, #8]
 8002b82:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8002b84:	07db      	lsls	r3, r3, #31
 8002b86:	b082      	sub	sp, #8
 8002b88:	d415      	bmi.n	8002bb6 <startTimers+0x5a>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002b8a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002b92:	6d8b      	ldr	r3, [r1, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002b94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002b9e:	9b01      	ldr	r3, [sp, #4]
 8002ba0:	6953      	ldr	r3, [r2, #20]
 8002ba2:	f043 0301 	orr.w	r3, r3, #1
 8002ba6:	6153      	str	r3, [r2, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002ba8:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8002baa:	f023 0301 	bic.w	r3, r3, #1
 8002bae:	658b      	str	r3, [r1, #88]	; 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8002bb0:	b002      	add	sp, #8
 8002bb2:	bc30      	pop	{r4, r5}
 8002bb4:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8002bb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002bba:	4c0c      	ldr	r4, [pc, #48]	; (8002bec <startTimers+0x90>)
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	6859      	ldr	r1, [r3, #4]
 8002bc0:	4d0b      	ldr	r5, [pc, #44]	; (8002bf0 <startTimers+0x94>)
 8002bc2:	4021      	ands	r1, r4
 8002bc4:	f041 0120 	orr.w	r1, r1, #32
 8002bc8:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002bca:	6958      	ldr	r0, [r3, #20]
 8002bcc:	f040 0001 	orr.w	r0, r0, #1
 8002bd0:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002bd2:	6859      	ldr	r1, [r3, #4]
 8002bd4:	402a      	ands	r2, r5
 8002bd6:	4021      	ands	r1, r4
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	605a      	str	r2, [r3, #4]
}
 8002bdc:	b002      	add	sp, #8
 8002bde:	bc30      	pop	{r4, r5}
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40012c00 	.word	0x40012c00
 8002be8:	40021000 	.word	0x40021000
 8002bec:	fdffff8f 	.word	0xfdffff8f
 8002bf0:	02000070 	.word	0x02000070

08002bf4 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8002bf4:	3201      	adds	r2, #1
{
 8002bf6:	b470      	push	{r4, r5, r6}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8002bf8:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002bfa:	f06f 0602 	mvn.w	r6, #2
 8002bfe:	0154      	lsls	r4, r2, #5
 8002c00:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8002c02:	2500      	movs	r5, #0
    while (*cnt < NB_CONVERSIONS)
 8002c04:	e002      	b.n	8002c0c <waitForPolarizationEnd+0x18>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002c06:	6902      	ldr	r2, [r0, #16]
 8002c08:	0792      	lsls	r2, r2, #30
 8002c0a:	d404      	bmi.n	8002c16 <waitForPolarizationEnd+0x22>
 8002c0c:	781a      	ldrb	r2, [r3, #0]
 8002c0e:	2a0f      	cmp	r2, #15
 8002c10:	d9f9      	bls.n	8002c06 <waitForPolarizationEnd+0x12>
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 8002c12:	bc70      	pop	{r4, r5, r6}
 8002c14:	4770      	bx	lr
        hCalibrationPeriodCounter++;
 8002c16:	3501      	adds	r5, #1
 8002c18:	b2ad      	uxth	r5, r5
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8002c1a:	42ac      	cmp	r4, r5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002c1c:	6106      	str	r6, [r0, #16]
 8002c1e:	d8f5      	bhi.n	8002c0c <waitForPolarizationEnd+0x18>
          if (*cnt < NB_CONVERSIONS)
 8002c20:	781a      	ldrb	r2, [r3, #0]
 8002c22:	2a0f      	cmp	r2, #15
 8002c24:	d8f2      	bhi.n	8002c0c <waitForPolarizationEnd+0x18>
            *SWerror = 1u;
 8002c26:	2301      	movs	r3, #1
 8002c28:	800b      	strh	r3, [r1, #0]
            break;
 8002c2a:	e7f2      	b.n	8002c12 <waitForPolarizationEnd+0x1e>

08002c2c <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002c2c:	b4f0      	push	{r4, r5, r6, r7}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002c2e:	f8b0 6070 	ldrh.w	r6, [r0, #112]	; 0x70
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002c32:	f8b0 504e 	ldrh.w	r5, [r0, #78]	; 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002c36:	140a      	asrs	r2, r1, #16
{
 8002c38:	b082      	sub	sp, #8
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002c3a:	fb06 f202 	mul.w	r2, r6, r2
 8002c3e:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
{
 8002c42:	9101      	str	r1, [sp, #4]
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002c44:	b209      	sxth	r1, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002c46:	0054      	lsls	r4, r2, #1
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002c48:	fb05 f101 	mul.w	r1, r5, r1

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
    wZ = (wUBeta - wUAlpha) / 2;
 8002c4c:	1a65      	subs	r5, r4, r1
    wY = (wUBeta + wUAlpha) / 2;
 8002c4e:	4421      	add	r1, r4
 8002c50:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8002c54:	eb05 73d5 	add.w	r3, r5, r5, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8002c58:	1052      	asrs	r2, r2, #1
 8002c5a:	ea4f 0696 	mov.w	r6, r6, lsr #2
    wZ = (wUBeta - wUAlpha) / 2;
 8002c5e:	ea4f 0363 	mov.w	r3, r3, asr #1
    if (wY < 0)
 8002c62:	d461      	bmi.n	8002d28 <PWMC_SetPhaseVoltage+0xfc>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	db35      	blt.n	8002cd4 <PWMC_SetPhaseVoltage+0xa8>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002c68:	1ad2      	subs	r2, r2, r3
 8002c6a:	bf44      	itt	mi
 8002c6c:	f502 327f 	addmi.w	r2, r2, #261120	; 0x3fc00
 8002c70:	f202 32ff 	addwmi	r2, r2, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002c74:	2d00      	cmp	r5, #0
 8002c76:	bfbc      	itt	lt
 8002c78:	f505 357f 	addlt.w	r5, r5, #261120	; 0x3fc00
 8002c7c:	f205 35ff 	addwlt	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8002c80:	2900      	cmp	r1, #0
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002c82:	eb06 43a2 	add.w	r3, r6, r2, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002c86:	bfb8      	it	lt
 8002c88:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 8002c8c:	f890 6085 	ldrb.w	r6, [r0, #133]	; 0x85
        pHandle->Sector = SECTOR_2;
 8002c90:	f04f 0401 	mov.w	r4, #1
        wTimePhC = wTimePhA - (wY / 131072);
 8002c94:	bfb8      	it	lt
 8002c96:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_2;
 8002c9a:	f880 407a 	strb.w	r4, [r0, #122]	; 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 8002c9e:	eb03 45a5 	add.w	r5, r3, r5, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002ca2:	eba3 41a1 	sub.w	r1, r3, r1, asr #18
        if(true == pHandle->SingleShuntTopology)
 8002ca6:	2e00      	cmp	r6, #0
 8002ca8:	d064      	beq.n	8002d74 <PWMC_SetPhaseVoltage+0x148>
        {
          pHandle->lowDuty = 2U;
 8002caa:	2402      	movs	r4, #2
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
 8002cac:	2201      	movs	r2, #1
          pHandle->lowDuty = 2U;
 8002cae:	6584      	str	r4, [r0, #88]	; 0x58
          pHandle->highDuty = 1U;
 8002cb0:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
            pHandle->highDuty = (uint16_t)wTimePhC;
        }
        }
    }

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002cb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002cb8:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002cbc:	6943      	ldr	r3, [r0, #20]
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002cbe:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002cc2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002cc6:	f8a0 5052 	strh.w	r5, [r0, #82]	; 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002cca:	f8a0 1054 	strh.w	r1, [r0, #84]	; 0x54
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002cce:	b002      	add	sp, #8
 8002cd0:	bcf0      	pop	{r4, r5, r6, r7}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002cd2:	4718      	bx	r3
        if ( wX <= 0 )
 8002cd4:	2c00      	cmp	r4, #0
 8002cd6:	dd79      	ble.n	8002dcc <PWMC_SetPhaseVoltage+0x1a0>
          wTimePhB = wTimePhA + (wZ / 131072);
 8002cd8:	2d00      	cmp	r5, #0
 8002cda:	bfb8      	it	lt
 8002cdc:	f505 357f 	addlt.w	r5, r5, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_1;
 8002ce0:	f04f 0100 	mov.w	r1, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002ce4:	eba4 0203 	sub.w	r2, r4, r3
          wTimePhB = wTimePhA + (wZ / 131072);
 8002ce8:	bfb8      	it	lt
 8002cea:	f205 35ff 	addwlt	r5, r5, #1023	; 0x3ff
          pHandle->Sector = SECTOR_1;
 8002cee:	f880 107a 	strb.w	r1, [r0, #122]	; 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 8002cf2:	1e21      	subs	r1, r4, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002cf4:	eb06 43a2 	add.w	r3, r6, r2, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002cf8:	bfb8      	it	lt
 8002cfa:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002cfe:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
          wTimePhB = wTimePhA + (wZ / 131072);
 8002d02:	eb03 45a5 	add.w	r5, r3, r5, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002d06:	bfb8      	it	lt
 8002d08:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8002d0c:	eba5 4161 	sub.w	r1, r5, r1, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002d10:	b922      	cbnz	r2, 8002d1c <PWMC_SetPhaseVoltage+0xf0>
 8002d12:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
 8002d16:	2a00      	cmp	r2, #0
 8002d18:	f000 80bb 	beq.w	8002e92 <PWMC_SetPhaseVoltage+0x266>
            pHandle->lowDuty = 2U;
 8002d1c:	4a60      	ldr	r2, [pc, #384]	; (8002ea0 <PWMC_SetPhaseVoltage+0x274>)
 8002d1e:	6582      	str	r2, [r0, #88]	; 0x58
            pHandle->highDuty = 0U;
 8002d20:	2200      	movs	r2, #0
 8002d22:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8002d26:	e7c5      	b.n	8002cb4 <PWMC_SetPhaseVoltage+0x88>
      if (wZ < 0)
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f890 7085 	ldrb.w	r7, [r0, #133]	; 0x85
 8002d2e:	db70      	blt.n	8002e12 <PWMC_SetPhaseVoltage+0x1e6>
        if (wX <= 0)
 8002d30:	2c00      	cmp	r4, #0
 8002d32:	dd26      	ble.n	8002d82 <PWMC_SetPhaseVoltage+0x156>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002d34:	1b12      	subs	r2, r2, r4
 8002d36:	bf44      	itt	mi
 8002d38:	f502 327f 	addmi.w	r2, r2, #261120	; 0x3fc00
 8002d3c:	f202 32ff 	addwmi	r2, r2, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002d40:	2900      	cmp	r1, #0
          pHandle->Sector = SECTOR_3;
 8002d42:	f04f 0302 	mov.w	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 8002d46:	bfb8      	it	lt
 8002d48:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 8002d4c:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
          wTimePhC = wTimePhA - (wY / 131072);
 8002d50:	bfb8      	it	lt
 8002d52:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002d56:	eb06 43a2 	add.w	r3, r6, r2, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 8002d5a:	eba3 41a1 	sub.w	r1, r3, r1, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002d5e:	eb01 4564 	add.w	r5, r1, r4, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002d62:	2f00      	cmp	r7, #0
 8002d64:	d079      	beq.n	8002e5a <PWMC_SetPhaseVoltage+0x22e>
            pHandle->lowDuty = 0U;
 8002d66:	f44f 3400 	mov.w	r4, #131072	; 0x20000
            pHandle->highDuty = 1U;
 8002d6a:	2201      	movs	r2, #1
            pHandle->lowDuty = 0U;
 8002d6c:	6584      	str	r4, [r0, #88]	; 0x58
            pHandle->highDuty = 1U;
 8002d6e:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8002d72:	e79f      	b.n	8002cb4 <PWMC_SetPhaseVoltage+0x88>
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8002d74:	f8a0 5058 	strh.w	r5, [r0, #88]	; 0x58
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002d78:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
        pHandle->highDuty = (uint16_t)wTimePhC;
 8002d7c:	f8a0 105c 	strh.w	r1, [r0, #92]	; 0x5c
 8002d80:	e798      	b.n	8002cb4 <PWMC_SetPhaseVoltage+0x88>
          pHandle->Sector = SECTOR_4;
 8002d82:	2203      	movs	r2, #3
 8002d84:	f880 207a 	strb.w	r2, [r0, #122]	; 0x7a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002d88:	1ae2      	subs	r2, r4, r3
 8002d8a:	bf44      	itt	mi
 8002d8c:	f502 327f 	addmi.w	r2, r2, #261120	; 0x3fc00
 8002d90:	f202 32ff 	addwmi	r2, r2, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002d94:	2d00      	cmp	r5, #0
 8002d96:	bfbc      	itt	lt
 8002d98:	f505 357f 	addlt.w	r5, r5, #261120	; 0x3fc00
 8002d9c:	f205 35ff 	addwlt	r5, r5, #1023	; 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 8002da0:	1e21      	subs	r1, r4, #0
 8002da2:	bfb8      	it	lt
 8002da4:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002da8:	eb06 43a2 	add.w	r3, r6, r2, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 8002dac:	eb03 45a5 	add.w	r5, r3, r5, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002db0:	bfb8      	it	lt
 8002db2:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8002db6:	eba5 4161 	sub.w	r1, r5, r1, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002dba:	2f00      	cmp	r7, #0
 8002dbc:	d062      	beq.n	8002e84 <PWMC_SetPhaseVoltage+0x258>
            pHandle->lowDuty = 0U;
 8002dbe:	f44f 3480 	mov.w	r4, #65536	; 0x10000
            pHandle->highDuty = 2U;
 8002dc2:	2202      	movs	r2, #2
            pHandle->lowDuty = 0U;
 8002dc4:	6584      	str	r4, [r0, #88]	; 0x58
            pHandle->highDuty = 2U;
 8002dc6:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8002dca:	e773      	b.n	8002cb4 <PWMC_SetPhaseVoltage+0x88>
          wTimePhC = wTimePhA - (wY / 131072);
 8002dcc:	2900      	cmp	r1, #0
 8002dce:	bfb8      	it	lt
 8002dd0:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_6;
 8002dd4:	f04f 0505 	mov.w	r5, #5
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002dd8:	eba2 0204 	sub.w	r2, r2, r4
          wTimePhC = wTimePhA - (wY / 131072);
 8002ddc:	bfb8      	it	lt
 8002dde:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_6;
 8002de2:	f880 507a 	strb.w	r5, [r0, #122]	; 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 8002de6:	1e25      	subs	r5, r4, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002de8:	eb06 43a2 	add.w	r3, r6, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002dec:	bfb8      	it	lt
 8002dee:	f505 35ff 	addlt.w	r5, r5, #130560	; 0x1fe00
          if(true == pHandle->SingleShuntTopology)
 8002df2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
          wTimePhC = wTimePhA - (wY / 131072);
 8002df6:	eba3 41a1 	sub.w	r1, r3, r1, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002dfa:	bfb8      	it	lt
 8002dfc:	f205 15ff 	addwlt	r5, r5, #511	; 0x1ff
 8002e00:	eb01 4565 	add.w	r5, r1, r5, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002e04:	b3ba      	cbz	r2, 8002e76 <PWMC_SetPhaseVoltage+0x24a>
            pHandle->lowDuty = 1U;
 8002e06:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <PWMC_SetPhaseVoltage+0x278>)
 8002e08:	6582      	str	r2, [r0, #88]	; 0x58
            pHandle->highDuty = 0U;
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8002e10:	e750      	b.n	8002cb4 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002e12:	1ad2      	subs	r2, r2, r3
 8002e14:	bf44      	itt	mi
 8002e16:	f502 327f 	addmi.w	r2, r2, #261120	; 0x3fc00
 8002e1a:	f202 32ff 	addwmi	r2, r2, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002e1e:	2d00      	cmp	r5, #0
 8002e20:	bfbc      	itt	lt
 8002e22:	f505 357f 	addlt.w	r5, r5, #261120	; 0x3fc00
 8002e26:	f205 35ff 	addwlt	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002e2a:	2900      	cmp	r1, #0
 8002e2c:	bfb8      	it	lt
 8002e2e:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002e32:	eb06 43a2 	add.w	r3, r6, r2, asr #18
        pHandle->Sector = SECTOR_5;
 8002e36:	f04f 0404 	mov.w	r4, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002e3a:	bfb8      	it	lt
 8002e3c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_5;
 8002e40:	f880 407a 	strb.w	r4, [r0, #122]	; 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 8002e44:	eb03 45a5 	add.w	r5, r3, r5, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002e48:	eba3 41a1 	sub.w	r1, r3, r1, asr #18
        if(true == pHandle->SingleShuntTopology)
 8002e4c:	b167      	cbz	r7, 8002e68 <PWMC_SetPhaseVoltage+0x23c>
          pHandle->lowDuty = 1U;
 8002e4e:	2401      	movs	r4, #1
          pHandle->highDuty = 2U;
 8002e50:	2202      	movs	r2, #2
          pHandle->lowDuty = 1U;
 8002e52:	6584      	str	r4, [r0, #88]	; 0x58
          pHandle->highDuty = 2U;
 8002e54:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8002e58:	e72c      	b.n	8002cb4 <PWMC_SetPhaseVoltage+0x88>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8002e5a:	f8a0 5058 	strh.w	r5, [r0, #88]	; 0x58
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002e5e:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002e62:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002e66:	e725      	b.n	8002cb4 <PWMC_SetPhaseVoltage+0x88>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002e68:	f8a0 1058 	strh.w	r1, [r0, #88]	; 0x58
          pHandle->midDuty = (uint16_t)wTimePhA;
 8002e6c:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
          pHandle->highDuty = (uint16_t)wTimePhB;
 8002e70:	f8a0 505c 	strh.w	r5, [r0, #92]	; 0x5c
 8002e74:	e71e      	b.n	8002cb4 <PWMC_SetPhaseVoltage+0x88>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002e76:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
            pHandle->midDuty = (uint16_t)wTimePhC;
 8002e7a:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
            pHandle->highDuty = (uint16_t)wTimePhB;
 8002e7e:	f8a0 505c 	strh.w	r5, [r0, #92]	; 0x5c
 8002e82:	e717      	b.n	8002cb4 <PWMC_SetPhaseVoltage+0x88>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002e84:	f8a0 1058 	strh.w	r1, [r0, #88]	; 0x58
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002e88:	f8a0 505a 	strh.w	r5, [r0, #90]	; 0x5a
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002e8c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002e90:	e710      	b.n	8002cb4 <PWMC_SetPhaseVoltage+0x88>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002e92:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
            pHandle->midDuty = (uint16_t)wTimePhB;
 8002e96:	f8a0 505a 	strh.w	r5, [r0, #90]	; 0x5a
            pHandle->highDuty = (uint16_t)wTimePhC;
 8002e9a:	f8a0 105c 	strh.w	r1, [r0, #92]	; 0x5c
 8002e9e:	e709      	b.n	8002cb4 <PWMC_SetPhaseVoltage+0x88>
 8002ea0:	00010002 	.word	0x00010002
 8002ea4:	00020001 	.word	0x00020001

08002ea8 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002ea8:	6843      	ldr	r3, [r0, #4]
 8002eaa:	4718      	bx	r3

08002eac <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8002eac:	6883      	ldr	r3, [r0, #8]
 8002eae:	4718      	bx	r3

08002eb0 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002eb0:	b510      	push	{r4, lr}
 8002eb2:	4604      	mov	r4, r0
 8002eb4:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8002eb6:	b1a1      	cbz	r1, 8002ee2 <PWMC_CurrentReadingCalibr+0x32>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8002eb8:	2901      	cmp	r1, #1
 8002eba:	d002      	beq.n	8002ec2 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8002ebc:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8002ebe:	b002      	add	sp, #8
 8002ec0:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8002ec2:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8002ec6:	b1a3      	cbz	r3, 8002ef2 <PWMC_CurrentReadingCalibr+0x42>
        pHandle->OffCalibrWaitTimeCounter--;
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29b      	uxth	r3, r3
 8002ecc:	9101      	str	r1, [sp, #4]
 8002ece:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f2      	bne.n	8002ebc <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 8002ed6:	68c3      	ldr	r3, [r0, #12]
 8002ed8:	4798      	blx	r3
          retVal = true;
 8002eda:	9901      	ldr	r1, [sp, #4]
 8002edc:	4608      	mov	r0, r1
}
 8002ede:	b002      	add	sp, #8
 8002ee0:	bd10      	pop	{r4, pc}
      PWMC_SwitchOffPWM(pHandle);
 8002ee2:	f7ff ffe1 	bl	8002ea8 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8002ee6:	4620      	mov	r0, r4
 8002ee8:	68e3      	ldr	r3, [r4, #12]
 8002eea:	4798      	blx	r3
      retVal = true;
 8002eec:	2001      	movs	r0, #1
}
 8002eee:	b002      	add	sp, #8
 8002ef0:	bd10      	pop	{r4, pc}
        retVal = true;
 8002ef2:	4608      	mov	r0, r1
}
 8002ef4:	b002      	add	sp, #8
 8002ef6:	bd10      	pop	{r4, pc}

08002ef8 <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 8002ef8:	f890 3083 	ldrb.w	r3, [r0, #131]	; 0x83
 8002efc:	b91b      	cbnz	r3, 8002f06 <PWMC_OCP_Handler+0xe>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 8002efe:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d004      	beq.n	8002f10 <PWMC_OCP_Handler+0x18>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 8002f06:	2301      	movs	r3, #1
 8002f08:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8002f0c:	3078      	adds	r0, #120	; 0x78
 8002f0e:	4770      	bx	lr
{
 8002f10:	b430      	push	{r4, r5}
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8002f12:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 8002f16:	6c43      	ldr	r3, [r0, #68]	; 0x44
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 8002f18:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8002f1c:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8002f20:	6295      	str	r5, [r2, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 8002f22:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 8002f26:	628c      	str	r4, [r1, #40]	; 0x28
 8002f28:	629a      	str	r2, [r3, #40]	; 0x28
    pHandle->OverCurrentFlag = true;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 8002f30:	bc30      	pop	{r4, r5}
 8002f32:	3078      	adds	r0, #120	; 0x78
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop

08002f38 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002f38:	6c4a      	ldr	r2, [r1, #68]	; 0x44
{
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	b410      	push	{r4}
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002f3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    pHandle->OverVoltageFlag = true;
 8002f42:	2401      	movs	r4, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002f44:	644a      	str	r2, [r1, #68]	; 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8002f46:	3078      	adds	r0, #120	; 0x78
    pHandle->OverVoltageFlag = true;
 8002f48:	f883 4081 	strb.w	r4, [r3, #129]	; 0x81
    pHandle->BrakeActionLock = true;
 8002f4c:	f883 4083 	strb.w	r4, [r3, #131]	; 0x83
}
 8002f50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop

08002f58 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 8002f58:	4602      	mov	r2, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 8002f5a:	f890 0081 	ldrb.w	r0, [r0, #129]	; 0x81
 8002f5e:	b1a8      	cbz	r0, 8002f8c <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8002f60:	2300      	movs	r3, #0
 8002f62:	f882 3081 	strb.w	r3, [r2, #129]	; 0x81
 8002f66:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8002f68:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8002f6a:	f892 3080 	ldrb.w	r3, [r2, #128]	; 0x80
 8002f6e:	b11b      	cbz	r3, 8002f78 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8002f70:	2300      	movs	r3, #0
    retVal |= MC_OVER_CURR;
 8002f72:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 8002f74:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8002f78:	f892 3082 	ldrb.w	r3, [r2, #130]	; 0x82
 8002f7c:	b12b      	cbz	r3, 8002f8a <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 8002f7e:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
    pHandle->driverProtectionFlag = false;
 8002f82:	2100      	movs	r1, #0
    retVal |= MC_DP_FAULT;
 8002f84:	b298      	uxth	r0, r3
    pHandle->driverProtectionFlag = false;
 8002f86:	f882 1082 	strb.w	r1, [r2, #130]	; 0x82
  {
    /* Nothing to do */
  }

  return (retVal);
}
 8002f8a:	4770      	bx	lr
 8002f8c:	2140      	movs	r1, #64	; 0x40
 8002f8e:	e7ec      	b.n	8002f6a <PWMC_IsFaultOccurred+0x12>

08002f90 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002f90:	4967      	ldr	r1, [pc, #412]	; (8003130 <RCM_RegisterRegConv+0x1a0>)
 8002f92:	680a      	ldr	r2, [r1, #0]
{
 8002f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002f98:	2a00      	cmp	r2, #0
 8002f9a:	f000 8085 	beq.w	80030a8 <RCM_RegisterRegConv+0x118>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002f9e:	7904      	ldrb	r4, [r0, #4]
 8002fa0:	7913      	ldrb	r3, [r2, #4]
 8002fa2:	429c      	cmp	r4, r3
 8002fa4:	d01f      	beq.n	8002fe6 <RCM_RegisterRegConv+0x56>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002fa6:	684b      	ldr	r3, [r1, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 8092 	beq.w	80030d2 <RCM_RegisterRegConv+0x142>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002fae:	791d      	ldrb	r5, [r3, #4]
 8002fb0:	42a5      	cmp	r5, r4
  uint8_t handle = 255U;
 8002fb2:	f04f 02ff 	mov.w	r2, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002fb6:	d07e      	beq.n	80030b6 <RCM_RegisterRegConv+0x126>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002fb8:	688d      	ldr	r5, [r1, #8]
 8002fba:	2d00      	cmp	r5, #0
 8002fbc:	f000 80aa 	beq.w	8003114 <RCM_RegisterRegConv+0x184>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002fc0:	792b      	ldrb	r3, [r5, #4]
 8002fc2:	42a3      	cmp	r3, r4
 8002fc4:	d07e      	beq.n	80030c4 <RCM_RegisterRegConv+0x134>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002fc6:	68cb      	ldr	r3, [r1, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 809e 	beq.w	800310a <RCM_RegisterRegConv+0x17a>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002fce:	791d      	ldrb	r5, [r3, #4]
 8002fd0:	42a5      	cmp	r5, r4
 8002fd2:	f000 808a 	beq.w	80030ea <RCM_RegisterRegConv+0x15a>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8002fd6:	2a03      	cmp	r2, #3
 8002fd8:	bf88      	it	hi
 8002fda:	22ff      	movhi	r2, #255	; 0xff
 8002fdc:	f240 809f 	bls.w	800311e <RCM_RegisterRegConv+0x18e>
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 8002fe0:	7302      	strb	r2, [r0, #12]
}
 8002fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002fe6:	6812      	ldr	r2, [r2, #0]
 8002fe8:	6803      	ldr	r3, [r0, #0]
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d1db      	bne.n	8002fa6 <RCM_RegisterRegConv+0x16>
    uint8_t i = 0;
 8002fee:	2200      	movs	r2, #0
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8002ff0:	4d50      	ldr	r5, [pc, #320]	; (8003134 <RCM_RegisterRegConv+0x1a4>)
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ff2:	689c      	ldr	r4, [r3, #8]
      RCM_handle_array [handle] = regConv;
 8002ff4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	f845 1032 	str.w	r1, [r5, r2, lsl #3]
 8002ffe:	07e5      	lsls	r5, r4, #31
 8003000:	d422      	bmi.n	8003048 <RCM_RegisterRegConv+0xb8>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003002:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003004:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003006:	f021 0104 	bic.w	r1, r1, #4
 800300a:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800300c:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800300e:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003010:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8003012:	f021 0120 	bic.w	r1, r1, #32
 8003016:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003018:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800301a:	6899      	ldr	r1, [r3, #8]
 800301c:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8003020:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003024:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8003028:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800302a:	6899      	ldr	r1, [r3, #8]
 800302c:	2900      	cmp	r1, #0
 800302e:	dbfc      	blt.n	800302a <RCM_RegisterRegConv+0x9a>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003030:	6819      	ldr	r1, [r3, #0]
 8003032:	07cc      	lsls	r4, r1, #31
 8003034:	d408      	bmi.n	8003048 <RCM_RegisterRegConv+0xb8>
  MODIFY_REG(ADCx->CR,
 8003036:	4c40      	ldr	r4, [pc, #256]	; (8003138 <RCM_RegisterRegConv+0x1a8>)
 8003038:	6899      	ldr	r1, [r3, #8]
 800303a:	4021      	ands	r1, r4
 800303c:	f041 0101 	orr.w	r1, r1, #1
 8003040:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8003042:	6819      	ldr	r1, [r3, #0]
 8003044:	07c9      	lsls	r1, r1, #31
 8003046:	d5f7      	bpl.n	8003038 <RCM_RegisterRegConv+0xa8>
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003048:	6b19      	ldr	r1, [r3, #48]	; 0x30
      RCM_NoInj_array[handle].enable = false;
 800304a:	4f3c      	ldr	r7, [pc, #240]	; (800313c <RCM_RegisterRegConv+0x1ac>)
 800304c:	f021 010f 	bic.w	r1, r1, #15
 8003050:	6319      	str	r1, [r3, #48]	; 0x30
 8003052:	eb02 0442 	add.w	r4, r2, r2, lsl #1
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003056:	7905      	ldrb	r5, [r0, #4]
      RCM_NoInj_array[handle].enable = false;
 8003058:	0064      	lsls	r4, r4, #1
 800305a:	193e      	adds	r6, r7, r4
 800305c:	2101      	movs	r1, #1
 800305e:	f04f 0800 	mov.w	r8, #0
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003062:	2d09      	cmp	r5, #9
 8003064:	ea4f 6e85 	mov.w	lr, r5, lsl #26
 8003068:	fa01 f105 	lsl.w	r1, r1, r5
 800306c:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
      RCM_NoInj_array[handle].enable = false;
 8003070:	f807 8004 	strb.w	r8, [r7, r4]
      RCM_NoInj_array[handle].next = handle;
 8003074:	7172      	strb	r2, [r6, #5]
      RCM_NoInj_array[handle].prev = handle;
 8003076:	7132      	strb	r2, [r6, #4]
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003078:	d83e      	bhi.n	80030f8 <RCM_RegisterRegConv+0x168>
 800307a:	ea4e 5c0c 	orr.w	ip, lr, ip, lsl #20
 800307e:	ea4c 0101 	orr.w	r1, ip, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003082:	0dcd      	lsrs	r5, r1, #23
 8003084:	3314      	adds	r3, #20
 8003086:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 800308a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 800308e:	58ec      	ldr	r4, [r5, r3]
 8003090:	6886      	ldr	r6, [r0, #8]
 8003092:	2707      	movs	r7, #7
 8003094:	408f      	lsls	r7, r1
 8003096:	ea24 0407 	bic.w	r4, r4, r7
 800309a:	fa06 f101 	lsl.w	r1, r6, r1
 800309e:	4321      	orrs	r1, r4
 80030a0:	50e9      	str	r1, [r5, r3]
  regConv->convHandle = handle;
 80030a2:	7302      	strb	r2, [r0, #12]
}
 80030a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80030a8:	684b      	ldr	r3, [r1, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d039      	beq.n	8003122 <RCM_RegisterRegConv+0x192>
 80030ae:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80030b0:	791d      	ldrb	r5, [r3, #4]
 80030b2:	42a5      	cmp	r5, r4
 80030b4:	d180      	bne.n	8002fb8 <RCM_RegisterRegConv+0x28>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80030b6:	681d      	ldr	r5, [r3, #0]
 80030b8:	6803      	ldr	r3, [r0, #0]
 80030ba:	42ab      	cmp	r3, r5
 80030bc:	f47f af7c 	bne.w	8002fb8 <RCM_RegisterRegConv+0x28>
 80030c0:	2201      	movs	r2, #1
 80030c2:	e795      	b.n	8002ff0 <RCM_RegisterRegConv+0x60>
 80030c4:	682d      	ldr	r5, [r5, #0]
 80030c6:	6803      	ldr	r3, [r0, #0]
 80030c8:	429d      	cmp	r5, r3
 80030ca:	f47f af7c 	bne.w	8002fc6 <RCM_RegisterRegConv+0x36>
      i++;
 80030ce:	2202      	movs	r2, #2
 80030d0:	e78e      	b.n	8002ff0 <RCM_RegisterRegConv+0x60>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80030d2:	688d      	ldr	r5, [r1, #8]
      i++;
 80030d4:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80030d6:	2d00      	cmp	r5, #0
 80030d8:	f47f af72 	bne.w	8002fc0 <RCM_RegisterRegConv+0x30>
 80030dc:	68cb      	ldr	r3, [r1, #12]
 80030de:	b1f3      	cbz	r3, 800311e <RCM_RegisterRegConv+0x18e>
 80030e0:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80030e2:	791d      	ldrb	r5, [r3, #4]
 80030e4:	42a5      	cmp	r5, r4
 80030e6:	f47f af76 	bne.w	8002fd6 <RCM_RegisterRegConv+0x46>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80030ea:	681c      	ldr	r4, [r3, #0]
 80030ec:	6803      	ldr	r3, [r0, #0]
 80030ee:	429c      	cmp	r4, r3
 80030f0:	f47f af71 	bne.w	8002fd6 <RCM_RegisterRegConv+0x46>
      i++;
 80030f4:	2203      	movs	r2, #3
 80030f6:	e77b      	b.n	8002ff0 <RCM_RegisterRegConv+0x60>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80030f8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80030fc:	ea41 010e 	orr.w	r1, r1, lr
 8003100:	f1ac 0c1e 	sub.w	ip, ip, #30
 8003104:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
 8003108:	e7bb      	b.n	8003082 <RCM_RegisterRegConv+0xf2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800310a:	2a04      	cmp	r2, #4
 800310c:	f67f af63 	bls.w	8002fd6 <RCM_RegisterRegConv+0x46>
 8003110:	6803      	ldr	r3, [r0, #0]
 8003112:	e7ef      	b.n	80030f4 <RCM_RegisterRegConv+0x164>
 8003114:	2a04      	cmp	r2, #4
 8003116:	bf8c      	ite	hi
 8003118:	2202      	movhi	r2, #2
 800311a:	2200      	movls	r2, #0
 800311c:	e7de      	b.n	80030dc <RCM_RegisterRegConv+0x14c>
 800311e:	6803      	ldr	r3, [r0, #0]
 8003120:	e766      	b.n	8002ff0 <RCM_RegisterRegConv+0x60>
 8003122:	688d      	ldr	r5, [r1, #8]
 8003124:	b115      	cbz	r5, 800312c <RCM_RegisterRegConv+0x19c>
 8003126:	461a      	mov	r2, r3
 8003128:	7904      	ldrb	r4, [r0, #4]
 800312a:	e749      	b.n	8002fc0 <RCM_RegisterRegConv+0x30>
 800312c:	462a      	mov	r2, r5
 800312e:	e7d5      	b.n	80030dc <RCM_RegisterRegConv+0x14c>
 8003130:	20000628 	.word	0x20000628
 8003134:	200005e4 	.word	0x200005e4
 8003138:	7fffffc0 	.word	0x7fffffc0
 800313c:	20000604 	.word	0x20000604

08003140 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8003140:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8003142:	7b02      	ldrb	r2, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8003144:	4b5b      	ldr	r3, [pc, #364]	; (80032b4 <RCM_ExecRegularConv+0x174>)
 8003146:	0054      	lsls	r4, r2, #1
 8003148:	18a1      	adds	r1, r4, r2
 800314a:	f813 1011 	ldrb.w	r1, [r3, r1, lsl #1]
 800314e:	2900      	cmp	r1, #0
 8003150:	d139      	bne.n	80031c6 <RCM_ExecRegularConv+0x86>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8003152:	7818      	ldrb	r0, [r3, #0]
 8003154:	2800      	cmp	r0, #0
 8003156:	d17a      	bne.n	800324e <RCM_ExecRegularConv+0x10e>
 8003158:	7998      	ldrb	r0, [r3, #6]
  uint8_t LastEnable = RCM_MAX_CONV;
 800315a:	2104      	movs	r1, #4
      if (true == RCM_NoInj_array [i].enable)
 800315c:	2800      	cmp	r0, #0
 800315e:	d07c      	beq.n	800325a <RCM_ExecRegularConv+0x11a>
      {
        if (RCM_NoInj_array[i].next > handle)
 8003160:	7ade      	ldrb	r6, [r3, #11]
 8003162:	4296      	cmp	r6, r2
 8003164:	f200 8099 	bhi.w	800329a <RCM_ExecRegularConv+0x15a>
      if (true == RCM_NoInj_array [i].enable)
 8003168:	7b19      	ldrb	r1, [r3, #12]
 800316a:	2900      	cmp	r1, #0
 800316c:	f000 8098 	beq.w	80032a0 <RCM_ExecRegularConv+0x160>
        if (RCM_NoInj_array[i].next > handle)
 8003170:	7c5e      	ldrb	r6, [r3, #17]
 8003172:	42b2      	cmp	r2, r6
 8003174:	d305      	bcc.n	8003182 <RCM_ExecRegularConv+0x42>
      if (true == RCM_NoInj_array [i].enable)
 8003176:	7c99      	ldrb	r1, [r3, #18]
 8003178:	2900      	cmp	r1, #0
 800317a:	f040 8095 	bne.w	80032a8 <RCM_ExecRegularConv+0x168>
      }
      else
      {
        /* Nothing to do */
      }
      i++;
 800317e:	2102      	movs	r1, #2
 8003180:	e072      	b.n	8003268 <RCM_ExecRegularConv+0x128>
 8003182:	2102      	movs	r1, #2
      if (true == RCM_NoInj_array [i].enable)
 8003184:	4608      	mov	r0, r1
          RCM_NoInj_array[i].next = handle;
 8003186:	eb00 0540 	add.w	r5, r0, r0, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 800318a:	18a0      	adds	r0, r4, r2
 800318c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 8003190:	eb06 0746 	add.w	r7, r6, r6, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8003194:	7146      	strb	r6, [r0, #5]
 8003196:	4e48      	ldr	r6, [pc, #288]	; (80032b8 <RCM_ExecRegularConv+0x178>)
          RCM_NoInj_array[handle].prev = i;
 8003198:	7101      	strb	r1, [r0, #4]
          RCM_NoInj_array[i].next = handle;
 800319a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 800319e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80031a2:	7831      	ldrb	r1, [r6, #0]
          RCM_NoInj_array[i].next = handle;
 80031a4:	716a      	strb	r2, [r5, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 80031a6:	713a      	strb	r2, [r7, #4]
      {
        /* Nothing to do we are parsing the array, nothing inserted yet */
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
 80031a8:	18a0      	adds	r0, r4, r2
 80031aa:	0040      	lsls	r0, r0, #1
 80031ac:	181d      	adds	r5, r3, r0
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80031ae:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80031b2:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    RCM_NoInj_array[handle].status = notvalid;
 80031b6:	2700      	movs	r7, #0
 80031b8:	706f      	strb	r7, [r5, #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80031ba:	7849      	ldrb	r1, [r1, #1]
    RCM_NoInj_array[handle].enable = true;
 80031bc:	2501      	movs	r5, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80031be:	42a9      	cmp	r1, r5
    RCM_NoInj_array[handle].enable = true;
 80031c0:	541d      	strb	r5, [r3, r0]
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 80031c2:	bf18      	it	ne
 80031c4:	7032      	strbne	r2, [r6, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 80031c6:	493d      	ldr	r1, [pc, #244]	; (80032bc <RCM_ExecRegularConv+0x17c>)
 80031c8:	f891 10a0 	ldrb.w	r1, [r1, #160]	; 0xa0
 80031cc:	2900      	cmp	r1, #0
 80031ce:	d134      	bne.n	800323a <RCM_ExecRegularConv+0xfa>
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80031d0:	493b      	ldr	r1, [pc, #236]	; (80032c0 <RCM_ExecRegularConv+0x180>)
 80031d2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80031d6:	790d      	ldrb	r5, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80031d8:	6808      	ldr	r0, [r1, #0]
 80031da:	2d09      	cmp	r5, #9
 80031dc:	f04f 0101 	mov.w	r1, #1
 80031e0:	ea4f 6785 	mov.w	r7, r5, lsl #26
 80031e4:	fa01 f105 	lsl.w	r1, r1, r5
 80031e8:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 80031ec:	d92b      	bls.n	8003246 <RCM_ExecRegularConv+0x106>
 80031ee:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80031f2:	4339      	orrs	r1, r7
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80031f4:	3e1e      	subs	r6, #30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80031f6:	ea41 5106 	orr.w	r1, r1, r6, lsl #20
  MODIFY_REG(*preg,
 80031fa:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80031fc:	0d09      	lsrs	r1, r1, #20
 80031fe:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8003202:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 8003206:	4329      	orrs	r1, r5
 8003208:	6301      	str	r1, [r0, #48]	; 0x30
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 800320a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 800320c:	6881      	ldr	r1, [r0, #8]
 800320e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003212:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003216:	f041 0104 	orr.w	r1, r1, #4
 800321a:	6081      	str	r1, [r0, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800321c:	6801      	ldr	r1, [r0, #0]
 800321e:	0749      	lsls	r1, r1, #29
 8003220:	d5fc      	bpl.n	800321c <RCM_ExecRegularConv+0xdc>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8003222:	18a1      	adds	r1, r4, r2
 8003224:	6c00      	ldr	r0, [r0, #64]	; 0x40
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8003226:	4d24      	ldr	r5, [pc, #144]	; (80032b8 <RCM_ExecRegularConv+0x178>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8003228:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800322c:	f020 000f 	bic.w	r0, r0, #15
 8003230:	8048      	strh	r0, [r1, #2]
    RCM_NoInj_array[handle].status = valid;
 8003232:	2002      	movs	r0, #2
 8003234:	7048      	strb	r0, [r1, #1]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8003236:	7949      	ldrb	r1, [r1, #5]
 8003238:	7029      	strb	r1, [r5, #0]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 800323a:	4422      	add	r2, r4
 800323c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  return (retVal);
}
 8003240:	bcf0      	pop	{r4, r5, r6, r7}
 8003242:	8858      	ldrh	r0, [r3, #2]
 8003244:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003246:	ea47 5606 	orr.w	r6, r7, r6, lsl #20
 800324a:	4331      	orrs	r1, r6
 800324c:	e7d5      	b.n	80031fa <RCM_ExecRegularConv+0xba>
        if (RCM_NoInj_array[i].next > handle)
 800324e:	795e      	ldrb	r6, [r3, #5]
 8003250:	42b2      	cmp	r2, r6
 8003252:	d397      	bcc.n	8003184 <RCM_ExecRegularConv+0x44>
      if (true == RCM_NoInj_array [i].enable)
 8003254:	7998      	ldrb	r0, [r3, #6]
 8003256:	2800      	cmp	r0, #0
 8003258:	d182      	bne.n	8003160 <RCM_ExecRegularConv+0x20>
 800325a:	7b18      	ldrb	r0, [r3, #12]
 800325c:	2800      	cmp	r0, #0
 800325e:	d187      	bne.n	8003170 <RCM_ExecRegularConv+0x30>
 8003260:	7c98      	ldrb	r0, [r3, #18]
 8003262:	bb08      	cbnz	r0, 80032a8 <RCM_ExecRegularConv+0x168>
       if (LastEnable != RCM_MAX_CONV )
 8003264:	2904      	cmp	r1, #4
 8003266:	d014      	beq.n	8003292 <RCM_ExecRegularConv+0x152>
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003268:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 800326c:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8003270:	18a0      	adds	r0, r4, r2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003272:	f895 c005 	ldrb.w	ip, [r5, #5]
 8003276:	4e10      	ldr	r6, [pc, #64]	; (80032b8 <RCM_ExecRegularConv+0x178>)
         RCM_NoInj_array[formerNext].prev = handle;
 8003278:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 800327c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
         RCM_NoInj_array[formerNext].prev = handle;
 8003280:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8003284:	7101      	strb	r1, [r0, #4]
         RCM_NoInj_array[handle].next = formerNext;
 8003286:	f880 c005 	strb.w	ip, [r0, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 800328a:	713a      	strb	r2, [r7, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 800328c:	716a      	strb	r2, [r5, #5]
 800328e:	7831      	ldrb	r1, [r6, #0]
 8003290:	e78a      	b.n	80031a8 <RCM_ExecRegularConv+0x68>
         RCM_currentHandle = handle;
 8003292:	4e09      	ldr	r6, [pc, #36]	; (80032b8 <RCM_ExecRegularConv+0x178>)
 8003294:	4611      	mov	r1, r2
 8003296:	7032      	strb	r2, [r6, #0]
 8003298:	e786      	b.n	80031a8 <RCM_ExecRegularConv+0x68>
      i++;
 800329a:	2101      	movs	r1, #1
      if (true == RCM_NoInj_array [i].enable)
 800329c:	4608      	mov	r0, r1
 800329e:	e772      	b.n	8003186 <RCM_ExecRegularConv+0x46>
 80032a0:	7c99      	ldrb	r1, [r3, #18]
 80032a2:	b909      	cbnz	r1, 80032a8 <RCM_ExecRegularConv+0x168>
      i++;
 80032a4:	2101      	movs	r1, #1
 80032a6:	e7df      	b.n	8003268 <RCM_ExecRegularConv+0x128>
        if (RCM_NoInj_array[i].next > handle)
 80032a8:	7dde      	ldrb	r6, [r3, #23]
 80032aa:	4296      	cmp	r6, r2
      i++;
 80032ac:	f04f 0103 	mov.w	r1, #3
        if (RCM_NoInj_array[i].next > handle)
 80032b0:	d9da      	bls.n	8003268 <RCM_ExecRegularConv+0x128>
 80032b2:	e767      	b.n	8003184 <RCM_ExecRegularConv+0x44>
 80032b4:	20000604 	.word	0x20000604
 80032b8:	20000624 	.word	0x20000624
 80032bc:	20000124 	.word	0x20000124
 80032c0:	20000628 	.word	0x20000628

080032c4 <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 80032c4:	4b75      	ldr	r3, [pc, #468]	; (800349c <RCM_ExecUserConv+0x1d8>)
 80032c6:	6818      	ldr	r0, [r3, #0]
 80032c8:	b138      	cbz	r0, 80032da <RCM_ExecUserConv+0x16>
{
 80032ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80032ce:	4c74      	ldr	r4, [pc, #464]	; (80034a0 <RCM_ExecUserConv+0x1dc>)
 80032d0:	7823      	ldrb	r3, [r4, #0]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d002      	beq.n	80032dc <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 80032d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032da:	4770      	bx	lr
    handle = RCM_UserConvHandle->convHandle;
 80032dc:	7b03      	ldrb	r3, [r0, #12]
  if (false == RCM_NoInj_array [handle].enable)
 80032de:	4a71      	ldr	r2, [pc, #452]	; (80034a4 <RCM_ExecUserConv+0x1e0>)
 80032e0:	0059      	lsls	r1, r3, #1
 80032e2:	18cd      	adds	r5, r1, r3
 80032e4:	f812 5015 	ldrb.w	r5, [r2, r5, lsl #1]
 80032e8:	2d00      	cmp	r5, #0
 80032ea:	d13f      	bne.n	800336c <RCM_ExecUserConv+0xa8>
      if (true == RCM_NoInj_array [i].enable)
 80032ec:	7816      	ldrb	r6, [r2, #0]
 80032ee:	2e00      	cmp	r6, #0
 80032f0:	f040 809b 	bne.w	800342a <RCM_ExecUserConv+0x166>
  uint8_t LastEnable = RCM_MAX_CONV;
 80032f4:	2504      	movs	r5, #4
      if (true == RCM_NoInj_array [i].enable)
 80032f6:	7996      	ldrb	r6, [r2, #6]
 80032f8:	2e00      	cmp	r6, #0
 80032fa:	f000 80af 	beq.w	800345c <RCM_ExecUserConv+0x198>
        if (RCM_NoInj_array[i].next > handle)
 80032fe:	7ad7      	ldrb	r7, [r2, #11]
 8003300:	42bb      	cmp	r3, r7
 8003302:	f0c0 80bd 	bcc.w	8003480 <RCM_ExecUserConv+0x1bc>
      if (true == RCM_NoInj_array [i].enable)
 8003306:	7b15      	ldrb	r5, [r2, #12]
 8003308:	2d00      	cmp	r5, #0
 800330a:	f040 80bc 	bne.w	8003486 <RCM_ExecUserConv+0x1c2>
 800330e:	7c95      	ldrb	r5, [r2, #18]
 8003310:	2d00      	cmp	r5, #0
 8003312:	f040 80a7 	bne.w	8003464 <RCM_ExecUserConv+0x1a0>
      i++;
 8003316:	2501      	movs	r5, #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003318:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800331c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8003320:	18ce      	adds	r6, r1, r3
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003322:	f89c 8005 	ldrb.w	r8, [ip, #5]
 8003326:	4f60      	ldr	r7, [pc, #384]	; (80034a8 <RCM_ExecUserConv+0x1e4>)
         RCM_NoInj_array[handle].next = formerNext;
 8003328:	eb02 0646 	add.w	r6, r2, r6, lsl #1
         RCM_NoInj_array[formerNext].prev = handle;
 800332c:	eb08 0e48 	add.w	lr, r8, r8, lsl #1
 8003330:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8003334:	7135      	strb	r5, [r6, #4]
 8003336:	783d      	ldrb	r5, [r7, #0]
         RCM_NoInj_array[handle].next = formerNext;
 8003338:	f886 8005 	strb.w	r8, [r6, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 800333c:	f88e 3004 	strb.w	r3, [lr, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8003340:	f88c 3005 	strb.w	r3, [ip, #5]
    RCM_NoInj_array[handle].enable = true;
 8003344:	18ce      	adds	r6, r1, r3
 8003346:	0076      	lsls	r6, r6, #1
 8003348:	eb02 0c06 	add.w	ip, r2, r6
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800334c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003350:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    RCM_NoInj_array[handle].status = notvalid;
 8003354:	f04f 0e00 	mov.w	lr, #0
 8003358:	f88c e001 	strb.w	lr, [ip, #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800335c:	786d      	ldrb	r5, [r5, #1]
    RCM_NoInj_array[handle].enable = true;
 800335e:	f04f 0c01 	mov.w	ip, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8003362:	4565      	cmp	r5, ip
    RCM_NoInj_array[handle].enable = true;
 8003364:	f802 c006 	strb.w	ip, [r2, r6]
      RCM_currentHandle = handle;
 8003368:	bf18      	it	ne
 800336a:	703b      	strbne	r3, [r7, #0]
  if (false == PWM_Handle_M1.ADCRegularLocked)
 800336c:	4d4f      	ldr	r5, [pc, #316]	; (80034ac <RCM_ExecUserConv+0x1e8>)
 800336e:	f895 50a0 	ldrb.w	r5, [r5, #160]	; 0xa0
 8003372:	2d00      	cmp	r5, #0
 8003374:	d13c      	bne.n	80033f0 <RCM_ExecUserConv+0x12c>
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003376:	4d4e      	ldr	r5, [pc, #312]	; (80034b0 <RCM_ExecUserConv+0x1ec>)
 8003378:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800337c:	792f      	ldrb	r7, [r5, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800337e:	682e      	ldr	r6, [r5, #0]
 8003380:	2f09      	cmp	r7, #9
 8003382:	f04f 0501 	mov.w	r5, #1
 8003386:	ea4f 6e87 	mov.w	lr, r7, lsl #26
 800338a:	fa05 f507 	lsl.w	r5, r5, r7
 800338e:	eb07 0c47 	add.w	ip, r7, r7, lsl #1
 8003392:	d945      	bls.n	8003420 <RCM_ExecUserConv+0x15c>
 8003394:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
 8003398:	ea45 050e 	orr.w	r5, r5, lr
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800339c:	f1ac 0c1e 	sub.w	ip, ip, #30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80033a0:	ea45 550c 	orr.w	r5, r5, ip, lsl #20
  MODIFY_REG(*preg,
 80033a4:	6b37      	ldr	r7, [r6, #48]	; 0x30
 80033a6:	0d2d      	lsrs	r5, r5, #20
 80033a8:	f405 65f8 	and.w	r5, r5, #1984	; 0x7c0
 80033ac:	f427 67f8 	bic.w	r7, r7, #1984	; 0x7c0
 80033b0:	433d      	orrs	r5, r7
 80033b2:	6335      	str	r5, [r6, #48]	; 0x30
 80033b4:	6c35      	ldr	r5, [r6, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80033b6:	68b5      	ldr	r5, [r6, #8]
 80033b8:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 80033bc:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80033c0:	f045 0504 	orr.w	r5, r5, #4
 80033c4:	60b5      	str	r5, [r6, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80033c6:	6835      	ldr	r5, [r6, #0]
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	d5fc      	bpl.n	80033c6 <RCM_ExecUserConv+0x102>
 80033cc:	6c35      	ldr	r5, [r6, #64]	; 0x40
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80033ce:	4e39      	ldr	r6, [pc, #228]	; (80034b4 <RCM_ExecUserConv+0x1f0>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 80033d0:	4419      	add	r1, r3
 80033d2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80033d6:	f025 010f 	bic.w	r1, r5, #15
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 80033da:	4d33      	ldr	r5, [pc, #204]	; (80034a8 <RCM_ExecUserConv+0x1e4>)
 80033dc:	7957      	ldrb	r7, [r2, #5]
 80033de:	702f      	strb	r7, [r5, #0]
 80033e0:	b289      	uxth	r1, r1
    RCM_NoInj_array[handle].status = valid;
 80033e2:	2502      	movs	r5, #2
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 80033e4:	8051      	strh	r1, [r2, #2]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80033e6:	8031      	strh	r1, [r6, #0]
    RCM_NoInj_array[handle].status = valid;
 80033e8:	7055      	strb	r5, [r2, #1]
        RCM_UserConvState = RCM_USERCONV_EOC;
 80033ea:	2202      	movs	r2, #2
 80033ec:	7022      	strb	r2, [r4, #0]
 80033ee:	e008      	b.n	8003402 <RCM_ExecUserConv+0x13e>
 80033f0:	4419      	add	r1, r3
 80033f2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80033f6:	4e2f      	ldr	r6, [pc, #188]	; (80034b4 <RCM_ExecUserConv+0x1f0>)
 80033f8:	7855      	ldrb	r5, [r2, #1]
  retVal = RCM_NoInj_array[handle].value;
 80033fa:	8851      	ldrh	r1, [r2, #2]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80033fc:	8031      	strh	r1, [r6, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 80033fe:	2d00      	cmp	r5, #0
 8003400:	d1f3      	bne.n	80033ea <RCM_ExecUserConv+0x126>
      if (RCM_CB_array[handle].cb != NULL)
 8003402:	4a2d      	ldr	r2, [pc, #180]	; (80034b8 <RCM_ExecUserConv+0x1f4>)
 8003404:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8003408:	2d00      	cmp	r5, #0
 800340a:	f43f af64 	beq.w	80032d6 <RCM_ExecUserConv+0x12>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800340e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003412:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8003414:	2300      	movs	r3, #0
 8003416:	7023      	strb	r3, [r4, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003418:	462b      	mov	r3, r5
}
 800341a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800341e:	4718      	bx	r3
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003420:	ea4e 5c0c 	orr.w	ip, lr, ip, lsl #20
 8003424:	ea4c 0505 	orr.w	r5, ip, r5
 8003428:	e7bc      	b.n	80033a4 <RCM_ExecUserConv+0xe0>
        if (RCM_NoInj_array[i].next > handle)
 800342a:	7957      	ldrb	r7, [r2, #5]
 800342c:	42bb      	cmp	r3, r7
 800342e:	f4bf af62 	bcs.w	80032f6 <RCM_ExecUserConv+0x32>
      if (true == RCM_NoInj_array [i].enable)
 8003432:	462e      	mov	r6, r5
          RCM_NoInj_array[i].next = handle;
 8003434:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8003438:	18ce      	adds	r6, r1, r3
 800343a:	eb02 0646 	add.w	r6, r2, r6, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 800343e:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8003442:	7177      	strb	r7, [r6, #5]
          RCM_NoInj_array[i].next = handle;
 8003444:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 8003448:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 800344c:	4f16      	ldr	r7, [pc, #88]	; (80034a8 <RCM_ExecUserConv+0x1e4>)
          RCM_NoInj_array[handle].prev = i;
 800344e:	7135      	strb	r5, [r6, #4]
          RCM_NoInj_array[i].next = handle;
 8003450:	f88c 3005 	strb.w	r3, [ip, #5]
 8003454:	783d      	ldrb	r5, [r7, #0]
          RCM_NoInj_array[formerNext].prev = handle;
 8003456:	f88e 3004 	strb.w	r3, [lr, #4]
 800345a:	e773      	b.n	8003344 <RCM_ExecUserConv+0x80>
      if (true == RCM_NoInj_array [i].enable)
 800345c:	7b16      	ldrb	r6, [r2, #12]
 800345e:	b996      	cbnz	r6, 8003486 <RCM_ExecUserConv+0x1c2>
 8003460:	7c96      	ldrb	r6, [r2, #18]
 8003462:	b136      	cbz	r6, 8003472 <RCM_ExecUserConv+0x1ae>
        if (RCM_NoInj_array[i].next > handle)
 8003464:	7dd7      	ldrb	r7, [r2, #23]
 8003466:	42bb      	cmp	r3, r7
      i++;
 8003468:	f04f 0503 	mov.w	r5, #3
        if (RCM_NoInj_array[i].next > handle)
 800346c:	f4bf af54 	bcs.w	8003318 <RCM_ExecUserConv+0x54>
 8003470:	e7df      	b.n	8003432 <RCM_ExecUserConv+0x16e>
       if (LastEnable != RCM_MAX_CONV )
 8003472:	2d04      	cmp	r5, #4
 8003474:	f47f af50 	bne.w	8003318 <RCM_ExecUserConv+0x54>
         RCM_currentHandle = handle;
 8003478:	4f0b      	ldr	r7, [pc, #44]	; (80034a8 <RCM_ExecUserConv+0x1e4>)
 800347a:	461d      	mov	r5, r3
 800347c:	703b      	strb	r3, [r7, #0]
 800347e:	e761      	b.n	8003344 <RCM_ExecUserConv+0x80>
      i++;
 8003480:	2501      	movs	r5, #1
      if (true == RCM_NoInj_array [i].enable)
 8003482:	462e      	mov	r6, r5
 8003484:	e7d6      	b.n	8003434 <RCM_ExecUserConv+0x170>
        if (RCM_NoInj_array[i].next > handle)
 8003486:	7c57      	ldrb	r7, [r2, #17]
 8003488:	42bb      	cmp	r3, r7
 800348a:	d304      	bcc.n	8003496 <RCM_ExecUserConv+0x1d2>
      if (true == RCM_NoInj_array [i].enable)
 800348c:	7c95      	ldrb	r5, [r2, #18]
 800348e:	2d00      	cmp	r5, #0
 8003490:	d1e8      	bne.n	8003464 <RCM_ExecUserConv+0x1a0>
      i++;
 8003492:	2502      	movs	r5, #2
 8003494:	e740      	b.n	8003318 <RCM_ExecUserConv+0x54>
 8003496:	2502      	movs	r5, #2
 8003498:	e7cb      	b.n	8003432 <RCM_ExecUserConv+0x16e>
 800349a:	bf00      	nop
 800349c:	2000061c 	.word	0x2000061c
 80034a0:	20000620 	.word	0x20000620
 80034a4:	20000604 	.word	0x20000604
 80034a8:	20000624 	.word	0x20000624
 80034ac:	20000124 	.word	0x20000124
 80034b0:	20000628 	.word	0x20000628
 80034b4:	20000622 	.word	0x20000622
 80034b8:	200005e4 	.word	0x200005e4

080034bc <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
 80034bc:	b4f0      	push	{r4, r5, r6, r7}
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 80034be:	4b1d      	ldr	r3, [pc, #116]	; (8003534 <RCM_ExecNextConv+0x78>)
 80034c0:	481d      	ldr	r0, [pc, #116]	; (8003538 <RCM_ExecNextConv+0x7c>)
 80034c2:	781a      	ldrb	r2, [r3, #0]
 80034c4:	0054      	lsls	r4, r2, #1
 80034c6:	18a3      	adds	r3, r4, r2
 80034c8:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 80034cc:	b35b      	cbz	r3, 8003526 <RCM_ExecNextConv+0x6a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80034ce:	4b1b      	ldr	r3, [pc, #108]	; (800353c <RCM_ExecNextConv+0x80>)
 80034d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034d4:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80034d6:	2504      	movs	r5, #4
 80034d8:	600d      	str	r5, [r1, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80034da:	791d      	ldrb	r5, [r3, #4]
 80034dc:	2301      	movs	r3, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80034de:	2d09      	cmp	r5, #9
 80034e0:	ea4f 6785 	mov.w	r7, r5, lsl #26
 80034e4:	fa03 f305 	lsl.w	r3, r3, r5
 80034e8:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 80034ec:	d91d      	bls.n	800352a <RCM_ExecNextConv+0x6e>
 80034ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80034f2:	433b      	orrs	r3, r7
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 80034f4:	3e1e      	subs	r6, #30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80034f6:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  MODIFY_REG(*preg,
 80034fa:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 80034fc:	0d1b      	lsrs	r3, r3, #20
 80034fe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003502:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 8003506:	432b      	orrs	r3, r5
 8003508:	630b      	str	r3, [r1, #48]	; 0x30
 800350a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 800350c:	688b      	ldr	r3, [r1, #8]

    (void)LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 800350e:	4422      	add	r2, r4
 8003510:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003514:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8003518:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800351c:	2201      	movs	r2, #1
 800351e:	f043 0304 	orr.w	r3, r3, #4
 8003522:	7042      	strb	r2, [r0, #1]
 8003524:	608b      	str	r3, [r1, #8]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8003526:	bcf0      	pop	{r4, r5, r6, r7}
 8003528:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 800352a:	ea47 5606 	orr.w	r6, r7, r6, lsl #20
 800352e:	4333      	orrs	r3, r6
 8003530:	e7e3      	b.n	80034fa <RCM_ExecNextConv+0x3e>
 8003532:	bf00      	nop
 8003534:	20000624 	.word	0x20000624
 8003538:	20000604 	.word	0x20000604
 800353c:	20000628 	.word	0x20000628

08003540 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8003540:	b470      	push	{r4, r5, r6}
  uint32_t result;
  RCM_status_t status;

  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8003542:	4c10      	ldr	r4, [pc, #64]	; (8003584 <RCM_ReadOngoingConv+0x44>)
 8003544:	4a10      	ldr	r2, [pc, #64]	; (8003588 <RCM_ReadOngoingConv+0x48>)
 8003546:	7821      	ldrb	r1, [r4, #0]
 8003548:	0048      	lsls	r0, r1, #1
 800354a:	1843      	adds	r3, r0, r1
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	18d5      	adds	r5, r2, r3
 8003550:	5cd3      	ldrb	r3, [r2, r3]
 8003552:	b1ab      	cbz	r3, 8003580 <RCM_ReadOngoingConv+0x40>
  {
    status = RCM_NoInj_array[RCM_currentHandle].status;
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8003554:	4b0d      	ldr	r3, [pc, #52]	; (800358c <RCM_ReadOngoingConv+0x4c>)
 8003556:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800355a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800355c:	681e      	ldr	r6, [r3, #0]
 800355e:	0776      	lsls	r6, r6, #29
 8003560:	d509      	bpl.n	8003576 <RCM_ReadOngoingConv+0x36>
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8003562:	786e      	ldrb	r6, [r5, #1]
 8003564:	f016 0ffd 	tst.w	r6, #253	; 0xfd
 8003568:	d005      	beq.n	8003576 <RCM_ReadOngoingConv+0x36>
 800356a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    else
    {
      /* Reading of ADC Converted Value */
      RCM_NoInj_array[RCM_currentHandle].value
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 800356c:	2602      	movs	r6, #2
 800356e:	f023 030f 	bic.w	r3, r3, #15
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
 8003572:	806b      	strh	r3, [r5, #2]
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 8003574:	706e      	strb	r6, [r5, #1]
      /* Restore back DMA configuration */
    }

    /* Prepare next conversion */
    RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8003576:	4401      	add	r1, r0
 8003578:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 800357c:	7953      	ldrb	r3, [r2, #5]
 800357e:	7023      	strb	r3, [r4, #0]
    }
    else
    {
      /* Nothing to do */
    }
}
 8003580:	bc70      	pop	{r4, r5, r6}
 8003582:	4770      	bx	lr
 8003584:	20000624 	.word	0x20000624
 8003588:	20000604 	.word	0x20000604
 800358c:	20000628 	.word	0x20000628

08003590 <TIM2_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE(ENCODER_M1.TIMx) != 0U)
 8003590:	4806      	ldr	r0, [pc, #24]	; (80035ac <TIM2_IRQHandler+0x1c>)
 8003592:	6a03      	ldr	r3, [r0, #32]
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	07d1      	lsls	r1, r2, #31
 8003598:	d502      	bpl.n	80035a0 <TIM2_IRQHandler+0x10>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	07d2      	lsls	r2, r2, #31
 800359e:	d400      	bmi.n	80035a2 <TIM2_IRQHandler+0x12>
  }

  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 80035a0:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80035a2:	f06f 0201 	mvn.w	r2, #1
 80035a6:	611a      	str	r2, [r3, #16]
      (void)ENC_IRQHandler(&ENCODER_M1);
 80035a8:	f003 bd74 	b.w	8007094 <ENC_IRQHandler>
 80035ac:	200002b4 	.word	0x200002b4

080035b0 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 80035b0:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 80035b2:	f7fe ff4d 	bl	8002450 <TSK_HardwareFaultTask>
 80035b6:	e7fe      	b.n	80035b6 <HardFault_Handler+0x6>

080035b8 <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 80035b8:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80035ba:	4c0a      	ldr	r4, [pc, #40]	; (80035e4 <SysTick_Handler+0x2c>)
 80035bc:	7823      	ldrb	r3, [r4, #0]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d009      	beq.n	80035d6 <SysTick_Handler+0x1e>
 80035c2:	3301      	adds	r3, #1
 80035c4:	b2db      	uxtb	r3, r3
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 80035c6:	7023      	strb	r3, [r4, #0]
  /* NO DMA interrupt */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */

    MC_RunMotorControlTasks();
 80035c8:	f7fe ff18 	bl	80023fc <MC_RunMotorControlTasks>

    TC_IncTick(&PosCtrlM1);
 80035cc:	4806      	ldr	r0, [pc, #24]	; (80035e8 <SysTick_Handler+0x30>)

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 80035ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TC_IncTick(&PosCtrlM1);
 80035d2:	f005 b9d7 	b.w	8008984 <TC_IncTick>
    HAL_IncTick();
 80035d6:	f000 fa4f 	bl	8003a78 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80035da:	f001 fa3b 	bl	8004a54 <HAL_SYSTICK_IRQHandler>
 80035de:	2301      	movs	r3, #1
 80035e0:	e7f1      	b.n	80035c6 <SysTick_Handler+0xe>
 80035e2:	bf00      	nop
 80035e4:	200003d4 	.word	0x200003d4
 80035e8:	200001c8 	.word	0x200001c8

080035ec <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 80035ec:	4b04      	ldr	r3, [pc, #16]	; (8003600 <EXTI15_10_IRQHandler+0x14>)
 80035ee:	695a      	ldr	r2, [r3, #20]

  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13))
 80035f0:	0492      	lsls	r2, r2, #18
 80035f2:	d400      	bmi.n	80035f6 <EXTI15_10_IRQHandler+0xa>
  else
  {
    /* Nothing to do */
  }

}
 80035f4:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 80035f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80035fa:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb();
 80035fc:	f7fe bf36 	b.w	800246c <UI_HandleStartStopButton_cb>
 8003600:	40010400 	.word	0x40010400

08003604 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003604:	4b0e      	ldr	r3, [pc, #56]	; (8003640 <HAL_MspInit+0x3c>)
{
 8003606:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003608:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800360a:	f042 0201 	orr.w	r2, r2, #1
 800360e:	661a      	str	r2, [r3, #96]	; 0x60
 8003610:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003612:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003614:	f002 0201 	and.w	r2, r2, #1
 8003618:	9200      	str	r2, [sp, #0]
 800361a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800361c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800361e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003622:	659a      	str	r2, [r3, #88]	; 0x58
 8003624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800362c:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 800362e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003630:	f001 f99e 	bl	8004970 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003634:	b003      	add	sp, #12
 8003636:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 800363a:	f001 bb73 	b.w	8004d24 <HAL_PWREx_DisableUCPDDeadBattery>
 800363e:	bf00      	nop
 8003640:	40021000 	.word	0x40021000

08003644 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003644:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003646:	2300      	movs	r3, #0
{
 8003648:	b09f      	sub	sp, #124	; 0x7c
 800364a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800364c:	4619      	mov	r1, r3
 800364e:	a809      	add	r0, sp, #36	; 0x24
 8003650:	2254      	movs	r2, #84	; 0x54
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003652:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003656:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800365a:	9308      	str	r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800365c:	f005 fa1d 	bl	8008a9a <memset>
  if(hadc->Instance==ADC1)
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003666:	d001      	beq.n	800366c <HAL_ADC_MspInit+0x28>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8003668:	b01f      	add	sp, #124	; 0x7c
 800366a:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800366c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003670:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003674:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003676:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003678:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800367a:	f001 ff81 	bl	8005580 <HAL_RCCEx_PeriphCLKConfig>
 800367e:	2800      	cmp	r0, #0
 8003680:	d12f      	bne.n	80036e2 <HAL_ADC_MspInit+0x9e>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003682:	4b19      	ldr	r3, [pc, #100]	; (80036e8 <HAL_ADC_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003684:	4819      	ldr	r0, [pc, #100]	; (80036ec <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003688:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800368c:	64da      	str	r2, [r3, #76]	; 0x4c
 800368e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003690:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003694:	9201      	str	r2, [sp, #4]
 8003696:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003698:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800369a:	f042 0204 	orr.w	r2, r2, #4
 800369e:	64da      	str	r2, [r3, #76]	; 0x4c
 80036a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036a2:	f002 0204 	and.w	r2, r2, #4
 80036a6:	9202      	str	r2, [sp, #8]
 80036a8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036ac:	f042 0201 	orr.w	r2, r2, #1
 80036b0:	64da      	str	r2, [r3, #76]	; 0x4c
 80036b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036ba:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 80036bc:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036be:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036c0:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036c2:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036c4:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036c6:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80036ca:	f001 f9c7 	bl	8004a5c <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036ce:	a904      	add	r1, sp, #16
 80036d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036d4:	e9cd 4404 	strd	r4, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036d8:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036da:	f001 f9bf 	bl	8004a5c <HAL_GPIO_Init>
}
 80036de:	b01f      	add	sp, #124	; 0x7c
 80036e0:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 80036e2:	f7fe fc2f 	bl	8001f44 <Error_Handler>
 80036e6:	e7cc      	b.n	8003682 <HAL_ADC_MspInit+0x3e>
 80036e8:	40021000 	.word	0x40021000
 80036ec:	48000800 	.word	0x48000800

080036f0 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 80036f0:	6802      	ldr	r2, [r0, #0]
 80036f2:	4b0a      	ldr	r3, [pc, #40]	; (800371c <HAL_CORDIC_MspInit+0x2c>)
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d000      	beq.n	80036fa <HAL_CORDIC_MspInit+0xa>
 80036f8:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80036fa:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 80036fe:	f042 0208 	orr.w	r2, r2, #8
 8003702:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8003706:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 800370a:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800370c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	9301      	str	r3, [sp, #4]
 8003714:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8003716:	b002      	add	sp, #8
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	40020c00 	.word	0x40020c00

08003720 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003720:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_pwm->Instance==TIM1)
 8003722:	6801      	ldr	r1, [r0, #0]
 8003724:	4a18      	ldr	r2, [pc, #96]	; (8003788 <HAL_TIM_PWM_MspInit+0x68>)
{
 8003726:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003728:	2300      	movs	r3, #0
  if(htim_pwm->Instance==TIM1)
 800372a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800372c:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003730:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003734:	9307      	str	r3, [sp, #28]
  if(htim_pwm->Instance==TIM1)
 8003736:	d001      	beq.n	800373c <HAL_TIM_PWM_MspInit+0x1c>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8003738:	b008      	add	sp, #32
 800373a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800373c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003740:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003744:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003746:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003748:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800374c:	661a      	str	r2, [r3, #96]	; 0x60
 800374e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003750:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003754:	9201      	str	r2, [sp, #4]
 8003756:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003758:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800375a:	f042 0201 	orr.w	r2, r2, #1
 800375e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003768:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800376a:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 800376c:	2540      	movs	r5, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800376e:	2412      	movs	r4, #18
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003774:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003776:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003778:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800377c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800377e:	f001 f96d 	bl	8004a5c <HAL_GPIO_Init>
}
 8003782:	b008      	add	sp, #32
 8003784:	bd70      	pop	{r4, r5, r6, pc}
 8003786:	bf00      	nop
 8003788:	40012c00 	.word	0x40012c00

0800378c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800378c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM2)
 800378e:	6803      	ldr	r3, [r0, #0]
{
 8003790:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003792:	2400      	movs	r4, #0
  if(htim_encoder->Instance==TIM2)
 8003794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003798:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800379c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80037a0:	9407      	str	r4, [sp, #28]
  if(htim_encoder->Instance==TIM2)
 80037a2:	d001      	beq.n	80037a8 <HAL_TIM_Encoder_MspInit+0x1c>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80037a4:	b008      	add	sp, #32
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037a8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ac:	2602      	movs	r6, #2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037b0:	f042 0201 	orr.w	r2, r2, #1
 80037b4:	659a      	str	r2, [r3, #88]	; 0x58
 80037b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80037b8:	f002 0201 	and.w	r2, r2, #1
 80037bc:	9200      	str	r2, [sp, #0]
 80037be:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037c0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037c2:	f042 0201 	orr.w	r2, r2, #1
 80037c6:	64da      	str	r2, [r3, #76]	; 0x4c
 80037c8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037ca:	f002 0201 	and.w	r2, r2, #1
 80037ce:	9201      	str	r2, [sp, #4]
 80037d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80037d4:	f042 0202 	orr.w	r2, r2, #2
 80037d8:	64da      	str	r2, [r3, #76]	; 0x4c
 80037da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037e2:	2501      	movs	r5, #1
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin;
 80037e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(M1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 80037e8:	a903      	add	r1, sp, #12
 80037ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ee:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80037f0:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037f2:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(M1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 80037f6:	f001 f931 	bl	8004a5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_ENCODER_B_Pin;
 80037fa:	2308      	movs	r3, #8
    HAL_GPIO_Init(M1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 80037fc:	a903      	add	r1, sp, #12
 80037fe:	4805      	ldr	r0, [pc, #20]	; (8003814 <HAL_TIM_Encoder_MspInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003800:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003802:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003804:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = M1_ENCODER_B_Pin;
 8003808:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 800380a:	f001 f927 	bl	8004a5c <HAL_GPIO_Init>
}
 800380e:	b008      	add	sp, #32
 8003810:	bd70      	pop	{r4, r5, r6, pc}
 8003812:	bf00      	nop
 8003814:	48000400 	.word	0x48000400

08003818 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003818:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800381a:	6801      	ldr	r1, [r0, #0]
 800381c:	4a23      	ldr	r2, [pc, #140]	; (80038ac <HAL_TIM_MspPostInit+0x94>)
{
 800381e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003820:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8003822:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003824:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003828:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800382c:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 800382e:	d001      	beq.n	8003834 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003830:	b008      	add	sp, #32
 8003832:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003834:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003838:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383c:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800383e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003840:	f042 0201 	orr.w	r2, r2, #1
 8003844:	64da      	str	r2, [r3, #76]	; 0x4c
 8003846:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003848:	f002 0201 	and.w	r2, r2, #1
 800384c:	9201      	str	r2, [sp, #4]
 800384e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003850:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003852:	f042 0202 	orr.w	r2, r2, #2
 8003856:	64da      	str	r2, [r3, #76]	; 0x4c
 8003858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800385a:	f003 0302 	and.w	r3, r3, #2
 800385e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003860:	2506      	movs	r5, #6
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003862:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003864:	2601      	movs	r6, #1
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003866:	a903      	add	r1, sp, #12
 8003868:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800386c:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800386e:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003870:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003874:	e9cd 6405 	strd	r6, r4, [sp, #20]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003878:	f001 f8f0 	bl	8004a5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 800387c:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800387e:	a903      	add	r1, sp, #12
 8003880:	480b      	ldr	r0, [pc, #44]	; (80038b0 <HAL_TIM_MspPostInit+0x98>)
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003882:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003884:	e9cd 4604 	strd	r4, r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003888:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800388c:	f001 f8e6 	bl	8004a5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003890:	f44f 63e0 	mov.w	r3, #1792	; 0x700
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003894:	a903      	add	r1, sp, #12
 8003896:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800389a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800389c:	e9cd 4404 	strd	r4, r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038a0:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80038a2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a4:	f001 f8da 	bl	8004a5c <HAL_GPIO_Init>
}
 80038a8:	b008      	add	sp, #32
 80038aa:	bd70      	pop	{r4, r5, r6, pc}
 80038ac:	40012c00 	.word	0x40012c00
 80038b0:	48000400 	.word	0x48000400

080038b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038b4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b6:	2300      	movs	r3, #0
{
 80038b8:	b09c      	sub	sp, #112	; 0x70
 80038ba:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038bc:	4619      	mov	r1, r3
 80038be:	2254      	movs	r2, #84	; 0x54
 80038c0:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80038c6:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80038ca:	9306      	str	r3, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038cc:	f005 f8e5 	bl	8008a9a <memset>
  if(huart->Instance==USART2)
 80038d0:	6822      	ldr	r2, [r4, #0]
 80038d2:	4b18      	ldr	r3, [pc, #96]	; (8003934 <HAL_UART_MspInit+0x80>)
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d001      	beq.n	80038dc <HAL_UART_MspInit+0x28>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80038d8:	b01c      	add	sp, #112	; 0x70
 80038da:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80038dc:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038de:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80038e0:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038e2:	f001 fe4d 	bl	8005580 <HAL_RCCEx_PeriphCLKConfig>
 80038e6:	bb10      	cbnz	r0, 800392e <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80038e8:	4b13      	ldr	r3, [pc, #76]	; (8003938 <HAL_UART_MspInit+0x84>)
 80038ea:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038ec:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80038f0:	659a      	str	r2, [r3, #88]	; 0x58
 80038f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80038f4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80038f8:	9200      	str	r2, [sp, #0]
 80038fa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	64da      	str	r2, [r3, #76]	; 0x4c
 8003904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003906:	f003 0301 	and.w	r3, r3, #1
 800390a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800390c:	2207      	movs	r2, #7
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800390e:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003910:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003912:	250c      	movs	r5, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003914:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391a:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800391c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800391e:	e9cd 5402 	strd	r5, r4, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003922:	e9cd 3304 	strd	r3, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003926:	f001 f899 	bl	8004a5c <HAL_GPIO_Init>
}
 800392a:	b01c      	add	sp, #112	; 0x70
 800392c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800392e:	f7fe fb09 	bl	8001f44 <Error_Handler>
 8003932:	e7d9      	b.n	80038e8 <HAL_UART_MspInit+0x34>
 8003934:	40004400 	.word	0x40004400
 8003938:	40021000 	.word	0x40021000

0800393c <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800393c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003940:	2240      	movs	r2, #64	; 0x40
 8003942:	601a      	str	r2, [r3, #0]

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC1);

  /* Highfrequency task */
  (void)TSK_HighFrequencyTask();
 8003944:	f7fe bcf2 	b.w	800232c <TSK_HighFrequencyTask>

08003948 <TIM1_UP_TIM16_IRQHandler>:
 8003948:	4b03      	ldr	r3, [pc, #12]	; (8003958 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 800394a:	4804      	ldr	r0, [pc, #16]	; (800395c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800394c:	f06f 0201 	mvn.w	r2, #1
 8003950:	611a      	str	r2, [r3, #16]
 8003952:	f004 bacf 	b.w	8007ef4 <R3_1_TIMx_UP_IRQHandler>
 8003956:	bf00      	nop
 8003958:	40012c00 	.word	0x40012c00
 800395c:	20000124 	.word	0x20000124

08003960 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8003960:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003962:	4b0c      	ldr	r3, [pc, #48]	; (8003994 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003964:	691a      	ldr	r2, [r3, #16]
 8003966:	0612      	lsls	r2, r2, #24
 8003968:	d40d      	bmi.n	8003986 <TIM1_BRK_TIM15_IRQHandler+0x26>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800396a:	490a      	ldr	r1, [pc, #40]	; (8003994 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 800396c:	690b      	ldr	r3, [r1, #16]
 800396e:	05db      	lsls	r3, r3, #23
 8003970:	d505      	bpl.n	800397e <TIM1_BRK_TIM15_IRQHandler+0x1e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8003972:	f46f 7380 	mvn.w	r3, #256	; 0x100
 8003976:	610b      	str	r3, [r1, #16]
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 8003978:	4807      	ldr	r0, [pc, #28]	; (8003998 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 800397a:	f7ff fadd 	bl	8002f38 <PWMC_OVP_Handler>
  MC_RunMotorControlTasks();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 800397e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_RunMotorControlTasks();
 8003982:	f7fe bd3b 	b.w	80023fc <MC_RunMotorControlTasks>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003986:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800398a:	611a      	str	r2, [r3, #16]
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 800398c:	4802      	ldr	r0, [pc, #8]	; (8003998 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 800398e:	f7ff fab3 	bl	8002ef8 <PWMC_OCP_Handler>
 8003992:	e7ea      	b.n	800396a <TIM1_BRK_TIM15_IRQHandler+0xa>
 8003994:	40012c00 	.word	0x40012c00
 8003998:	20000124 	.word	0x20000124

0800399c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800399c:	490c      	ldr	r1, [pc, #48]	; (80039d0 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800399e:	4a0d      	ldr	r2, [pc, #52]	; (80039d4 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80039a0:	680b      	ldr	r3, [r1, #0]
{
 80039a2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80039a4:	4c0c      	ldr	r4, [pc, #48]	; (80039d8 <_sbrk+0x3c>)
 80039a6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80039a8:	b12b      	cbz	r3, 80039b6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80039aa:	4418      	add	r0, r3
 80039ac:	4290      	cmp	r0, r2
 80039ae:	d807      	bhi.n	80039c0 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80039b0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80039b6:	4b09      	ldr	r3, [pc, #36]	; (80039dc <_sbrk+0x40>)
 80039b8:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80039ba:	4418      	add	r0, r3
 80039bc:	4290      	cmp	r0, r2
 80039be:	d9f7      	bls.n	80039b0 <_sbrk+0x14>
    errno = ENOMEM;
 80039c0:	f005 f836 	bl	8008a30 <__errno>
 80039c4:	230c      	movs	r3, #12
 80039c6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80039c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd10      	pop	{r4, pc}
 80039d0:	20000638 	.word	0x20000638
 80039d4:	20020000 	.word	0x20020000
 80039d8:	00000400 	.word	0x00000400
 80039dc:	20000858 	.word	0x20000858

080039e0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80039e0:	4a03      	ldr	r2, [pc, #12]	; (80039f0 <SystemInit+0x10>)
 80039e2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80039e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80039ea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039ee:	4770      	bx	lr
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039f4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80039f6:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <HAL_InitTick+0x40>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	b90b      	cbnz	r3, 8003a00 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80039fc:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80039fe:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003a00:	490d      	ldr	r1, [pc, #52]	; (8003a38 <HAL_InitTick+0x44>)
 8003a02:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003a06:	4605      	mov	r5, r0
 8003a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a0c:	6808      	ldr	r0, [r1, #0]
 8003a0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003a12:	f001 f803 	bl	8004a1c <HAL_SYSTICK_Config>
 8003a16:	4604      	mov	r4, r0
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	d1ef      	bne.n	80039fc <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a1c:	2d0f      	cmp	r5, #15
 8003a1e:	d8ed      	bhi.n	80039fc <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a20:	4602      	mov	r2, r0
 8003a22:	4629      	mov	r1, r5
 8003a24:	f04f 30ff 	mov.w	r0, #4294967295
 8003a28:	f000 ffb4 	bl	8004994 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a2c:	4b03      	ldr	r3, [pc, #12]	; (8003a3c <HAL_InitTick+0x48>)
 8003a2e:	4620      	mov	r0, r4
 8003a30:	601d      	str	r5, [r3, #0]
}
 8003a32:	bd38      	pop	{r3, r4, r5, pc}
 8003a34:	200003dc 	.word	0x200003dc
 8003a38:	200003d8 	.word	0x200003d8
 8003a3c:	200003e0 	.word	0x200003e0

08003a40 <HAL_Init>:
{
 8003a40:	b500      	push	{lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a42:	4a0c      	ldr	r2, [pc, #48]	; (8003a74 <HAL_Init+0x34>)
 8003a44:	6813      	ldr	r3, [r2, #0]
 8003a46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003a4a:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a4c:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a4e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a50:	f000 ff8e 	bl	8004970 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a54:	2004      	movs	r0, #4
 8003a56:	f7ff ffcd 	bl	80039f4 <HAL_InitTick>
 8003a5a:	b118      	cbz	r0, 8003a64 <HAL_Init+0x24>
    status = HAL_ERROR;
 8003a5c:	2001      	movs	r0, #1
}
 8003a5e:	b003      	add	sp, #12
 8003a60:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a64:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 8003a66:	f7ff fdcd 	bl	8003604 <HAL_MspInit>
 8003a6a:	9801      	ldr	r0, [sp, #4]
}
 8003a6c:	b003      	add	sp, #12
 8003a6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a72:	bf00      	nop
 8003a74:	40022000 	.word	0x40022000

08003a78 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003a78:	4a03      	ldr	r2, [pc, #12]	; (8003a88 <HAL_IncTick+0x10>)
 8003a7a:	4904      	ldr	r1, [pc, #16]	; (8003a8c <HAL_IncTick+0x14>)
 8003a7c:	6813      	ldr	r3, [r2, #0]
 8003a7e:	6809      	ldr	r1, [r1, #0]
 8003a80:	440b      	add	r3, r1
 8003a82:	6013      	str	r3, [r2, #0]
}
 8003a84:	4770      	bx	lr
 8003a86:	bf00      	nop
 8003a88:	20000850 	.word	0x20000850
 8003a8c:	200003dc 	.word	0x200003dc

08003a90 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003a90:	4b01      	ldr	r3, [pc, #4]	; (8003a98 <HAL_GetTick+0x8>)
 8003a92:	6818      	ldr	r0, [r3, #0]
}
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	20000850 	.word	0x20000850

08003a9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a9c:	b538      	push	{r3, r4, r5, lr}
 8003a9e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003aa0:	f7ff fff6 	bl	8003a90 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aa4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003aa6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003aa8:	d002      	beq.n	8003ab0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aaa:	4b04      	ldr	r3, [pc, #16]	; (8003abc <HAL_Delay+0x20>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ab0:	f7ff ffee 	bl	8003a90 <HAL_GetTick>
 8003ab4:	1b40      	subs	r0, r0, r5
 8003ab6:	42a0      	cmp	r0, r4
 8003ab8:	d3fa      	bcc.n	8003ab0 <HAL_Delay+0x14>
  {
  }
}
 8003aba:	bd38      	pop	{r3, r4, r5, pc}
 8003abc:	200003dc 	.word	0x200003dc

08003ac0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ac0:	b570      	push	{r4, r5, r6, lr}
 8003ac2:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ac8:	2800      	cmp	r0, #0
 8003aca:	f000 80da 	beq.w	8003c82 <HAL_ADC_Init+0x1c2>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ace:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 8003ad0:	4604      	mov	r4, r0
 8003ad2:	2d00      	cmp	r5, #0
 8003ad4:	f000 80ca 	beq.w	8003c6c <HAL_ADC_Init+0x1ac>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ad8:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ada:	6893      	ldr	r3, [r2, #8]
 8003adc:	009e      	lsls	r6, r3, #2
 8003ade:	d505      	bpl.n	8003aec <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ae0:	6893      	ldr	r3, [r2, #8]
 8003ae2:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003ae6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003aea:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003aec:	6893      	ldr	r3, [r2, #8]
 8003aee:	00dd      	lsls	r5, r3, #3
 8003af0:	d419      	bmi.n	8003b26 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003af2:	4b81      	ldr	r3, [pc, #516]	; (8003cf8 <HAL_ADC_Init+0x238>)
 8003af4:	4881      	ldr	r0, [pc, #516]	; (8003cfc <HAL_ADC_Init+0x23c>)
 8003af6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003af8:	6891      	ldr	r1, [r2, #8]
 8003afa:	099b      	lsrs	r3, r3, #6
 8003afc:	fba0 0303 	umull	r0, r3, r0, r3
 8003b00:	099b      	lsrs	r3, r3, #6
 8003b02:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8003b06:	3301      	adds	r3, #1
 8003b08:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8003b12:	6091      	str	r1, [r2, #8]
 8003b14:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003b16:	9b01      	ldr	r3, [sp, #4]
 8003b18:	b12b      	cbz	r3, 8003b26 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8003b1a:	9b01      	ldr	r3, [sp, #4]
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003b20:	9b01      	ldr	r3, [sp, #4]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1f9      	bne.n	8003b1a <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b26:	6893      	ldr	r3, [r2, #8]
 8003b28:	00d8      	lsls	r0, r3, #3
 8003b2a:	f100 8090 	bmi.w	8003c4e <HAL_ADC_Init+0x18e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b2e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b30:	f043 0310 	orr.w	r3, r3, #16
 8003b34:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b36:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b3e:	6893      	ldr	r3, [r2, #8]
 8003b40:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 8003b44:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b48:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b4a:	f040 8088 	bne.w	8003c5e <HAL_ADC_Init+0x19e>
 8003b4e:	06d9      	lsls	r1, r3, #27
 8003b50:	f100 8085 	bmi.w	8003c5e <HAL_ADC_Init+0x19e>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b54:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b56:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003b5a:	f043 0302 	orr.w	r3, r3, #2
 8003b5e:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b60:	6893      	ldr	r3, [r2, #8]
 8003b62:	07db      	lsls	r3, r3, #31
 8003b64:	d419      	bmi.n	8003b9a <HAL_ADC_Init+0xda>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b66:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003b6a:	4b65      	ldr	r3, [pc, #404]	; (8003d00 <HAL_ADC_Init+0x240>)
 8003b6c:	f000 80bc 	beq.w	8003ce8 <HAL_ADC_Init+0x228>
 8003b70:	429a      	cmp	r2, r3
 8003b72:	f000 809e 	beq.w	8003cb2 <HAL_ADC_Init+0x1f2>
 8003b76:	4d63      	ldr	r5, [pc, #396]	; (8003d04 <HAL_ADC_Init+0x244>)
 8003b78:	4963      	ldr	r1, [pc, #396]	; (8003d08 <HAL_ADC_Init+0x248>)
 8003b7a:	68ad      	ldr	r5, [r5, #8]
 8003b7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	6889      	ldr	r1, [r1, #8]
 8003b84:	432b      	orrs	r3, r5
 8003b86:	430b      	orrs	r3, r1
 8003b88:	07de      	lsls	r6, r3, #31
 8003b8a:	d406      	bmi.n	8003b9a <HAL_ADC_Init+0xda>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003b8c:	495f      	ldr	r1, [pc, #380]	; (8003d0c <HAL_ADC_Init+0x24c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003b8e:	688b      	ldr	r3, [r1, #8]
 8003b90:	6865      	ldr	r5, [r4, #4]
 8003b92:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003b96:	432b      	orrs	r3, r5
 8003b98:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8003b9a:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 8003b9e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ba0:	432b      	orrs	r3, r5
 8003ba2:	430b      	orrs	r3, r1
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003ba4:	7f65      	ldrb	r5, [r4, #29]
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003ba6:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                 hadc->Init.DataAlign                                                   |
 8003baa:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bae:	2901      	cmp	r1, #1
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003bb0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003bb4:	d103      	bne.n	8003bbe <HAL_ADC_Init+0xfe>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003bb6:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003bb8:	3901      	subs	r1, #1
 8003bba:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003bbe:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8003bc0:	b121      	cbz	r1, 8003bcc <HAL_ADC_Init+0x10c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8003bc2:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bc4:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003bc8:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003bca:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003bcc:	68d6      	ldr	r6, [r2, #12]
 8003bce:	4950      	ldr	r1, [pc, #320]	; (8003d10 <HAL_ADC_Init+0x250>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003bd0:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003bd2:	4031      	ands	r1, r6
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003bd8:	6913      	ldr	r3, [r2, #16]
 8003bda:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003bde:	432b      	orrs	r3, r5
 8003be0:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003be2:	6893      	ldr	r3, [r2, #8]
 8003be4:	071d      	lsls	r5, r3, #28
 8003be6:	d423      	bmi.n	8003c30 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003be8:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bea:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bee:	7f26      	ldrb	r6, [r4, #28]

      if (hadc->Init.GainCompensation != 0UL)
 8003bf0:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003bf2:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bf6:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003bf8:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bfc:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003c00:	430b      	orrs	r3, r1
 8003c02:	60d3      	str	r3, [r2, #12]
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c04:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003c06:	2d00      	cmp	r5, #0
 8003c08:	d146      	bne.n	8003c98 <HAL_ADC_Init+0x1d8>
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c0e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003c10:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003c14:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c18:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c1c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003c20:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d04e      	beq.n	8003cc6 <HAL_ADC_Init+0x206>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003c28:	6913      	ldr	r3, [r2, #16]
 8003c2a:	f023 0301 	bic.w	r3, r3, #1
 8003c2e:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c30:	6963      	ldr	r3, [r4, #20]
 8003c32:	2b01      	cmp	r3, #1
 8003c34:	d028      	beq.n	8003c88 <HAL_ADC_Init+0x1c8>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c36:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003c38:	f023 030f 	bic.w	r3, r3, #15
 8003c3c:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c3e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003c40:	f023 0303 	bic.w	r3, r3, #3
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003c4a:	b002      	add	sp, #8
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003c4e:	6893      	ldr	r3, [r2, #8]
 8003c50:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c54:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003c58:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003c5a:	f43f af78 	beq.w	8003b4e <HAL_ADC_Init+0x8e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c5e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8003c60:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c62:	f043 0310 	orr.w	r3, r3, #16
 8003c66:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8003c6c:	f7ff fcea 	bl	8003644 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003c70:	6822      	ldr	r2, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8003c72:	6625      	str	r5, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003c74:	6893      	ldr	r3, [r2, #8]
    hadc->Lock = HAL_UNLOCKED;
 8003c76:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8003c7a:	009e      	lsls	r6, r3, #2
 8003c7c:	f57f af36 	bpl.w	8003aec <HAL_ADC_Init+0x2c>
 8003c80:	e72e      	b.n	8003ae0 <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8003c82:	2001      	movs	r0, #1
}
 8003c84:	b002      	add	sp, #8
 8003c86:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c88:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003c8a:	6a23      	ldr	r3, [r4, #32]
 8003c8c:	f021 010f 	bic.w	r1, r1, #15
 8003c90:	3b01      	subs	r3, #1
 8003c92:	430b      	orrs	r3, r1
 8003c94:	6313      	str	r3, [r2, #48]	; 0x30
 8003c96:	e7d2      	b.n	8003c3e <HAL_ADC_Init+0x17e>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c9c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003c9e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003ca2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ca6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003caa:	432b      	orrs	r3, r5
 8003cac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003cb0:	e7b6      	b.n	8003c20 <HAL_ADC_Init+0x160>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cb2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003cb6:	6899      	ldr	r1, [r3, #8]
 8003cb8:	6893      	ldr	r3, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cba:	430b      	orrs	r3, r1
 8003cbc:	07d9      	lsls	r1, r3, #31
 8003cbe:	f53f af6c 	bmi.w	8003b9a <HAL_ADC_Init+0xda>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003cc2:	4914      	ldr	r1, [pc, #80]	; (8003d14 <HAL_ADC_Init+0x254>)
 8003cc4:	e763      	b.n	8003b8e <HAL_ADC_Init+0xce>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003cc6:	e9d4 3111 	ldrd	r3, r1, [r4, #68]	; 0x44
 8003cca:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8003ccc:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8003cce:	430b      	orrs	r3, r1
 8003cd0:	6911      	ldr	r1, [r2, #16]
 8003cd2:	f043 0301 	orr.w	r3, r3, #1
 8003cd6:	4333      	orrs	r3, r6
 8003cd8:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8003cdc:	432b      	orrs	r3, r5
 8003cde:	f021 0104 	bic.w	r1, r1, #4
 8003ce2:	430b      	orrs	r3, r1
 8003ce4:	6113      	str	r3, [r2, #16]
 8003ce6:	e7a3      	b.n	8003c30 <HAL_ADC_Init+0x170>
 8003ce8:	6891      	ldr	r1, [r2, #8]
 8003cea:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003cec:	430b      	orrs	r3, r1
 8003cee:	07db      	lsls	r3, r3, #31
 8003cf0:	f53f af53 	bmi.w	8003b9a <HAL_ADC_Init+0xda>
 8003cf4:	e7e5      	b.n	8003cc2 <HAL_ADC_Init+0x202>
 8003cf6:	bf00      	nop
 8003cf8:	200003d8 	.word	0x200003d8
 8003cfc:	053e2d63 	.word	0x053e2d63
 8003d00:	50000100 	.word	0x50000100
 8003d04:	50000400 	.word	0x50000400
 8003d08:	50000600 	.word	0x50000600
 8003d0c:	50000700 	.word	0x50000700
 8003d10:	fff04007 	.word	0xfff04007
 8003d14:	50000300 	.word	0x50000300

08003d18 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	b082      	sub	sp, #8
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d20:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
  __IO uint32_t wait_loop_index = 0UL;
 8003d24:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8003d26:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003d28:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003d2a:	f000 811f 	beq.w	8003f6c <HAL_ADC_ConfigChannel+0x254>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d2e:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d30:	6894      	ldr	r4, [r2, #8]
  __HAL_LOCK(hadc);
 8003d32:	2001      	movs	r0, #1
 8003d34:	0767      	lsls	r7, r4, #29
 8003d36:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 8003d3a:	d462      	bmi.n	8003e02 <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(*preg,
 8003d3c:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003d40:	09a6      	lsrs	r6, r4, #6
 8003d42:	f006 060c 	and.w	r6, r6, #12
 8003d46:	f102 0530 	add.w	r5, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8003d4a:	f004 041f 	and.w	r4, r4, #31
 8003d4e:	5977      	ldr	r7, [r6, r5]
 8003d50:	f04f 0c1f 	mov.w	ip, #31
 8003d54:	fa0c fc04 	lsl.w	ip, ip, r4
 8003d58:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003d5c:	ea27 070c 	bic.w	r7, r7, ip
 8003d60:	40a0      	lsls	r0, r4
 8003d62:	4338      	orrs	r0, r7
 8003d64:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d66:	6890      	ldr	r0, [r2, #8]
 8003d68:	0746      	lsls	r6, r0, #29
 8003d6a:	d554      	bpl.n	8003e16 <HAL_ADC_ConfigChannel+0xfe>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d6c:	6890      	ldr	r0, [r2, #8]
 8003d6e:	680c      	ldr	r4, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d70:	6890      	ldr	r0, [r2, #8]
 8003d72:	07c5      	lsls	r5, r0, #31
 8003d74:	d413      	bmi.n	8003d9e <HAL_ADC_ConfigChannel+0x86>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003d76:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003d78:	48aa      	ldr	r0, [pc, #680]	; (8004024 <HAL_ADC_ConfigChannel+0x30c>)
 8003d7a:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d7e:	f8df c2d4 	ldr.w	ip, [pc, #724]	; 8004054 <HAL_ADC_ConfigChannel+0x33c>
 8003d82:	f006 0718 	and.w	r7, r6, #24
 8003d86:	40f8      	lsrs	r0, r7
 8003d88:	f3c4 0712 	ubfx	r7, r4, #0, #19
 8003d8c:	4020      	ands	r0, r4
 8003d8e:	ea25 0507 	bic.w	r5, r5, r7
 8003d92:	4328      	orrs	r0, r5
 8003d94:	4566      	cmp	r6, ip
 8003d96:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8003d9a:	f000 8096 	beq.w	8003eca <HAL_ADC_ConfigChannel+0x1b2>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d9e:	49a2      	ldr	r1, [pc, #648]	; (8004028 <HAL_ADC_ConfigChannel+0x310>)
 8003da0:	420c      	tst	r4, r1
 8003da2:	d02c      	beq.n	8003dfe <HAL_ADC_ConfigChannel+0xe6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003da4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003da8:	f000 80de 	beq.w	8003f68 <HAL_ADC_ConfigChannel+0x250>
 8003dac:	4d9f      	ldr	r5, [pc, #636]	; (800402c <HAL_ADC_ConfigChannel+0x314>)
 8003dae:	49a0      	ldr	r1, [pc, #640]	; (8004030 <HAL_ADC_ConfigChannel+0x318>)
 8003db0:	48a0      	ldr	r0, [pc, #640]	; (8004034 <HAL_ADC_ConfigChannel+0x31c>)
 8003db2:	42aa      	cmp	r2, r5
 8003db4:	bf08      	it	eq
 8003db6:	4601      	moveq	r1, r0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003db8:	4d9f      	ldr	r5, [pc, #636]	; (8004038 <HAL_ADC_ConfigChannel+0x320>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003dba:	6888      	ldr	r0, [r1, #8]
 8003dbc:	42ac      	cmp	r4, r5
 8003dbe:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
 8003dc2:	f000 80d7 	beq.w	8003f74 <HAL_ADC_ConfigChannel+0x25c>
 8003dc6:	4d9d      	ldr	r5, [pc, #628]	; (800403c <HAL_ADC_ConfigChannel+0x324>)
 8003dc8:	42ac      	cmp	r4, r5
 8003dca:	f000 80d3 	beq.w	8003f74 <HAL_ADC_ConfigChannel+0x25c>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003dce:	4d9c      	ldr	r5, [pc, #624]	; (8004040 <HAL_ADC_ConfigChannel+0x328>)
 8003dd0:	42ac      	cmp	r4, r5
 8003dd2:	f040 80f8 	bne.w	8003fc6 <HAL_ADC_ConfigChannel+0x2ae>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003dd6:	01c4      	lsls	r4, r0, #7
 8003dd8:	d411      	bmi.n	8003dfe <HAL_ADC_ConfigChannel+0xe6>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dda:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003dde:	f000 81eb 	beq.w	80041b8 <HAL_ADC_ConfigChannel+0x4a0>
 8003de2:	4d92      	ldr	r5, [pc, #584]	; (800402c <HAL_ADC_ConfigChannel+0x314>)
 8003de4:	4892      	ldr	r0, [pc, #584]	; (8004030 <HAL_ADC_ConfigChannel+0x318>)
 8003de6:	4c93      	ldr	r4, [pc, #588]	; (8004034 <HAL_ADC_ConfigChannel+0x31c>)
 8003de8:	42aa      	cmp	r2, r5
 8003dea:	bf14      	ite	ne
 8003dec:	4602      	movne	r2, r0
 8003dee:	4622      	moveq	r2, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003df0:	6890      	ldr	r0, [r2, #8]
 8003df2:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8003df6:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
 8003dfa:	4301      	orrs	r1, r0
 8003dfc:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dfe:	2000      	movs	r0, #0
 8003e00:	e003      	b.n	8003e0a <HAL_ADC_ConfigChannel+0xf2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e02:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003e04:	f042 0220 	orr.w	r2, r2, #32
 8003e08:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003e10:	b002      	add	sp, #8
 8003e12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e16:	6895      	ldr	r5, [r2, #8]
 8003e18:	680c      	ldr	r4, [r1, #0]
 8003e1a:	f015 0508 	ands.w	r5, r5, #8
 8003e1e:	d1a7      	bne.n	8003d70 <HAL_ADC_ConfigChannel+0x58>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003e20:	688e      	ldr	r6, [r1, #8]
 8003e22:	f3c4 5e04 	ubfx	lr, r4, #20, #5
 8003e26:	2007      	movs	r0, #7
 8003e28:	0de4      	lsrs	r4, r4, #23
 8003e2a:	fa00 f00e 	lsl.w	r0, r0, lr
 8003e2e:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8003e32:	f004 0404 	and.w	r4, r4, #4
 8003e36:	ea6f 0000 	mvn.w	r0, r0
 8003e3a:	f102 0c14 	add.w	ip, r2, #20
 8003e3e:	f000 8157 	beq.w	80040f0 <HAL_ADC_ConfigChannel+0x3d8>
  MODIFY_REG(*preg,
 8003e42:	f854 700c 	ldr.w	r7, [r4, ip]
 8003e46:	fa06 f60e 	lsl.w	r6, r6, lr
 8003e4a:	4038      	ands	r0, r7
 8003e4c:	4306      	orrs	r6, r0
 8003e4e:	f844 600c 	str.w	r6, [r4, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003e52:	6950      	ldr	r0, [r2, #20]
 8003e54:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003e58:	6150      	str	r0, [r2, #20]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e5a:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003e5e:	68d7      	ldr	r7, [r2, #12]
 8003e60:	680c      	ldr	r4, [r1, #0]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e62:	f1bc 0f04 	cmp.w	ip, #4
 8003e66:	f102 0060 	add.w	r0, r2, #96	; 0x60
 8003e6a:	f000 80f7 	beq.w	800405c <HAL_ADC_ConfigChannel+0x344>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003e6e:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(*preg,
 8003e70:	f850 802c 	ldr.w	r8, [r0, ip, lsl #2]
 8003e74:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 8004058 <HAL_ADC_ConfigChannel+0x340>
 8003e78:	f3c7 07c1 	ubfx	r7, r7, #3, #2
 8003e7c:	007f      	lsls	r7, r7, #1
 8003e7e:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003e82:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8003e86:	40be      	lsls	r6, r7
 8003e88:	4326      	orrs	r6, r4
 8003e8a:	ea08 0e0e 	and.w	lr, r8, lr
 8003e8e:	ea46 060e 	orr.w	r6, r6, lr
 8003e92:	f840 602c 	str.w	r6, [r0, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e96:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8003e98:	698e      	ldr	r6, [r1, #24]
 8003e9a:	f850 4027 	ldr.w	r4, [r0, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003e9e:	f891 c01c 	ldrb.w	ip, [r1, #28]
 8003ea2:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8003ea6:	4334      	orrs	r4, r6
 8003ea8:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
 8003eac:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(*preg,
 8003eae:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8003eb2:	f1bc 0f01 	cmp.w	ip, #1
 8003eb6:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8003eba:	bf08      	it	eq
 8003ebc:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8003ec0:	4325      	orrs	r5, r4
 8003ec2:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
 8003ec6:	680c      	ldr	r4, [r1, #0]
 8003ec8:	e752      	b.n	8003d70 <HAL_ADC_ConfigChannel+0x58>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003eca:	2f00      	cmp	r7, #0
 8003ecc:	f000 8097 	beq.w	8003ffe <HAL_ADC_ConfigChannel+0x2e6>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed0:	fa94 f0a4 	rbit	r0, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	f000 813d 	beq.w	8004154 <HAL_ADC_ConfigChannel+0x43c>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003eda:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ede:	3001      	adds	r0, #1
 8003ee0:	f000 001f 	and.w	r0, r0, #31
 8003ee4:	2809      	cmp	r0, #9
 8003ee6:	f240 8135 	bls.w	8004154 <HAL_ADC_ConfigChannel+0x43c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eea:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	f000 8150 	beq.w	8004194 <HAL_ADC_ConfigChannel+0x47c>
  return __builtin_clz(value);
 8003ef4:	fab0 f080 	clz	r0, r0
 8003ef8:	3001      	adds	r0, #1
 8003efa:	0680      	lsls	r0, r0, #26
 8003efc:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f00:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8003f04:	2d00      	cmp	r5, #0
 8003f06:	f000 8152 	beq.w	80041ae <HAL_ADC_ConfigChannel+0x496>
  return __builtin_clz(value);
 8003f0a:	fab5 f585 	clz	r5, r5
 8003f0e:	3501      	adds	r5, #1
 8003f10:	f005 051f 	and.w	r5, r5, #31
 8003f14:	2601      	movs	r6, #1
 8003f16:	fa06 f505 	lsl.w	r5, r6, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f1a:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f1c:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8003f20:	2c00      	cmp	r4, #0
 8003f22:	f000 8142 	beq.w	80041aa <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003f26:	fab4 f484 	clz	r4, r4
 8003f2a:	3401      	adds	r4, #1
 8003f2c:	f004 041f 	and.w	r4, r4, #31
 8003f30:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003f34:	3c1e      	subs	r4, #30
 8003f36:	0524      	lsls	r4, r4, #20
 8003f38:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f3c:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003f3e:	0dc7      	lsrs	r7, r0, #23
 8003f40:	f007 0704 	and.w	r7, r7, #4
 8003f44:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8003f48:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8003f4c:	597c      	ldr	r4, [r7, r5]
 8003f4e:	688e      	ldr	r6, [r1, #8]
 8003f50:	f04f 0c07 	mov.w	ip, #7
 8003f54:	fa0c fc00 	lsl.w	ip, ip, r0
 8003f58:	ea24 040c 	bic.w	r4, r4, ip
 8003f5c:	fa06 f000 	lsl.w	r0, r6, r0
 8003f60:	4320      	orrs	r0, r4
 8003f62:	5178      	str	r0, [r7, r5]
 8003f64:	680c      	ldr	r4, [r1, #0]
 8003f66:	e71a      	b.n	8003d9e <HAL_ADC_ConfigChannel+0x86>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003f68:	4932      	ldr	r1, [pc, #200]	; (8004034 <HAL_ADC_ConfigChannel+0x31c>)
 8003f6a:	e725      	b.n	8003db8 <HAL_ADC_ConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 8003f6c:	2002      	movs	r0, #2
}
 8003f6e:	b002      	add	sp, #8
 8003f70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003f74:	0200      	lsls	r0, r0, #8
 8003f76:	f53f af42 	bmi.w	8003dfe <HAL_ADC_ConfigChannel+0xe6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003f7a:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003f7e:	d04f      	beq.n	8004020 <HAL_ADC_ConfigChannel+0x308>
 8003f80:	4830      	ldr	r0, [pc, #192]	; (8004044 <HAL_ADC_ConfigChannel+0x32c>)
 8003f82:	4282      	cmp	r2, r0
 8003f84:	f47f af3b 	bne.w	8003dfe <HAL_ADC_ConfigChannel+0xe6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f88:	4c29      	ldr	r4, [pc, #164]	; (8004030 <HAL_ADC_ConfigChannel+0x318>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f8a:	4a2f      	ldr	r2, [pc, #188]	; (8004048 <HAL_ADC_ConfigChannel+0x330>)
 8003f8c:	4d2f      	ldr	r5, [pc, #188]	; (800404c <HAL_ADC_ConfigChannel+0x334>)
 8003f8e:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003f90:	68a0      	ldr	r0, [r4, #8]
 8003f92:	0992      	lsrs	r2, r2, #6
 8003f94:	fba5 5202 	umull	r5, r2, r5, r2
 8003f98:	0992      	lsrs	r2, r2, #6
 8003f9a:	3201      	adds	r2, #1
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003f9c:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8003fa0:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003fa4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003fa8:	0092      	lsls	r2, r2, #2
 8003faa:	4301      	orrs	r1, r0
 8003fac:	60a1      	str	r1, [r4, #8]
 8003fae:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003fb0:	9a01      	ldr	r2, [sp, #4]
 8003fb2:	2a00      	cmp	r2, #0
 8003fb4:	f43f af23 	beq.w	8003dfe <HAL_ADC_ConfigChannel+0xe6>
            wait_loop_index--;
 8003fb8:	9a01      	ldr	r2, [sp, #4]
 8003fba:	3a01      	subs	r2, #1
 8003fbc:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003fbe:	9a01      	ldr	r2, [sp, #4]
 8003fc0:	2a00      	cmp	r2, #0
 8003fc2:	d1f9      	bne.n	8003fb8 <HAL_ADC_ConfigChannel+0x2a0>
 8003fc4:	e71b      	b.n	8003dfe <HAL_ADC_ConfigChannel+0xe6>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003fc6:	4d22      	ldr	r5, [pc, #136]	; (8004050 <HAL_ADC_ConfigChannel+0x338>)
 8003fc8:	42ac      	cmp	r4, r5
 8003fca:	f47f af18 	bne.w	8003dfe <HAL_ADC_ConfigChannel+0xe6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003fce:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8003fd2:	f47f af14 	bne.w	8003dfe <HAL_ADC_ConfigChannel+0xe6>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003fd6:	4c15      	ldr	r4, [pc, #84]	; (800402c <HAL_ADC_ConfigChannel+0x314>)
 8003fd8:	42a2      	cmp	r2, r4
 8003fda:	f43f af10 	beq.w	8003dfe <HAL_ADC_ConfigChannel+0xe6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003fde:	4d15      	ldr	r5, [pc, #84]	; (8004034 <HAL_ADC_ConfigChannel+0x31c>)
 8003fe0:	f504 64c0 	add.w	r4, r4, #1536	; 0x600
 8003fe4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003fe8:	bf14      	ite	ne
 8003fea:	4622      	movne	r2, r4
 8003fec:	462a      	moveq	r2, r5
 8003fee:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8003ff2:	6894      	ldr	r4, [r2, #8]
 8003ff4:	f024 74e0 	bic.w	r4, r4, #29360128	; 0x1c00000
 8003ff8:	4321      	orrs	r1, r4
 8003ffa:	6091      	str	r1, [r2, #8]
 8003ffc:	e705      	b.n	8003e0a <HAL_ADC_ConfigChannel+0xf2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003ffe:	0ea4      	lsrs	r4, r4, #26
 8004000:	3401      	adds	r4, #1
 8004002:	f004 051f 	and.w	r5, r4, #31
 8004006:	06a0      	lsls	r0, r4, #26
 8004008:	2401      	movs	r4, #1
 800400a:	40ac      	lsls	r4, r5
 800400c:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004010:	2d09      	cmp	r5, #9
 8004012:	ea40 0004 	orr.w	r0, r0, r4
 8004016:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 800401a:	d88b      	bhi.n	8003f34 <HAL_ADC_ConfigChannel+0x21c>
 800401c:	0524      	lsls	r4, r4, #20
 800401e:	e78d      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x224>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004020:	4c04      	ldr	r4, [pc, #16]	; (8004034 <HAL_ADC_ConfigChannel+0x31c>)
 8004022:	e7b2      	b.n	8003f8a <HAL_ADC_ConfigChannel+0x272>
 8004024:	0007ffff 	.word	0x0007ffff
 8004028:	80080000 	.word	0x80080000
 800402c:	50000100 	.word	0x50000100
 8004030:	50000700 	.word	0x50000700
 8004034:	50000300 	.word	0x50000300
 8004038:	c3210000 	.word	0xc3210000
 800403c:	90c00010 	.word	0x90c00010
 8004040:	c7520000 	.word	0xc7520000
 8004044:	50000600 	.word	0x50000600
 8004048:	200003d8 	.word	0x200003d8
 800404c:	053e2d63 	.word	0x053e2d63
 8004050:	cb840000 	.word	0xcb840000
 8004054:	407f0000 	.word	0x407f0000
 8004058:	03fff000 	.word	0x03fff000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800405c:	6e15      	ldr	r5, [r2, #96]	; 0x60
 800405e:	6e15      	ldr	r5, [r2, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004060:	f3c4 0712 	ubfx	r7, r4, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004064:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004068:	2f00      	cmp	r7, #0
 800406a:	d14b      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x3ec>
 800406c:	f3c4 6684 	ubfx	r6, r4, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004070:	42b5      	cmp	r5, r6
 8004072:	d106      	bne.n	8004082 <HAL_ADC_ConfigChannel+0x36a>
  MODIFY_REG(*preg,
 8004074:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8004076:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800407a:	6614      	str	r4, [r2, #96]	; 0x60
 800407c:	680c      	ldr	r4, [r1, #0]
 800407e:	f3c4 0712 	ubfx	r7, r4, #0, #19
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004082:	6845      	ldr	r5, [r0, #4]
 8004084:	6846      	ldr	r6, [r0, #4]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004086:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800408a:	2f00      	cmp	r7, #0
 800408c:	d141      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x3fa>
 800408e:	f3c4 6584 	ubfx	r5, r4, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004092:	42ae      	cmp	r6, r5
 8004094:	f040 8092 	bne.w	80041bc <HAL_ADC_ConfigChannel+0x4a4>
  MODIFY_REG(*preg,
 8004098:	6844      	ldr	r4, [r0, #4]
 800409a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800409e:	6044      	str	r4, [r0, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040a0:	680c      	ldr	r4, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040a2:	6885      	ldr	r5, [r0, #8]
 80040a4:	6886      	ldr	r6, [r0, #8]
 80040a6:	f3c4 0512 	ubfx	r5, r4, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040aa:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040ae:	2d00      	cmp	r5, #0
 80040b0:	d13a      	bne.n	8004128 <HAL_ADC_ConfigChannel+0x410>
 80040b2:	f3c4 6584 	ubfx	r5, r4, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040b6:	42ae      	cmp	r6, r5
 80040b8:	f100 070c 	add.w	r7, r0, #12
 80040bc:	f040 8083 	bne.w	80041c6 <HAL_ADC_ConfigChannel+0x4ae>
  MODIFY_REG(*preg,
 80040c0:	6884      	ldr	r4, [r0, #8]
 80040c2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80040c6:	6084      	str	r4, [r0, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040c8:	680c      	ldr	r4, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040ca:	6838      	ldr	r0, [r7, #0]
 80040cc:	6838      	ldr	r0, [r7, #0]
 80040ce:	f3c4 0512 	ubfx	r5, r4, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040d2:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040d6:	2d00      	cmp	r5, #0
 80040d8:	d134      	bne.n	8004144 <HAL_ADC_ConfigChannel+0x42c>
 80040da:	f3c4 6584 	ubfx	r5, r4, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040de:	4285      	cmp	r5, r0
 80040e0:	f47f ae46 	bne.w	8003d70 <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(*preg,
 80040e4:	6838      	ldr	r0, [r7, #0]
 80040e6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80040ea:	6038      	str	r0, [r7, #0]
 80040ec:	680c      	ldr	r4, [r1, #0]
 80040ee:	e63f      	b.n	8003d70 <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(*preg,
 80040f0:	f854 600c 	ldr.w	r6, [r4, ip]
 80040f4:	4030      	ands	r0, r6
 80040f6:	f844 000c 	str.w	r0, [r4, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80040fa:	6950      	ldr	r0, [r2, #20]
 80040fc:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8004100:	6150      	str	r0, [r2, #20]
 8004102:	e6aa      	b.n	8003e5a <HAL_ADC_ConfigChannel+0x142>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004108:	2e00      	cmp	r6, #0
 800410a:	d0ba      	beq.n	8004082 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 800410c:	fab6 f686 	clz	r6, r6
 8004110:	e7ae      	b.n	8004070 <HAL_ADC_ConfigChannel+0x358>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004112:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004116:	b11d      	cbz	r5, 8004120 <HAL_ADC_ConfigChannel+0x408>
  return __builtin_clz(value);
 8004118:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800411c:	42ae      	cmp	r6, r5
 800411e:	d0bb      	beq.n	8004098 <HAL_ADC_ConfigChannel+0x380>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004120:	6885      	ldr	r5, [r0, #8]
 8004122:	6886      	ldr	r6, [r0, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004124:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004128:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800412c:	2d00      	cmp	r5, #0
 800412e:	d040      	beq.n	80041b2 <HAL_ADC_ConfigChannel+0x49a>
  return __builtin_clz(value);
 8004130:	fab5 f585 	clz	r5, r5
 8004134:	42ae      	cmp	r6, r5
 8004136:	f100 070c 	add.w	r7, r0, #12
 800413a:	d0c1      	beq.n	80040c0 <HAL_ADC_ConfigChannel+0x3a8>
 800413c:	6838      	ldr	r0, [r7, #0]
 800413e:	6838      	ldr	r0, [r7, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004140:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004144:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004148:	2d00      	cmp	r5, #0
 800414a:	f43f ae11 	beq.w	8003d70 <HAL_ADC_ConfigChannel+0x58>
  return __builtin_clz(value);
 800414e:	fab5 f585 	clz	r5, r5
 8004152:	e7c4      	b.n	80040de <HAL_ADC_ConfigChannel+0x3c6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004154:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8004158:	b320      	cbz	r0, 80041a4 <HAL_ADC_ConfigChannel+0x48c>
  return __builtin_clz(value);
 800415a:	fab0 f080 	clz	r0, r0
 800415e:	3001      	adds	r0, #1
 8004160:	0680      	lsls	r0, r0, #26
 8004162:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004166:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800416a:	b1cd      	cbz	r5, 80041a0 <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 800416c:	fab5 f585 	clz	r5, r5
 8004170:	3501      	adds	r5, #1
 8004172:	f005 051f 	and.w	r5, r5, #31
 8004176:	2601      	movs	r6, #1
 8004178:	fa06 f505 	lsl.w	r5, r6, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800417c:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800417e:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8004182:	b154      	cbz	r4, 800419a <HAL_ADC_ConfigChannel+0x482>
  return __builtin_clz(value);
 8004184:	fab4 f484 	clz	r4, r4
 8004188:	3401      	adds	r4, #1
 800418a:	f004 041f 	and.w	r4, r4, #31
 800418e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8004192:	e743      	b.n	800401c <HAL_ADC_ConfigChannel+0x304>
  if (value == 0U)
 8004194:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004198:	e6b2      	b.n	8003f00 <HAL_ADC_ConfigChannel+0x1e8>
 800419a:	f44f 1440 	mov.w	r4, #3145728	; 0x300000
 800419e:	e6cd      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x224>
 80041a0:	2502      	movs	r5, #2
 80041a2:	e7eb      	b.n	800417c <HAL_ADC_ConfigChannel+0x464>
 80041a4:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80041a8:	e7dd      	b.n	8004166 <HAL_ADC_ConfigChannel+0x44e>
 80041aa:	4c09      	ldr	r4, [pc, #36]	; (80041d0 <HAL_ADC_ConfigChannel+0x4b8>)
 80041ac:	e6c6      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x224>
 80041ae:	2502      	movs	r5, #2
 80041b0:	e6b3      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x202>
 80041b2:	f100 070c 	add.w	r7, r0, #12
 80041b6:	e7c1      	b.n	800413c <HAL_ADC_ConfigChannel+0x424>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80041b8:	4a06      	ldr	r2, [pc, #24]	; (80041d4 <HAL_ADC_ConfigChannel+0x4bc>)
 80041ba:	e619      	b.n	8003df0 <HAL_ADC_ConfigChannel+0xd8>
 80041bc:	6886      	ldr	r6, [r0, #8]
 80041be:	6886      	ldr	r6, [r0, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80041c0:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80041c4:	e777      	b.n	80040b6 <HAL_ADC_ConfigChannel+0x39e>
 80041c6:	68c6      	ldr	r6, [r0, #12]
 80041c8:	68c0      	ldr	r0, [r0, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80041ca:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80041ce:	e786      	b.n	80040de <HAL_ADC_ConfigChannel+0x3c6>
 80041d0:	fe500000 	.word	0xfe500000
 80041d4:	50000300 	.word	0x50000300

080041d8 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80041d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041dc:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 80041e0:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 80041e2:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80041e4:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 80041e6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80041e8:	f000 8176 	beq.w	80044d8 <HAL_ADCEx_InjectedConfigChannel+0x300>
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80041ec:	6943      	ldr	r3, [r0, #20]
  __HAL_LOCK(hadc);
 80041ee:	2201      	movs	r2, #1
 80041f0:	4604      	mov	r4, r0
 80041f2:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 8085 	beq.w	8004306 <HAL_ADCEx_InjectedConfigChannel+0x12e>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80041fc:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80041fe:	4293      	cmp	r3, r2
 8004200:	f000 8081 	beq.w	8004306 <HAL_ADCEx_InjectedConfigChannel+0x12e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004204:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8004206:	2800      	cmp	r0, #0
 8004208:	f040 813f 	bne.w	800448a <HAL_ADCEx_InjectedConfigChannel+0x2b2>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800420c:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800420e:	3b01      	subs	r3, #1
 8004210:	2800      	cmp	r0, #0
 8004212:	f000 8260 	beq.w	80046d6 <HAL_ADCEx_InjectedConfigChannel+0x4fe>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004216:	f000 007c 	and.w	r0, r0, #124	; 0x7c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800421a:	6aca      	ldr	r2, [r1, #44]	; 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800421c:	4318      	orrs	r0, r3
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800421e:	4310      	orrs	r0, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004220:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004224:	66a3      	str	r3, [r4, #104]	; 0x68
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004226:	f005 051f 	and.w	r5, r5, #31
 800422a:	f3c2 6384 	ubfx	r3, r2, #26, #5
 800422e:	40ab      	lsls	r3, r5

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004230:	4318      	orrs	r0, r3
 8004232:	6823      	ldr	r3, [r4, #0]
 8004234:	6660      	str	r0, [r4, #100]	; 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004236:	6898      	ldr	r0, [r3, #8]
 8004238:	0700      	lsls	r0, r0, #28
 800423a:	d410      	bmi.n	800425e <HAL_ADCEx_InjectedConfigChannel+0x86>
 800423c:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8004240:	f891 5025 	ldrb.w	r5, [r1, #37]	; 0x25
 8004244:	0540      	lsls	r0, r0, #21
 8004246:	2d00      	cmp	r5, #0
 8004248:	f040 8114 	bne.w	8004474 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800424c:	68dd      	ldr	r5, [r3, #12]
 800424e:	f891 6024 	ldrb.w	r6, [r1, #36]	; 0x24
 8004252:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8004256:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 800425a:	4328      	orrs	r0, r5
 800425c:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800425e:	6898      	ldr	r0, [r3, #8]
 8004260:	f010 0004 	ands.w	r0, r0, #4
 8004264:	d068      	beq.n	8004338 <HAL_ADCEx_InjectedConfigChannel+0x160>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004266:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004268:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800426a:	689d      	ldr	r5, [r3, #8]
 800426c:	07ef      	lsls	r7, r5, #31
 800426e:	d414      	bmi.n	800429a <HAL_ADCEx_InjectedConfigChannel+0xc2>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004270:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8004272:	4dc9      	ldr	r5, [pc, #804]	; (8004598 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 8004274:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004278:	f8df e34c 	ldr.w	lr, [pc, #844]	; 80045c8 <HAL_ADCEx_InjectedConfigChannel+0x3f0>
 800427c:	f007 0c18 	and.w	ip, r7, #24
 8004280:	fa25 f50c 	lsr.w	r5, r5, ip
 8004284:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 8004288:	4015      	ands	r5, r2
 800428a:	ea26 060c 	bic.w	r6, r6, ip
 800428e:	4335      	orrs	r5, r6
 8004290:	4577      	cmp	r7, lr
 8004292:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
 8004296:	f000 8123 	beq.w	80044e0 <HAL_ADCEx_InjectedConfigChannel+0x308>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 800429a:	49c0      	ldr	r1, [pc, #768]	; (800459c <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 800429c:	420a      	tst	r2, r1
 800429e:	d02c      	beq.n	80042fa <HAL_ADCEx_InjectedConfigChannel+0x122>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042a4:	f000 8194 	beq.w	80045d0 <HAL_ADCEx_InjectedConfigChannel+0x3f8>
 80042a8:	4ebd      	ldr	r6, [pc, #756]	; (80045a0 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 80042aa:	49be      	ldr	r1, [pc, #760]	; (80045a4 <HAL_ADCEx_InjectedConfigChannel+0x3cc>)
 80042ac:	4dbe      	ldr	r5, [pc, #760]	; (80045a8 <HAL_ADCEx_InjectedConfigChannel+0x3d0>)
 80042ae:	42b3      	cmp	r3, r6
 80042b0:	bf08      	it	eq
 80042b2:	4629      	moveq	r1, r5

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80042b4:	4ebd      	ldr	r6, [pc, #756]	; (80045ac <HAL_ADCEx_InjectedConfigChannel+0x3d4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80042b6:	6889      	ldr	r1, [r1, #8]
 80042b8:	42b2      	cmp	r2, r6
 80042ba:	f001 75e0 	and.w	r5, r1, #29360128	; 0x1c00000
 80042be:	f000 80af 	beq.w	8004420 <HAL_ADCEx_InjectedConfigChannel+0x248>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80042c2:	4ebb      	ldr	r6, [pc, #748]	; (80045b0 <HAL_ADCEx_InjectedConfigChannel+0x3d8>)
 80042c4:	42b2      	cmp	r2, r6
 80042c6:	f000 80ab 	beq.w	8004420 <HAL_ADCEx_InjectedConfigChannel+0x248>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 80042ca:	4eba      	ldr	r6, [pc, #744]	; (80045b4 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 80042cc:	42b2      	cmp	r2, r6
 80042ce:	f040 8181 	bne.w	80045d4 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042d2:	01ce      	lsls	r6, r1, #7
 80042d4:	d411      	bmi.n	80042fa <HAL_ADCEx_InjectedConfigChannel+0x122>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80042d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80042da:	f000 826d 	beq.w	80047b8 <HAL_ADCEx_InjectedConfigChannel+0x5e0>
 80042de:	4eb0      	ldr	r6, [pc, #704]	; (80045a0 <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 80042e0:	4ab0      	ldr	r2, [pc, #704]	; (80045a4 <HAL_ADCEx_InjectedConfigChannel+0x3cc>)
 80042e2:	49b1      	ldr	r1, [pc, #708]	; (80045a8 <HAL_ADCEx_InjectedConfigChannel+0x3d0>)
 80042e4:	42b3      	cmp	r3, r6
 80042e6:	bf14      	ite	ne
 80042e8:	4613      	movne	r3, r2
 80042ea:	460b      	moveq	r3, r1
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
 80042f2:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80042f6:	4315      	orrs	r5, r2
 80042f8:	609d      	str	r5, [r3, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042fa:	2300      	movs	r3, #0
 80042fc:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8004300:	b003      	add	sp, #12
 8004302:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004306:	e9d1 2000 	ldrd	r2, r0, [r1]
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800430a:	2809      	cmp	r0, #9
 800430c:	6823      	ldr	r3, [r4, #0]
 800430e:	d192      	bne.n	8004236 <HAL_ADCEx_InjectedConfigChannel+0x5e>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004310:	6a88      	ldr	r0, [r1, #40]	; 0x28
 8004312:	0c55      	lsrs	r5, r2, #17
 8004314:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004318:	b120      	cbz	r0, 8004324 <HAL_ADCEx_InjectedConfigChannel+0x14c>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800431a:	6ace      	ldr	r6, [r1, #44]	; 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800431c:	f000 007c 	and.w	r0, r0, #124	; 0x7c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004320:	4330      	orrs	r0, r6
 8004322:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004324:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004326:	4ea4      	ldr	r6, [pc, #656]	; (80045b8 <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 8004328:	4030      	ands	r0, r6
 800432a:	4328      	orrs	r0, r5
 800432c:	64d8      	str	r0, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800432e:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8004330:	6665      	str	r5, [r4, #100]	; 0x64
 8004332:	0700      	lsls	r0, r0, #28
 8004334:	d493      	bmi.n	800425e <HAL_ADCEx_InjectedConfigChannel+0x86>
 8004336:	e781      	b.n	800423c <HAL_ADCEx_InjectedConfigChannel+0x64>
 8004338:	689d      	ldr	r5, [r3, #8]
 800433a:	f015 0508 	ands.w	r5, r5, #8
 800433e:	d194      	bne.n	800426a <HAL_ADCEx_InjectedConfigChannel+0x92>
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8004340:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 8004342:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8004346:	2e00      	cmp	r6, #0
 8004348:	f040 80b9 	bne.w	80044be <HAL_ADCEx_InjectedConfigChannel+0x2e6>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800434c:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800434e:	68d8      	ldr	r0, [r3, #12]
 8004350:	bf0c      	ite	eq
 8004352:	f040 7000 	orreq.w	r0, r0, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004356:	f020 7000 	bicne.w	r0, r0, #33554432	; 0x2000000
 800435a:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800435c:	2000      	movs	r0, #0
    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 800435e:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 8004362:	2e01      	cmp	r6, #1
 8004364:	f000 81ab 	beq.w	80046be <HAL_ADCEx_InjectedConfigChannel+0x4e6>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8004368:	691e      	ldr	r6, [r3, #16]
 800436a:	f026 0602 	bic.w	r6, r6, #2
 800436e:	611e      	str	r6, [r3, #16]
 8004370:	f3c2 5804 	ubfx	r8, r2, #20, #5
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004374:	688f      	ldr	r7, [r1, #8]
 8004376:	0dd2      	lsrs	r2, r2, #23
 8004378:	2607      	movs	r6, #7
 800437a:	f002 0e04 	and.w	lr, r2, #4
 800437e:	f103 0c14 	add.w	ip, r3, #20
 8004382:	fa06 f608 	lsl.w	r6, r6, r8
 8004386:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 800438a:	ea6f 0606 	mvn.w	r6, r6
  MODIFY_REG(*preg,
 800438e:	f85e 200c 	ldr.w	r2, [lr, ip]
 8004392:	f000 818c 	beq.w	80046ae <HAL_ADCEx_InjectedConfigChannel+0x4d6>
 8004396:	4016      	ands	r6, r2
 8004398:	fa07 f708 	lsl.w	r7, r7, r8
 800439c:	4337      	orrs	r7, r6
 800439e:	f84e 700c 	str.w	r7, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80043a2:	695a      	ldr	r2, [r3, #20]
 80043a4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80043a8:	615a      	str	r2, [r3, #20]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80043aa:	f8d1 e010 	ldr.w	lr, [r1, #16]
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80043ae:	68df      	ldr	r7, [r3, #12]
 80043b0:	680a      	ldr	r2, [r1, #0]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80043b2:	f1be 0f04 	cmp.w	lr, #4
 80043b6:	f103 0660 	add.w	r6, r3, #96	; 0x60
 80043ba:	f000 8126 	beq.w	800460a <HAL_ADCEx_InjectedConfigChannel+0x432>
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80043be:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
 80043c2:	694f      	ldr	r7, [r1, #20]
  MODIFY_REG(*preg,
 80043c4:	f856 902e 	ldr.w	r9, [r6, lr, lsl #2]
 80043c8:	f8df 8200 	ldr.w	r8, [pc, #512]	; 80045cc <HAL_ADCEx_InjectedConfigChannel+0x3f4>
 80043cc:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 80043d0:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80043d4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80043d8:	fa07 f70c 	lsl.w	r7, r7, ip
 80043dc:	4317      	orrs	r7, r2
 80043de:	ea09 0808 	and.w	r8, r9, r8
 80043e2:	ea47 0708 	orr.w	r7, r7, r8
 80043e6:	f846 702e 	str.w	r7, [r6, lr, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043ea:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 80043ee:	698f      	ldr	r7, [r1, #24]
 80043f0:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80043f4:	f891 e01c 	ldrb.w	lr, [r1, #28]
 80043f8:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80043fc:	433a      	orrs	r2, r7
 80043fe:	f846 202c 	str.w	r2, [r6, ip, lsl #2]
 8004402:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004404:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 8004408:	f1be 0f01 	cmp.w	lr, #1
 800440c:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8004410:	bf08      	it	eq
 8004412:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8004416:	4315      	orrs	r5, r2
 8004418:	f846 5027 	str.w	r5, [r6, r7, lsl #2]
 800441c:	680a      	ldr	r2, [r1, #0]
 800441e:	e724      	b.n	800426a <HAL_ADCEx_InjectedConfigChannel+0x92>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004420:	020a      	lsls	r2, r1, #8
 8004422:	f53f af6a 	bmi.w	80042fa <HAL_ADCEx_InjectedConfigChannel+0x122>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004426:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800442a:	f000 81b1 	beq.w	8004790 <HAL_ADCEx_InjectedConfigChannel+0x5b8>
 800442e:	4a63      	ldr	r2, [pc, #396]	; (80045bc <HAL_ADCEx_InjectedConfigChannel+0x3e4>)
 8004430:	4293      	cmp	r3, r2
 8004432:	f47f af62 	bne.w	80042fa <HAL_ADCEx_InjectedConfigChannel+0x122>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004436:	495b      	ldr	r1, [pc, #364]	; (80045a4 <HAL_ADCEx_InjectedConfigChannel+0x3cc>)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004438:	4b61      	ldr	r3, [pc, #388]	; (80045c0 <HAL_ADCEx_InjectedConfigChannel+0x3e8>)
 800443a:	4e62      	ldr	r6, [pc, #392]	; (80045c4 <HAL_ADCEx_InjectedConfigChannel+0x3ec>)
 800443c:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800443e:	688a      	ldr	r2, [r1, #8]
 8004440:	099b      	lsrs	r3, r3, #6
 8004442:	fba6 6303 	umull	r6, r3, r6, r3
 8004446:	099b      	lsrs	r3, r3, #6
 8004448:	eb03 0343 	add.w	r3, r3, r3, lsl #1
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800444c:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
 8004450:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	3318      	adds	r3, #24
 8004458:	4315      	orrs	r5, r2
 800445a:	608d      	str	r5, [r1, #8]
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 800445c:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 800445e:	9b01      	ldr	r3, [sp, #4]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f43f af4a 	beq.w	80042fa <HAL_ADCEx_InjectedConfigChannel+0x122>
          wait_loop_index--;
 8004466:	9b01      	ldr	r3, [sp, #4]
 8004468:	3b01      	subs	r3, #1
 800446a:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 800446c:	9b01      	ldr	r3, [sp, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1f9      	bne.n	8004466 <HAL_ADCEx_InjectedConfigChannel+0x28e>
 8004472:	e742      	b.n	80042fa <HAL_ADCEx_InjectedConfigChannel+0x122>
      MODIFY_REG(hadc->Instance->CFGR,
 8004474:	68dd      	ldr	r5, [r3, #12]
 8004476:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 800447a:	4328      	orrs	r0, r5
 800447c:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800447e:	6898      	ldr	r0, [r3, #8]
 8004480:	f010 0004 	ands.w	r0, r0, #4
 8004484:	f47f aeef 	bne.w	8004266 <HAL_ADCEx_InjectedConfigChannel+0x8e>
 8004488:	e756      	b.n	8004338 <HAL_ADCEx_InjectedConfigChannel+0x160>
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 800448a:	e9d1 2600 	ldrd	r2, r6, [r1]
 800448e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004490:	f3c2 6584 	ubfx	r5, r2, #26, #5
 8004494:	f006 061f 	and.w	r6, r6, #31
 8004498:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800449a:	431d      	orrs	r5, r3
 800449c:	3801      	subs	r0, #1
 800449e:	e9c4 5019 	strd	r5, r0, [r4, #100]	; 0x64
 80044a2:	6823      	ldr	r3, [r4, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80044a4:	2800      	cmp	r0, #0
 80044a6:	f47f aec6 	bne.w	8004236 <HAL_ADCEx_InjectedConfigChannel+0x5e>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80044aa:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80044ac:	4e42      	ldr	r6, [pc, #264]	; (80045b8 <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 80044ae:	4030      	ands	r0, r6
 80044b0:	4305      	orrs	r5, r0
 80044b2:	64dd      	str	r5, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80044b4:	6898      	ldr	r0, [r3, #8]
 80044b6:	0700      	lsls	r0, r0, #28
 80044b8:	f53f aed1 	bmi.w	800425e <HAL_ADCEx_InjectedConfigChannel+0x86>
 80044bc:	e6be      	b.n	800423c <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80044be:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80044c0:	2e00      	cmp	r6, #0
 80044c2:	f43f af43 	beq.w	800434c <HAL_ADCEx_InjectedConfigChannel+0x174>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80044c6:	2801      	cmp	r0, #1
 80044c8:	f000 813a 	beq.w	8004740 <HAL_ADCEx_InjectedConfigChannel+0x568>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80044cc:	68d8      	ldr	r0, [r3, #12]
 80044ce:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 80044d2:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044d4:	4628      	mov	r0, r5
 80044d6:	e742      	b.n	800435e <HAL_ADCEx_InjectedConfigChannel+0x186>
  __HAL_LOCK(hadc);
 80044d8:	2002      	movs	r0, #2
}
 80044da:	b003      	add	sp, #12
 80044dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80044e0:	f1bc 0f00 	cmp.w	ip, #0
 80044e4:	d12b      	bne.n	800453e <HAL_ADCEx_InjectedConfigChannel+0x366>
 80044e6:	0e92      	lsrs	r2, r2, #26
 80044e8:	3201      	adds	r2, #1
 80044ea:	f002 061f 	and.w	r6, r2, #31
 80044ee:	2501      	movs	r5, #1
 80044f0:	0692      	lsls	r2, r2, #26
 80044f2:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 80044f6:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044f8:	2e09      	cmp	r6, #9
 80044fa:	ea45 0502 	orr.w	r5, r5, r2
 80044fe:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8004502:	d946      	bls.n	8004592 <HAL_ADCEx_InjectedConfigChannel+0x3ba>
 8004504:	3a1e      	subs	r2, #30
 8004506:	0512      	lsls	r2, r2, #20
 8004508:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 800450c:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800450e:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 8004512:	f00c 0c04 	and.w	ip, ip, #4
 8004516:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 800451a:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800451e:	f85c 5007 	ldr.w	r5, [ip, r7]
 8004522:	688e      	ldr	r6, [r1, #8]
 8004524:	f04f 0e07 	mov.w	lr, #7
 8004528:	fa0e fe02 	lsl.w	lr, lr, r2
 800452c:	ea25 050e 	bic.w	r5, r5, lr
 8004530:	fa06 f202 	lsl.w	r2, r6, r2
 8004534:	432a      	orrs	r2, r5
 8004536:	f84c 2007 	str.w	r2, [ip, r7]
 800453a:	680a      	ldr	r2, [r1, #0]
 800453c:	e6ad      	b.n	800429a <HAL_ADCEx_InjectedConfigChannel+0xc2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004542:	2d00      	cmp	r5, #0
 8004544:	f040 80c9 	bne.w	80046da <HAL_ADCEx_InjectedConfigChannel+0x502>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004548:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800454c:	2d00      	cmp	r5, #0
 800454e:	f000 8130 	beq.w	80047b2 <HAL_ADCEx_InjectedConfigChannel+0x5da>
  return __builtin_clz(value);
 8004552:	fab5 f585 	clz	r5, r5
 8004556:	3501      	adds	r5, #1
 8004558:	06ad      	lsls	r5, r5, #26
 800455a:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800455e:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004562:	2e00      	cmp	r6, #0
 8004564:	f000 8123 	beq.w	80047ae <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 8004568:	fab6 f686 	clz	r6, r6
 800456c:	3601      	adds	r6, #1
 800456e:	f006 061f 	and.w	r6, r6, #31
 8004572:	2701      	movs	r7, #1
 8004574:	fa07 f606 	lsl.w	r6, r7, r6
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004578:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800457e:	2a00      	cmp	r2, #0
 8004580:	f000 8112 	beq.w	80047a8 <HAL_ADCEx_InjectedConfigChannel+0x5d0>
  return __builtin_clz(value);
 8004584:	fab2 f282 	clz	r2, r2
 8004588:	3201      	adds	r2, #1
 800458a:	f002 021f 	and.w	r2, r2, #31
 800458e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8004592:	0512      	lsls	r2, r2, #20
 8004594:	e7ba      	b.n	800450c <HAL_ADCEx_InjectedConfigChannel+0x334>
 8004596:	bf00      	nop
 8004598:	0007ffff 	.word	0x0007ffff
 800459c:	80080000 	.word	0x80080000
 80045a0:	50000100 	.word	0x50000100
 80045a4:	50000700 	.word	0x50000700
 80045a8:	50000300 	.word	0x50000300
 80045ac:	c3210000 	.word	0xc3210000
 80045b0:	90c00010 	.word	0x90c00010
 80045b4:	c7520000 	.word	0xc7520000
 80045b8:	04104000 	.word	0x04104000
 80045bc:	50000600 	.word	0x50000600
 80045c0:	200003d8 	.word	0x200003d8
 80045c4:	053e2d63 	.word	0x053e2d63
 80045c8:	407f0000 	.word	0x407f0000
 80045cc:	03fff000 	.word	0x03fff000
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80045d0:	497f      	ldr	r1, [pc, #508]	; (80047d0 <HAL_ADCEx_InjectedConfigChannel+0x5f8>)
 80045d2:	e66f      	b.n	80042b4 <HAL_ADCEx_InjectedConfigChannel+0xdc>
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 80045d4:	4e7f      	ldr	r6, [pc, #508]	; (80047d4 <HAL_ADCEx_InjectedConfigChannel+0x5fc>)
 80045d6:	42b2      	cmp	r2, r6
 80045d8:	f47f ae8f 	bne.w	80042fa <HAL_ADCEx_InjectedConfigChannel+0x122>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80045dc:	0249      	lsls	r1, r1, #9
 80045de:	f53f ae8c 	bmi.w	80042fa <HAL_ADCEx_InjectedConfigChannel+0x122>
      if (ADC_VREFINT_INSTANCE(hadc))
 80045e2:	4a7d      	ldr	r2, [pc, #500]	; (80047d8 <HAL_ADCEx_InjectedConfigChannel+0x600>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	f43f ae88 	beq.w	80042fa <HAL_ADCEx_InjectedConfigChannel+0x122>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045ea:	4979      	ldr	r1, [pc, #484]	; (80047d0 <HAL_ADCEx_InjectedConfigChannel+0x5f8>)
 80045ec:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 80045f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80045f4:	bf14      	ite	ne
 80045f6:	4613      	movne	r3, r2
 80045f8:	460b      	moveq	r3, r1
 80045fa:	f445 0580 	orr.w	r5, r5, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004604:	4315      	orrs	r5, r2
 8004606:	609d      	str	r5, [r3, #8]
 8004608:	e677      	b.n	80042fa <HAL_ADCEx_InjectedConfigChannel+0x122>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800460a:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 800460c:	6e1d      	ldr	r5, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800460e:	f3c2 0c12 	ubfx	ip, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004612:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004616:	f1bc 0f00 	cmp.w	ip, #0
 800461a:	f040 8089 	bne.w	8004730 <HAL_ADCEx_InjectedConfigChannel+0x558>
 800461e:	f3c2 6784 	ubfx	r7, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004622:	42bd      	cmp	r5, r7
 8004624:	d106      	bne.n	8004634 <HAL_ADCEx_InjectedConfigChannel+0x45c>
  MODIFY_REG(*preg,
 8004626:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004628:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800462c:	661a      	str	r2, [r3, #96]	; 0x60
 800462e:	680a      	ldr	r2, [r1, #0]
 8004630:	f3c2 0c12 	ubfx	ip, r2, #0, #19
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004634:	6875      	ldr	r5, [r6, #4]
 8004636:	6877      	ldr	r7, [r6, #4]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004638:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800463c:	f1bc 0f00 	cmp.w	ip, #0
 8004640:	f040 8083 	bne.w	800474a <HAL_ADCEx_InjectedConfigChannel+0x572>
 8004644:	f3c2 6584 	ubfx	r5, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004648:	42af      	cmp	r7, r5
 800464a:	f040 80b7 	bne.w	80047bc <HAL_ADCEx_InjectedConfigChannel+0x5e4>
  MODIFY_REG(*preg,
 800464e:	6872      	ldr	r2, [r6, #4]
 8004650:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004654:	6072      	str	r2, [r6, #4]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004656:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004658:	68b5      	ldr	r5, [r6, #8]
 800465a:	68b7      	ldr	r7, [r6, #8]
 800465c:	f3c2 0512 	ubfx	r5, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004660:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004664:	2d00      	cmp	r5, #0
 8004666:	d17c      	bne.n	8004762 <HAL_ADCEx_InjectedConfigChannel+0x58a>
 8004668:	f3c2 6584 	ubfx	r5, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800466c:	42af      	cmp	r7, r5
 800466e:	f106 0c0c 	add.w	ip, r6, #12
 8004672:	f040 80a8 	bne.w	80047c6 <HAL_ADCEx_InjectedConfigChannel+0x5ee>
  MODIFY_REG(*preg,
 8004676:	68b2      	ldr	r2, [r6, #8]
 8004678:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800467c:	60b2      	str	r2, [r6, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800467e:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004680:	f8dc 5000 	ldr.w	r5, [ip]
 8004684:	f8dc 6000 	ldr.w	r6, [ip]
 8004688:	f3c2 0512 	ubfx	r5, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800468c:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004690:	2d00      	cmp	r5, #0
 8004692:	d175      	bne.n	8004780 <HAL_ADCEx_InjectedConfigChannel+0x5a8>
 8004694:	f3c2 6584 	ubfx	r5, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004698:	42b5      	cmp	r5, r6
 800469a:	f47f ade6 	bne.w	800426a <HAL_ADCEx_InjectedConfigChannel+0x92>
  MODIFY_REG(*preg,
 800469e:	f8dc 2000 	ldr.w	r2, [ip]
 80046a2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046a6:	f8cc 2000 	str.w	r2, [ip]
 80046aa:	680a      	ldr	r2, [r1, #0]
 80046ac:	e5dd      	b.n	800426a <HAL_ADCEx_InjectedConfigChannel+0x92>
  MODIFY_REG(*preg,
 80046ae:	4016      	ands	r6, r2
 80046b0:	f84e 600c 	str.w	r6, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80046b4:	695a      	ldr	r2, [r3, #20]
 80046b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80046ba:	615a      	str	r2, [r3, #20]
 80046bc:	e675      	b.n	80043aa <HAL_ADCEx_InjectedConfigChannel+0x1d2>
      MODIFY_REG(hadc->Instance->CFGR2,
 80046be:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 80046c0:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80046c2:	f8d3 c010 	ldr.w	ip, [r3, #16]
 80046c6:	433e      	orrs	r6, r7
 80046c8:	f046 0602 	orr.w	r6, r6, #2
 80046cc:	f42c 77ff 	bic.w	r7, ip, #510	; 0x1fe
 80046d0:	433e      	orrs	r6, r7
 80046d2:	611e      	str	r6, [r3, #16]
 80046d4:	e64c      	b.n	8004370 <HAL_ADCEx_InjectedConfigChannel+0x198>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80046d6:	4618      	mov	r0, r3
 80046d8:	e5a2      	b.n	8004220 <HAL_ADCEx_InjectedConfigChannel+0x48>
 80046da:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046de:	3501      	adds	r5, #1
 80046e0:	f005 051f 	and.w	r5, r5, #31
 80046e4:	2d09      	cmp	r5, #9
 80046e6:	f67f af2f 	bls.w	8004548 <HAL_ADCEx_InjectedConfigChannel+0x370>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ea:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80046ee:	2d00      	cmp	r5, #0
 80046f0:	d057      	beq.n	80047a2 <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 80046f2:	fab5 f585 	clz	r5, r5
 80046f6:	3501      	adds	r5, #1
 80046f8:	06ad      	lsls	r5, r5, #26
 80046fa:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fe:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 8004702:	2e00      	cmp	r6, #0
 8004704:	d04b      	beq.n	800479e <HAL_ADCEx_InjectedConfigChannel+0x5c6>
  return __builtin_clz(value);
 8004706:	fab6 f686 	clz	r6, r6
 800470a:	3601      	adds	r6, #1
 800470c:	f006 061f 	and.w	r6, r6, #31
 8004710:	2701      	movs	r7, #1
 8004712:	fa07 f606 	lsl.w	r6, r7, r6
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004716:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004718:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 800471c:	2a00      	cmp	r2, #0
 800471e:	d03c      	beq.n	800479a <HAL_ADCEx_InjectedConfigChannel+0x5c2>
  return __builtin_clz(value);
 8004720:	fab2 f282 	clz	r2, r2
 8004724:	3201      	adds	r2, #1
 8004726:	f002 021f 	and.w	r2, r2, #31
 800472a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800472e:	e6e9      	b.n	8004504 <HAL_ADCEx_InjectedConfigChannel+0x32c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004730:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8004734:	2f00      	cmp	r7, #0
 8004736:	f43f af7d 	beq.w	8004634 <HAL_ADCEx_InjectedConfigChannel+0x45c>
  return __builtin_clz(value);
 800473a:	fab7 f787 	clz	r7, r7
 800473e:	e770      	b.n	8004622 <HAL_ADCEx_InjectedConfigChannel+0x44a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004740:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 8004742:	f046 0620 	orr.w	r6, r6, #32
 8004746:	65e6      	str	r6, [r4, #92]	; 0x5c
 8004748:	e609      	b.n	800435e <HAL_ADCEx_InjectedConfigChannel+0x186>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800474a:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800474e:	b125      	cbz	r5, 800475a <HAL_ADCEx_InjectedConfigChannel+0x582>
  return __builtin_clz(value);
 8004750:	fab5 f585 	clz	r5, r5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004754:	42af      	cmp	r7, r5
 8004756:	f43f af7a 	beq.w	800464e <HAL_ADCEx_InjectedConfigChannel+0x476>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800475a:	68b5      	ldr	r5, [r6, #8]
 800475c:	68b7      	ldr	r7, [r6, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800475e:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004762:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004766:	b1ad      	cbz	r5, 8004794 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return __builtin_clz(value);
 8004768:	fab5 f585 	clz	r5, r5
 800476c:	42af      	cmp	r7, r5
 800476e:	f106 0c0c 	add.w	ip, r6, #12
 8004772:	d080      	beq.n	8004676 <HAL_ADCEx_InjectedConfigChannel+0x49e>
 8004774:	f8dc 5000 	ldr.w	r5, [ip]
 8004778:	f8dc 6000 	ldr.w	r6, [ip]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800477c:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004780:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004784:	2d00      	cmp	r5, #0
 8004786:	f43f ad70 	beq.w	800426a <HAL_ADCEx_InjectedConfigChannel+0x92>
  return __builtin_clz(value);
 800478a:	fab5 f585 	clz	r5, r5
 800478e:	e783      	b.n	8004698 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004790:	490f      	ldr	r1, [pc, #60]	; (80047d0 <HAL_ADCEx_InjectedConfigChannel+0x5f8>)
 8004792:	e651      	b.n	8004438 <HAL_ADCEx_InjectedConfigChannel+0x260>
 8004794:	f106 0c0c 	add.w	ip, r6, #12
 8004798:	e7ec      	b.n	8004774 <HAL_ADCEx_InjectedConfigChannel+0x59c>
  if (value == 0U)
 800479a:	4a10      	ldr	r2, [pc, #64]	; (80047dc <HAL_ADCEx_InjectedConfigChannel+0x604>)
 800479c:	e6b6      	b.n	800450c <HAL_ADCEx_InjectedConfigChannel+0x334>
 800479e:	2602      	movs	r6, #2
 80047a0:	e7b9      	b.n	8004716 <HAL_ADCEx_InjectedConfigChannel+0x53e>
 80047a2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80047a6:	e7aa      	b.n	80046fe <HAL_ADCEx_InjectedConfigChannel+0x526>
 80047a8:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80047ac:	e6ae      	b.n	800450c <HAL_ADCEx_InjectedConfigChannel+0x334>
 80047ae:	2602      	movs	r6, #2
 80047b0:	e6e2      	b.n	8004578 <HAL_ADCEx_InjectedConfigChannel+0x3a0>
 80047b2:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80047b6:	e6d2      	b.n	800455e <HAL_ADCEx_InjectedConfigChannel+0x386>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80047b8:	4b05      	ldr	r3, [pc, #20]	; (80047d0 <HAL_ADCEx_InjectedConfigChannel+0x5f8>)
 80047ba:	e597      	b.n	80042ec <HAL_ADCEx_InjectedConfigChannel+0x114>
 80047bc:	68b7      	ldr	r7, [r6, #8]
 80047be:	68b7      	ldr	r7, [r6, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80047c0:	f3c7 6784 	ubfx	r7, r7, #26, #5
 80047c4:	e752      	b.n	800466c <HAL_ADCEx_InjectedConfigChannel+0x494>
 80047c6:	68f7      	ldr	r7, [r6, #12]
 80047c8:	68f6      	ldr	r6, [r6, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80047ca:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80047ce:	e763      	b.n	8004698 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
 80047d0:	50000300 	.word	0x50000300
 80047d4:	cb840000 	.word	0xcb840000
 80047d8:	50000100 	.word	0x50000100
 80047dc:	fe500000 	.word	0xfe500000

080047e0 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047e0:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80047e4:	2a01      	cmp	r2, #1
 80047e6:	d058      	beq.n	800489a <HAL_ADCEx_MultiModeConfigChannel+0xba>
{
 80047e8:	b4f0      	push	{r4, r5, r6, r7}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80047ea:	6802      	ldr	r2, [r0, #0]
{
 80047ec:	b09c      	sub	sp, #112	; 0x70
 80047ee:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80047f0:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 80047f2:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80047f4:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80047f8:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 80047fa:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80047fe:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004800:	d00b      	beq.n	800481a <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 8004802:	4d48      	ldr	r5, [pc, #288]	; (8004924 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004804:	42aa      	cmp	r2, r5
 8004806:	d046      	beq.n	8004896 <HAL_ADCEx_MultiModeConfigChannel+0xb6>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004808:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800480a:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800480e:	f042 0220 	orr.w	r2, r2, #32
 8004812:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004814:	b01c      	add	sp, #112	; 0x70
 8004816:	bcf0      	pop	{r4, r5, r6, r7}
 8004818:	4770      	bx	lr
 800481a:	4843      	ldr	r0, [pc, #268]	; (8004928 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800481c:	6880      	ldr	r0, [r0, #8]
 800481e:	0740      	lsls	r0, r0, #29
 8004820:	d50b      	bpl.n	800483a <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 8004822:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004824:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004826:	f042 0220 	orr.w	r2, r2, #32
 800482a:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 800482c:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800482e:	2200      	movs	r2, #0
 8004830:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8004834:	b01c      	add	sp, #112	; 0x70
 8004836:	bcf0      	pop	{r4, r5, r6, r7}
 8004838:	4770      	bx	lr
 800483a:	6890      	ldr	r0, [r2, #8]
 800483c:	0744      	lsls	r4, r0, #29
 800483e:	d4f1      	bmi.n	8004824 <HAL_ADCEx_MultiModeConfigChannel+0x44>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004840:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004844:	6808      	ldr	r0, [r1, #0]
 8004846:	d02a      	beq.n	800489e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8004848:	4c37      	ldr	r4, [pc, #220]	; (8004928 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800484a:	42a2      	cmp	r2, r4
 800484c:	d027      	beq.n	800489e <HAL_ADCEx_MultiModeConfigChannel+0xbe>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800484e:	2800      	cmp	r0, #0
 8004850:	d057      	beq.n	8004902 <HAL_ADCEx_MultiModeConfigChannel+0x122>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004852:	4c36      	ldr	r4, [pc, #216]	; (800492c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004854:	684e      	ldr	r6, [r1, #4]
 8004856:	68a2      	ldr	r2, [r4, #8]
 8004858:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800485c:	4f34      	ldr	r7, [pc, #208]	; (8004930 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800485e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004862:	4332      	orrs	r2, r6
 8004864:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8004868:	4e2e      	ldr	r6, [pc, #184]	; (8004924 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800486a:	60a2      	str	r2, [r4, #8]
 800486c:	4d31      	ldr	r5, [pc, #196]	; (8004934 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800486e:	68b6      	ldr	r6, [r6, #8]
 8004870:	68ba      	ldr	r2, [r7, #8]
 8004872:	68ad      	ldr	r5, [r5, #8]
 8004874:	4332      	orrs	r2, r6
 8004876:	432a      	orrs	r2, r5
 8004878:	43d2      	mvns	r2, r2
 800487a:	f002 0201 	and.w	r2, r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800487e:	b142      	cbz	r2, 8004892 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
        MODIFY_REG(tmpADC_Common->CCR,
 8004880:	68a5      	ldr	r5, [r4, #8]
 8004882:	688a      	ldr	r2, [r1, #8]
 8004884:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 8004888:	4310      	orrs	r0, r2
 800488a:	f021 010f 	bic.w	r1, r1, #15
 800488e:	4308      	orrs	r0, r1
 8004890:	60a0      	str	r0, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004892:	2000      	movs	r0, #0
 8004894:	e7cb      	b.n	800482e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8004896:	4826      	ldr	r0, [pc, #152]	; (8004930 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004898:	e7c0      	b.n	800481c <HAL_ADCEx_MultiModeConfigChannel+0x3c>
  __HAL_LOCK(hadc);
 800489a:	2002      	movs	r0, #2
}
 800489c:	4770      	bx	lr
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800489e:	b9c8      	cbnz	r0, 80048d4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80048a0:	4925      	ldr	r1, [pc, #148]	; (8004938 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80048a2:	688a      	ldr	r2, [r1, #8]
 80048a4:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80048a8:	608a      	str	r2, [r1, #8]
 80048aa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80048ae:	4a1e      	ldr	r2, [pc, #120]	; (8004928 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80048b0:	6888      	ldr	r0, [r1, #8]
 80048b2:	6892      	ldr	r2, [r2, #8]
 80048b4:	4302      	orrs	r2, r0
 80048b6:	43d2      	mvns	r2, r2
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048b8:	f501 7140 	add.w	r1, r1, #768	; 0x300
 80048bc:	f002 0201 	and.w	r2, r2, #1
 80048c0:	2a00      	cmp	r2, #0
 80048c2:	d0e6      	beq.n	8004892 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80048c4:	688a      	ldr	r2, [r1, #8]
 80048c6:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 80048ca:	f022 020f 	bic.w	r2, r2, #15
 80048ce:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048d0:	2000      	movs	r0, #0
 80048d2:	e7ac      	b.n	800482e <HAL_ADCEx_MultiModeConfigChannel+0x4e>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80048d4:	4c18      	ldr	r4, [pc, #96]	; (8004938 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80048d6:	684e      	ldr	r6, [r1, #4]
 80048d8:	68a2      	ldr	r2, [r4, #8]
 80048da:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
 80048de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80048e2:	4332      	orrs	r2, r6
 80048e4:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 80048e8:	60a2      	str	r2, [r4, #8]
 80048ea:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 80048ee:	4a0e      	ldr	r2, [pc, #56]	; (8004928 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80048f0:	68a5      	ldr	r5, [r4, #8]
 80048f2:	6892      	ldr	r2, [r2, #8]
 80048f4:	432a      	orrs	r2, r5
 80048f6:	43d2      	mvns	r2, r2
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048f8:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80048fc:	f002 0201 	and.w	r2, r2, #1
 8004900:	e7bd      	b.n	800487e <HAL_ADCEx_MultiModeConfigChannel+0x9e>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004902:	490a      	ldr	r1, [pc, #40]	; (800492c <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004904:	4c07      	ldr	r4, [pc, #28]	; (8004924 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004906:	688a      	ldr	r2, [r1, #8]
 8004908:	4d09      	ldr	r5, [pc, #36]	; (8004930 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800490a:	480a      	ldr	r0, [pc, #40]	; (8004934 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800490c:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004910:	608a      	str	r2, [r1, #8]
 8004912:	68a4      	ldr	r4, [r4, #8]
 8004914:	68aa      	ldr	r2, [r5, #8]
 8004916:	6880      	ldr	r0, [r0, #8]
 8004918:	4322      	orrs	r2, r4
 800491a:	4302      	orrs	r2, r0
 800491c:	43d2      	mvns	r2, r2
 800491e:	f002 0201 	and.w	r2, r2, #1
 8004922:	e7cd      	b.n	80048c0 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8004924:	50000400 	.word	0x50000400
 8004928:	50000100 	.word	0x50000100
 800492c:	50000700 	.word	0x50000700
 8004930:	50000500 	.word	0x50000500
 8004934:	50000600 	.word	0x50000600
 8004938:	50000300 	.word	0x50000300

0800493c <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 800493c:	b1b0      	cbz	r0, 800496c <HAL_CORDIC_Init+0x30>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800493e:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{
 8004942:	b510      	push	{r4, lr}
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004944:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004948:	4604      	mov	r4, r0
 800494a:	b153      	cbz	r3, 8004962 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800494c:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800494e:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004950:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->pOutBuff = NULL;
 8004952:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8004956:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 800495a:	6160      	str	r0, [r4, #20]
  hcordic->State = HAL_CORDIC_STATE_READY;
 800495c:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
}
 8004960:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8004962:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8004966:	f7fe fec3 	bl	80036f0 <HAL_CORDIC_MspInit>
 800496a:	e7ef      	b.n	800494c <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 800496c:	2001      	movs	r0, #1
}
 800496e:	4770      	bx	lr

08004970 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004970:	4a07      	ldr	r2, [pc, #28]	; (8004990 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004972:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004974:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8004978:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800497a:	0200      	lsls	r0, r0, #8
 800497c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004980:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8004984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8004988:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800498a:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	e000ed00 	.word	0xe000ed00

08004994 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004994:	4b18      	ldr	r3, [pc, #96]	; (80049f8 <HAL_NVIC_SetPriority+0x64>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800499c:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800499e:	f1c3 0507 	rsb	r5, r3, #7
 80049a2:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049a4:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049a8:	bf28      	it	cs
 80049aa:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049ac:	2c06      	cmp	r4, #6
 80049ae:	d919      	bls.n	80049e4 <HAL_NVIC_SetPriority+0x50>
 80049b0:	3b03      	subs	r3, #3
 80049b2:	f04f 34ff 	mov.w	r4, #4294967295
 80049b6:	409c      	lsls	r4, r3
 80049b8:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80049bc:	f04f 32ff 	mov.w	r2, #4294967295
 80049c0:	40aa      	lsls	r2, r5
 80049c2:	ea21 0102 	bic.w	r1, r1, r2
 80049c6:	fa01 f203 	lsl.w	r2, r1, r3
 80049ca:	4322      	orrs	r2, r4
 80049cc:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80049ce:	2800      	cmp	r0, #0
 80049d0:	b2d2      	uxtb	r2, r2
 80049d2:	db0a      	blt.n	80049ea <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049d4:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80049d8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80049dc:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80049e0:	bc30      	pop	{r4, r5}
 80049e2:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049e4:	2400      	movs	r4, #0
 80049e6:	4623      	mov	r3, r4
 80049e8:	e7e8      	b.n	80049bc <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049ea:	4b04      	ldr	r3, [pc, #16]	; (80049fc <HAL_NVIC_SetPriority+0x68>)
 80049ec:	f000 000f 	and.w	r0, r0, #15
 80049f0:	4403      	add	r3, r0
 80049f2:	761a      	strb	r2, [r3, #24]
 80049f4:	bc30      	pop	{r4, r5}
 80049f6:	4770      	bx	lr
 80049f8:	e000ed00 	.word	0xe000ed00
 80049fc:	e000ecfc 	.word	0xe000ecfc

08004a00 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a00:	2800      	cmp	r0, #0
 8004a02:	db07      	blt.n	8004a14 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a04:	4a04      	ldr	r2, [pc, #16]	; (8004a18 <HAL_NVIC_EnableIRQ+0x18>)
 8004a06:	f000 011f 	and.w	r1, r0, #31
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	0940      	lsrs	r0, r0, #5
 8004a0e:	408b      	lsls	r3, r1
 8004a10:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	e000e100 	.word	0xe000e100

08004a1c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a1c:	3801      	subs	r0, #1
 8004a1e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004a22:	d20e      	bcs.n	8004a42 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a24:	4b08      	ldr	r3, [pc, #32]	; (8004a48 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a26:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a28:	4c08      	ldr	r4, [pc, #32]	; (8004a4c <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a2a:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a2c:	20f0      	movs	r0, #240	; 0xf0
 8004a2e:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a32:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a34:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004a36:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a3a:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8004a3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a40:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004a42:	2001      	movs	r0, #1
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	e000e010 	.word	0xe000e010
 8004a4c:	e000ed00 	.word	0xe000ed00

08004a50 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004a50:	4770      	bx	lr
 8004a52:	bf00      	nop

08004a54 <HAL_SYSTICK_IRQHandler>:
{
 8004a54:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004a56:	f7ff fffb 	bl	8004a50 <HAL_SYSTICK_Callback>
}
 8004a5a:	bd08      	pop	{r3, pc}

08004a5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a60:	4688      	mov	r8, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a62:	6809      	ldr	r1, [r1, #0]
{
 8004a64:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004a66:	2900      	cmp	r1, #0
 8004a68:	d079      	beq.n	8004b5e <HAL_GPIO_Init+0x102>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004a6a:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8004c18 <HAL_GPIO_Init+0x1bc>
  uint32_t position = 0x00U;
 8004a6e:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004a70:	f04f 0a01 	mov.w	sl, #1
 8004a74:	fa0a fc05 	lsl.w	ip, sl, r5
    if (iocurrent != 0x00u)
 8004a78:	ea1c 0901 	ands.w	r9, ip, r1
 8004a7c:	d06b      	beq.n	8004b56 <HAL_GPIO_Init+0xfa>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004a7e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8004a82:	006e      	lsls	r6, r5, #1
 8004a84:	f002 0303 	and.w	r3, r2, #3
 8004a88:	2403      	movs	r4, #3
 8004a8a:	1e5f      	subs	r7, r3, #1
 8004a8c:	40b4      	lsls	r4, r6
 8004a8e:	43e4      	mvns	r4, r4
 8004a90:	2f01      	cmp	r7, #1
 8004a92:	9400      	str	r4, [sp, #0]
 8004a94:	d966      	bls.n	8004b64 <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a96:	2b03      	cmp	r3, #3
 8004a98:	d177      	bne.n	8004b8a <HAL_GPIO_Init+0x12e>
      temp = GPIOx->MODER;
 8004a9a:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a9c:	40b3      	lsls	r3, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a9e:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004aa0:	4323      	orrs	r3, r4
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004aa2:	f412 3f40 	tst.w	r2, #196608	; 0x30000
      GPIOx->MODER = temp;
 8004aa6:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004aa8:	d055      	beq.n	8004b56 <HAL_GPIO_Init+0xfa>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aaa:	4c55      	ldr	r4, [pc, #340]	; (8004c00 <HAL_GPIO_Init+0x1a4>)
 8004aac:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004aae:	f043 0301 	orr.w	r3, r3, #1
 8004ab2:	6623      	str	r3, [r4, #96]	; 0x60
 8004ab4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8004ab6:	f025 0603 	bic.w	r6, r5, #3
 8004aba:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8004ac6:	9303      	str	r3, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ac8:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004acc:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004ace:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ad0:	00a4      	lsls	r4, r4, #2
 8004ad2:	230f      	movs	r3, #15
 8004ad4:	40a3      	lsls	r3, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ad6:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ada:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004ade:	d013      	beq.n	8004b08 <HAL_GPIO_Init+0xac>
 8004ae0:	4f48      	ldr	r7, [pc, #288]	; (8004c04 <HAL_GPIO_Init+0x1a8>)
 8004ae2:	42b8      	cmp	r0, r7
 8004ae4:	d07e      	beq.n	8004be4 <HAL_GPIO_Init+0x188>
 8004ae6:	4f48      	ldr	r7, [pc, #288]	; (8004c08 <HAL_GPIO_Init+0x1ac>)
 8004ae8:	42b8      	cmp	r0, r7
 8004aea:	d076      	beq.n	8004bda <HAL_GPIO_Init+0x17e>
 8004aec:	4f47      	ldr	r7, [pc, #284]	; (8004c0c <HAL_GPIO_Init+0x1b0>)
 8004aee:	42b8      	cmp	r0, r7
 8004af0:	d07c      	beq.n	8004bec <HAL_GPIO_Init+0x190>
 8004af2:	4f47      	ldr	r7, [pc, #284]	; (8004c10 <HAL_GPIO_Init+0x1b4>)
 8004af4:	42b8      	cmp	r0, r7
 8004af6:	d07e      	beq.n	8004bf6 <HAL_GPIO_Init+0x19a>
 8004af8:	4f46      	ldr	r7, [pc, #280]	; (8004c14 <HAL_GPIO_Init+0x1b8>)
 8004afa:	42b8      	cmp	r0, r7
 8004afc:	bf0c      	ite	eq
 8004afe:	2705      	moveq	r7, #5
 8004b00:	2706      	movne	r7, #6
 8004b02:	fa07 f404 	lsl.w	r4, r7, r4
 8004b06:	4323      	orrs	r3, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b08:	60b3      	str	r3, [r6, #8]
        temp = EXTI->RTSR1;
 8004b0a:	f8db 3008 	ldr.w	r3, [fp, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b0e:	02d4      	lsls	r4, r2, #11
        temp &= ~(iocurrent);
 8004b10:	ea6f 0609 	mvn.w	r6, r9
 8004b14:	bf54      	ite	pl
 8004b16:	4033      	andpl	r3, r6
        {
          temp |= iocurrent;
 8004b18:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 8004b1c:	f8cb 3008 	str.w	r3, [fp, #8]

        temp = EXTI->FTSR1;
 8004b20:	f8db 400c 	ldr.w	r4, [fp, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b24:	0293      	lsls	r3, r2, #10
        temp &= ~(iocurrent);
 8004b26:	bf54      	ite	pl
 8004b28:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004b2a:	ea49 0404 	orrmi.w	r4, r9, r4
        }
        EXTI->FTSR1 = temp;
 8004b2e:	f8cb 400c 	str.w	r4, [fp, #12]

        temp = EXTI->EMR1;
 8004b32:	f8db 4004 	ldr.w	r4, [fp, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004b36:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8004b38:	bf54      	ite	pl
 8004b3a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004b3c:	ea49 0404 	orrmi.w	r4, r9, r4
        }
        EXTI->EMR1 = temp;
 8004b40:	f8cb 4004 	str.w	r4, [fp, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004b44:	f8db 3000 	ldr.w	r3, [fp]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b48:	03d2      	lsls	r2, r2, #15
        temp &= ~(iocurrent);
 8004b4a:	bf54      	ite	pl
 8004b4c:	4033      	andpl	r3, r6
        {
          temp |= iocurrent;
 8004b4e:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->IMR1 = temp;
 8004b52:	f8cb 3000 	str.w	r3, [fp]
      }
    }

    position++;
 8004b56:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004b58:	fa31 f305 	lsrs.w	r3, r1, r5
 8004b5c:	d18a      	bne.n	8004a74 <HAL_GPIO_Init+0x18>
  }
}
 8004b5e:	b005      	add	sp, #20
 8004b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8004b64:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004b66:	ea07 0e04 	and.w	lr, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b6a:	f8d8 700c 	ldr.w	r7, [r8, #12]
 8004b6e:	40b7      	lsls	r7, r6
 8004b70:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004b74:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004b76:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b7a:	f3c2 1700 	ubfx	r7, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004b7e:	ea2e 0c0c 	bic.w	ip, lr, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b82:	40af      	lsls	r7, r5
 8004b84:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8004b88:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004b8a:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004b8c:	ea07 0c04 	and.w	ip, r7, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004b90:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8004b94:	40b7      	lsls	r7, r6
 8004b96:	ea47 070c 	orr.w	r7, r7, ip
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b9a:	2b02      	cmp	r3, #2
        GPIOx->PUPDR = temp;
 8004b9c:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b9e:	f47f af7c 	bne.w	8004a9a <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 8004ba2:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 8004ba6:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004baa:	f005 0c07 	and.w	ip, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 8004bae:	f8de 4020 	ldr.w	r4, [lr, #32]
 8004bb2:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bb4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004bb8:	240f      	movs	r4, #15
 8004bba:	fa04 f70c 	lsl.w	r7, r4, ip
 8004bbe:	9c01      	ldr	r4, [sp, #4]
 8004bc0:	ea24 0707 	bic.w	r7, r4, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bc4:	f8d8 4010 	ldr.w	r4, [r8, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004bc8:	9701      	str	r7, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004bca:	fa04 f70c 	lsl.w	r7, r4, ip
 8004bce:	9c01      	ldr	r4, [sp, #4]
 8004bd0:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3U] = temp;
 8004bd2:	f8ce 7020 	str.w	r7, [lr, #32]
 8004bd6:	9c00      	ldr	r4, [sp, #0]
 8004bd8:	e75f      	b.n	8004a9a <HAL_GPIO_Init+0x3e>
 8004bda:	2702      	movs	r7, #2
 8004bdc:	fa07 f404 	lsl.w	r4, r7, r4
 8004be0:	4323      	orrs	r3, r4
 8004be2:	e791      	b.n	8004b08 <HAL_GPIO_Init+0xac>
 8004be4:	fa0a f404 	lsl.w	r4, sl, r4
 8004be8:	4323      	orrs	r3, r4
 8004bea:	e78d      	b.n	8004b08 <HAL_GPIO_Init+0xac>
 8004bec:	2703      	movs	r7, #3
 8004bee:	fa07 f404 	lsl.w	r4, r7, r4
 8004bf2:	4323      	orrs	r3, r4
 8004bf4:	e788      	b.n	8004b08 <HAL_GPIO_Init+0xac>
 8004bf6:	2704      	movs	r7, #4
 8004bf8:	fa07 f404 	lsl.w	r4, r7, r4
 8004bfc:	4323      	orrs	r3, r4
 8004bfe:	e783      	b.n	8004b08 <HAL_GPIO_Init+0xac>
 8004c00:	40021000 	.word	0x40021000
 8004c04:	48000400 	.word	0x48000400
 8004c08:	48000800 	.word	0x48000800
 8004c0c:	48000c00 	.word	0x48000c00
 8004c10:	48001000 	.word	0x48001000
 8004c14:	48001400 	.word	0x48001400
 8004c18:	40010400 	.word	0x40010400

08004c1c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004c1c:	6903      	ldr	r3, [r0, #16]
 8004c1e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004c20:	bf14      	ite	ne
 8004c22:	2001      	movne	r0, #1
 8004c24:	2000      	moveq	r0, #0
 8004c26:	4770      	bx	lr

08004c28 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c28:	4a3b      	ldr	r2, [pc, #236]	; (8004d18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8004c2a:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c2c:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004c2e:	b968      	cbnz	r0, 8004c4c <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c38:	d014      	beq.n	8004c64 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c3a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8004c3e:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c42:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004c46:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8004c4a:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004c4c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004c50:	d02f      	beq.n	8004cb2 <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c52:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c5a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004c5c:	2000      	movs	r0, #0
}
 8004c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c62:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c64:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c68:	4b2c      	ldr	r3, [pc, #176]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004c6a:	482d      	ldr	r0, [pc, #180]	; (8004d20 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c6c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004c70:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c74:	6811      	ldr	r1, [r2, #0]
 8004c76:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004c7a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004c7e:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c80:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c82:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c84:	2332      	movs	r3, #50	; 0x32
 8004c86:	fb03 f304 	mul.w	r3, r3, r4
 8004c8a:	fba0 0303 	umull	r0, r3, r0, r3
 8004c8e:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c90:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c92:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c96:	d506      	bpl.n	8004ca6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004c98:	e000      	b.n	8004c9c <HAL_PWREx_ControlVoltageScaling+0x74>
 8004c9a:	b123      	cbz	r3, 8004ca6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004c9c:	6951      	ldr	r1, [r2, #20]
 8004c9e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004ca0:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ca4:	d4f9      	bmi.n	8004c9a <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ca6:	4b1c      	ldr	r3, [pc, #112]	; (8004d18 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004ca8:	695b      	ldr	r3, [r3, #20]
 8004caa:	055c      	lsls	r4, r3, #21
 8004cac:	d5d6      	bpl.n	8004c5c <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8004cae:	2003      	movs	r0, #3
 8004cb0:	e7d5      	b.n	8004c5e <HAL_PWREx_ControlVoltageScaling+0x36>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004cb2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004cb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cba:	d009      	beq.n	8004cd0 <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cbc:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8004cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8004cc8:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8004cce:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cd0:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cd4:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004cd6:	4812      	ldr	r0, [pc, #72]	; (8004d20 <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004cd8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004cdc:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ce0:	6811      	ldr	r1, [r2, #0]
 8004ce2:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004ce6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004cea:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cec:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cee:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cf0:	2332      	movs	r3, #50	; 0x32
 8004cf2:	fb03 f304 	mul.w	r3, r3, r4
 8004cf6:	fba0 0303 	umull	r0, r3, r0, r3
 8004cfa:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cfc:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004cfe:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d02:	d5d0      	bpl.n	8004ca6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004d04:	e001      	b.n	8004d0a <HAL_PWREx_ControlVoltageScaling+0xe2>
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d0cd      	beq.n	8004ca6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004d0a:	6951      	ldr	r1, [r2, #20]
 8004d0c:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004d0e:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d12:	d5c8      	bpl.n	8004ca6 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004d14:	e7f7      	b.n	8004d06 <HAL_PWREx_ControlVoltageScaling+0xde>
 8004d16:	bf00      	nop
 8004d18:	40007000 	.word	0x40007000
 8004d1c:	200003d8 	.word	0x200003d8
 8004d20:	431bde83 	.word	0x431bde83

08004d24 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004d24:	4a02      	ldr	r2, [pc, #8]	; (8004d30 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004d26:	6893      	ldr	r3, [r2, #8]
 8004d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d2c:	6093      	str	r3, [r2, #8]
}
 8004d2e:	4770      	bx	lr
 8004d30:	40007000 	.word	0x40007000

08004d34 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d34:	2800      	cmp	r0, #0
 8004d36:	f000 8166 	beq.w	8005006 <HAL_RCC_OscConfig+0x2d2>
{
 8004d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d3e:	6803      	ldr	r3, [r0, #0]
 8004d40:	07d9      	lsls	r1, r3, #31
{
 8004d42:	b082      	sub	sp, #8
 8004d44:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d46:	d52d      	bpl.n	8004da4 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d48:	49b2      	ldr	r1, [pc, #712]	; (8005014 <HAL_RCC_OscConfig+0x2e0>)
 8004d4a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d4c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d4e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d52:	2a0c      	cmp	r2, #12
 8004d54:	f000 80ef 	beq.w	8004f36 <HAL_RCC_OscConfig+0x202>
 8004d58:	2a08      	cmp	r2, #8
 8004d5a:	f000 80f1 	beq.w	8004f40 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d5e:	6863      	ldr	r3, [r4, #4]
 8004d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d64:	f000 8128 	beq.w	8004fb8 <HAL_RCC_OscConfig+0x284>
 8004d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d6c:	f000 81dd 	beq.w	800512a <HAL_RCC_OscConfig+0x3f6>
 8004d70:	4da8      	ldr	r5, [pc, #672]	; (8005014 <HAL_RCC_OscConfig+0x2e0>)
 8004d72:	682a      	ldr	r2, [r5, #0]
 8004d74:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004d78:	602a      	str	r2, [r5, #0]
 8004d7a:	682a      	ldr	r2, [r5, #0]
 8004d7c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d80:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f040 811d 	bne.w	8004fc2 <HAL_RCC_OscConfig+0x28e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d88:	f7fe fe82 	bl	8003a90 <HAL_GetTick>
 8004d8c:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d8e:	e005      	b.n	8004d9c <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d90:	f7fe fe7e 	bl	8003a90 <HAL_GetTick>
 8004d94:	1b80      	subs	r0, r0, r6
 8004d96:	2864      	cmp	r0, #100	; 0x64
 8004d98:	f200 8131 	bhi.w	8004ffe <HAL_RCC_OscConfig+0x2ca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	039f      	lsls	r7, r3, #14
 8004da0:	d4f6      	bmi.n	8004d90 <HAL_RCC_OscConfig+0x5c>
 8004da2:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004da4:	079e      	lsls	r6, r3, #30
 8004da6:	f100 809f 	bmi.w	8004ee8 <HAL_RCC_OscConfig+0x1b4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004daa:	071a      	lsls	r2, r3, #28
 8004dac:	d519      	bpl.n	8004de2 <HAL_RCC_OscConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004dae:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004db0:	4d98      	ldr	r5, [pc, #608]	; (8005014 <HAL_RCC_OscConfig+0x2e0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	f000 80d1 	beq.w	8004f5a <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_LSI_ENABLE();
 8004db8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004dc4:	f7fe fe64 	bl	8003a90 <HAL_GetTick>
 8004dc8:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dca:	e005      	b.n	8004dd8 <HAL_RCC_OscConfig+0xa4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004dcc:	f7fe fe60 	bl	8003a90 <HAL_GetTick>
 8004dd0:	1b80      	subs	r0, r0, r6
 8004dd2:	2802      	cmp	r0, #2
 8004dd4:	f200 8113 	bhi.w	8004ffe <HAL_RCC_OscConfig+0x2ca>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004dd8:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004ddc:	079b      	lsls	r3, r3, #30
 8004dde:	d5f5      	bpl.n	8004dcc <HAL_RCC_OscConfig+0x98>
 8004de0:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de2:	075e      	lsls	r6, r3, #29
 8004de4:	d53f      	bpl.n	8004e66 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004de6:	4b8b      	ldr	r3, [pc, #556]	; (8005014 <HAL_RCC_OscConfig+0x2e0>)
 8004de8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004dea:	00d5      	lsls	r5, r2, #3
 8004dec:	f100 8164 	bmi.w	80050b8 <HAL_RCC_OscConfig+0x384>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004df0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004df2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004df6:	659a      	str	r2, [r3, #88]	; 0x58
 8004df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	9301      	str	r3, [sp, #4]
 8004e00:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004e02:	2601      	movs	r6, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e04:	4d84      	ldr	r5, [pc, #528]	; (8005018 <HAL_RCC_OscConfig+0x2e4>)
 8004e06:	682a      	ldr	r2, [r5, #0]
 8004e08:	05d0      	lsls	r0, r2, #23
 8004e0a:	f140 80e8 	bpl.w	8004fde <HAL_RCC_OscConfig+0x2aa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e0e:	68a3      	ldr	r3, [r4, #8]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	f000 8153 	beq.w	80050bc <HAL_RCC_OscConfig+0x388>
 8004e16:	2b05      	cmp	r3, #5
 8004e18:	f000 81c8 	beq.w	80051ac <HAL_RCC_OscConfig+0x478>
 8004e1c:	4d7d      	ldr	r5, [pc, #500]	; (8005014 <HAL_RCC_OscConfig+0x2e0>)
 8004e1e:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8004e22:	f022 0201 	bic.w	r2, r2, #1
 8004e26:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8004e2a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8004e2e:	f022 0204 	bic.w	r2, r2, #4
 8004e32:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f040 8147 	bne.w	80050ca <HAL_RCC_OscConfig+0x396>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e3c:	f7fe fe28 	bl	8003a90 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e40:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004e44:	4680      	mov	r8, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e46:	e006      	b.n	8004e56 <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e48:	f7fe fe22 	bl	8003a90 <HAL_GetTick>
 8004e4c:	eba0 0008 	sub.w	r0, r0, r8
 8004e50:	42b8      	cmp	r0, r7
 8004e52:	f200 80d4 	bhi.w	8004ffe <HAL_RCC_OscConfig+0x2ca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004e56:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004e5a:	079b      	lsls	r3, r3, #30
 8004e5c:	d4f4      	bmi.n	8004e48 <HAL_RCC_OscConfig+0x114>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e5e:	2e00      	cmp	r6, #0
 8004e60:	f040 815d 	bne.w	800511e <HAL_RCC_OscConfig+0x3ea>
 8004e64:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004e66:	069d      	lsls	r5, r3, #26
 8004e68:	d518      	bpl.n	8004e9c <HAL_RCC_OscConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e6a:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004e6c:	4d69      	ldr	r5, [pc, #420]	; (8005014 <HAL_RCC_OscConfig+0x2e0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	f000 8140 	beq.w	80050f4 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_HSI48_ENABLE();
 8004e74:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004e78:	f043 0301 	orr.w	r3, r3, #1
 8004e7c:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e80:	f7fe fe06 	bl	8003a90 <HAL_GetTick>
 8004e84:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e86:	e005      	b.n	8004e94 <HAL_RCC_OscConfig+0x160>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004e88:	f7fe fe02 	bl	8003a90 <HAL_GetTick>
 8004e8c:	1b80      	subs	r0, r0, r6
 8004e8e:	2802      	cmp	r0, #2
 8004e90:	f200 80b5 	bhi.w	8004ffe <HAL_RCC_OscConfig+0x2ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004e94:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004e98:	0798      	lsls	r0, r3, #30
 8004e9a:	d5f5      	bpl.n	8004e88 <HAL_RCC_OscConfig+0x154>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004e9c:	69e0      	ldr	r0, [r4, #28]
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	f000 80f7 	beq.w	8005092 <HAL_RCC_OscConfig+0x35e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ea4:	4d5b      	ldr	r5, [pc, #364]	; (8005014 <HAL_RCC_OscConfig+0x2e0>)
 8004ea6:	68aa      	ldr	r2, [r5, #8]
 8004ea8:	f002 020c 	and.w	r2, r2, #12
 8004eac:	2a0c      	cmp	r2, #12
 8004eae:	f000 8149 	beq.w	8005144 <HAL_RCC_OscConfig+0x410>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb2:	682a      	ldr	r2, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004eb4:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004eb6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004eba:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004ebc:	f000 80a5 	beq.w	800500a <HAL_RCC_OscConfig+0x2d6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec0:	f7fe fde6 	bl	8003a90 <HAL_GetTick>

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec4:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8004ec6:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ec8:	e005      	b.n	8004ed6 <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eca:	f7fe fde1 	bl	8003a90 <HAL_GetTick>
 8004ece:	1b40      	subs	r0, r0, r5
 8004ed0:	2802      	cmp	r0, #2
 8004ed2:	f200 8094 	bhi.w	8004ffe <HAL_RCC_OscConfig+0x2ca>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ed6:	6820      	ldr	r0, [r4, #0]
 8004ed8:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004edc:	d1f5      	bne.n	8004eca <HAL_RCC_OscConfig+0x196>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004ede:	68e2      	ldr	r2, [r4, #12]
 8004ee0:	4b4e      	ldr	r3, [pc, #312]	; (800501c <HAL_RCC_OscConfig+0x2e8>)
 8004ee2:	4013      	ands	r3, r2
 8004ee4:	60e3      	str	r3, [r4, #12]
 8004ee6:	e035      	b.n	8004f54 <HAL_RCC_OscConfig+0x220>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ee8:	4a4a      	ldr	r2, [pc, #296]	; (8005014 <HAL_RCC_OscConfig+0x2e0>)
 8004eea:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004eec:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004eee:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004ef2:	2b0c      	cmp	r3, #12
 8004ef4:	d045      	beq.n	8004f82 <HAL_RCC_OscConfig+0x24e>
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d047      	beq.n	8004f8a <HAL_RCC_OscConfig+0x256>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004efa:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8004efc:	4d45      	ldr	r5, [pc, #276]	; (8005014 <HAL_RCC_OscConfig+0x2e0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 80c9 	beq.w	8005096 <HAL_RCC_OscConfig+0x362>
        __HAL_RCC_HSI_ENABLE();
 8004f04:	682b      	ldr	r3, [r5, #0]
 8004f06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f0a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004f0c:	f7fe fdc0 	bl	8003a90 <HAL_GetTick>
 8004f10:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f12:	e004      	b.n	8004f1e <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f14:	f7fe fdbc 	bl	8003a90 <HAL_GetTick>
 8004f18:	1b80      	subs	r0, r0, r6
 8004f1a:	2802      	cmp	r0, #2
 8004f1c:	d86f      	bhi.n	8004ffe <HAL_RCC_OscConfig+0x2ca>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004f1e:	682b      	ldr	r3, [r5, #0]
 8004f20:	0558      	lsls	r0, r3, #21
 8004f22:	d5f7      	bpl.n	8004f14 <HAL_RCC_OscConfig+0x1e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f24:	686b      	ldr	r3, [r5, #4]
 8004f26:	6922      	ldr	r2, [r4, #16]
 8004f28:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004f2c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004f30:	606b      	str	r3, [r5, #4]
 8004f32:	6823      	ldr	r3, [r4, #0]
 8004f34:	e739      	b.n	8004daa <HAL_RCC_OscConfig+0x76>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f36:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f3a:	2903      	cmp	r1, #3
 8004f3c:	f47f af0f 	bne.w	8004d5e <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f40:	4a34      	ldr	r2, [pc, #208]	; (8005014 <HAL_RCC_OscConfig+0x2e0>)
 8004f42:	6812      	ldr	r2, [r2, #0]
 8004f44:	0392      	lsls	r2, r2, #14
 8004f46:	f57f af2d 	bpl.w	8004da4 <HAL_RCC_OscConfig+0x70>
 8004f4a:	6862      	ldr	r2, [r4, #4]
 8004f4c:	2a00      	cmp	r2, #0
 8004f4e:	f47f af29 	bne.w	8004da4 <HAL_RCC_OscConfig+0x70>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8004f52:	2001      	movs	r0, #1
    }
  }
  }

  return HAL_OK;
}
 8004f54:	b002      	add	sp, #8
 8004f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004f5a:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004f5e:	f023 0301 	bic.w	r3, r3, #1
 8004f62:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004f66:	f7fe fd93 	bl	8003a90 <HAL_GetTick>
 8004f6a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f6c:	e004      	b.n	8004f78 <HAL_RCC_OscConfig+0x244>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f6e:	f7fe fd8f 	bl	8003a90 <HAL_GetTick>
 8004f72:	1b80      	subs	r0, r0, r6
 8004f74:	2802      	cmp	r0, #2
 8004f76:	d842      	bhi.n	8004ffe <HAL_RCC_OscConfig+0x2ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f78:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004f7c:	079f      	lsls	r7, r3, #30
 8004f7e:	d4f6      	bmi.n	8004f6e <HAL_RCC_OscConfig+0x23a>
 8004f80:	e72e      	b.n	8004de0 <HAL_RCC_OscConfig+0xac>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f82:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004f86:	2a02      	cmp	r2, #2
 8004f88:	d1b7      	bne.n	8004efa <HAL_RCC_OscConfig+0x1c6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f8a:	4b22      	ldr	r3, [pc, #136]	; (8005014 <HAL_RCC_OscConfig+0x2e0>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	055d      	lsls	r5, r3, #21
 8004f90:	d502      	bpl.n	8004f98 <HAL_RCC_OscConfig+0x264>
 8004f92:	68e3      	ldr	r3, [r4, #12]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0dc      	beq.n	8004f52 <HAL_RCC_OscConfig+0x21e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f98:	4a1e      	ldr	r2, [pc, #120]	; (8005014 <HAL_RCC_OscConfig+0x2e0>)
 8004f9a:	6920      	ldr	r0, [r4, #16]
 8004f9c:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004f9e:	4920      	ldr	r1, [pc, #128]	; (8005020 <HAL_RCC_OscConfig+0x2ec>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fa0:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004fa4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004fa8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004faa:	6808      	ldr	r0, [r1, #0]
 8004fac:	f7fe fd22 	bl	80039f4 <HAL_InitTick>
 8004fb0:	2800      	cmp	r0, #0
 8004fb2:	d1ce      	bne.n	8004f52 <HAL_RCC_OscConfig+0x21e>
 8004fb4:	6823      	ldr	r3, [r4, #0]
 8004fb6:	e6f8      	b.n	8004daa <HAL_RCC_OscConfig+0x76>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fb8:	4a16      	ldr	r2, [pc, #88]	; (8005014 <HAL_RCC_OscConfig+0x2e0>)
 8004fba:	6813      	ldr	r3, [r2, #0]
 8004fbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc0:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004fc2:	f7fe fd65 	bl	8003a90 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fc6:	4d13      	ldr	r5, [pc, #76]	; (8005014 <HAL_RCC_OscConfig+0x2e0>)
        tickstart = HAL_GetTick();
 8004fc8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fca:	e004      	b.n	8004fd6 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fcc:	f7fe fd60 	bl	8003a90 <HAL_GetTick>
 8004fd0:	1b80      	subs	r0, r0, r6
 8004fd2:	2864      	cmp	r0, #100	; 0x64
 8004fd4:	d813      	bhi.n	8004ffe <HAL_RCC_OscConfig+0x2ca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fd6:	682b      	ldr	r3, [r5, #0]
 8004fd8:	039b      	lsls	r3, r3, #14
 8004fda:	d5f7      	bpl.n	8004fcc <HAL_RCC_OscConfig+0x298>
 8004fdc:	e6e1      	b.n	8004da2 <HAL_RCC_OscConfig+0x6e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fde:	682a      	ldr	r2, [r5, #0]
 8004fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fe4:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8004fe6:	f7fe fd53 	bl	8003a90 <HAL_GetTick>
 8004fea:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fec:	682b      	ldr	r3, [r5, #0]
 8004fee:	05d9      	lsls	r1, r3, #23
 8004ff0:	f53f af0d 	bmi.w	8004e0e <HAL_RCC_OscConfig+0xda>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff4:	f7fe fd4c 	bl	8003a90 <HAL_GetTick>
 8004ff8:	1bc0      	subs	r0, r0, r7
 8004ffa:	2802      	cmp	r0, #2
 8004ffc:	d9f6      	bls.n	8004fec <HAL_RCC_OscConfig+0x2b8>
            return HAL_TIMEOUT;
 8004ffe:	2003      	movs	r0, #3
}
 8005000:	b002      	add	sp, #8
 8005002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8005006:	2001      	movs	r0, #1
}
 8005008:	4770      	bx	lr
        tickstart = HAL_GetTick();
 800500a:	f7fe fd41 	bl	8003a90 <HAL_GetTick>
 800500e:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005010:	e00d      	b.n	800502e <HAL_RCC_OscConfig+0x2fa>
 8005012:	bf00      	nop
 8005014:	40021000 	.word	0x40021000
 8005018:	40007000 	.word	0x40007000
 800501c:	feeefffc 	.word	0xfeeefffc
 8005020:	200003e0 	.word	0x200003e0
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005024:	f7fe fd34 	bl	8003a90 <HAL_GetTick>
 8005028:	1b80      	subs	r0, r0, r6
 800502a:	2802      	cmp	r0, #2
 800502c:	d8e7      	bhi.n	8004ffe <HAL_RCC_OscConfig+0x2ca>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800502e:	682b      	ldr	r3, [r5, #0]
 8005030:	019a      	lsls	r2, r3, #6
 8005032:	d4f7      	bmi.n	8005024 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005034:	68e9      	ldr	r1, [r5, #12]
 8005036:	4b64      	ldr	r3, [pc, #400]	; (80051c8 <HAL_RCC_OscConfig+0x494>)
 8005038:	6a22      	ldr	r2, [r4, #32]
 800503a:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 800503c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800503e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005040:	400b      	ands	r3, r1
 8005042:	4313      	orrs	r3, r2
 8005044:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8005048:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 800504c:	3801      	subs	r0, #1
 800504e:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8005052:	0849      	lsrs	r1, r1, #1
 8005054:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005058:	3901      	subs	r1, #1
 800505a:	0852      	lsrs	r2, r2, #1
 800505c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005060:	3a01      	subs	r2, #1
 8005062:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005066:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005068:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800506a:	4c58      	ldr	r4, [pc, #352]	; (80051cc <HAL_RCC_OscConfig+0x498>)
        __HAL_RCC_PLL_ENABLE();
 800506c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005070:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005072:	68eb      	ldr	r3, [r5, #12]
 8005074:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005078:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800507a:	f7fe fd09 	bl	8003a90 <HAL_GetTick>
 800507e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005080:	e004      	b.n	800508c <HAL_RCC_OscConfig+0x358>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005082:	f7fe fd05 	bl	8003a90 <HAL_GetTick>
 8005086:	1b40      	subs	r0, r0, r5
 8005088:	2802      	cmp	r0, #2
 800508a:	d8b8      	bhi.n	8004ffe <HAL_RCC_OscConfig+0x2ca>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800508c:	6823      	ldr	r3, [r4, #0]
 800508e:	019b      	lsls	r3, r3, #6
 8005090:	d5f7      	bpl.n	8005082 <HAL_RCC_OscConfig+0x34e>
  return HAL_OK;
 8005092:	2000      	movs	r0, #0
 8005094:	e75e      	b.n	8004f54 <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_HSI_DISABLE();
 8005096:	682b      	ldr	r3, [r5, #0]
 8005098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800509c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800509e:	f7fe fcf7 	bl	8003a90 <HAL_GetTick>
 80050a2:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050a4:	e004      	b.n	80050b0 <HAL_RCC_OscConfig+0x37c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050a6:	f7fe fcf3 	bl	8003a90 <HAL_GetTick>
 80050aa:	1b80      	subs	r0, r0, r6
 80050ac:	2802      	cmp	r0, #2
 80050ae:	d8a6      	bhi.n	8004ffe <HAL_RCC_OscConfig+0x2ca>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	0559      	lsls	r1, r3, #21
 80050b4:	d4f7      	bmi.n	80050a6 <HAL_RCC_OscConfig+0x372>
 80050b6:	e77d      	b.n	8004fb4 <HAL_RCC_OscConfig+0x280>
    FlagStatus       pwrclkchanged = RESET;
 80050b8:	2600      	movs	r6, #0
 80050ba:	e6a3      	b.n	8004e04 <HAL_RCC_OscConfig+0xd0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050bc:	4a43      	ldr	r2, [pc, #268]	; (80051cc <HAL_RCC_OscConfig+0x498>)
 80050be:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80050ca:	f7fe fce1 	bl	8003a90 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ce:	4d3f      	ldr	r5, [pc, #252]	; (80051cc <HAL_RCC_OscConfig+0x498>)
      tickstart = HAL_GetTick();
 80050d0:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d2:	f241 3788 	movw	r7, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050d6:	e005      	b.n	80050e4 <HAL_RCC_OscConfig+0x3b0>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d8:	f7fe fcda 	bl	8003a90 <HAL_GetTick>
 80050dc:	eba0 0008 	sub.w	r0, r0, r8
 80050e0:	42b8      	cmp	r0, r7
 80050e2:	d88c      	bhi.n	8004ffe <HAL_RCC_OscConfig+0x2ca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050e4:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 80050e8:	079a      	lsls	r2, r3, #30
 80050ea:	d5f5      	bpl.n	80050d8 <HAL_RCC_OscConfig+0x3a4>
    if (pwrclkchanged == SET)
 80050ec:	2e00      	cmp	r6, #0
 80050ee:	f43f aeb9 	beq.w	8004e64 <HAL_RCC_OscConfig+0x130>
 80050f2:	e014      	b.n	800511e <HAL_RCC_OscConfig+0x3ea>
      __HAL_RCC_HSI48_DISABLE();
 80050f4:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 80050f8:	f023 0301 	bic.w	r3, r3, #1
 80050fc:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8005100:	f7fe fcc6 	bl	8003a90 <HAL_GetTick>
 8005104:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005106:	e005      	b.n	8005114 <HAL_RCC_OscConfig+0x3e0>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005108:	f7fe fcc2 	bl	8003a90 <HAL_GetTick>
 800510c:	1b80      	subs	r0, r0, r6
 800510e:	2802      	cmp	r0, #2
 8005110:	f63f af75 	bhi.w	8004ffe <HAL_RCC_OscConfig+0x2ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005114:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8005118:	0799      	lsls	r1, r3, #30
 800511a:	d4f5      	bmi.n	8005108 <HAL_RCC_OscConfig+0x3d4>
 800511c:	e6be      	b.n	8004e9c <HAL_RCC_OscConfig+0x168>
      __HAL_RCC_PWR_CLK_DISABLE();
 800511e:	4a2b      	ldr	r2, [pc, #172]	; (80051cc <HAL_RCC_OscConfig+0x498>)
 8005120:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005122:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005126:	6593      	str	r3, [r2, #88]	; 0x58
 8005128:	e69c      	b.n	8004e64 <HAL_RCC_OscConfig+0x130>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800512a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800512e:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8005132:	681a      	ldr	r2, [r3, #0]
 8005134:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8005138:	601a      	str	r2, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	e73e      	b.n	8004fc2 <HAL_RCC_OscConfig+0x28e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005144:	2801      	cmp	r0, #1
 8005146:	f43f af05 	beq.w	8004f54 <HAL_RCC_OscConfig+0x220>
      temp_pllckcfg = RCC->PLLCFGR;
 800514a:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800514c:	6a22      	ldr	r2, [r4, #32]
 800514e:	f003 0103 	and.w	r1, r3, #3
 8005152:	4291      	cmp	r1, r2
 8005154:	f47f aefd 	bne.w	8004f52 <HAL_RCC_OscConfig+0x21e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005158:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800515a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800515e:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005160:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005164:	f47f aef5 	bne.w	8004f52 <HAL_RCC_OscConfig+0x21e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005168:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800516a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800516e:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005172:	f47f aeee 	bne.w	8004f52 <HAL_RCC_OscConfig+0x21e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005176:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005178:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800517c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005180:	f47f aee7 	bne.w	8004f52 <HAL_RCC_OscConfig+0x21e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005184:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005186:	0852      	lsrs	r2, r2, #1
 8005188:	3a01      	subs	r2, #1
 800518a:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800518e:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005192:	f47f aede 	bne.w	8004f52 <HAL_RCC_OscConfig+0x21e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005196:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005198:	0852      	lsrs	r2, r2, #1
 800519a:	3a01      	subs	r2, #1
 800519c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051a0:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 80051a4:	bf14      	ite	ne
 80051a6:	2001      	movne	r0, #1
 80051a8:	2000      	moveq	r0, #0
 80051aa:	e6d3      	b.n	8004f54 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ac:	4b07      	ldr	r3, [pc, #28]	; (80051cc <HAL_RCC_OscConfig+0x498>)
 80051ae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051b2:	f042 0204 	orr.w	r2, r2, #4
 80051b6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80051ba:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80051c6:	e780      	b.n	80050ca <HAL_RCC_OscConfig+0x396>
 80051c8:	019f800c 	.word	0x019f800c
 80051cc:	40021000 	.word	0x40021000

080051d0 <HAL_RCC_ClockConfig>:
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051d0:	2800      	cmp	r0, #0
 80051d2:	f000 8105 	beq.w	80053e0 <HAL_RCC_ClockConfig+0x210>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051d6:	4aad      	ldr	r2, [pc, #692]	; (800548c <HAL_RCC_ClockConfig+0x2bc>)
{
 80051d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051dc:	6813      	ldr	r3, [r2, #0]
 80051de:	f003 030f 	and.w	r3, r3, #15
 80051e2:	428b      	cmp	r3, r1
 80051e4:	d20c      	bcs.n	8005200 <HAL_RCC_ClockConfig+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051e6:	6813      	ldr	r3, [r2, #0]
 80051e8:	f023 030f 	bic.w	r3, r3, #15
 80051ec:	430b      	orrs	r3, r1
 80051ee:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051f0:	6813      	ldr	r3, [r2, #0]
 80051f2:	f003 030f 	and.w	r3, r3, #15
 80051f6:	428b      	cmp	r3, r1
 80051f8:	d002      	beq.n	8005200 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 80051fa:	2001      	movs	r0, #1
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
}
 80051fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005200:	6803      	ldr	r3, [r0, #0]
 8005202:	07df      	lsls	r7, r3, #31
 8005204:	4604      	mov	r4, r0
 8005206:	460d      	mov	r5, r1
 8005208:	f140 8088 	bpl.w	800531c <HAL_RCC_ClockConfig+0x14c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800520c:	6842      	ldr	r2, [r0, #4]
 800520e:	2a03      	cmp	r2, #3
 8005210:	f000 80ad 	beq.w	800536e <HAL_RCC_ClockConfig+0x19e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005214:	4b9e      	ldr	r3, [pc, #632]	; (8005490 <HAL_RCC_ClockConfig+0x2c0>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005216:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005218:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800521a:	f000 80ff 	beq.w	800541c <HAL_RCC_ClockConfig+0x24c>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800521e:	055b      	lsls	r3, r3, #21
 8005220:	d5eb      	bpl.n	80051fa <HAL_RCC_ClockConfig+0x2a>
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005222:	4b9b      	ldr	r3, [pc, #620]	; (8005490 <HAL_RCC_ClockConfig+0x2c0>)
 8005224:	6899      	ldr	r1, [r3, #8]
 8005226:	f001 010c 	and.w	r1, r1, #12
 800522a:	2904      	cmp	r1, #4
 800522c:	d00a      	beq.n	8005244 <HAL_RCC_ClockConfig+0x74>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800522e:	6899      	ldr	r1, [r3, #8]
 8005230:	f001 010c 	and.w	r1, r1, #12
 8005234:	2908      	cmp	r1, #8
 8005236:	d005      	beq.n	8005244 <HAL_RCC_ClockConfig+0x74>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005238:	6899      	ldr	r1, [r3, #8]
 800523a:	f001 010c 	and.w	r1, r1, #12
 800523e:	290c      	cmp	r1, #12
 8005240:	f000 80fb 	beq.w	800543a <HAL_RCC_ClockConfig+0x26a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005244:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005248:	4e91      	ldr	r6, [pc, #580]	; (8005490 <HAL_RCC_ClockConfig+0x2c0>)
 800524a:	68b3      	ldr	r3, [r6, #8]
 800524c:	f023 0303 	bic.w	r3, r3, #3
 8005250:	431a      	orrs	r2, r3
 8005252:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8005254:	f7fe fc1c 	bl	8003a90 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005258:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800525c:	4681      	mov	r9, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800525e:	e005      	b.n	800526c <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005260:	f7fe fc16 	bl	8003a90 <HAL_GetTick>
 8005264:	eba0 0009 	sub.w	r0, r0, r9
 8005268:	42b8      	cmp	r0, r7
 800526a:	d874      	bhi.n	8005356 <HAL_RCC_ClockConfig+0x186>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800526c:	68b3      	ldr	r3, [r6, #8]
 800526e:	6862      	ldr	r2, [r4, #4]
 8005270:	f003 030c 	and.w	r3, r3, #12
 8005274:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005278:	d1f2      	bne.n	8005260 <HAL_RCC_ClockConfig+0x90>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	079f      	lsls	r7, r3, #30
 800527e:	f140 80d3 	bpl.w	8005428 <HAL_RCC_ClockConfig+0x258>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005282:	0758      	lsls	r0, r3, #29
 8005284:	d504      	bpl.n	8005290 <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005286:	4982      	ldr	r1, [pc, #520]	; (8005490 <HAL_RCC_ClockConfig+0x2c0>)
 8005288:	688a      	ldr	r2, [r1, #8]
 800528a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800528e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005290:	0719      	lsls	r1, r3, #28
 8005292:	d506      	bpl.n	80052a2 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005294:	4a7e      	ldr	r2, [pc, #504]	; (8005490 <HAL_RCC_ClockConfig+0x2c0>)
 8005296:	6893      	ldr	r3, [r2, #8]
 8005298:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800529c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80052a0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052a2:	4a7b      	ldr	r2, [pc, #492]	; (8005490 <HAL_RCC_ClockConfig+0x2c0>)
 80052a4:	68a1      	ldr	r1, [r4, #8]
 80052a6:	6893      	ldr	r3, [r2, #8]
 80052a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052ac:	430b      	orrs	r3, r1
 80052ae:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80052b0:	4e76      	ldr	r6, [pc, #472]	; (800548c <HAL_RCC_ClockConfig+0x2bc>)
 80052b2:	6832      	ldr	r2, [r6, #0]
 80052b4:	f002 020f 	and.w	r2, r2, #15
 80052b8:	42aa      	cmp	r2, r5
 80052ba:	d837      	bhi.n	800532c <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052bc:	6823      	ldr	r3, [r4, #0]
 80052be:	075a      	lsls	r2, r3, #29
 80052c0:	d506      	bpl.n	80052d0 <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052c2:	4973      	ldr	r1, [pc, #460]	; (8005490 <HAL_RCC_ClockConfig+0x2c0>)
 80052c4:	68e0      	ldr	r0, [r4, #12]
 80052c6:	688a      	ldr	r2, [r1, #8]
 80052c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052cc:	4302      	orrs	r2, r0
 80052ce:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052d0:	071b      	lsls	r3, r3, #28
 80052d2:	d443      	bmi.n	800535c <HAL_RCC_ClockConfig+0x18c>
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80052d4:	4a6e      	ldr	r2, [pc, #440]	; (8005490 <HAL_RCC_ClockConfig+0x2c0>)
 80052d6:	6893      	ldr	r3, [r2, #8]
 80052d8:	f003 030c 	and.w	r3, r3, #12
 80052dc:	2b04      	cmp	r3, #4
 80052de:	f000 80d3 	beq.w	8005488 <HAL_RCC_ClockConfig+0x2b8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052e2:	6893      	ldr	r3, [r2, #8]
 80052e4:	f003 030c 	and.w	r3, r3, #12
 80052e8:	2b08      	cmp	r3, #8
 80052ea:	f000 809b 	beq.w	8005424 <HAL_RCC_ClockConfig+0x254>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80052ee:	6893      	ldr	r3, [r2, #8]
 80052f0:	f003 030c 	and.w	r3, r3, #12
 80052f4:	2b0c      	cmp	r3, #12
 80052f6:	d075      	beq.n	80053e4 <HAL_RCC_ClockConfig+0x214>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 80052f8:	2300      	movs	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052fa:	4a65      	ldr	r2, [pc, #404]	; (8005490 <HAL_RCC_ClockConfig+0x2c0>)
 80052fc:	4c65      	ldr	r4, [pc, #404]	; (8005494 <HAL_RCC_ClockConfig+0x2c4>)
 80052fe:	6892      	ldr	r2, [r2, #8]
  return HAL_InitTick(uwTickPrio);
 8005300:	4865      	ldr	r0, [pc, #404]	; (8005498 <HAL_RCC_ClockConfig+0x2c8>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005302:	4966      	ldr	r1, [pc, #408]	; (800549c <HAL_RCC_ClockConfig+0x2cc>)
  return HAL_InitTick(uwTickPrio);
 8005304:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005306:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800530a:	5ca2      	ldrb	r2, [r4, r2]
 800530c:	f002 021f 	and.w	r2, r2, #31
 8005310:	40d3      	lsrs	r3, r2
 8005312:	600b      	str	r3, [r1, #0]
}
 8005314:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005318:	f7fe bb6c 	b.w	80039f4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800531c:	079e      	lsls	r6, r3, #30
 800531e:	d4b0      	bmi.n	8005282 <HAL_RCC_ClockConfig+0xb2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005320:	4e5a      	ldr	r6, [pc, #360]	; (800548c <HAL_RCC_ClockConfig+0x2bc>)
 8005322:	6832      	ldr	r2, [r6, #0]
 8005324:	f002 020f 	and.w	r2, r2, #15
 8005328:	42aa      	cmp	r2, r5
 800532a:	d9c7      	bls.n	80052bc <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800532c:	6832      	ldr	r2, [r6, #0]
 800532e:	f022 020f 	bic.w	r2, r2, #15
 8005332:	432a      	orrs	r2, r5
 8005334:	6032      	str	r2, [r6, #0]
    tickstart = HAL_GetTick();
 8005336:	f7fe fbab 	bl	8003a90 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800533a:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800533e:	4680      	mov	r8, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005340:	6833      	ldr	r3, [r6, #0]
 8005342:	f003 030f 	and.w	r3, r3, #15
 8005346:	42ab      	cmp	r3, r5
 8005348:	d0b8      	beq.n	80052bc <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800534a:	f7fe fba1 	bl	8003a90 <HAL_GetTick>
 800534e:	eba0 0008 	sub.w	r0, r0, r8
 8005352:	42b8      	cmp	r0, r7
 8005354:	d9f4      	bls.n	8005340 <HAL_RCC_ClockConfig+0x170>
        return HAL_TIMEOUT;
 8005356:	2003      	movs	r0, #3
}
 8005358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800535c:	4a4c      	ldr	r2, [pc, #304]	; (8005490 <HAL_RCC_ClockConfig+0x2c0>)
 800535e:	6921      	ldr	r1, [r4, #16]
 8005360:	6893      	ldr	r3, [r2, #8]
 8005362:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005366:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800536a:	6093      	str	r3, [r2, #8]
 800536c:	e7b2      	b.n	80052d4 <HAL_RCC_ClockConfig+0x104>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800536e:	4948      	ldr	r1, [pc, #288]	; (8005490 <HAL_RCC_ClockConfig+0x2c0>)
 8005370:	6808      	ldr	r0, [r1, #0]
 8005372:	0180      	lsls	r0, r0, #6
 8005374:	f57f af41 	bpl.w	80051fa <HAL_RCC_ClockConfig+0x2a>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005378:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800537a:	68c8      	ldr	r0, [r1, #12]
      if(pllfreq > 80000000U)
 800537c:	4f48      	ldr	r7, [pc, #288]	; (80054a0 <HAL_RCC_ClockConfig+0x2d0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800537e:	f006 0603 	and.w	r6, r6, #3

  switch (pllsource)
 8005382:	2e03      	cmp	r6, #3
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005384:	68ce      	ldr	r6, [r1, #12]
 8005386:	bf0c      	ite	eq
 8005388:	4946      	ldreq	r1, [pc, #280]	; (80054a4 <HAL_RCC_ClockConfig+0x2d4>)
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800538a:	4947      	ldrne	r1, [pc, #284]	; (80054a8 <HAL_RCC_ClockConfig+0x2d8>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800538c:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005390:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005392:	fbb1 f1f0 	udiv	r1, r1, r0
 8005396:	f3c6 2006 	ubfx	r0, r6, #8, #7
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800539a:	4e3d      	ldr	r6, [pc, #244]	; (8005490 <HAL_RCC_ClockConfig+0x2c0>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800539c:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053a0:	68f0      	ldr	r0, [r6, #12]
 80053a2:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80053a6:	3001      	adds	r0, #1
 80053a8:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80053aa:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 80053ae:	42b9      	cmp	r1, r7
 80053b0:	f67f af48 	bls.w	8005244 <HAL_RCC_ClockConfig+0x74>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80053b4:	68b1      	ldr	r1, [r6, #8]
 80053b6:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 80053ba:	d007      	beq.n	80053cc <HAL_RCC_ClockConfig+0x1fc>
 80053bc:	f013 0802 	ands.w	r8, r3, #2
 80053c0:	f43f af42 	beq.w	8005248 <HAL_RCC_ClockConfig+0x78>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80053c4:	68a3      	ldr	r3, [r4, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	f47f af3c 	bne.w	8005244 <HAL_RCC_ClockConfig+0x74>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053cc:	4930      	ldr	r1, [pc, #192]	; (8005490 <HAL_RCC_ClockConfig+0x2c0>)
 80053ce:	688b      	ldr	r3, [r1, #8]
 80053d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053d8:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053da:	f04f 0880 	mov.w	r8, #128	; 0x80
 80053de:	e733      	b.n	8005248 <HAL_RCC_ClockConfig+0x78>
    return HAL_ERROR;
 80053e0:	2001      	movs	r0, #1
}
 80053e2:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053e4:	68d0      	ldr	r0, [r2, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053e6:	68d3      	ldr	r3, [r2, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053e8:	68d2      	ldr	r2, [r2, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053ea:	f000 0003 	and.w	r0, r0, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053ee:	f3c3 1303 	ubfx	r3, r3, #4, #4
    switch (pllsource)
 80053f2:	2803      	cmp	r0, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053f4:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053f8:	f103 0101 	add.w	r1, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80053fc:	bf0c      	ite	eq
 80053fe:	4b29      	ldreq	r3, [pc, #164]	; (80054a4 <HAL_RCC_ClockConfig+0x2d4>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005400:	4b29      	ldrne	r3, [pc, #164]	; (80054a8 <HAL_RCC_ClockConfig+0x2d8>)
 8005402:	fbb3 f3f1 	udiv	r3, r3, r1
 8005406:	fb03 f302 	mul.w	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800540a:	4a21      	ldr	r2, [pc, #132]	; (8005490 <HAL_RCC_ClockConfig+0x2c0>)
 800540c:	68d2      	ldr	r2, [r2, #12]
 800540e:	f3c2 6241 	ubfx	r2, r2, #25, #2
 8005412:	3201      	adds	r2, #1
 8005414:	0052      	lsls	r2, r2, #1
    sysclockfreq = pllvco/pllr;
 8005416:	fbb3 f3f2 	udiv	r3, r3, r2
 800541a:	e76e      	b.n	80052fa <HAL_RCC_ClockConfig+0x12a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800541c:	0399      	lsls	r1, r3, #14
 800541e:	f53f af00 	bmi.w	8005222 <HAL_RCC_ClockConfig+0x52>
 8005422:	e6ea      	b.n	80051fa <HAL_RCC_ClockConfig+0x2a>
    sysclockfreq = HSE_VALUE;
 8005424:	4b1f      	ldr	r3, [pc, #124]	; (80054a4 <HAL_RCC_ClockConfig+0x2d4>)
 8005426:	e768      	b.n	80052fa <HAL_RCC_ClockConfig+0x12a>
    if(hpre == RCC_SYSCLK_DIV2)
 8005428:	f1b8 0f00 	cmp.w	r8, #0
 800542c:	f43f af40 	beq.w	80052b0 <HAL_RCC_ClockConfig+0xe0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005430:	68b3      	ldr	r3, [r6, #8]
 8005432:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005436:	60b3      	str	r3, [r6, #8]
 8005438:	e73a      	b.n	80052b0 <HAL_RCC_ClockConfig+0xe0>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800543a:	68d8      	ldr	r0, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800543c:	68d9      	ldr	r1, [r3, #12]
      if(pllfreq > 80000000U)
 800543e:	4e18      	ldr	r6, [pc, #96]	; (80054a0 <HAL_RCC_ClockConfig+0x2d0>)
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005440:	f000 0003 	and.w	r0, r0, #3
    switch (pllsource)
 8005444:	2803      	cmp	r0, #3
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005446:	68d8      	ldr	r0, [r3, #12]
 8005448:	bf0c      	ite	eq
 800544a:	4b16      	ldreq	r3, [pc, #88]	; (80054a4 <HAL_RCC_ClockConfig+0x2d4>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800544c:	4b16      	ldrne	r3, [pc, #88]	; (80054a8 <HAL_RCC_ClockConfig+0x2d8>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800544e:	f3c1 1103 	ubfx	r1, r1, #4, #4
 8005452:	3101      	adds	r1, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005454:	fbb3 f3f1 	udiv	r3, r3, r1
 8005458:	f3c0 2106 	ubfx	r1, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800545c:	480c      	ldr	r0, [pc, #48]	; (8005490 <HAL_RCC_ClockConfig+0x2c0>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800545e:	fb03 f301 	mul.w	r3, r3, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005462:	68c1      	ldr	r1, [r0, #12]
 8005464:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8005468:	3101      	adds	r1, #1
 800546a:	0049      	lsls	r1, r1, #1
    sysclockfreq = pllvco/pllr;
 800546c:	fbb3 f3f1 	udiv	r3, r3, r1
      if(pllfreq > 80000000U)
 8005470:	42b3      	cmp	r3, r6
 8005472:	f67f aee7 	bls.w	8005244 <HAL_RCC_ClockConfig+0x74>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005476:	6883      	ldr	r3, [r0, #8]
 8005478:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800547c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005480:	6083      	str	r3, [r0, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005482:	f04f 0880 	mov.w	r8, #128	; 0x80
 8005486:	e6df      	b.n	8005248 <HAL_RCC_ClockConfig+0x78>
    sysclockfreq = HSI_VALUE;
 8005488:	4b07      	ldr	r3, [pc, #28]	; (80054a8 <HAL_RCC_ClockConfig+0x2d8>)
 800548a:	e736      	b.n	80052fa <HAL_RCC_ClockConfig+0x12a>
 800548c:	40022000 	.word	0x40022000
 8005490:	40021000 	.word	0x40021000
 8005494:	0800acd4 	.word	0x0800acd4
 8005498:	200003e0 	.word	0x200003e0
 800549c:	200003d8 	.word	0x200003d8
 80054a0:	04c4b400 	.word	0x04c4b400
 80054a4:	016e3600 	.word	0x016e3600
 80054a8:	00f42400 	.word	0x00f42400

080054ac <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80054ac:	4b18      	ldr	r3, [pc, #96]	; (8005510 <HAL_RCC_GetSysClockFreq+0x64>)
 80054ae:	689a      	ldr	r2, [r3, #8]
 80054b0:	f002 020c 	and.w	r2, r2, #12
 80054b4:	2a04      	cmp	r2, #4
 80054b6:	d027      	beq.n	8005508 <HAL_RCC_GetSysClockFreq+0x5c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80054b8:	689a      	ldr	r2, [r3, #8]
 80054ba:	f002 020c 	and.w	r2, r2, #12
 80054be:	2a08      	cmp	r2, #8
 80054c0:	d024      	beq.n	800550c <HAL_RCC_GetSysClockFreq+0x60>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	f002 020c 	and.w	r2, r2, #12
 80054c8:	2a0c      	cmp	r2, #12
 80054ca:	d001      	beq.n	80054d0 <HAL_RCC_GetSysClockFreq+0x24>
    sysclockfreq = 0U;
 80054cc:	2000      	movs	r0, #0
}
 80054ce:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054d0:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054d2:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054d4:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80054d6:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054da:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 80054de:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054e0:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80054e4:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054e8:	bf0c      	ite	eq
 80054ea:	480a      	ldreq	r0, [pc, #40]	; (8005514 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80054ec:	480a      	ldrne	r0, [pc, #40]	; (8005518 <HAL_RCC_GetSysClockFreq+0x6c>)
 80054ee:	fbb0 f0f2 	udiv	r0, r0, r2
 80054f2:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80054f6:	4b06      	ldr	r3, [pc, #24]	; (8005510 <HAL_RCC_GetSysClockFreq+0x64>)
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	f3c3 6341 	ubfx	r3, r3, #25, #2
 80054fe:	3301      	adds	r3, #1
 8005500:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005502:	fbb0 f0f3 	udiv	r0, r0, r3
 8005506:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005508:	4803      	ldr	r0, [pc, #12]	; (8005518 <HAL_RCC_GetSysClockFreq+0x6c>)
 800550a:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800550c:	4801      	ldr	r0, [pc, #4]	; (8005514 <HAL_RCC_GetSysClockFreq+0x68>)
 800550e:	4770      	bx	lr
 8005510:	40021000 	.word	0x40021000
 8005514:	016e3600 	.word	0x016e3600
 8005518:	00f42400 	.word	0x00f42400

0800551c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 800551c:	4b01      	ldr	r3, [pc, #4]	; (8005524 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	200003d8 	.word	0x200003d8

08005528 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005528:	4b05      	ldr	r3, [pc, #20]	; (8005540 <HAL_RCC_GetPCLK1Freq+0x18>)
 800552a:	4a06      	ldr	r2, [pc, #24]	; (8005544 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800552c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800552e:	4906      	ldr	r1, [pc, #24]	; (8005548 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005530:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005534:	6808      	ldr	r0, [r1, #0]
 8005536:	5cd3      	ldrb	r3, [r2, r3]
 8005538:	f003 031f 	and.w	r3, r3, #31
}
 800553c:	40d8      	lsrs	r0, r3
 800553e:	4770      	bx	lr
 8005540:	40021000 	.word	0x40021000
 8005544:	0800ace4 	.word	0x0800ace4
 8005548:	200003d8 	.word	0x200003d8

0800554c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800554c:	4b05      	ldr	r3, [pc, #20]	; (8005564 <HAL_RCC_GetPCLK2Freq+0x18>)
 800554e:	4a06      	ldr	r2, [pc, #24]	; (8005568 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005550:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8005552:	4906      	ldr	r1, [pc, #24]	; (800556c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005554:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005558:	6808      	ldr	r0, [r1, #0]
 800555a:	5cd3      	ldrb	r3, [r2, r3]
 800555c:	f003 031f 	and.w	r3, r3, #31
}
 8005560:	40d8      	lsrs	r0, r3
 8005562:	4770      	bx	lr
 8005564:	40021000 	.word	0x40021000
 8005568:	0800ace4 	.word	0x0800ace4
 800556c:	200003d8 	.word	0x200003d8

08005570 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8005570:	4a02      	ldr	r2, [pc, #8]	; (800557c <HAL_RCC_EnableCSS+0xc>)
 8005572:	6813      	ldr	r3, [r2, #0]
 8005574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005578:	6013      	str	r3, [r2, #0]
}
 800557a:	4770      	bx	lr
 800557c:	40021000 	.word	0x40021000

08005580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005580:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005584:	6803      	ldr	r3, [r0, #0]
{
 8005586:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005588:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 800558c:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800558e:	d057      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005590:	4bb8      	ldr	r3, [pc, #736]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005592:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005594:	00d0      	lsls	r0, r2, #3
 8005596:	f140 813f 	bpl.w	8005818 <HAL_RCCEx_PeriphCLKConfig+0x298>
    FlagStatus       pwrclkchanged = RESET;
 800559a:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800559c:	4db6      	ldr	r5, [pc, #728]	; (8005878 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 800559e:	682b      	ldr	r3, [r5, #0]
 80055a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a4:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055a6:	f7fe fa73 	bl	8003a90 <HAL_GetTick>
 80055aa:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055ac:	e005      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ae:	f7fe fa6f 	bl	8003a90 <HAL_GetTick>
 80055b2:	1b80      	subs	r0, r0, r6
 80055b4:	2802      	cmp	r0, #2
 80055b6:	f200 8141 	bhi.w	800583c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055ba:	682b      	ldr	r3, [r5, #0]
 80055bc:	05d9      	lsls	r1, r3, #23
 80055be:	d5f6      	bpl.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80055c0:	4bac      	ldr	r3, [pc, #688]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055c2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80055c4:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80055c8:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 80055cc:	d028      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80055ce:	428a      	cmp	r2, r1
 80055d0:	d026      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055d2:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80055d6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80055da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80055de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80055e2:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80055e6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80055ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80055ee:	f420 7540 	bic.w	r5, r0, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055f2:	07c2      	lsls	r2, r0, #31
        RCC->BDCR = tmpregister;
 80055f4:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80055f8:	d512      	bpl.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055fa:	461d      	mov	r5, r3
        tickstart = HAL_GetTick();
 80055fc:	f7fe fa48 	bl	8003a90 <HAL_GetTick>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005600:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005604:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005606:	e006      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x96>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005608:	f7fe fa42 	bl	8003a90 <HAL_GetTick>
 800560c:	eba0 0008 	sub.w	r0, r0, r8
 8005610:	42b0      	cmp	r0, r6
 8005612:	f200 8113 	bhi.w	800583c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005616:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800561a:	079b      	lsls	r3, r3, #30
 800561c:	d5f4      	bpl.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800561e:	6d21      	ldr	r1, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005620:	4a94      	ldr	r2, [pc, #592]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005622:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005626:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800562a:	430b      	orrs	r3, r1
 800562c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005630:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005632:	b127      	cbz	r7, 800563e <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005634:	4a8f      	ldr	r2, [pc, #572]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005636:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005638:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800563c:	6593      	str	r3, [r2, #88]	; 0x58
 800563e:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005640:	07dd      	lsls	r5, r3, #31
 8005642:	d508      	bpl.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005644:	498b      	ldr	r1, [pc, #556]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005646:	6865      	ldr	r5, [r4, #4]
 8005648:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800564c:	f022 0203 	bic.w	r2, r2, #3
 8005650:	432a      	orrs	r2, r5
 8005652:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005656:	0799      	lsls	r1, r3, #30
 8005658:	d508      	bpl.n	800566c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800565a:	4986      	ldr	r1, [pc, #536]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800565c:	68a5      	ldr	r5, [r4, #8]
 800565e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005662:	f022 020c 	bic.w	r2, r2, #12
 8005666:	432a      	orrs	r2, r5
 8005668:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800566c:	075a      	lsls	r2, r3, #29
 800566e:	d508      	bpl.n	8005682 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005670:	4980      	ldr	r1, [pc, #512]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005672:	68e5      	ldr	r5, [r4, #12]
 8005674:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005678:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800567c:	432a      	orrs	r2, r5
 800567e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005682:	071f      	lsls	r7, r3, #28
 8005684:	d508      	bpl.n	8005698 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005686:	497b      	ldr	r1, [pc, #492]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005688:	6925      	ldr	r5, [r4, #16]
 800568a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800568e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005692:	432a      	orrs	r2, r5
 8005694:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005698:	06de      	lsls	r6, r3, #27
 800569a:	d508      	bpl.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800569c:	4975      	ldr	r1, [pc, #468]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800569e:	6965      	ldr	r5, [r4, #20]
 80056a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80056a4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80056a8:	432a      	orrs	r2, r5
 80056aa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80056ae:	069d      	lsls	r5, r3, #26
 80056b0:	d508      	bpl.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80056b2:	4970      	ldr	r1, [pc, #448]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056b4:	69a5      	ldr	r5, [r4, #24]
 80056b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80056ba:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80056be:	432a      	orrs	r2, r5
 80056c0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80056c4:	0659      	lsls	r1, r3, #25
 80056c6:	d508      	bpl.n	80056da <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80056c8:	496a      	ldr	r1, [pc, #424]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056ca:	69e5      	ldr	r5, [r4, #28]
 80056cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80056d0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80056d4:	432a      	orrs	r2, r5
 80056d6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80056da:	061a      	lsls	r2, r3, #24
 80056dc:	d508      	bpl.n	80056f0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80056de:	4965      	ldr	r1, [pc, #404]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056e0:	6a25      	ldr	r5, [r4, #32]
 80056e2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80056e6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80056ea:	432a      	orrs	r2, r5
 80056ec:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056f0:	05df      	lsls	r7, r3, #23
 80056f2:	d508      	bpl.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056f4:	495f      	ldr	r1, [pc, #380]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80056f6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80056f8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80056fc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005700:	432a      	orrs	r2, r5
 8005702:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005706:	039e      	lsls	r6, r3, #14
 8005708:	d508      	bpl.n	800571c <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800570a:	495a      	ldr	r1, [pc, #360]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800570c:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800570e:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 8005712:	f022 0203 	bic.w	r2, r2, #3
 8005716:	432a      	orrs	r2, r5
 8005718:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800571c:	059d      	lsls	r5, r3, #22
 800571e:	d508      	bpl.n	8005732 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005720:	4954      	ldr	r1, [pc, #336]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005722:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005724:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005728:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 800572c:	432a      	orrs	r2, r5
 800572e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005732:	0559      	lsls	r1, r3, #21
 8005734:	d50b      	bpl.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005736:	494f      	ldr	r1, [pc, #316]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005738:	6b25      	ldr	r5, [r4, #48]	; 0x30
 800573a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800573e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8005742:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005744:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005748:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800574c:	d078      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x2c0>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800574e:	051a      	lsls	r2, r3, #20
 8005750:	d50b      	bpl.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005752:	4948      	ldr	r1, [pc, #288]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005754:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005756:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800575a:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800575e:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005760:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005764:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005768:	d06f      	beq.n	800584a <HAL_RCCEx_PeriphCLKConfig+0x2ca>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800576a:	04df      	lsls	r7, r3, #19
 800576c:	d50b      	bpl.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800576e:	4941      	ldr	r1, [pc, #260]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005770:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8005772:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005776:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800577a:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800577c:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005780:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005784:	d066      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005786:	049e      	lsls	r6, r3, #18
 8005788:	d50b      	bpl.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800578a:	493a      	ldr	r1, [pc, #232]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800578c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800578e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005792:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8005796:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005798:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800579c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80057a0:	d05d      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80057a2:	045d      	lsls	r5, r3, #17
 80057a4:	d50b      	bpl.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057a6:	4933      	ldr	r1, [pc, #204]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057a8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80057aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80057ae:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80057b2:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057b4:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80057b8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80057bc:	d054      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80057be:	0419      	lsls	r1, r3, #16
 80057c0:	d50b      	bpl.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057c2:	492c      	ldr	r1, [pc, #176]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057c4:	6c65      	ldr	r5, [r4, #68]	; 0x44
 80057c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80057ca:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80057ce:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057d0:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80057d4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80057d8:	d050      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80057da:	03da      	lsls	r2, r3, #15
 80057dc:	d50b      	bpl.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80057de:	4925      	ldr	r1, [pc, #148]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057e0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80057e2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80057e6:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 80057ea:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80057ec:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80057f0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80057f4:	d047      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x306>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80057f6:	035b      	lsls	r3, r3, #13
 80057f8:	d50b      	bpl.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80057fa:	4a1e      	ldr	r2, [pc, #120]	; (8005874 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80057fc:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80057fe:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 8005802:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005806:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005808:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800580c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005810:	d00d      	beq.n	800582e <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  }

#endif /* QUADSPI */

  return status;
}
 8005812:	b002      	add	sp, #8
 8005814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005818:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800581a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800581e:	659a      	str	r2, [r3, #88]	; 0x58
 8005820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005826:	9301      	str	r3, [sp, #4]
 8005828:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800582a:	2701      	movs	r7, #1
 800582c:	e6b6      	b.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800582e:	68d3      	ldr	r3, [r2, #12]
 8005830:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005834:	60d3      	str	r3, [r2, #12]
}
 8005836:	b002      	add	sp, #8
 8005838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = HAL_TIMEOUT;
 800583c:	2003      	movs	r0, #3
 800583e:	e6f8      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005840:	68ca      	ldr	r2, [r1, #12]
 8005842:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005846:	60ca      	str	r2, [r1, #12]
 8005848:	e781      	b.n	800574e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800584a:	68ca      	ldr	r2, [r1, #12]
 800584c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005850:	60ca      	str	r2, [r1, #12]
 8005852:	e78a      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005854:	68ca      	ldr	r2, [r1, #12]
 8005856:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800585a:	60ca      	str	r2, [r1, #12]
 800585c:	e793      	b.n	8005786 <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800585e:	68ca      	ldr	r2, [r1, #12]
 8005860:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005864:	60ca      	str	r2, [r1, #12]
 8005866:	e79c      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005868:	68ca      	ldr	r2, [r1, #12]
 800586a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800586e:	60ca      	str	r2, [r1, #12]
 8005870:	e7a5      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x23e>
 8005872:	bf00      	nop
 8005874:	40021000 	.word	0x40021000
 8005878:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800587c:	68ca      	ldr	r2, [r1, #12]
 800587e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005882:	60ca      	str	r2, [r1, #12]
 8005884:	e7a9      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x25a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005886:	68ca      	ldr	r2, [r1, #12]
 8005888:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800588c:	60ca      	str	r2, [r1, #12]
 800588e:	e7b2      	b.n	80057f6 <HAL_RCCEx_PeriphCLKConfig+0x276>

08005890 <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005890:	2800      	cmp	r0, #0
 8005892:	f000 809c 	beq.w	80059ce <HAL_TIM_PWM_Init+0x13e>
{
 8005896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005898:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800589c:	4604      	mov	r4, r0
 800589e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d039      	beq.n	800591a <HAL_TIM_PWM_Init+0x8a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058a6:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058a8:	4e55      	ldr	r6, [pc, #340]	; (8005a00 <HAL_TIM_PWM_Init+0x170>)
 80058aa:	69a5      	ldr	r5, [r4, #24]
 80058ac:	68e0      	ldr	r0, [r4, #12]
 80058ae:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80058b0:	2202      	movs	r2, #2
 80058b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058b6:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 80058b8:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058ba:	f000 808a 	beq.w	80059d2 <HAL_TIM_PWM_Init+0x142>
 80058be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058c2:	d066      	beq.n	8005992 <HAL_TIM_PWM_Init+0x102>
 80058c4:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 80058c8:	42b3      	cmp	r3, r6
 80058ca:	d02b      	beq.n	8005924 <HAL_TIM_PWM_Init+0x94>
 80058cc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80058d0:	42b3      	cmp	r3, r6
 80058d2:	d027      	beq.n	8005924 <HAL_TIM_PWM_Init+0x94>
 80058d4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80058d8:	42b3      	cmp	r3, r6
 80058da:	d023      	beq.n	8005924 <HAL_TIM_PWM_Init+0x94>
 80058dc:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 80058e0:	42b3      	cmp	r3, r6
 80058e2:	d01f      	beq.n	8005924 <HAL_TIM_PWM_Init+0x94>
 80058e4:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 80058e8:	42b3      	cmp	r3, r6
 80058ea:	f000 8083 	beq.w	80059f4 <HAL_TIM_PWM_Init+0x164>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058ee:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 80058f2:	42b3      	cmp	r3, r6
 80058f4:	d07c      	beq.n	80059f0 <HAL_TIM_PWM_Init+0x160>
 80058f6:	4e43      	ldr	r6, [pc, #268]	; (8005a04 <HAL_TIM_PWM_Init+0x174>)
 80058f8:	42b3      	cmp	r3, r6
 80058fa:	d079      	beq.n	80059f0 <HAL_TIM_PWM_Init+0x160>
 80058fc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005900:	42b3      	cmp	r3, r6
 8005902:	d075      	beq.n	80059f0 <HAL_TIM_PWM_Init+0x160>
 8005904:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005908:	42b3      	cmp	r3, r6
 800590a:	d071      	beq.n	80059f0 <HAL_TIM_PWM_Init+0x160>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800590c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005910:	432a      	orrs	r2, r5

  TIMx->CR1 = tmpcr1;
 8005912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005914:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005916:	6299      	str	r1, [r3, #40]	; 0x28
 8005918:	e017      	b.n	800594a <HAL_TIM_PWM_Init+0xba>
    htim->Lock = HAL_UNLOCKED;
 800591a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800591e:	f7fd feff 	bl	8003720 <HAL_TIM_PWM_MspInit>
 8005922:	e7c0      	b.n	80058a6 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 8005924:	68a6      	ldr	r6, [r4, #8]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005926:	4f38      	ldr	r7, [pc, #224]	; (8005a08 <HAL_TIM_PWM_Init+0x178>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005928:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800592c:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800592e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005930:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005934:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005936:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800593a:	432a      	orrs	r2, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800593c:	42bb      	cmp	r3, r7
  TIMx->CR1 = tmpcr1;
 800593e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005940:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005942:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005944:	d133      	bne.n	80059ae <HAL_TIM_PWM_Init+0x11e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005946:	6962      	ldr	r2, [r4, #20]
 8005948:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800594a:	2201      	movs	r2, #1
 800594c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800594e:	691a      	ldr	r2, [r3, #16]
 8005950:	07d2      	lsls	r2, r2, #31
 8005952:	d503      	bpl.n	800595c <HAL_TIM_PWM_Init+0xcc>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005954:	691a      	ldr	r2, [r3, #16]
 8005956:	f022 0201 	bic.w	r2, r2, #1
 800595a:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800595c:	2301      	movs	r3, #1
 800595e:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 8005962:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005964:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8005968:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 800596c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005970:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8005974:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800597c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005980:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005984:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8005988:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 800598c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8005992:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005994:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005996:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800599a:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800599c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059a0:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059a6:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80059a8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059aa:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80059ac:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059ae:	4a17      	ldr	r2, [pc, #92]	; (8005a0c <HAL_TIM_PWM_Init+0x17c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d0c8      	beq.n	8005946 <HAL_TIM_PWM_Init+0xb6>
 80059b4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d0c4      	beq.n	8005946 <HAL_TIM_PWM_Init+0xb6>
 80059bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059c0:	4293      	cmp	r3, r2
 80059c2:	d0c0      	beq.n	8005946 <HAL_TIM_PWM_Init+0xb6>
 80059c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d1be      	bne.n	800594a <HAL_TIM_PWM_Init+0xba>
 80059cc:	e7bb      	b.n	8005946 <HAL_TIM_PWM_Init+0xb6>
    return HAL_ERROR;
 80059ce:	2001      	movs	r0, #1
}
 80059d0:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80059d2:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059d4:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059d6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80059da:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80059dc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059e0:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059e6:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80059e8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059ea:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80059ec:	6299      	str	r1, [r3, #40]	; 0x28
 80059ee:	e7aa      	b.n	8005946 <HAL_TIM_PWM_Init+0xb6>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059f0:	6926      	ldr	r6, [r4, #16]
 80059f2:	e7f3      	b.n	80059dc <HAL_TIM_PWM_Init+0x14c>
    tmpcr1 |= Structure->CounterMode;
 80059f4:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80059fa:	4332      	orrs	r2, r6
 80059fc:	e77b      	b.n	80058f6 <HAL_TIM_PWM_Init+0x66>
 80059fe:	bf00      	nop
 8005a00:	40012c00 	.word	0x40012c00
 8005a04:	40014400 	.word	0x40014400
 8005a08:	40013400 	.word	0x40013400
 8005a0c:	40014000 	.word	0x40014000

08005a10 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8005a10:	2800      	cmp	r0, #0
 8005a12:	f000 80ca 	beq.w	8005baa <HAL_TIM_Encoder_Init+0x19a>
{
 8005a16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005a18:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005a1c:	4604      	mov	r4, r0
 8005a1e:	460d      	mov	r5, r1
 8005a20:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d046      	beq.n	8005ab6 <HAL_TIM_Encoder_Init+0xa6>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a28:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a2a:	4e6c      	ldr	r6, [pc, #432]	; (8005bdc <HAL_TIM_Encoder_Init+0x1cc>)
 8005a2c:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8005a30:	68e0      	ldr	r0, [r4, #12]
 8005a32:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8005a34:	2202      	movs	r2, #2
 8005a36:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005a3a:	689a      	ldr	r2, [r3, #8]
 8005a3c:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 8005a40:	f022 0207 	bic.w	r2, r2, #7
 8005a44:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a46:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8005a48:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a4a:	f000 80b0 	beq.w	8005bae <HAL_TIM_Encoder_Init+0x19e>
 8005a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a52:	f000 808b 	beq.w	8005b6c <HAL_TIM_Encoder_Init+0x15c>
 8005a56:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8005a5a:	42b3      	cmp	r3, r6
 8005a5c:	d030      	beq.n	8005ac0 <HAL_TIM_Encoder_Init+0xb0>
 8005a5e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005a62:	42b3      	cmp	r3, r6
 8005a64:	d02c      	beq.n	8005ac0 <HAL_TIM_Encoder_Init+0xb0>
 8005a66:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005a6a:	42b3      	cmp	r3, r6
 8005a6c:	d028      	beq.n	8005ac0 <HAL_TIM_Encoder_Init+0xb0>
 8005a6e:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 8005a72:	42b3      	cmp	r3, r6
 8005a74:	d024      	beq.n	8005ac0 <HAL_TIM_Encoder_Init+0xb0>
 8005a76:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8005a7a:	42b3      	cmp	r3, r6
 8005a7c:	f000 80a9 	beq.w	8005bd2 <HAL_TIM_Encoder_Init+0x1c2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a80:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8005a84:	42b3      	cmp	r3, r6
 8005a86:	f000 80a2 	beq.w	8005bce <HAL_TIM_Encoder_Init+0x1be>
 8005a8a:	4e55      	ldr	r6, [pc, #340]	; (8005be0 <HAL_TIM_Encoder_Init+0x1d0>)
 8005a8c:	42b3      	cmp	r3, r6
 8005a8e:	f000 809e 	beq.w	8005bce <HAL_TIM_Encoder_Init+0x1be>
 8005a92:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005a96:	42b3      	cmp	r3, r6
 8005a98:	f000 8099 	beq.w	8005bce <HAL_TIM_Encoder_Init+0x1be>
 8005a9c:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005aa0:	42b3      	cmp	r3, r6
 8005aa2:	f000 8094 	beq.w	8005bce <HAL_TIM_Encoder_Init+0x1be>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005aa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aaa:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 8005aae:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ab0:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005ab2:	6299      	str	r1, [r3, #40]	; 0x28
 8005ab4:	e018      	b.n	8005ae8 <HAL_TIM_Encoder_Init+0xd8>
    htim->Lock = HAL_UNLOCKED;
 8005ab6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8005aba:	f7fd fe67 	bl	800378c <HAL_TIM_Encoder_MspInit>
 8005abe:	e7b3      	b.n	8005a28 <HAL_TIM_Encoder_Init+0x18>
    tmpcr1 |= Structure->CounterMode;
 8005ac0:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ac2:	4f48      	ldr	r7, [pc, #288]	; (8005be4 <HAL_TIM_Encoder_Init+0x1d4>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ac4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005ac8:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aca:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005acc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ad0:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ad2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ad6:	ea42 020c 	orr.w	r2, r2, ip
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ada:	42bb      	cmp	r3, r7
  TIMx->CR1 = tmpcr1;
 8005adc:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ade:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005ae0:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ae2:	d152      	bne.n	8005b8a <HAL_TIM_Encoder_Init+0x17a>
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae4:	6962      	ldr	r2, [r4, #20]
 8005ae6:	631a      	str	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005ae8:	2201      	movs	r2, #1
 8005aea:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005aec:	691a      	ldr	r2, [r3, #16]
 8005aee:	07d2      	lsls	r2, r2, #31
 8005af0:	d503      	bpl.n	8005afa <HAL_TIM_Encoder_Init+0xea>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005af2:	691a      	ldr	r2, [r3, #16]
 8005af4:	f022 0201 	bic.w	r2, r2, #1
 8005af8:	611a      	str	r2, [r3, #16]
  tmpsmcr = htim->Instance->SMCR;
 8005afa:	689e      	ldr	r6, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8005afc:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005afe:	68a8      	ldr	r0, [r5, #8]
 8005b00:	69a9      	ldr	r1, [r5, #24]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b02:	692a      	ldr	r2, [r5, #16]
  tmpsmcr |= sConfig->EncoderMode;
 8005b04:	f8d5 c000 	ldr.w	ip, [r5]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b08:	f8d5 e020 	ldr.w	lr, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005b0c:	f427 7740 	bic.w	r7, r7, #768	; 0x300
 8005b10:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b14:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b18:	69e8      	ldr	r0, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005b1a:	4339      	orrs	r1, r7
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b1c:	0112      	lsls	r2, r2, #4
 8005b1e:	68ef      	ldr	r7, [r5, #12]
 8005b20:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005b24:	433a      	orrs	r2, r7
  tmpccer = htim->Instance->CCER;
 8005b26:	6a18      	ldr	r0, [r3, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b28:	696f      	ldr	r7, [r5, #20]
 8005b2a:	686d      	ldr	r5, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005b2c:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
 8005b30:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b34:	ea42 320e 	orr.w	r2, r2, lr, lsl #12
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005b38:	f020 00aa 	bic.w	r0, r0, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b3c:	ea45 1507 	orr.w	r5, r5, r7, lsl #4
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005b40:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005b42:	4305      	orrs	r5, r0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b44:	2101      	movs	r1, #1
  tmpsmcr |= sConfig->EncoderMode;
 8005b46:	ea46 060c 	orr.w	r6, r6, ip
  htim->Instance->SMCR = tmpsmcr;
 8005b4a:	609e      	str	r6, [r3, #8]
  return HAL_OK;
 8005b4c:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 8005b4e:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8005b50:	621d      	str	r5, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b52:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b56:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b5a:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005b5e:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005b62:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005b66:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 8005b6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8005b6c:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b6e:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b70:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005b74:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b76:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b7a:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b80:	ea4c 0202 	orr.w	r2, ip, r2
  TIMx->CR1 = tmpcr1;
 8005b84:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b86:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005b88:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b8a:	4a17      	ldr	r2, [pc, #92]	; (8005be8 <HAL_TIM_Encoder_Init+0x1d8>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d0a9      	beq.n	8005ae4 <HAL_TIM_Encoder_Init+0xd4>
 8005b90:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d0a5      	beq.n	8005ae4 <HAL_TIM_Encoder_Init+0xd4>
 8005b98:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d0a1      	beq.n	8005ae4 <HAL_TIM_Encoder_Init+0xd4>
 8005ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d19f      	bne.n	8005ae8 <HAL_TIM_Encoder_Init+0xd8>
 8005ba8:	e79c      	b.n	8005ae4 <HAL_TIM_Encoder_Init+0xd4>
    return HAL_ERROR;
 8005baa:	2001      	movs	r0, #1
}
 8005bac:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8005bae:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bb0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bb2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005bb6:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bb8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bbc:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bc2:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 8005bc6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bc8:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005bca:	6299      	str	r1, [r3, #40]	; 0x28
 8005bcc:	e78a      	b.n	8005ae4 <HAL_TIM_Encoder_Init+0xd4>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bce:	6926      	ldr	r6, [r4, #16]
 8005bd0:	e7f2      	b.n	8005bb8 <HAL_TIM_Encoder_Init+0x1a8>
    tmpcr1 |= Structure->CounterMode;
 8005bd2:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005bd4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005bd8:	4332      	orrs	r2, r6
 8005bda:	e756      	b.n	8005a8a <HAL_TIM_Encoder_Init+0x7a>
 8005bdc:	40012c00 	.word	0x40012c00
 8005be0:	40014400 	.word	0x40014400
 8005be4:	40013400 	.word	0x40013400
 8005be8:	40014000 	.word	0x40014000

08005bec <HAL_TIM_PWM_ConfigChannel>:
{
 8005bec:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005bee:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8005bf2:	2801      	cmp	r0, #1
 8005bf4:	f000 81a9 	beq.w	8005f4a <HAL_TIM_PWM_ConfigChannel+0x35e>
 8005bf8:	2001      	movs	r0, #1
{
 8005bfa:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8005bfc:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (Channel)
 8005c00:	2a14      	cmp	r2, #20
 8005c02:	f200 819c 	bhi.w	8005f3e <HAL_TIM_PWM_ConfigChannel+0x352>
 8005c06:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005c0a:	005e      	.short	0x005e
 8005c0c:	019a019a 	.word	0x019a019a
 8005c10:	00ad019a 	.word	0x00ad019a
 8005c14:	019a019a 	.word	0x019a019a
 8005c18:	011b019a 	.word	0x011b019a
 8005c1c:	019a019a 	.word	0x019a019a
 8005c20:	00e4019a 	.word	0x00e4019a
 8005c24:	019a019a 	.word	0x019a019a
 8005c28:	0152019a 	.word	0x0152019a
 8005c2c:	019a019a 	.word	0x019a019a
 8005c30:	0015019a 	.word	0x0015019a
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005c34:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c36:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer = TIMx->CCER;
 8005c3a:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c3c:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c3e:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c40:	4ec3      	ldr	r6, [pc, #780]	; (8005f50 <HAL_TIM_PWM_ConfigChannel+0x364>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c42:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 8005c46:	6215      	str	r5, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005c48:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8005c4a:	6d10      	ldr	r0, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c4c:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c50:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c54:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c58:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c5a:	ea44 540c 	orr.w	r4, r4, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c5e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c62:	d013      	beq.n	8005c8c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8005c64:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005c68:	42b2      	cmp	r2, r6
 8005c6a:	d00f      	beq.n	8005c8c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8005c6c:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005c70:	42b2      	cmp	r2, r6
 8005c72:	d00b      	beq.n	8005c8c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8005c74:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005c78:	42b2      	cmp	r2, r6
 8005c7a:	d007      	beq.n	8005c8c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8005c7c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005c80:	42b2      	cmp	r2, r6
 8005c82:	d003      	beq.n	8005c8c <HAL_TIM_PWM_ConfigChannel+0xa0>
 8005c84:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005c88:	42b2      	cmp	r2, r6
 8005c8a:	d104      	bne.n	8005c96 <HAL_TIM_PWM_ConfigChannel+0xaa>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c8c:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c8e:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c92:	ea45 2586 	orr.w	r5, r5, r6, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c96:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005c98:	6055      	str	r5, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005c9a:	6510      	str	r0, [r2, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8005c9c:	64d6      	str	r6, [r2, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9e:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ca0:	6d10      	ldr	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ca2:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ca4:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8005ca8:	6510      	str	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005caa:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8005cac:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8005cb0:	6510      	str	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005cb2:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8005cb4:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8005cb8:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8005cba:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005cbc:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8005cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005cc2:	bcf0      	pop	{r4, r5, r6, r7}
 8005cc4:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005cc6:	681a      	ldr	r2, [r3, #0]
  tmpccer |= OC_Config->OCPolarity;
 8005cc8:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer = TIMx->CCER;
 8005ccc:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cce:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005cd0:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cd2:	4e9f      	ldr	r6, [pc, #636]	; (8005f50 <HAL_TIM_PWM_ConfigChannel+0x364>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cd4:	f025 0501 	bic.w	r5, r5, #1
 8005cd8:	6215      	str	r5, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005cda:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8005cdc:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005cde:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8005ce2:	f020 0002 	bic.w	r0, r0, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005ce6:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cea:	42b2      	cmp	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 8005cec:	ea40 000c 	orr.w	r0, r0, ip
  tmpccmrx |= OC_Config->OCMode;
 8005cf0:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005cf4:	d013      	beq.n	8005d1e <HAL_TIM_PWM_ConfigChannel+0x132>
 8005cf6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005cfa:	42b2      	cmp	r2, r6
 8005cfc:	d00f      	beq.n	8005d1e <HAL_TIM_PWM_ConfigChannel+0x132>
 8005cfe:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005d02:	42b2      	cmp	r2, r6
 8005d04:	d00b      	beq.n	8005d1e <HAL_TIM_PWM_ConfigChannel+0x132>
 8005d06:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005d0a:	42b2      	cmp	r2, r6
 8005d0c:	d007      	beq.n	8005d1e <HAL_TIM_PWM_ConfigChannel+0x132>
 8005d0e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005d12:	42b2      	cmp	r2, r6
 8005d14:	d003      	beq.n	8005d1e <HAL_TIM_PWM_ConfigChannel+0x132>
 8005d16:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005d1a:	42b2      	cmp	r2, r6
 8005d1c:	d10b      	bne.n	8005d36 <HAL_TIM_PWM_ConfigChannel+0x14a>
    tmpccer |= OC_Config->OCNPolarity;
 8005d1e:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005d20:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005d24:	4330      	orrs	r0, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d26:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005d2a:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d2e:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8005d30:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005d34:	4335      	orrs	r5, r6
  TIMx->CCR1 = OC_Config->Pulse;
 8005d36:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005d38:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005d3a:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005d3c:	6356      	str	r6, [r2, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8005d3e:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d40:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d42:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d44:	f040 0008 	orr.w	r0, r0, #8
 8005d48:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d4a:	6990      	ldr	r0, [r2, #24]
 8005d4c:	f020 0004 	bic.w	r0, r0, #4
 8005d50:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d52:	6991      	ldr	r1, [r2, #24]
 8005d54:	4321      	orrs	r1, r4
 8005d56:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8005d58:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005d5a:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8005d5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005d60:	bcf0      	pop	{r4, r5, r6, r7}
 8005d62:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d64:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d66:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer = TIMx->CCER;
 8005d6a:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d6c:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d6e:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d70:	4e77      	ldr	r6, [pc, #476]	; (8005f50 <HAL_TIM_PWM_ConfigChannel+0x364>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d72:	f025 0510 	bic.w	r5, r5, #16
 8005d76:	6215      	str	r5, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005d78:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8005d7a:	6990      	ldr	r0, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d7c:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8005d80:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d84:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d88:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d8a:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d8e:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d92:	f000 8107 	beq.w	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x3b8>
 8005d96:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005d9a:	42b2      	cmp	r2, r6
 8005d9c:	f000 8102 	beq.w	8005fa4 <HAL_TIM_PWM_ConfigChannel+0x3b8>
 8005da0:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8005da4:	42b2      	cmp	r2, r6
 8005da6:	f000 8148 	beq.w	800603a <HAL_TIM_PWM_ConfigChannel+0x44e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005daa:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8005dae:	42b2      	cmp	r2, r6
 8005db0:	f000 80ff 	beq.w	8005fb2 <HAL_TIM_PWM_ConfigChannel+0x3c6>
 8005db4:	4e67      	ldr	r6, [pc, #412]	; (8005f54 <HAL_TIM_PWM_ConfigChannel+0x368>)
 8005db6:	42b2      	cmp	r2, r6
 8005db8:	f000 80fb 	beq.w	8005fb2 <HAL_TIM_PWM_ConfigChannel+0x3c6>
 8005dbc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005dc0:	42b2      	cmp	r2, r6
 8005dc2:	f000 80f6 	beq.w	8005fb2 <HAL_TIM_PWM_ConfigChannel+0x3c6>
 8005dc6:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005dca:	42b2      	cmp	r2, r6
 8005dcc:	f040 80f8 	bne.w	8005fc0 <HAL_TIM_PWM_ConfigChannel+0x3d4>
 8005dd0:	e0ef      	b.n	8005fb2 <HAL_TIM_PWM_ConfigChannel+0x3c6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dd2:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005dd4:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer = TIMx->CCER;
 8005dd8:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dda:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ddc:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005dde:	4e5c      	ldr	r6, [pc, #368]	; (8005f50 <HAL_TIM_PWM_ConfigChannel+0x364>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005de0:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8005de4:	6215      	str	r5, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005de6:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8005de8:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005dea:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8005dee:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005df2:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005df6:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005df8:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005dfc:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005e00:	f000 80aa 	beq.w	8005f58 <HAL_TIM_PWM_ConfigChannel+0x36c>
 8005e04:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005e08:	42b2      	cmp	r2, r6
 8005e0a:	f000 80a5 	beq.w	8005f58 <HAL_TIM_PWM_ConfigChannel+0x36c>
 8005e0e:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8005e12:	42b2      	cmp	r2, r6
 8005e14:	f000 8121 	beq.w	800605a <HAL_TIM_PWM_ConfigChannel+0x46e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e18:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8005e1c:	42b2      	cmp	r2, r6
 8005e1e:	f000 80a2 	beq.w	8005f66 <HAL_TIM_PWM_ConfigChannel+0x37a>
 8005e22:	4e4c      	ldr	r6, [pc, #304]	; (8005f54 <HAL_TIM_PWM_ConfigChannel+0x368>)
 8005e24:	42b2      	cmp	r2, r6
 8005e26:	f000 809e 	beq.w	8005f66 <HAL_TIM_PWM_ConfigChannel+0x37a>
 8005e2a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005e2e:	42b2      	cmp	r2, r6
 8005e30:	f000 8099 	beq.w	8005f66 <HAL_TIM_PWM_ConfigChannel+0x37a>
 8005e34:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005e38:	42b2      	cmp	r2, r6
 8005e3a:	f040 809b 	bne.w	8005f74 <HAL_TIM_PWM_ConfigChannel+0x388>
 8005e3e:	e092      	b.n	8005f66 <HAL_TIM_PWM_ConfigChannel+0x37a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e40:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e42:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer = TIMx->CCER;
 8005e46:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e48:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005e4a:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e4c:	4e40      	ldr	r6, [pc, #256]	; (8005f50 <HAL_TIM_PWM_ConfigChannel+0x364>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e4e:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8005e52:	6215      	str	r5, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005e54:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8005e56:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e58:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8005e5c:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e60:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e64:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e66:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8005e6a:	ea40 0007 	orr.w	r0, r0, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e6e:	f000 80bf 	beq.w	8005ff0 <HAL_TIM_PWM_ConfigChannel+0x404>
 8005e72:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005e76:	42b2      	cmp	r2, r6
 8005e78:	f000 80ba 	beq.w	8005ff0 <HAL_TIM_PWM_ConfigChannel+0x404>
 8005e7c:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8005e80:	42b2      	cmp	r2, r6
 8005e82:	f000 80e2 	beq.w	800604a <HAL_TIM_PWM_ConfigChannel+0x45e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e86:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8005e8a:	42b2      	cmp	r2, r6
 8005e8c:	f000 80b7 	beq.w	8005ffe <HAL_TIM_PWM_ConfigChannel+0x412>
 8005e90:	4e30      	ldr	r6, [pc, #192]	; (8005f54 <HAL_TIM_PWM_ConfigChannel+0x368>)
 8005e92:	42b2      	cmp	r2, r6
 8005e94:	f000 80b3 	beq.w	8005ffe <HAL_TIM_PWM_ConfigChannel+0x412>
 8005e98:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005e9c:	42b2      	cmp	r2, r6
 8005e9e:	f000 80ae 	beq.w	8005ffe <HAL_TIM_PWM_ConfigChannel+0x412>
 8005ea2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005ea6:	42b2      	cmp	r2, r6
 8005ea8:	f040 80b0 	bne.w	800600c <HAL_TIM_PWM_ConfigChannel+0x420>
 8005eac:	e0a7      	b.n	8005ffe <HAL_TIM_PWM_ConfigChannel+0x412>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005eae:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005eb0:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer = TIMx->CCER;
 8005eb4:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005eb6:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005eb8:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eba:	4e25      	ldr	r6, [pc, #148]	; (8005f50 <HAL_TIM_PWM_ConfigChannel+0x364>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ebc:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 8005ec0:	6215      	str	r5, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005ec2:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8005ec4:	6d10      	ldr	r0, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ec6:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8005eca:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ece:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ed2:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ed4:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8005ed8:	ea40 0007 	orr.w	r0, r0, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005edc:	d013      	beq.n	8005f06 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005ede:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005ee2:	42b2      	cmp	r2, r6
 8005ee4:	d00f      	beq.n	8005f06 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005ee6:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005eea:	42b2      	cmp	r2, r6
 8005eec:	d00b      	beq.n	8005f06 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005eee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005ef2:	42b2      	cmp	r2, r6
 8005ef4:	d007      	beq.n	8005f06 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005ef6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005efa:	42b2      	cmp	r2, r6
 8005efc:	d003      	beq.n	8005f06 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005efe:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005f02:	42b2      	cmp	r2, r6
 8005f04:	d104      	bne.n	8005f10 <HAL_TIM_PWM_ConfigChannel+0x324>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f06:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005f08:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f0c:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8005f10:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005f12:	6055      	str	r5, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005f14:	6510      	str	r0, [r2, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8005f16:	6496      	str	r6, [r2, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8005f18:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f1a:	6d10      	ldr	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f1c:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005f1e:	f040 0008 	orr.w	r0, r0, #8
 8005f22:	6510      	str	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005f24:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8005f26:	f020 0004 	bic.w	r0, r0, #4
 8005f2a:	6510      	str	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005f2c:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8005f2e:	4321      	orrs	r1, r4
 8005f30:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8005f32:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005f34:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8005f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8005f3c:	4770      	bx	lr
  __HAL_UNLOCK(htim);
 8005f3e:	2200      	movs	r2, #0
      status = HAL_ERROR;
 8005f40:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005f46:	bcf0      	pop	{r4, r5, r6, r7}
 8005f48:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005f4a:	2002      	movs	r0, #2
}
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	40012c00 	.word	0x40012c00
 8005f54:	40014400 	.word	0x40014400
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005f58:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8005f5a:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005f5e:	ea44 3406 	orr.w	r4, r4, r6, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8005f62:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005f66:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005f6a:	f425 4540 	bic.w	r5, r5, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005f6e:	433e      	orrs	r6, r7
 8005f70:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8005f74:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005f76:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005f78:	61d0      	str	r0, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005f7a:	6416      	str	r6, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005f7c:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f7e:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f80:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f82:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8005f86:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f88:	69d0      	ldr	r0, [r2, #28]
 8005f8a:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8005f8e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f90:	69d1      	ldr	r1, [r2, #28]
 8005f92:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8005f96:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8005f98:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005f9a:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8005f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005fa0:	bcf0      	pop	{r4, r5, r6, r7}
 8005fa2:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fa4:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fa6:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005faa:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fae:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fb2:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fb6:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fba:	433e      	orrs	r6, r7
 8005fbc:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8005fc0:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005fc2:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005fc4:	6190      	str	r0, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005fc6:	6396      	str	r6, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005fc8:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fca:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fcc:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005fce:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8005fd2:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005fd4:	6990      	ldr	r0, [r2, #24]
 8005fd6:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8005fda:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005fdc:	6991      	ldr	r1, [r2, #24]
 8005fde:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8005fe2:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8005fe4:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005fe6:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8005fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005fec:	bcf0      	pop	{r4, r5, r6, r7}
 8005fee:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ff0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ff2:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ff6:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ffa:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ffe:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006002:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006006:	433e      	orrs	r6, r7
 8006008:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 800600c:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800600e:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8006010:	61d0      	str	r0, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8006012:	63d6      	str	r6, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8006014:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006016:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006018:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800601a:	f040 0008 	orr.w	r0, r0, #8
 800601e:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006020:	69d0      	ldr	r0, [r2, #28]
 8006022:	f020 0004 	bic.w	r0, r0, #4
 8006026:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006028:	69d1      	ldr	r1, [r2, #28]
 800602a:	4321      	orrs	r1, r4
 800602c:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 800602e:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006030:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8006032:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006036:	bcf0      	pop	{r4, r5, r6, r7}
 8006038:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800603a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800603c:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006040:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006044:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8006048:	e6b4      	b.n	8005db4 <HAL_TIM_PWM_ConfigChannel+0x1c8>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800604a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800604c:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006050:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8006054:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8006058:	e71a      	b.n	8005e90 <HAL_TIM_PWM_ConfigChannel+0x2a4>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800605a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 800605c:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006060:	ea44 3406 	orr.w	r4, r4, r6, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8006064:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8006068:	e6db      	b.n	8005e22 <HAL_TIM_PWM_ConfigChannel+0x236>
 800606a:	bf00      	nop

0800606c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800606c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8006070:	2b01      	cmp	r3, #1
 8006072:	d053      	beq.n	800611c <HAL_TIMEx_MasterConfigSynchronization+0xb0>
{
 8006074:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006076:	4a2a      	ldr	r2, [pc, #168]	; (8006120 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
  tmpcr2 = htim->Instance->CR2;
 8006078:	6804      	ldr	r4, [r0, #0]
 800607a:	680e      	ldr	r6, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800607c:	2302      	movs	r3, #2
 800607e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8006082:	2501      	movs	r5, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006084:	4294      	cmp	r4, r2
  tmpcr2 = htim->Instance->CR2;
 8006086:	6863      	ldr	r3, [r4, #4]
  __HAL_LOCK(htim);
 8006088:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 800608c:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800608e:	d03a      	beq.n	8006106 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8006090:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006094:	4294      	cmp	r4, r2
 8006096:	d031      	beq.n	80060fc <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8006098:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 800609c:	4294      	cmp	r4, r2
 800609e:	d02d      	beq.n	80060fc <HAL_TIMEx_MasterConfigSynchronization+0x90>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80060a0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80060a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060a8:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060aa:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 80060ae:	6063      	str	r3, [r4, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b0:	d016      	beq.n	80060e0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80060b2:	4b1c      	ldr	r3, [pc, #112]	; (8006124 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80060b4:	429c      	cmp	r4, r3
 80060b6:	d013      	beq.n	80060e0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80060b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060bc:	429c      	cmp	r4, r3
 80060be:	d00f      	beq.n	80060e0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80060c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060c4:	429c      	cmp	r4, r3
 80060c6:	d00b      	beq.n	80060e0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80060c8:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80060cc:	429c      	cmp	r4, r3
 80060ce:	d007      	beq.n	80060e0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80060d0:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 80060d4:	429c      	cmp	r4, r3
 80060d6:	d003      	beq.n	80060e0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
 80060d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060dc:	429c      	cmp	r4, r3
 80060de:	d104      	bne.n	80060ea <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060e0:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060e2:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060e6:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060e8:	60a5      	str	r5, [r4, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80060ea:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80060ec:	2201      	movs	r2, #1
 80060ee:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80060f2:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80060f6:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 80060f8:	4618      	mov	r0, r3
}
 80060fa:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80060fc:	684a      	ldr	r2, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80060fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006102:	4313      	orrs	r3, r2
 8006104:	e7cc      	b.n	80060a0 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8006106:	684f      	ldr	r7, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006108:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800610c:	433a      	orrs	r2, r7
  tmpcr2 &= ~TIM_CR2_MMS;
 800610e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8006112:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006116:	4332      	orrs	r2, r6
  htim->Instance->CR2 = tmpcr2;
 8006118:	6062      	str	r2, [r4, #4]
 800611a:	e7e1      	b.n	80060e0 <HAL_TIMEx_MasterConfigSynchronization+0x74>
  __HAL_LOCK(htim);
 800611c:	2002      	movs	r0, #2
}
 800611e:	4770      	bx	lr
 8006120:	40012c00 	.word	0x40012c00
 8006124:	40000400 	.word	0x40000400

08006128 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006128:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800612c:	2b01      	cmp	r3, #1
 800612e:	d047      	beq.n	80061c0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
{
 8006130:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006132:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8006136:	4602      	mov	r2, r0
 8006138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800613c:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006140:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006142:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006146:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006148:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800614c:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006150:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006152:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006156:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006158:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800615c:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800615e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006160:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006164:	e9d1 5406 	ldrd	r5, r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006168:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800616a:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 800616e:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006172:	6810      	ldr	r0, [r2, #0]
 8006174:	4d13      	ldr	r5, [pc, #76]	; (80061c4 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006176:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800617a:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800617c:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006180:	d006      	beq.n	8006190 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8006182:	4c11      	ldr	r4, [pc, #68]	; (80061c8 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8006184:	42a0      	cmp	r0, r4
 8006186:	d003      	beq.n	8006190 <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8006188:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 800618c:	42a0      	cmp	r0, r4
 800618e:	d110      	bne.n	80061b2 <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006190:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006192:	6a0c      	ldr	r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006194:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006198:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800619c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80061a0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061a2:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061a4:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061a6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80061aa:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80061b0:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80061b2:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80061b4:	6443      	str	r3, [r0, #68]	; 0x44

  return HAL_OK;
}
 80061b6:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80061b8:	4608      	mov	r0, r1
  __HAL_UNLOCK(htim);
 80061ba:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 80061be:	4770      	bx	lr
  __HAL_LOCK(htim);
 80061c0:	2002      	movs	r0, #2
}
 80061c2:	4770      	bx	lr
 80061c4:	40012c00 	.word	0x40012c00
 80061c8:	40013400 	.word	0x40013400

080061cc <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 80061cc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d063      	beq.n	800629c <HAL_TIMEx_ConfigBreakInput+0xd0>

  switch (sBreakInputConfig->Source)
 80061d4:	6813      	ldr	r3, [r2, #0]
{
 80061d6:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (sBreakInputConfig->Source)
 80061d8:	2b08      	cmp	r3, #8
  __HAL_LOCK(htim);
 80061da:	f04f 0401 	mov.w	r4, #1
 80061de:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  switch (sBreakInputConfig->Source)
 80061e2:	d066      	beq.n	80062b2 <HAL_TIMEx_ConfigBreakInput+0xe6>
 80061e4:	d90b      	bls.n	80061fe <HAL_TIMEx_ConfigBreakInput+0x32>
 80061e6:	2b20      	cmp	r3, #32
 80061e8:	d069      	beq.n	80062be <HAL_TIMEx_ConfigBreakInput+0xf2>
 80061ea:	d95a      	bls.n	80062a2 <HAL_TIMEx_ConfigBreakInput+0xd6>
 80061ec:	2b40      	cmp	r3, #64	; 0x40
 80061ee:	d032      	beq.n	8006256 <HAL_TIMEx_ConfigBreakInput+0x8a>
 80061f0:	2b80      	cmp	r3, #128	; 0x80
 80061f2:	d10a      	bne.n	800620a <HAL_TIMEx_ConfigBreakInput+0x3e>
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
      bkin_polarity_bitpos = 0U;
 80061f4:	2500      	movs	r5, #0
      bkin_polarity_mask = 0U;
 80061f6:	462c      	mov	r4, r5
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 80061f8:	f04f 0c07 	mov.w	ip, #7
      break;
 80061fc:	e009      	b.n	8006212 <HAL_TIMEx_ConfigBreakInput+0x46>
  switch (sBreakInputConfig->Source)
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d062      	beq.n	80062c8 <HAL_TIMEx_ConfigBreakInput+0xfc>
 8006202:	2b04      	cmp	r3, #4
 8006204:	d021      	beq.n	800624a <HAL_TIMEx_ConfigBreakInput+0x7e>
 8006206:	42a3      	cmp	r3, r4
 8006208:	d063      	beq.n	80062d2 <HAL_TIMEx_ConfigBreakInput+0x106>
    default:
    {
      bkin_enable_mask = 0U;
      bkin_polarity_mask = 0U;
      bkin_enable_bitpos = 0U;
      bkin_polarity_bitpos = 0U;
 800620a:	2500      	movs	r5, #0
      bkin_enable_bitpos = 0U;
 800620c:	46ac      	mov	ip, r5
      bkin_polarity_mask = 0U;
 800620e:	462c      	mov	r4, r5
      bkin_enable_mask = 0U;
 8006210:	462b      	mov	r3, r5
      break;
    }
  }

  switch (BreakInput)
 8006212:	2901      	cmp	r1, #1
 8006214:	d02a      	beq.n	800626c <HAL_TIMEx_ConfigBreakInput+0xa0>
 8006216:	2902      	cmp	r1, #2
 8006218:	d122      	bne.n	8006260 <HAL_TIMEx_ConfigBreakInput+0x94>
      break;
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800621a:	6806      	ldr	r6, [r0, #0]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800621c:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF2;
 800621e:	f8d6 e064 	ldr.w	lr, [r6, #100]	; 0x64

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006222:	6897      	ldr	r7, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006224:	fa01 f20c 	lsl.w	r2, r1, ip
 8006228:	ea82 020e 	eor.w	r2, r2, lr
 800622c:	4013      	ands	r3, r2
 800622e:	ea83 030e 	eor.w	r3, r3, lr
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006232:	fa07 f205 	lsl.w	r2, r7, r5
 8006236:	405a      	eors	r2, r3
 8006238:	4022      	ands	r2, r4
 800623a:	4053      	eors	r3, r2

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800623c:	6673      	str	r3, [r6, #100]	; 0x64
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 800623e:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006240:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8006242:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  return status;
}
 8006246:	4618      	mov	r0, r3
 8006248:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800624a:	250b      	movs	r5, #11
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800624c:	f04f 0c02 	mov.w	ip, #2
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 8006250:	f44f 6400 	mov.w	r4, #2048	; 0x800
      break;
 8006254:	e7dd      	b.n	8006212 <HAL_TIMEx_ConfigBreakInput+0x46>
      bkin_polarity_bitpos = 0U;
 8006256:	2500      	movs	r5, #0
      bkin_polarity_mask = 0U;
 8006258:	462c      	mov	r4, r5
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 800625a:	f04f 0c06 	mov.w	ip, #6
      break;
 800625e:	e7d8      	b.n	8006212 <HAL_TIMEx_ConfigBreakInput+0x46>
      status = HAL_ERROR;
 8006260:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8006262:	2200      	movs	r2, #0
 8006264:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8006268:	4618      	mov	r0, r3
 800626a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmporx = htim->Instance->AF1;
 800626c:	6806      	ldr	r6, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800626e:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF1;
 8006270:	f8d6 e060 	ldr.w	lr, [r6, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006274:	6897      	ldr	r7, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006276:	fa01 f20c 	lsl.w	r2, r1, ip
 800627a:	ea82 020e 	eor.w	r2, r2, lr
 800627e:	4013      	ands	r3, r2
 8006280:	ea83 030e 	eor.w	r3, r3, lr
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006284:	fa07 f205 	lsl.w	r2, r7, r5
 8006288:	405a      	eors	r2, r3
 800628a:	4022      	ands	r2, r4
 800628c:	4053      	eors	r3, r2
      htim->Instance->AF1 = tmporx;
 800628e:	6633      	str	r3, [r6, #96]	; 0x60
  __HAL_UNLOCK(htim);
 8006290:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006292:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 8006294:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 8006298:	4618      	mov	r0, r3
 800629a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 800629c:	2302      	movs	r3, #2
}
 800629e:	4618      	mov	r0, r3
 80062a0:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 80062a2:	2b10      	cmp	r3, #16
 80062a4:	d1b1      	bne.n	800620a <HAL_TIMEx_ConfigBreakInput+0x3e>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 80062a6:	250d      	movs	r5, #13
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 80062a8:	f04f 0c04 	mov.w	ip, #4
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 80062ac:	f44f 5400 	mov.w	r4, #8192	; 0x2000
      break;
 80062b0:	e7af      	b.n	8006212 <HAL_TIMEx_ConfigBreakInput+0x46>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 80062b2:	250c      	movs	r5, #12
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 80062b4:	f04f 0c03 	mov.w	ip, #3
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 80062b8:	f44f 5480 	mov.w	r4, #4096	; 0x1000
      break;
 80062bc:	e7a9      	b.n	8006212 <HAL_TIMEx_ConfigBreakInput+0x46>
      bkin_polarity_bitpos = 0U;
 80062be:	2500      	movs	r5, #0
      bkin_polarity_mask = 0U;
 80062c0:	462c      	mov	r4, r5
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 80062c2:	f04f 0c05 	mov.w	ip, #5
      break;
 80062c6:	e7a4      	b.n	8006212 <HAL_TIMEx_ConfigBreakInput+0x46>
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 80062c8:	46a4      	mov	ip, r4
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 80062ca:	250a      	movs	r5, #10
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 80062cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80062d0:	e79f      	b.n	8006212 <HAL_TIMEx_ConfigBreakInput+0x46>
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 80062d2:	2509      	movs	r5, #9
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 80062d4:	f04f 0c00 	mov.w	ip, #0
      bkin_polarity_mask = TIM1_AF1_BKINP;
 80062d8:	f44f 7400 	mov.w	r4, #512	; 0x200
 80062dc:	e799      	b.n	8006212 <HAL_TIMEx_ConfigBreakInput+0x46>
 80062de:	bf00      	nop

080062e0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062e0:	b410      	push	{r4}
 80062e2:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	e842 3100 	strex	r1, r3, [r2]
 80062f0:	2900      	cmp	r1, #0
 80062f2:	d1f7      	bne.n	80062e4 <UART_EndRxTransfer+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062f4:	4c14      	ldr	r4, [pc, #80]	; (8006348 <UART_EndRxTransfer+0x68>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f6:	f102 0308 	add.w	r3, r2, #8
 80062fa:	e853 3f00 	ldrex	r3, [r3]
 80062fe:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006300:	f102 0c08 	add.w	ip, r2, #8
 8006304:	e84c 3100 	strex	r1, r3, [ip]
 8006308:	2900      	cmp	r1, #0
 800630a:	d1f4      	bne.n	80062f6 <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800630c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800630e:	2b01      	cmp	r3, #1
 8006310:	d008      	beq.n	8006324 <UART_EndRxTransfer+0x44>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006312:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006314:	2220      	movs	r2, #32
 8006316:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800631a:	6743      	str	r3, [r0, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800631c:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800631e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006322:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006324:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006328:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	e842 3100 	strex	r1, r3, [r2]
 8006330:	2900      	cmp	r1, #0
 8006332:	d0ee      	beq.n	8006312 <UART_EndRxTransfer+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006334:	e852 3f00 	ldrex	r3, [r2]
 8006338:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	e842 3100 	strex	r1, r3, [r2]
 8006340:	2900      	cmp	r1, #0
 8006342:	d1ef      	bne.n	8006324 <UART_EndRxTransfer+0x44>
 8006344:	e7e5      	b.n	8006312 <UART_EndRxTransfer+0x32>
 8006346:	bf00      	nop
 8006348:	effffffe 	.word	0xeffffffe

0800634c <HAL_UART_Init>:
  if (huart == NULL)
 800634c:	2800      	cmp	r0, #0
 800634e:	f000 80b4 	beq.w	80064ba <HAL_UART_Init+0x16e>
  if (huart->gState == HAL_UART_STATE_RESET)
 8006352:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8006356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800635a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 80a7 	beq.w	80064b0 <HAL_UART_Init+0x164>
  huart->gState = HAL_UART_STATE_BUSY;
 8006362:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8006364:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006366:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 800636a:	681a      	ldr	r2, [r3, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800636c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  __HAL_UART_DISABLE(huart);
 800636e:	f022 0201 	bic.w	r2, r2, #1
 8006372:	601a      	str	r2, [r3, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006374:	2900      	cmp	r1, #0
 8006376:	d155      	bne.n	8006424 <HAL_UART_Init+0xd8>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006378:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
 800637c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800637e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006380:	69e0      	ldr	r0, [r4, #28]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006382:	69a7      	ldr	r7, [r4, #24]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006384:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006386:	49ae      	ldr	r1, [pc, #696]	; (8006640 <HAL_UART_Init+0x2f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006388:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800638a:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800638c:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800638e:	430a      	orrs	r2, r1
 8006390:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006396:	4eab      	ldr	r6, [pc, #684]	; (8006644 <HAL_UART_Init+0x2f8>)
 8006398:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800639a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063a2:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063a4:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063a6:	f000 808a 	beq.w	80064be <HAL_UART_Init+0x172>
    tmpreg |= huart->Init.OneBitSampling;
 80063aa:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063ac:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80063b0:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80063b4:	433a      	orrs	r2, r7
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063b6:	430a      	orrs	r2, r1
 80063b8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063bc:	f506 4638 	add.w	r6, r6, #47104	; 0xb800
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063c0:	f022 020f 	bic.w	r2, r2, #15
 80063c4:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063c6:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063c8:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063ca:	f000 8098 	beq.w	80064fe <HAL_UART_Init+0x1b2>
 80063ce:	4a9e      	ldr	r2, [pc, #632]	; (8006648 <HAL_UART_Init+0x2fc>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	f000 80b7 	beq.w	8006544 <HAL_UART_Init+0x1f8>
 80063d6:	4a9d      	ldr	r2, [pc, #628]	; (800664c <HAL_UART_Init+0x300>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	f000 81d3 	beq.w	8006784 <HAL_UART_Init+0x438>
 80063de:	4a9c      	ldr	r2, [pc, #624]	; (8006650 <HAL_UART_Init+0x304>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	f000 8188 	beq.w	80066f6 <HAL_UART_Init+0x3aa>
 80063e6:	4a9b      	ldr	r2, [pc, #620]	; (8006654 <HAL_UART_Init+0x308>)
 80063e8:	4293      	cmp	r3, r2
 80063ea:	d112      	bne.n	8006412 <HAL_UART_Init+0xc6>
 80063ec:	4b9a      	ldr	r3, [pc, #616]	; (8006658 <HAL_UART_Init+0x30c>)
 80063ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063fa:	f000 8175 	beq.w	80066e8 <HAL_UART_Init+0x39c>
 80063fe:	f240 81af 	bls.w	8006760 <HAL_UART_Init+0x414>
 8006402:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006406:	f000 8230 	beq.w	800686a <HAL_UART_Init+0x51e>
 800640a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800640e:	f000 81c6 	beq.w	800679e <HAL_UART_Init+0x452>
  huart->NbRxDataToProcess = 1;
 8006412:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8006416:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006418:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800641a:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
    return HAL_ERROR;
 800641e:	2001      	movs	r0, #1
}
 8006420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006424:	070d      	lsls	r5, r1, #28
 8006426:	d505      	bpl.n	8006434 <HAL_UART_Init+0xe8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006428:	685a      	ldr	r2, [r3, #4]
 800642a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800642c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006430:	4302      	orrs	r2, r0
 8006432:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006434:	07c8      	lsls	r0, r1, #31
 8006436:	d505      	bpl.n	8006444 <HAL_UART_Init+0xf8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800643c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006440:	4302      	orrs	r2, r0
 8006442:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006444:	078a      	lsls	r2, r1, #30
 8006446:	d505      	bpl.n	8006454 <HAL_UART_Init+0x108>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006448:	685a      	ldr	r2, [r3, #4]
 800644a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800644c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006450:	4302      	orrs	r2, r0
 8006452:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006454:	074f      	lsls	r7, r1, #29
 8006456:	d505      	bpl.n	8006464 <HAL_UART_Init+0x118>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006458:	685a      	ldr	r2, [r3, #4]
 800645a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800645c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006460:	4302      	orrs	r2, r0
 8006462:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006464:	06ce      	lsls	r6, r1, #27
 8006466:	d505      	bpl.n	8006474 <HAL_UART_Init+0x128>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006468:	689a      	ldr	r2, [r3, #8]
 800646a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800646c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006470:	4302      	orrs	r2, r0
 8006472:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006474:	068d      	lsls	r5, r1, #26
 8006476:	d505      	bpl.n	8006484 <HAL_UART_Init+0x138>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800647c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006480:	4302      	orrs	r2, r0
 8006482:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006484:	0648      	lsls	r0, r1, #25
 8006486:	d509      	bpl.n	800649c <HAL_UART_Init+0x150>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800648c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006490:	4302      	orrs	r2, r0
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006492:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006496:	605a      	str	r2, [r3, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006498:	f000 81db 	beq.w	8006852 <HAL_UART_Init+0x506>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800649c:	0609      	lsls	r1, r1, #24
 800649e:	f57f af6b 	bpl.w	8006378 <HAL_UART_Init+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80064a6:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80064aa:	430a      	orrs	r2, r1
 80064ac:	605a      	str	r2, [r3, #4]
 80064ae:	e763      	b.n	8006378 <HAL_UART_Init+0x2c>
    huart->Lock = HAL_UNLOCKED;
 80064b0:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 80064b4:	f7fd f9fe 	bl	80038b4 <HAL_UART_MspInit>
 80064b8:	e753      	b.n	8006362 <HAL_UART_Init+0x16>
    return HAL_ERROR;
 80064ba:	2001      	movs	r0, #1
}
 80064bc:	4770      	bx	lr
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80064be:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80064c2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80064c6:	4339      	orrs	r1, r7
 80064c8:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064cc:	4862      	ldr	r0, [pc, #392]	; (8006658 <HAL_UART_Init+0x30c>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80064ce:	f022 020f 	bic.w	r2, r2, #15
 80064d2:	432a      	orrs	r2, r5
 80064d4:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064d6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80064da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80064de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064e2:	f000 81b3 	beq.w	800684c <HAL_UART_Init+0x500>
 80064e6:	f240 8179 	bls.w	80067dc <HAL_UART_Init+0x490>
 80064ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064ee:	f000 81ca 	beq.w	8006886 <HAL_UART_Init+0x53a>
 80064f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80064f6:	d18c      	bne.n	8006412 <HAL_UART_Init+0xc6>
        pclk = (uint32_t) LSE_VALUE;
 80064f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80064fc:	e176      	b.n	80067ec <HAL_UART_Init+0x4a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064fe:	4b56      	ldr	r3, [pc, #344]	; (8006658 <HAL_UART_Init+0x30c>)
 8006500:	4a56      	ldr	r2, [pc, #344]	; (800665c <HAL_UART_Init+0x310>)
 8006502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800650c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006510:	f000 814b 	beq.w	80067aa <HAL_UART_Init+0x45e>
    switch (clocksource)
 8006514:	2b08      	cmp	r3, #8
 8006516:	f63f af7c 	bhi.w	8006412 <HAL_UART_Init+0xc6>
 800651a:	a201      	add	r2, pc, #4	; (adr r2, 8006520 <HAL_UART_Init+0x1d4>)
 800651c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006520:	080066e3 	.word	0x080066e3
 8006524:	08006555 	.word	0x08006555
 8006528:	08006867 	.word	0x08006867
 800652c:	08006413 	.word	0x08006413
 8006530:	080066f1 	.word	0x080066f1
 8006534:	08006413 	.word	0x08006413
 8006538:	08006413 	.word	0x08006413
 800653c:	08006413 	.word	0x08006413
 8006540:	080067a5 	.word	0x080067a5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006544:	4b44      	ldr	r3, [pc, #272]	; (8006658 <HAL_UART_Init+0x30c>)
 8006546:	4a46      	ldr	r2, [pc, #280]	; (8006660 <HAL_UART_Init+0x314>)
 8006548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800654c:	f003 030c 	and.w	r3, r3, #12
 8006550:	5cd3      	ldrb	r3, [r2, r3]
 8006552:	e7db      	b.n	800650c <HAL_UART_Init+0x1c0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006554:	f7fe fffa 	bl	800554c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006558:	2800      	cmp	r0, #0
 800655a:	f000 810c 	beq.w	8006776 <HAL_UART_Init+0x42a>
 800655e:	6a65      	ldr	r5, [r4, #36]	; 0x24
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006560:	6863      	ldr	r3, [r4, #4]
 8006562:	4a40      	ldr	r2, [pc, #256]	; (8006664 <HAL_UART_Init+0x318>)
 8006564:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
 8006568:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800656c:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006570:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8006574:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006578:	f1a0 0310 	sub.w	r3, r0, #16
 800657c:	4293      	cmp	r3, r2
 800657e:	f63f af48 	bhi.w	8006412 <HAL_UART_Init+0xc6>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006582:	6823      	ldr	r3, [r4, #0]
  huart->RxISR = NULL;
 8006584:	2200      	movs	r2, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006586:	60d8      	str	r0, [r3, #12]
  huart->TxISR = NULL;
 8006588:	e9c4 221d 	strd	r2, r2, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 800658c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006590:	66a1      	str	r1, [r4, #104]	; 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006592:	685a      	ldr	r2, [r3, #4]
 8006594:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006598:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80065a0:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80065a2:	681a      	ldr	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065a4:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 80065a6:	f042 0201 	orr.w	r2, r2, #1
 80065aa:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ac:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
  tickstart = HAL_GetTick();
 80065b0:	f7fd fa6e 	bl	8003a90 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065b4:	6823      	ldr	r3, [r4, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80065ba:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065bc:	d40f      	bmi.n	80065de <HAL_UART_Init+0x292>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065be:	681a      	ldr	r2, [r3, #0]
 80065c0:	0750      	lsls	r0, r2, #29
 80065c2:	d451      	bmi.n	8006668 <HAL_UART_Init+0x31c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c4:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80065c6:	2220      	movs	r2, #32
 80065c8:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 80065cc:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80065d0:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  return HAL_OK;
 80065d4:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065d6:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80065d8:	6723      	str	r3, [r4, #112]	; 0x70
}
 80065da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065de:	69dd      	ldr	r5, [r3, #28]
 80065e0:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 80065e4:	d1eb      	bne.n	80065be <HAL_UART_Init+0x272>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065e6:	f7fd fa53 	bl	8003a90 <HAL_GetTick>
 80065ea:	1b80      	subs	r0, r0, r6
 80065ec:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80065f0:	d216      	bcs.n	8006620 <HAL_UART_Init+0x2d4>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	0757      	lsls	r7, r2, #29
 80065f8:	d5f1      	bpl.n	80065de <HAL_UART_Init+0x292>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80065fa:	69df      	ldr	r7, [r3, #28]
 80065fc:	f017 0708 	ands.w	r7, r7, #8
 8006600:	f040 814a 	bne.w	8006898 <HAL_UART_Init+0x54c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006604:	69da      	ldr	r2, [r3, #28]
 8006606:	0515      	lsls	r5, r2, #20
 8006608:	d5e9      	bpl.n	80065de <HAL_UART_Init+0x292>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800660a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800660e:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8006610:	4620      	mov	r0, r4
 8006612:	f7ff fe65 	bl	80062e0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006616:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8006618:	f884 7084 	strb.w	r7, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800661c:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8006620:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006622:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006626:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	e843 2100 	strex	r1, r2, [r3]
 800662e:	2900      	cmp	r1, #0
 8006630:	d1f7      	bne.n	8006622 <HAL_UART_Init+0x2d6>
      huart->gState = HAL_UART_STATE_READY;
 8006632:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8006634:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 8006638:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 800663c:	2003      	movs	r0, #3
 800663e:	e7cc      	b.n	80065da <HAL_UART_Init+0x28e>
 8006640:	cfff69f3 	.word	0xcfff69f3
 8006644:	40008000 	.word	0x40008000
 8006648:	40004400 	.word	0x40004400
 800664c:	40004800 	.word	0x40004800
 8006650:	40004c00 	.word	0x40004c00
 8006654:	40005000 	.word	0x40005000
 8006658:	40021000 	.word	0x40021000
 800665c:	0800acec 	.word	0x0800acec
 8006660:	0800acf0 	.word	0x0800acf0
 8006664:	0800ad00 	.word	0x0800ad00
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006668:	69dd      	ldr	r5, [r3, #28]
 800666a:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 800666e:	d1a9      	bne.n	80065c4 <HAL_UART_Init+0x278>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006670:	f7fd fa0e 	bl	8003a90 <HAL_GetTick>
 8006674:	1b80      	subs	r0, r0, r6
 8006676:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800667a:	d216      	bcs.n	80066aa <HAL_UART_Init+0x35e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800667c:	6823      	ldr	r3, [r4, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	0751      	lsls	r1, r2, #29
 8006682:	d5f1      	bpl.n	8006668 <HAL_UART_Init+0x31c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006684:	69df      	ldr	r7, [r3, #28]
 8006686:	f017 0708 	ands.w	r7, r7, #8
 800668a:	f040 810f 	bne.w	80068ac <HAL_UART_Init+0x560>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800668e:	69da      	ldr	r2, [r3, #28]
 8006690:	0512      	lsls	r2, r2, #20
 8006692:	d5e9      	bpl.n	8006668 <HAL_UART_Init+0x31c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006698:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800669a:	4620      	mov	r0, r4
 800669c:	f7ff fe20 	bl	80062e0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066a0:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 80066a2:	f884 7084 	strb.w	r7, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80066a6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80066aa:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066b0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b4:	e843 2100 	strex	r1, r2, [r3]
 80066b8:	2900      	cmp	r1, #0
 80066ba:	d1f7      	bne.n	80066ac <HAL_UART_Init+0x360>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066bc:	f103 0208 	add.w	r2, r3, #8
 80066c0:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	f103 0008 	add.w	r0, r3, #8
 80066cc:	e840 2100 	strex	r1, r2, [r0]
 80066d0:	2900      	cmp	r1, #0
 80066d2:	d1f3      	bne.n	80066bc <HAL_UART_Init+0x370>
      huart->RxState = HAL_UART_STATE_READY;
 80066d4:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 80066d6:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->RxState = HAL_UART_STATE_READY;
 80066da:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      return HAL_TIMEOUT;
 80066de:	2003      	movs	r0, #3
 80066e0:	e77b      	b.n	80065da <HAL_UART_Init+0x28e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80066e2:	f7fe ff21 	bl	8005528 <HAL_RCC_GetPCLK1Freq>
 80066e6:	e737      	b.n	8006558 <HAL_UART_Init+0x20c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066e8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80066ec:	f000 80c8 	beq.w	8006880 <HAL_UART_Init+0x534>
        pclk = HAL_RCC_GetSysClockFreq();
 80066f0:	f7fe fedc 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 80066f4:	e730      	b.n	8006558 <HAL_UART_Init+0x20c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80066f6:	4b72      	ldr	r3, [pc, #456]	; (80068c0 <HAL_UART_Init+0x574>)
 80066f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066fc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006700:	2b40      	cmp	r3, #64	; 0x40
 8006702:	d0f1      	beq.n	80066e8 <HAL_UART_Init+0x39c>
 8006704:	d92c      	bls.n	8006760 <HAL_UART_Init+0x414>
 8006706:	2b80      	cmp	r3, #128	; 0x80
 8006708:	f000 80af 	beq.w	800686a <HAL_UART_Init+0x51e>
 800670c:	2bc0      	cmp	r3, #192	; 0xc0
 800670e:	f47f ae80 	bne.w	8006412 <HAL_UART_Init+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006712:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) LSE_VALUE;
 8006716:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800671a:	f47f af21 	bne.w	8006560 <HAL_UART_Init+0x214>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800671e:	6862      	ldr	r2, [r4, #4]
 8006720:	4968      	ldr	r1, [pc, #416]	; (80068c4 <HAL_UART_Init+0x578>)
 8006722:	0853      	lsrs	r3, r2, #1
 8006724:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 8006728:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800672c:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006730:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006734:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006738:	f1a3 0210 	sub.w	r2, r3, #16
 800673c:	428a      	cmp	r2, r1
 800673e:	f63f ae68 	bhi.w	8006412 <HAL_UART_Init+0xc6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006742:	f023 020f 	bic.w	r2, r3, #15
 8006746:	b291      	uxth	r1, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006748:	f3c3 0242 	ubfx	r2, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	430a      	orrs	r2, r1
  huart->NbRxDataToProcess = 1;
 8006750:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  huart->RxISR = NULL;
 8006754:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 8006756:	60da      	str	r2, [r3, #12]
  huart->NbRxDataToProcess = 1;
 8006758:	66a0      	str	r0, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800675a:	e9c4 111d 	strd	r1, r1, [r4, #116]	; 0x74
 800675e:	e718      	b.n	8006592 <HAL_UART_Init+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006760:	2b00      	cmp	r3, #0
 8006762:	f47f ae56 	bne.w	8006412 <HAL_UART_Init+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006766:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800676a:	d1ba      	bne.n	80066e2 <HAL_UART_Init+0x396>
        pclk = HAL_RCC_GetPCLK1Freq();
 800676c:	f7fe fedc 	bl	8005528 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006770:	b108      	cbz	r0, 8006776 <HAL_UART_Init+0x42a>
 8006772:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8006774:	e7d3      	b.n	800671e <HAL_UART_Init+0x3d2>
  huart->NbRxDataToProcess = 1;
 8006776:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800677a:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 800677c:	e9c4 001d 	strd	r0, r0, [r4, #116]	; 0x74
 8006780:	6823      	ldr	r3, [r4, #0]
 8006782:	e706      	b.n	8006592 <HAL_UART_Init+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006784:	4b4e      	ldr	r3, [pc, #312]	; (80068c0 <HAL_UART_Init+0x574>)
 8006786:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800678e:	2b10      	cmp	r3, #16
 8006790:	d0aa      	beq.n	80066e8 <HAL_UART_Init+0x39c>
 8006792:	d9e5      	bls.n	8006760 <HAL_UART_Init+0x414>
 8006794:	2b20      	cmp	r3, #32
 8006796:	d068      	beq.n	800686a <HAL_UART_Init+0x51e>
 8006798:	2b30      	cmp	r3, #48	; 0x30
 800679a:	f47f ae3a 	bne.w	8006412 <HAL_UART_Init+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800679e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80067a2:	d0bc      	beq.n	800671e <HAL_UART_Init+0x3d2>
        pclk = (uint32_t) LSE_VALUE;
 80067a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80067a8:	e6da      	b.n	8006560 <HAL_UART_Init+0x214>
    switch (clocksource)
 80067aa:	2b08      	cmp	r3, #8
 80067ac:	f63f ae31 	bhi.w	8006412 <HAL_UART_Init+0xc6>
 80067b0:	a201      	add	r2, pc, #4	; (adr r2, 80067b8 <HAL_UART_Init+0x46c>)
 80067b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b6:	bf00      	nop
 80067b8:	0800676d 	.word	0x0800676d
 80067bc:	08006861 	.word	0x08006861
 80067c0:	0800687d 	.word	0x0800687d
 80067c4:	08006413 	.word	0x08006413
 80067c8:	08006881 	.word	0x08006881
 80067cc:	08006413 	.word	0x08006413
 80067d0:	08006413 	.word	0x08006413
 80067d4:	08006413 	.word	0x08006413
 80067d8:	08006877 	.word	0x08006877
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f47f ae18 	bne.w	8006412 <HAL_UART_Init+0xc6>
        pclk = HAL_RCC_GetPCLK1Freq();
 80067e2:	f7fe fea1 	bl	8005528 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80067e6:	2800      	cmp	r0, #0
 80067e8:	d04f      	beq.n	800688a <HAL_UART_Init+0x53e>
 80067ea:	6a65      	ldr	r5, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067ec:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067ee:	4b35      	ldr	r3, [pc, #212]	; (80068c4 <HAL_UART_Init+0x578>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067f0:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80067f4:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 80067f8:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80067fc:	428b      	cmp	r3, r1
 80067fe:	f4ff ae08 	bcc.w	8006412 <HAL_UART_Init+0xc6>
 8006802:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8006806:	f63f ae04 	bhi.w	8006412 <HAL_UART_Init+0xc6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800680a:	2500      	movs	r5, #0
 800680c:	2300      	movs	r3, #0
 800680e:	4629      	mov	r1, r5
 8006810:	f7fa fa42 	bl	8000c98 <__aeabi_uldivmod>
 8006814:	020b      	lsls	r3, r1, #8
 8006816:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800681a:	0202      	lsls	r2, r0, #8
 800681c:	0870      	lsrs	r0, r6, #1
 800681e:	1817      	adds	r7, r2, r0
 8006820:	f143 0800 	adc.w	r8, r3, #0
 8006824:	4632      	mov	r2, r6
 8006826:	462b      	mov	r3, r5
 8006828:	4638      	mov	r0, r7
 800682a:	4641      	mov	r1, r8
 800682c:	f7fa fa34 	bl	8000c98 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006830:	4b25      	ldr	r3, [pc, #148]	; (80068c8 <HAL_UART_Init+0x57c>)
 8006832:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006836:	429a      	cmp	r2, r3
 8006838:	f63f adeb 	bhi.w	8006412 <HAL_UART_Init+0xc6>
          huart->Instance->BRR = usartdiv;
 800683c:	6823      	ldr	r3, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800683e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 8006842:	60d8      	str	r0, [r3, #12]
  huart->TxISR = NULL;
 8006844:	e9c4 551d 	strd	r5, r5, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 8006848:	66a2      	str	r2, [r4, #104]	; 0x68
 800684a:	e6a2      	b.n	8006592 <HAL_UART_Init+0x246>
        pclk = HAL_RCC_GetSysClockFreq();
 800684c:	f7fe fe2e 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 8006850:	e7c9      	b.n	80067e6 <HAL_UART_Init+0x49a>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006852:	685a      	ldr	r2, [r3, #4]
 8006854:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006856:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800685a:	4302      	orrs	r2, r0
 800685c:	605a      	str	r2, [r3, #4]
 800685e:	e61d      	b.n	800649c <HAL_UART_Init+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006860:	f7fe fe74 	bl	800554c <HAL_RCC_GetPCLK2Freq>
 8006864:	e784      	b.n	8006770 <HAL_UART_Init+0x424>
        pclk = (uint32_t) HSI_VALUE;
 8006866:	4819      	ldr	r0, [pc, #100]	; (80068cc <HAL_UART_Init+0x580>)
 8006868:	e67a      	b.n	8006560 <HAL_UART_Init+0x214>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800686a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800686e:	4817      	ldr	r0, [pc, #92]	; (80068cc <HAL_UART_Init+0x580>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006870:	f47f ae76 	bne.w	8006560 <HAL_UART_Init+0x214>
 8006874:	e753      	b.n	800671e <HAL_UART_Init+0x3d2>
        pclk = (uint32_t) LSE_VALUE;
 8006876:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800687a:	e750      	b.n	800671e <HAL_UART_Init+0x3d2>
        pclk = (uint32_t) HSI_VALUE;
 800687c:	4813      	ldr	r0, [pc, #76]	; (80068cc <HAL_UART_Init+0x580>)
 800687e:	e74e      	b.n	800671e <HAL_UART_Init+0x3d2>
        pclk = HAL_RCC_GetSysClockFreq();
 8006880:	f7fe fe14 	bl	80054ac <HAL_RCC_GetSysClockFreq>
 8006884:	e774      	b.n	8006770 <HAL_UART_Init+0x424>
        pclk = (uint32_t) HSI_VALUE;
 8006886:	4811      	ldr	r0, [pc, #68]	; (80068cc <HAL_UART_Init+0x580>)
 8006888:	e7b0      	b.n	80067ec <HAL_UART_Init+0x4a0>
  huart->NbRxDataToProcess = 1;
 800688a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8006892:	e9c4 001d 	strd	r0, r0, [r4, #116]	; 0x74
 8006896:	e67c      	b.n	8006592 <HAL_UART_Init+0x246>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006898:	2608      	movs	r6, #8
 800689a:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 800689c:	4620      	mov	r0, r4
 800689e:	f7ff fd1f 	bl	80062e0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068a2:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
          __HAL_UNLOCK(huart);
 80068a6:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
 80068aa:	e6b9      	b.n	8006620 <HAL_UART_Init+0x2d4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80068ac:	2608      	movs	r6, #8
 80068ae:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 80068b0:	4620      	mov	r0, r4
 80068b2:	f7ff fd15 	bl	80062e0 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80068b6:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
          __HAL_UNLOCK(huart);
 80068ba:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
 80068be:	e6f4      	b.n	80066aa <HAL_UART_Init+0x35e>
 80068c0:	40021000 	.word	0x40021000
 80068c4:	0800ad00 	.word	0x0800ad00
 80068c8:	000ffcff 	.word	0x000ffcff
 80068cc:	00f42400 	.word	0x00f42400

080068d0 <HAL_UART_Transmit>:
{
 80068d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068d4:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80068d6:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80068da:	2920      	cmp	r1, #32
{
 80068dc:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 80068de:	d105      	bne.n	80068ec <HAL_UART_Transmit+0x1c>
    if ((pData == NULL) || (Size == 0U))
 80068e0:	b106      	cbz	r6, 80068e4 <HAL_UART_Transmit+0x14>
 80068e2:	b93a      	cbnz	r2, 80068f4 <HAL_UART_Transmit+0x24>
      return  HAL_ERROR;
 80068e4:	2001      	movs	r0, #1
}
 80068e6:	b002      	add	sp, #8
 80068e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80068ec:	2002      	movs	r0, #2
}
 80068ee:	b002      	add	sp, #8
 80068f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068f4:	4604      	mov	r4, r0
 80068f6:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068f8:	2700      	movs	r7, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068fa:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068fc:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006900:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8006904:	9201      	str	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8006906:	f7fd f8c3 	bl	8003a90 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800690a:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 800690c:	9a01      	ldr	r2, [sp, #4]
 800690e:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8006916:	4680      	mov	r8, r0
    huart->TxXferCount = Size;
 8006918:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800691c:	d046      	beq.n	80069ac <HAL_UART_Transmit+0xdc>
    while (huart->TxXferCount > 0U)
 800691e:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8006922:	6820      	ldr	r0, [r4, #0]
 8006924:	b29b      	uxth	r3, r3
 8006926:	b19b      	cbz	r3, 8006950 <HAL_UART_Transmit+0x80>
 8006928:	1c69      	adds	r1, r5, #1
 800692a:	d11b      	bne.n	8006964 <HAL_UART_Transmit+0x94>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800692c:	69c2      	ldr	r2, [r0, #28]
 800692e:	0612      	lsls	r2, r2, #24
 8006930:	d5fc      	bpl.n	800692c <HAL_UART_Transmit+0x5c>
      if (pdata8bits == NULL)
 8006932:	b326      	cbz	r6, 800697e <HAL_UART_Transmit+0xae>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006934:	f816 3b01 	ldrb.w	r3, [r6], #1
 8006938:	6283      	str	r3, [r0, #40]	; 0x28
      huart->TxXferCount--;
 800693a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800693e:	3b01      	subs	r3, #1
 8006940:	b29b      	uxth	r3, r3
 8006942:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006946:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800694a:	b29b      	uxth	r3, r3
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1eb      	bne.n	8006928 <HAL_UART_Transmit+0x58>
 8006950:	1c69      	adds	r1, r5, #1
 8006952:	d119      	bne.n	8006988 <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006954:	69c3      	ldr	r3, [r0, #28]
 8006956:	065a      	lsls	r2, r3, #25
 8006958:	d5fc      	bpl.n	8006954 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 800695a:	2320      	movs	r3, #32
 800695c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_OK;
 8006960:	2000      	movs	r0, #0
 8006962:	e7c0      	b.n	80068e6 <HAL_UART_Transmit+0x16>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006964:	69c3      	ldr	r3, [r0, #28]
 8006966:	061b      	lsls	r3, r3, #24
 8006968:	d4e3      	bmi.n	8006932 <HAL_UART_Transmit+0x62>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800696a:	f7fd f891 	bl	8003a90 <HAL_GetTick>
 800696e:	eba0 0008 	sub.w	r0, r0, r8
 8006972:	4285      	cmp	r5, r0
 8006974:	d315      	bcc.n	80069a2 <HAL_UART_Transmit+0xd2>
 8006976:	b1a5      	cbz	r5, 80069a2 <HAL_UART_Transmit+0xd2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006978:	6820      	ldr	r0, [r4, #0]
 800697a:	6803      	ldr	r3, [r0, #0]
 800697c:	e7d4      	b.n	8006928 <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800697e:	f837 3b02 	ldrh.w	r3, [r7], #2
 8006982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006986:	e7d7      	b.n	8006938 <HAL_UART_Transmit+0x68>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006988:	69c3      	ldr	r3, [r0, #28]
 800698a:	065b      	lsls	r3, r3, #25
 800698c:	d4e5      	bmi.n	800695a <HAL_UART_Transmit+0x8a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800698e:	f7fd f87f 	bl	8003a90 <HAL_GetTick>
 8006992:	eba0 0008 	sub.w	r0, r0, r8
 8006996:	4285      	cmp	r5, r0
 8006998:	d303      	bcc.n	80069a2 <HAL_UART_Transmit+0xd2>
 800699a:	b115      	cbz	r5, 80069a2 <HAL_UART_Transmit+0xd2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800699c:	6820      	ldr	r0, [r4, #0]
 800699e:	6803      	ldr	r3, [r0, #0]
 80069a0:	e7d6      	b.n	8006950 <HAL_UART_Transmit+0x80>
      huart->gState = HAL_UART_STATE_READY;
 80069a2:	2320      	movs	r3, #32
 80069a4:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 80069a8:	2003      	movs	r0, #3
 80069aa:	e79c      	b.n	80068e6 <HAL_UART_Transmit+0x16>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ac:	6923      	ldr	r3, [r4, #16]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d1b5      	bne.n	800691e <HAL_UART_Transmit+0x4e>
 80069b2:	4637      	mov	r7, r6
      pdata8bits  = NULL;
 80069b4:	461e      	mov	r6, r3
 80069b6:	e7b2      	b.n	800691e <HAL_UART_Transmit+0x4e>

080069b8 <HAL_UART_Receive>:
{
 80069b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069bc:	460e      	mov	r6, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 80069be:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 80069c2:	2920      	cmp	r1, #32
{
 80069c4:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 80069c6:	d105      	bne.n	80069d4 <HAL_UART_Receive+0x1c>
    if ((pData == NULL) || (Size == 0U))
 80069c8:	b106      	cbz	r6, 80069cc <HAL_UART_Receive+0x14>
 80069ca:	b93a      	cbnz	r2, 80069dc <HAL_UART_Receive+0x24>
      return  HAL_ERROR;
 80069cc:	2001      	movs	r0, #1
}
 80069ce:	b003      	add	sp, #12
 80069d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 80069d4:	2002      	movs	r0, #2
}
 80069d6:	b003      	add	sp, #12
 80069d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80069dc:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069de:	2700      	movs	r7, #0
 80069e0:	461d      	mov	r5, r3
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069e2:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069e4:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069e8:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069ec:	66c7      	str	r7, [r0, #108]	; 0x6c
 80069ee:	9201      	str	r2, [sp, #4]
    tickstart = HAL_GetTick();
 80069f0:	f7fd f84e 	bl	8003a90 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 80069f4:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 80069f6:	9a01      	ldr	r2, [sp, #4]
 80069f8:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 80069fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8006a00:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 8006a02:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 8006a06:	f000 8082 	beq.w	8006b0e <HAL_UART_Receive+0x156>
 8006a0a:	b1fb      	cbz	r3, 8006a4c <HAL_UART_Receive+0x94>
 8006a0c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a10:	f000 8090 	beq.w	8006b34 <HAL_UART_Receive+0x17c>
 8006a14:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
      pdata16bits = NULL;
 8006a18:	f04f 0800 	mov.w	r8, #0
    while (huart->RxXferCount > 0U)
 8006a1c:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006a20:	b29b      	uxth	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d06e      	beq.n	8006b04 <HAL_UART_Receive+0x14c>
 8006a26:	6820      	ldr	r0, [r4, #0]
 8006a28:	1c69      	adds	r1, r5, #1
 8006a2a:	d116      	bne.n	8006a5a <HAL_UART_Receive+0xa2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a2c:	69c2      	ldr	r2, [r0, #28]
 8006a2e:	0692      	lsls	r2, r2, #26
 8006a30:	d5fc      	bpl.n	8006a2c <HAL_UART_Receive+0x74>
      if (pdata8bits == NULL)
 8006a32:	2e00      	cmp	r6, #0
 8006a34:	d057      	beq.n	8006ae6 <HAL_UART_Receive+0x12e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006a36:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006a38:	403b      	ands	r3, r7
 8006a3a:	f806 3b01 	strb.w	r3, [r6], #1
      huart->RxXferCount--;
 8006a3e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006a42:	3b01      	subs	r3, #1
 8006a44:	b29b      	uxth	r3, r3
 8006a46:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8006a4a:	e7e7      	b.n	8006a1c <HAL_UART_Receive+0x64>
    UART_MASK_COMPUTATION(huart);
 8006a4c:	6923      	ldr	r3, [r4, #16]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d166      	bne.n	8006b20 <HAL_UART_Receive+0x168>
 8006a52:	27ff      	movs	r7, #255	; 0xff
 8006a54:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
 8006a58:	e7de      	b.n	8006a18 <HAL_UART_Receive+0x60>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a5a:	69c3      	ldr	r3, [r0, #28]
 8006a5c:	069b      	lsls	r3, r3, #26
 8006a5e:	d4e8      	bmi.n	8006a32 <HAL_UART_Receive+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a60:	f7fd f816 	bl	8003a90 <HAL_GetTick>
 8006a64:	eba0 0009 	sub.w	r0, r0, r9
 8006a68:	4285      	cmp	r5, r0
 8006a6a:	d32e      	bcc.n	8006aca <HAL_UART_Receive+0x112>
 8006a6c:	b36d      	cbz	r5, 8006aca <HAL_UART_Receive+0x112>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a6e:	6820      	ldr	r0, [r4, #0]
 8006a70:	6803      	ldr	r3, [r0, #0]
 8006a72:	0759      	lsls	r1, r3, #29
 8006a74:	d5d8      	bpl.n	8006a28 <HAL_UART_Receive+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a76:	69c3      	ldr	r3, [r0, #28]
 8006a78:	071a      	lsls	r2, r3, #28
 8006a7a:	d462      	bmi.n	8006b42 <HAL_UART_Receive+0x18a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a7c:	69c3      	ldr	r3, [r0, #28]
 8006a7e:	051b      	lsls	r3, r3, #20
 8006a80:	d5d2      	bpl.n	8006a28 <HAL_UART_Receive+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a86:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a88:	e850 3f00 	ldrex	r3, [r0]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a90:	e840 3200 	strex	r2, r3, [r0]
 8006a94:	2a00      	cmp	r2, #0
 8006a96:	d1f7      	bne.n	8006a88 <HAL_UART_Receive+0xd0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a98:	4941      	ldr	r1, [pc, #260]	; (8006ba0 <HAL_UART_Receive+0x1e8>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a9a:	f100 0308 	add.w	r3, r0, #8
 8006a9e:	e853 3f00 	ldrex	r3, [r3]
 8006aa2:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa4:	f100 0508 	add.w	r5, r0, #8
 8006aa8:	e845 3200 	strex	r2, r3, [r5]
 8006aac:	2a00      	cmp	r2, #0
 8006aae:	d1f4      	bne.n	8006a9a <HAL_UART_Receive+0xe2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d00e      	beq.n	8006ad4 <HAL_UART_Receive+0x11c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ab6:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006ab8:	2220      	movs	r2, #32
 8006aba:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 8006abe:	6763      	str	r3, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac0:	66e3      	str	r3, [r4, #108]	; 0x6c
          __HAL_UNLOCK(huart);
 8006ac2:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ac6:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
        huart->RxState = HAL_UART_STATE_READY;
 8006aca:	2320      	movs	r3, #32
 8006acc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_TIMEOUT;
 8006ad0:	2003      	movs	r0, #3
 8006ad2:	e77c      	b.n	80069ce <HAL_UART_Receive+0x16>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ad4:	e850 3f00 	ldrex	r3, [r0]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ad8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006adc:	e840 3200 	strex	r2, r3, [r0]
 8006ae0:	2a00      	cmp	r2, #0
 8006ae2:	d1f7      	bne.n	8006ad4 <HAL_UART_Receive+0x11c>
 8006ae4:	e7e7      	b.n	8006ab6 <HAL_UART_Receive+0xfe>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006ae6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006ae8:	403b      	ands	r3, r7
 8006aea:	f828 3b02 	strh.w	r3, [r8], #2
      huart->RxXferCount--;
 8006aee:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006af2:	3b01      	subs	r3, #1
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006afa:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d191      	bne.n	8006a28 <HAL_UART_Receive+0x70>
    huart->RxState = HAL_UART_STATE_READY;
 8006b04:	2320      	movs	r3, #32
 8006b06:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return HAL_OK;
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	e75f      	b.n	80069ce <HAL_UART_Receive+0x16>
    UART_MASK_COMPUTATION(huart);
 8006b0e:	6923      	ldr	r3, [r4, #16]
 8006b10:	b953      	cbnz	r3, 8006b28 <HAL_UART_Receive+0x170>
 8006b12:	f240 17ff 	movw	r7, #511	; 0x1ff
 8006b16:	46b0      	mov	r8, r6
 8006b18:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
      pdata8bits  = NULL;
 8006b1c:	461e      	mov	r6, r3
 8006b1e:	e77d      	b.n	8006a1c <HAL_UART_Receive+0x64>
    UART_MASK_COMPUTATION(huart);
 8006b20:	277f      	movs	r7, #127	; 0x7f
 8006b22:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
 8006b26:	e777      	b.n	8006a18 <HAL_UART_Receive+0x60>
 8006b28:	23ff      	movs	r3, #255	; 0xff
      pdata16bits = NULL;
 8006b2a:	46b8      	mov	r8, r7
 8006b2c:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 8006b30:	461f      	mov	r7, r3
 8006b32:	e773      	b.n	8006a1c <HAL_UART_Receive+0x64>
 8006b34:	6923      	ldr	r3, [r4, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0f2      	beq.n	8006b20 <HAL_UART_Receive+0x168>
 8006b3a:	273f      	movs	r7, #63	; 0x3f
 8006b3c:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
 8006b40:	e76a      	b.n	8006a18 <HAL_UART_Receive+0x60>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006b42:	2308      	movs	r3, #8
 8006b44:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b46:	e850 3f00 	ldrex	r3, [r0]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4e:	e840 3200 	strex	r2, r3, [r0]
 8006b52:	2a00      	cmp	r2, #0
 8006b54:	d1f7      	bne.n	8006b46 <HAL_UART_Receive+0x18e>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b56:	4912      	ldr	r1, [pc, #72]	; (8006ba0 <HAL_UART_Receive+0x1e8>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	f100 0308 	add.w	r3, r0, #8
 8006b5c:	e853 3f00 	ldrex	r3, [r3]
 8006b60:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b62:	f100 0508 	add.w	r5, r0, #8
 8006b66:	e845 3200 	strex	r2, r3, [r5]
 8006b6a:	2a00      	cmp	r2, #0
 8006b6c:	d1f4      	bne.n	8006b58 <HAL_UART_Receive+0x1a0>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b6e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d00b      	beq.n	8006b8c <HAL_UART_Receive+0x1d4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b74:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006b76:	2120      	movs	r1, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b78:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8006b7a:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 8006b7e:	6763      	str	r3, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b80:	66e3      	str	r3, [r4, #108]	; 0x6c
          __HAL_UNLOCK(huart);
 8006b82:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006b86:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8006b8a:	e79e      	b.n	8006aca <HAL_UART_Receive+0x112>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	e850 3f00 	ldrex	r3, [r0]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b90:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	e840 3200 	strex	r2, r3, [r0]
 8006b98:	2a00      	cmp	r2, #0
 8006b9a:	d1f7      	bne.n	8006b8c <HAL_UART_Receive+0x1d4>
 8006b9c:	e7ea      	b.n	8006b74 <HAL_UART_Receive+0x1bc>
 8006b9e:	bf00      	nop
 8006ba0:	effffffe 	.word	0xeffffffe

08006ba4 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006ba4:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 8006ba8:	2a01      	cmp	r2, #1
 8006baa:	d017      	beq.n	8006bdc <HAL_UARTEx_DisableFifoMode+0x38>
{
 8006bac:	b430      	push	{r4, r5}

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bae:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8006bb0:	2124      	movs	r1, #36	; 0x24
 8006bb2:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 8006bb6:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bb8:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bba:	6814      	ldr	r4, [r2, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bbc:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006bbe:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 8006bc2:	f024 0401 	bic.w	r4, r4, #1

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8006bc6:	2520      	movs	r5, #32
  __HAL_UART_DISABLE(huart);
 8006bc8:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006bca:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006bcc:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8006bce:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006bd0:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006bd4:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8006bd8:	bc30      	pop	{r4, r5}
 8006bda:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006bdc:	2002      	movs	r0, #2
}
 8006bde:	4770      	bx	lr

08006be0 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006be0:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 8006be4:	2a01      	cmp	r2, #1
 8006be6:	d033      	beq.n	8006c50 <HAL_UARTEx_SetTxFifoThreshold+0x70>
 8006be8:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8006bea:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bec:	681a      	ldr	r2, [r3, #0]
{
 8006bee:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8006bf0:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bf4:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bf6:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006bf8:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8006bfa:	f020 0001 	bic.w	r0, r0, #1
 8006bfe:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006c00:	6890      	ldr	r0, [r2, #8]
 8006c02:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8006c06:	4301      	orrs	r1, r0
 8006c08:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c0a:	b97d      	cbnz	r5, 8006c2c <HAL_UARTEx_SetTxFifoThreshold+0x4c>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8006c0c:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006c0e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006c10:	2520      	movs	r5, #32
 8006c12:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8006c16:	2100      	movs	r1, #0
 8006c18:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c1c:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8006c1e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006c20:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006c24:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8006c28:	bcf0      	pop	{r4, r5, r6, r7}
 8006c2a:	4770      	bx	lr
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006c2c:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c2e:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c30:	4808      	ldr	r0, [pc, #32]	; (8006c54 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c32:	4f09      	ldr	r7, [pc, #36]	; (8006c58 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c34:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006c38:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c3a:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c3c:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006c3e:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006c40:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c42:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c44:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006c46:	fb91 f1f6 	sdiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006c4a:	fb90 f0f5 	sdiv	r0, r0, r5
 8006c4e:	e7df      	b.n	8006c10 <HAL_UARTEx_SetTxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 8006c50:	2002      	movs	r0, #2
}
 8006c52:	4770      	bx	lr
 8006c54:	0800ad20 	.word	0x0800ad20
 8006c58:	0800ad18 	.word	0x0800ad18

08006c5c <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006c5c:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 8006c60:	2a01      	cmp	r2, #1
 8006c62:	d033      	beq.n	8006ccc <HAL_UARTEx_SetRxFifoThreshold+0x70>
 8006c64:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8006c66:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c68:	681a      	ldr	r2, [r3, #0]
{
 8006c6a:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8006c6c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c70:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006c72:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c74:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8006c76:	f020 0001 	bic.w	r0, r0, #1
 8006c7a:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c7c:	6890      	ldr	r0, [r2, #8]
 8006c7e:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8006c82:	4301      	orrs	r1, r0
 8006c84:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006c86:	b97d      	cbnz	r5, 8006ca8 <HAL_UARTEx_SetRxFifoThreshold+0x4c>
    huart->NbRxDataToProcess = 1U;
 8006c88:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006c8a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006c8c:	2520      	movs	r5, #32
 8006c8e:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8006c92:	2100      	movs	r1, #0
 8006c94:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c98:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8006c9a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006c9c:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006ca0:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8006ca4:	bcf0      	pop	{r4, r5, r6, r7}
 8006ca6:	4770      	bx	lr
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ca8:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006caa:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cac:	4808      	ldr	r0, [pc, #32]	; (8006cd0 <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cae:	4f09      	ldr	r7, [pc, #36]	; (8006cd4 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cb0:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cb4:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cb6:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cb8:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006cba:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cbc:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cbe:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cc0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006cc2:	fb91 f1f6 	sdiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cc6:	fb90 f0f5 	sdiv	r0, r0, r5
 8006cca:	e7df      	b.n	8006c8c <HAL_UARTEx_SetRxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 8006ccc:	2002      	movs	r0, #2
}
 8006cce:	4770      	bx	lr
 8006cd0:	0800ad20 	.word	0x0800ad20
 8006cd4:	0800ad18 	.word	0x0800ad18

08006cd8 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8006cd8:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8006cda:	8803      	ldrh	r3, [r0, #0]
 8006cdc:	140c      	asrs	r4, r1, #16
{
 8006cde:	b084      	sub	sp, #16
 8006ce0:	b20d      	sxth	r5, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8006ce2:	fb04 f204 	mul.w	r2, r4, r4
{
 8006ce6:	9101      	str	r1, [sp, #4]
    square_limit = maxModule * maxModule;
 8006ce8:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8006cec:	fb05 2105 	mla	r1, r5, r5, r2

    if (square_sum > square_limit)
 8006cf0:	428b      	cmp	r3, r1
 8006cf2:	da10      	bge.n	8006d16 <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8006cf4:	8846      	ldrh	r6, [r0, #2]
 8006cf6:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8006cfa:	4282      	cmp	r2, r0
 8006cfc:	dd14      	ble.n	8006d28 <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8006cfe:	2c00      	cmp	r4, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8006d00:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8006d04:	bfb8      	it	lt
 8006d06:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8006d08:	f7fb faae 	bl	8002268 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8006d0c:	2d00      	cmp	r5, #0
 8006d0e:	da00      	bge.n	8006d12 <Circle_Limitation+0x3a>
        {
          new_q = - new_q;
 8006d10:	4240      	negs	r0, r0
        else
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
 8006d12:	b205      	sxth	r5, r0
      local_vqd.d = (int16_t)new_d;
 8006d14:	b234      	sxth	r4, r6
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8006d16:	b2ad      	uxth	r5, r5
 8006d18:	2000      	movs	r0, #0
 8006d1a:	b2a4      	uxth	r4, r4
 8006d1c:	f365 000f 	bfi	r0, r5, #0, #16
 8006d20:	f364 401f 	bfi	r0, r4, #16, #16
}
 8006d24:	b004      	add	sp, #16
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8006d28:	1a98      	subs	r0, r3, r2
 8006d2a:	f7fb fa9d 	bl	8002268 <MCM_Sqrt>
        if (Vqd.q < 0)
 8006d2e:	2d00      	cmp	r5, #0
 8006d30:	db03      	blt.n	8006d3a <Circle_Limitation+0x62>
        new_d = Vqd.d;
 8006d32:	4626      	mov	r6, r4
      local_vqd.q = (int16_t)new_q;
 8006d34:	b205      	sxth	r5, r0
      local_vqd.d = (int16_t)new_d;
 8006d36:	b234      	sxth	r4, r6
 8006d38:	e7ed      	b.n	8006d16 <Circle_Limitation+0x3e>
          new_q = -new_q;
 8006d3a:	4240      	negs	r0, r0
        new_d = Vqd.d;
 8006d3c:	4626      	mov	r6, r4
 8006d3e:	e7e8      	b.n	8006d12 <Circle_Limitation+0x3a>

08006d40 <EAC_Init>:
  * @param  pVSS: Pointer to Virtual Speed Sensor structure used by the EAC.
  * @param  pENC: Pointer to ENCoder structure used by the EAC.
  */
__weak void EAC_Init(EncAlign_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, VirtualSpeedSensor_Handle_t *pVSS,
                     ENCODER_Handle_t *pENC)
{
 8006d40:	b410      	push	{r4}
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
    pHandle->EncAligned = false;
 8006d42:	2400      	movs	r4, #0
 8006d44:	7384      	strb	r4, [r0, #14]
    pHandle->EncRestart = false;
 8006d46:	73c4      	strb	r4, [r0, #15]
    pHandle->pVSS = pVSS;
 8006d48:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pENC = pENC;
 8006d4c:	6083      	str	r3, [r0, #8]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8006d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d52:	4770      	bx	lr

08006d54 <EAC_StartAlignment>:
  * It configures the VSS (Virtual Speed Sensor) with the required angle and sets the
  * STC (Speed and Torque Controller) to execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak void EAC_StartAlignment(EncAlign_Handle_t *pHandle)
{
 8006d54:	b510      	push	{r4, lr}
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero */
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8006d56:	2200      	movs	r2, #0
{
 8006d58:	4604      	mov	r4, r0
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8006d5a:	4611      	mov	r1, r2
 8006d5c:	6840      	ldr	r0, [r0, #4]
 8006d5e:	f001 fe2d 	bl	80089bc <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle */
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 8006d62:	6863      	ldr	r3, [r4, #4]
 8006d64:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006d68:	785a      	ldrb	r2, [r3, #1]
    pHandle->hElAngleAccu = hMecAngle;
 8006d6a:	8619      	strh	r1, [r3, #48]	; 0x30
    pHandle->_Super.hElAngle = hMecAngle;
 8006d6c:	8099      	strh	r1, [r3, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006d6e:	fb91 f2f2 	sdiv	r2, r1, r2

    /* Set pSTC in MCM_TORQUE_MODE */
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8006d72:	6820      	ldr	r0, [r4, #0]
 8006d74:	80da      	strh	r2, [r3, #6]
 8006d76:	2104      	movs	r1, #4
 8006d78:	f001 fb50 	bl	800841c <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	4611      	mov	r1, r2
 8006d80:	6820      	ldr	r0, [r4, #0]
 8006d82:	f001 fb4f 	bl	8008424 <STC_ExecRamp>

    /* Execute the torque ramp */
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 8006d86:	8ae2      	ldrh	r2, [r4, #22]
 8006d88:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8006d8c:	6820      	ldr	r0, [r4, #0]
 8006d8e:	f001 fb49 	bl	8008424 <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase */
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8006d92:	8ae1      	ldrh	r1, [r4, #22]
 8006d94:	8a23      	ldrh	r3, [r4, #16]
    wAux /= 1000U;
 8006d96:	4a04      	ldr	r2, [pc, #16]	; (8006da8 <EAC_StartAlignment+0x54>)
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8006d98:	fb03 f301 	mul.w	r3, r3, r1
    wAux /= 1000U;
 8006d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8006da0:	099b      	lsrs	r3, r3, #6
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 8006da2:	3301      	adds	r3, #1
 8006da4:	81a3      	strh	r3, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8006da6:	bd10      	pop	{r4, pc}
 8006da8:	10624dd3 	.word	0x10624dd3

08006dac <EAC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 8006dac:	8983      	ldrh	r3, [r0, #12]
 8006dae:	b12b      	cbz	r3, 8006dbc <EAC_Exec+0x10>
    {
      pHandle->hRemainingTicks--;
 8006db0:	3b01      	subs	r3, #1
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	8183      	strh	r3, [r0, #12]

      if (0U == pHandle->hRemainingTicks)
 8006db6:	b11b      	cbz	r3, 8006dc0 <EAC_Exec+0x14>
        pHandle->EncAligned = true;
        retVal = true;
      }
      else
      {
        retVal = false;
 8006db8:	2000      	movs	r0, #0
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif

  return (retVal);
}
 8006dba:	4770      	bx	lr
  bool retVal = true;
 8006dbc:	2001      	movs	r0, #1
 8006dbe:	4770      	bx	lr
{
 8006dc0:	b510      	push	{r4, lr}
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 8006dc2:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 8006dc6:	7e03      	ldrb	r3, [r0, #24]
 8006dc8:	fb91 f1f3 	sdiv	r1, r1, r3
 8006dcc:	4604      	mov	r4, r0
 8006dce:	6880      	ldr	r0, [r0, #8]
 8006dd0:	f000 f946 	bl	8007060 <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 8006dd4:	2001      	movs	r0, #1
 8006dd6:	73a0      	strb	r0, [r4, #14]
}
 8006dd8:	bd10      	pop	{r4, pc}
 8006dda:	bf00      	nop

08006ddc <ENC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8006ddc:	6a03      	ldr	r3, [r0, #32]
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8006dde:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
{
 8006de2:	b470      	push	{r4, r5, r6}
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8006de4:	681d      	ldr	r5, [r3, #0]
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8006de6:	f8b0 606e 	ldrh.w	r6, [r0, #110]	; 0x6e
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8006dea:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8006dee:	0092      	lsls	r2, r2, #2
  WRITE_REG(TIMx->CNT, Counter);
 8006df0:	2100      	movs	r1, #0
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8006df2:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8006df6:	601d      	str	r5, [r3, #0]
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8006df8:	f04f 34ff 	mov.w	r4, #4294967295
  WRITE_REG(TIMx->CNT, Counter);
 8006dfc:	6259      	str	r1, [r3, #36]	; 0x24
 8006dfe:	fbb4 f4f6 	udiv	r4, r4, r6
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8006e02:	6242      	str	r2, [r0, #36]	; 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8006e04:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8006e06:	699c      	ldr	r4, [r3, #24]
 8006e08:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
 8006e0c:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8006e10:	4322      	orrs	r2, r4
 8006e12:	619a      	str	r2, [r3, #24]
 8006e14:	699a      	ldr	r2, [r3, #24]
 8006e16:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
 8006e1a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8006e1e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006e22:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8006e26:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006e28:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006e2a:	68da      	ldr	r2, [r3, #12]
 8006e2c:	f042 0201 	orr.w	r2, r2, #1
 8006e30:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	f042 0201 	orr.w	r2, r2, #1
 8006e38:	601a      	str	r2, [r3, #0]

    /* Enable the counting timer */
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;
 8006e3a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74

    for (index = 0U; index < bufferSize; index++)
 8006e3e:	b13a      	cbz	r2, 8006e50 <ENC_Init+0x74>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8006e40:	3a01      	subs	r2, #1
 8006e42:	b2d2      	uxtb	r2, r2
 8006e44:	3201      	adds	r2, #1
 8006e46:	0092      	lsls	r2, r2, #2
 8006e48:	3028      	adds	r0, #40	; 0x28
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8006e4a:	bc70      	pop	{r4, r5, r6}
 8006e4c:	f001 be25 	b.w	8008a9a <memset>
 8006e50:	bc70      	pop	{r4, r5, r6}
 8006e52:	4770      	bx	lr

08006e54 <ENC_Clear>:
  *         This function must be called before starting the motor to initialize
  *         the speed measurement process.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Clear(ENCODER_Handle_t *pHandle)
{
 8006e54:	b510      	push	{r4, lr}
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8006e56:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
{
 8006e5a:	4604      	mov	r4, r0
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8006e5c:	b13a      	cbz	r2, 8006e6e <ENC_Clear+0x1a>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8006e5e:	3a01      	subs	r2, #1
 8006e60:	b2d2      	uxtb	r2, r2
 8006e62:	3201      	adds	r2, #1
 8006e64:	0092      	lsls	r2, r2, #2
 8006e66:	2100      	movs	r1, #0
 8006e68:	3028      	adds	r0, #40	; 0x28
 8006e6a:	f001 fe16 	bl	8008a9a <memset>
    }
    pHandle->SensorIsReliable = true;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8006e74:	bd10      	pop	{r4, pc}
 8006e76:	bf00      	nop

08006e78 <ENC_CalcAngle>:
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8006e78:	6a01      	ldr	r1, [r0, #32]
 8006e7a:	6e82      	ldr	r2, [r0, #104]	; 0x68
{
 8006e7c:	b430      	push	{r4, r5}
  return (uint32_t)(READ_REG(TIMx->CNT));
 8006e7e:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /* Computes and stores the rotor mechanical angle */
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 8006e80:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8006e84:	b2ad      	uxth	r5, r5
{
 8006e86:	4603      	mov	r3, r0
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8006e88:	fb02 f205 	mul.w	r2, r2, r5

    pHandle->_Super.hMecAngle = mecAngle;

    /* Computes and stores the rotor electrical angle */
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006e8c:	7840      	ldrb	r0, [r0, #1]

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8006e8e:	689c      	ldr	r4, [r3, #8]
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8006e90:	1412      	asrs	r2, r2, #16
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006e92:	b295      	uxth	r5, r2
    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8006e94:	1a69      	subs	r1, r5, r1
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006e96:	fb10 f005 	smulbb	r0, r0, r5
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8006e9a:	fa04 f181 	sxtah	r1, r4, r1
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006e9e:	b200      	sxth	r0, r0
    mecAngle = (int16_t)wtemp1;
 8006ea0:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8006ea2:	6099      	str	r1, [r3, #8]
    pHandle->_Super.hElAngle = elAngle;
 8006ea4:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 8006ea6:	bc30      	pop	{r4, r5}
 8006ea8:	4770      	bx	lr
 8006eaa:	bf00      	nop

08006eac <ENC_CalcAvrgMecSpeedUnit>:
  * @param  pMecSpeedUnit pointer used to return the rotor average mechanical speed
  *         expressed in the unit defined by #SPEED_UNIT
  * @retval true = sensor information is reliable. false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit(ENCODER_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 8006eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int32_t wtemp2;
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8006eb0:	6a04      	ldr	r4, [r0, #32]
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8006eb2:	f890 7074 	ldrb.w	r7, [r0, #116]	; 0x74
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006eb6:	68e3      	ldr	r3, [r4, #12]
 8006eb8:	f023 0301 	bic.w	r3, r3, #1
 8006ebc:	60e3      	str	r3, [r4, #12]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8006ebe:	6a62      	ldr	r2, [r4, #36]	; 0x24
#ifdef TIM_CNT_UIFCPY
    /* disable Interrupt generation */
    LL_TIM_DisableIT_UPDATE(TIMx);
#endif
    CntCapture = LL_TIM_GetCounter(TIMx);
    OverflowCntSample = pHandle->TimerOverflowNb;
 8006ec0:	f8b0 5070 	ldrh.w	r5, [r0, #112]	; 0x70
    pHandle->TimerOverflowNb = 0;
    directionSample = LL_TIM_GetDirection(TIMx);
#ifdef TIM_CNT_UIFCPY
    OFbit = __LL_TIM_GETFLAG_UIFCPY(CntCapture);
    if (0U == OFbit)
 8006ec4:	ea5f 7cd2 	movs.w	ip, r2, lsr #31
    pHandle->TimerOverflowNb = 0;
 8006ec8:	f04f 0600 	mov.w	r6, #0
 8006ecc:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006ed0:	bf18      	it	ne
 8006ed2:	f06f 0601 	mvnne.w	r6, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8006ed6:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006ed8:	bf18      	it	ne
 8006eda:	6126      	strne	r6, [r4, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006edc:	68e6      	ldr	r6, [r4, #12]
    OverflowCntSample = pHandle->TimerOverflowNb;
 8006ede:	b2ad      	uxth	r5, r5
 8006ee0:	f046 0601 	orr.w	r6, r6, #1

    /* If UIFCPY is not present, OverflowCntSample can not be used safely for
    speed computation, but we still use it to check that we do not exceed one overflow
    (sample frequency not less than mechanical motor speed */

    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 8006ee4:	4465      	add	r5, ip
 8006ee6:	60e6      	str	r6, [r4, #12]
 8006ee8:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8006eec:	f8b0 4072 	ldrh.w	r4, [r0, #114]	; 0x72
 8006ef0:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	; 0x6e
 8006ef4:	bf98      	it	ls
 8006ef6:	f890 607d 	ldrbls.w	r6, [r0, #125]	; 0x7d
    CLEAR_BIT(CntCapture, TIM_CNT_UIFCPY);
 8006efa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    {
      pHandle->TimerOverflowError = true;
 8006efe:	bf88      	it	hi
 8006f00:	2601      	movhi	r6, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8006f02:	f003 0310 	and.w	r3, r3, #16
 8006f06:	bf88      	it	hi
 8006f08:	f880 607d 	strbhi.w	r6, [r0, #125]	; 0x7d
 8006f0c:	1b14      	subs	r4, r2, r4
 8006f0e:	fb0c f505 	mul.w	r5, ip, r5
    {
      /* Nothing to do */
    }

    /* Calculation of delta angle */
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 8093 	beq.w	800703e <ENC_CalcAvrgMecSpeedUnit+0x192>
      /* Encoder timer down-counting */
      /* If UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF */
#ifndef TIM_CNT_UIFCPY
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
#endif
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8006f18:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8006f1c:	330a      	adds	r3, #10
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8006f1e:	1b64      	subs	r4, r4, r5
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8006f20:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
    }


    /* Computes & returns average mechanical speed */
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f24:	2f00      	cmp	r7, #0
 8006f26:	f000 8093 	beq.w	8007050 <ENC_CalcAvrgMecSpeedUnit+0x1a4>
 8006f2a:	2f01      	cmp	r7, #1
    {
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f2e:	d939      	bls.n	8006fa4 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f30:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f32:	2f02      	cmp	r7, #2
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f34:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f36:	d035      	beq.n	8006fa4 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f38:	6b04      	ldr	r4, [r0, #48]	; 0x30
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f3a:	2f03      	cmp	r7, #3
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f3c:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f3e:	d031      	beq.n	8006fa4 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f40:	6b44      	ldr	r4, [r0, #52]	; 0x34
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f42:	2f04      	cmp	r7, #4
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f44:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f46:	d02d      	beq.n	8006fa4 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f48:	6b84      	ldr	r4, [r0, #56]	; 0x38
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f4a:	2f05      	cmp	r7, #5
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f4c:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f4e:	d029      	beq.n	8006fa4 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f50:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f52:	2f06      	cmp	r7, #6
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f54:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f56:	d025      	beq.n	8006fa4 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f58:	6c04      	ldr	r4, [r0, #64]	; 0x40
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f5a:	2f07      	cmp	r7, #7
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f5c:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f5e:	d021      	beq.n	8006fa4 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f60:	6c44      	ldr	r4, [r0, #68]	; 0x44
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f62:	2f08      	cmp	r7, #8
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f64:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f66:	d01d      	beq.n	8006fa4 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f68:	6c84      	ldr	r4, [r0, #72]	; 0x48
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f6a:	2f09      	cmp	r7, #9
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f6c:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f6e:	d019      	beq.n	8006fa4 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f70:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f72:	2f0a      	cmp	r7, #10
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f74:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f76:	d015      	beq.n	8006fa4 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f78:	6d04      	ldr	r4, [r0, #80]	; 0x50
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f7a:	2f0b      	cmp	r7, #11
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f7c:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f7e:	d011      	beq.n	8006fa4 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f80:	6d44      	ldr	r4, [r0, #84]	; 0x54
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f82:	2f0c      	cmp	r7, #12
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f84:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f86:	d00d      	beq.n	8006fa4 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f88:	6d84      	ldr	r4, [r0, #88]	; 0x58
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f8a:	2f0d      	cmp	r7, #13
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f8c:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f8e:	d009      	beq.n	8006fa4 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f90:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f92:	2f0e      	cmp	r7, #14
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f94:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f96:	d005      	beq.n	8006fa4 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f98:	6e04      	ldr	r4, [r0, #96]	; 0x60
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006f9a:	2f0f      	cmp	r7, #15
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006f9c:	4423      	add	r3, r4
 8006f9e:	bf1c      	itt	ne
 8006fa0:	6e44      	ldrne	r4, [r0, #100]	; 0x64
 8006fa2:	191b      	addne	r3, r3, r4
    }
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 8006fa4:	6a44      	ldr	r4, [r0, #36]	; 0x24
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 8006fa6:	fb0c f707 	mul.w	r7, ip, r7
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 8006faa:	fb04 f303 	mul.w	r3, r4, r3
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 8006fae:	b10f      	cbz	r7, 8006fb4 <ENC_CalcAvrgMecSpeedUnit+0x108>
 8006fb0:	fb93 f3f7 	sdiv	r3, r3, r7
 8006fb4:	fa0f fc83 	sxth.w	ip, r3
 8006fb8:	b29b      	uxth	r3, r3

    *pMecSpeedUnit = (int16_t)wtemp1;
 8006fba:	f8a1 c000 	strh.w	ip, [r1]

    /* Stores average mechanical speed */
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;

    /* Computes & stores the instantaneous electrical speed [dpp], var wtemp1 */
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006fbe:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;

    /* Last captured value update */
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
    /*Buffer index update*/
    pHandle->DeltaCapturesIndex++;
 8006fc2:	f890 507c 	ldrb.w	r5, [r0, #124]	; 0x7c
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006fc6:	f8b0 e06c 	ldrh.w	lr, [r0, #108]	; 0x6c
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8006fca:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006fce:	340a      	adds	r4, #10
    pHandle->DeltaCapturesIndex++;
 8006fd0:	3501      	adds	r5, #1
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006fd2:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 8006fd6:	f8a0 c00c 	strh.w	ip, [r0, #12]
    pHandle->DeltaCapturesIndex++;
 8006fda:	b2ed      	uxtb	r5, r5
 8006fdc:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 8006fe0:	7845      	ldrb	r5, [r0, #1]

    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8006fe2:	f890 c07c 	ldrb.w	ip, [r0, #124]	; 0x7c
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8006fe6:	69c4      	ldr	r4, [r0, #28]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006fe8:	fb07 f70e 	mul.w	r7, r7, lr
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8006fec:	eba3 0308 	sub.w	r3, r3, r8
 8006ff0:	8243      	strh	r3, [r0, #18]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8006ff2:	f64f 7efe 	movw	lr, #65534	; 0xfffe
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006ff6:	fb05 f307 	mul.w	r3, r5, r7
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8006ffa:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8006ffe:	4572      	cmp	r2, lr
 8007000:	bf88      	it	hi
 8007002:	462a      	movhi	r2, r5
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8007004:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 8007008:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
 800700c:	fb93 f3f7 	sdiv	r3, r3, r7
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8007010:	4565      	cmp	r5, ip
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8007012:	fb04 f403 	mul.w	r4, r4, r3
    {
      pHandle->DeltaCapturesIndex = 0U;
 8007016:	bf98      	it	ls
 8007018:	2300      	movls	r3, #0
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 800701a:	f8a0 2072 	strh.w	r2, [r0, #114]	; 0x72
      pHandle->DeltaCapturesIndex = 0U;
 800701e:	bf98      	it	ls
 8007020:	f880 307c 	strbls.w	r3, [r0, #124]	; 0x7c
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8007024:	8b42      	ldrh	r2, [r0, #26]
 8007026:	fb94 f4f2 	sdiv	r4, r4, r2
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 800702a:	81c4      	strh	r4, [r0, #14]
    {
      /* Nothing to do */
    }

    /* Checks the reliability status, then stores and returns it */
    if (pHandle->TimerOverflowError)
 800702c:	b19e      	cbz	r6, 8007056 <ENC_CalcAvrgMecSpeedUnit+0x1aa>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800702e:	78c2      	ldrb	r2, [r0, #3]
 8007030:	7002      	strb	r2, [r0, #0]
      pHandle->SensorIsReliable = false;
 8007032:	2300      	movs	r3, #0
 8007034:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 8007038:	4618      	mov	r0, r3
 800703a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800703e:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8007042:	330a      	adds	r3, #10
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8007044:	442c      	add	r4, r5
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8007046:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800704a:	2f00      	cmp	r7, #0
 800704c:	f47f af6d 	bne.w	8006f2a <ENC_CalcAvrgMecSpeedUnit+0x7e>
 8007050:	463b      	mov	r3, r7
 8007052:	46bc      	mov	ip, r7
 8007054:	e7b1      	b.n	8006fba <ENC_CalcAvrgMecSpeedUnit+0x10e>
}
 8007056:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 800705a:	f001 b991 	b.w	8008380 <SPD_IsMecSpeedReliable>
 800705e:	bf00      	nop

08007060 <ENC_SetMecAngle>:
    uint16_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8007060:	7842      	ldrb	r2, [r0, #1]
    pHandle->_Super.hMecAngle = localhMecAngle;
 8007062:	80c1      	strh	r1, [r0, #6]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8007064:	b28b      	uxth	r3, r1
 8007066:	fb12 f203 	smulbb	r2, r2, r3
    if (localhMecAngle < 0)
 800706a:	2900      	cmp	r1, #0
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 800706c:	8082      	strh	r2, [r0, #4]
 800706e:	bfb8      	it	lt
 8007070:	f103 33ff 	addlt.w	r3, r3, #4294967295
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8007074:	6a02      	ldr	r2, [r0, #32]
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8007076:	f8b0 006e 	ldrh.w	r0, [r0, #110]	; 0x6e
 800707a:	4905      	ldr	r1, [pc, #20]	; (8007090 <ENC_SetMecAngle+0x30>)
 800707c:	bfb8      	it	lt
 800707e:	b29b      	uxthlt	r3, r3
 8007080:	fb03 f300 	mul.w	r3, r3, r0
 8007084:	fba1 1303 	umull	r1, r3, r1, r3
 8007088:	0bdb      	lsrs	r3, r3, #15

    TIMx->CNT = (uint16_t)hAngleCounts;
 800708a:	6253      	str	r3, [r2, #36]	; 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	80008001 	.word	0x80008001

08007094 <ENC_IRQHandler>:
/**
  * @brief  TIMER ENCODER Overflow interrupt counter update
  * @param  pHandleVoid: handler of the current instance of the encoder component
  */
__weak void *ENC_IRQHandler(void *pHandleVoid)
{
 8007094:	4602      	mov	r2, r0
  /* Updates the number of overflows occurred */
  /* The handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;

  return (MC_NULL);
}
 8007096:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1U;
 8007098:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 800709c:	3301      	adds	r3, #1
 800709e:	b29b      	uxth	r3, r3
 80070a0:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 80070a4:	4770      	bx	lr
 80070a6:	bf00      	nop

080070a8 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 )
 80070a8:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 80070ac:	8843      	ldrh	r3, [r0, #2]
 80070ae:	8982      	ldrh	r2, [r0, #12]
 80070b0:	2900      	cmp	r1, #0
 80070b2:	dd08      	ble.n	80070c6 <NTC_SetFaultState+0x1e>
    {
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d804      	bhi.n	80070c2 <NTC_SetFaultState+0x1a>
      {
        hFault = MC_OVER_TEMP;
      }
      else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 80070b8:	89c2      	ldrh	r2, [r0, #14]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d808      	bhi.n	80070d0 <NTC_SetFaultState+0x28>
      {
        hFault = MC_NO_ERROR;
      }
      else
      {
        hFault = pHandle->hFaultState;
 80070be:	8900      	ldrh	r0, [r0, #8]
 80070c0:	4770      	bx	lr
        hFault = MC_OVER_TEMP;
 80070c2:	2008      	movs	r0, #8
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (hFault);
}
 80070c4:	4770      	bx	lr
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d3fb      	bcc.n	80070c2 <NTC_SetFaultState+0x1a>
      else if (pHandle->hAvTemp_d > pHandle->hOverTempDeactThreshold)
 80070ca:	89c2      	ldrh	r2, [r0, #14]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d2f6      	bcs.n	80070be <NTC_SetFaultState+0x16>
        hFault = MC_NO_ERROR;
 80070d0:	2000      	movs	r0, #0
 80070d2:	4770      	bx	lr

080070d4 <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 80070d4:	7803      	ldrb	r3, [r0, #0]
 80070d6:	b92b      	cbnz	r3, 80070e4 <NTC_Init+0x10>
    /* nothing to do */
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 ) 
 80070d8:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
 80070dc:	2a00      	cmp	r2, #0
 80070de:	dd06      	ble.n	80070ee <NTC_Init+0x1a>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80070e0:	8043      	strh	r3, [r0, #2]
}
 80070e2:	4770      	bx	lr
      pHandle->hFaultState = MC_NO_ERROR;
 80070e4:	2200      	movs	r2, #0
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80070e6:	8883      	ldrh	r3, [r0, #4]
      pHandle->hFaultState = MC_NO_ERROR;
 80070e8:	8102      	strh	r2, [r0, #8]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80070ea:	8043      	strh	r3, [r0, #2]
}
 80070ec:	4770      	bx	lr
    {
      pHandle->hAvTemp_d = 0U;
    }
    else
    {
      pHandle->hAvTemp_d = 0xFFFFU;
 80070ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80070f2:	8043      	strh	r3, [r0, #2]
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop

080070f8 <NTC_CalcAvTemp>:
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 80070f8:	7803      	ldrb	r3, [r0, #0]
 80070fa:	b98b      	cbnz	r3, 8007120 <NTC_CalcAvTemp+0x28>
    {
      uint16_t hAux;
      hAux = rawValue;

      if (0xFFFFU == hAux)
 80070fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007100:	4299      	cmp	r1, r3
{
 8007102:	b510      	push	{r4, lr}
      if (0xFFFFU == hAux)
 8007104:	d007      	beq.n	8007116 <NTC_CalcAvTemp+0x1e>
        /* Nothing to do */
      }
      else
      {
        uint32_t wtemp;
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8007106:	8942      	ldrh	r2, [r0, #10]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8007108:	8843      	ldrh	r3, [r0, #2]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 800710a:	1e54      	subs	r4, r2, #1
        wtemp += hAux;
 800710c:	fb04 1103 	mla	r1, r4, r3, r1
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8007110:	fbb1 f1f2 	udiv	r1, r1, r2

        pHandle->hAvTemp_d = (uint16_t)wtemp;
 8007114:	8041      	strh	r1, [r0, #2]
 8007116:	4604      	mov	r4, r0
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8007118:	f7ff ffc6 	bl	80070a8 <NTC_SetFaultState>
 800711c:	8120      	strh	r0, [r4, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 800711e:	bd10      	pop	{r4, pc}
      pHandle->hFaultState = MC_NO_ERROR;
 8007120:	2300      	movs	r3, #0
 8007122:	8103      	strh	r3, [r0, #8]
 8007124:	4618      	mov	r0, r3
}
 8007126:	4770      	bx	lr

08007128 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8007128:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800712a:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 800712c:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800712e:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8007130:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8007132:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8007134:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8007136:	4770      	bx	lr

08007138 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8007138:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 800713a:	4770      	bx	lr

0800713c <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 800713c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8007140:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
{
 8007144:	b4f0      	push	{r4, r5, r6, r7}
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8007146:	fb01 f202 	mul.w	r2, r1, r2
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 800714a:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800714e:	f9b0 6016 	ldrsh.w	r6, [r0, #22]
    if (0 == pHandle->hKiGain)
 8007152:	b18b      	cbz	r3, 8007178 <PI_Controller+0x3c>
 8007154:	e9d0 7402 	ldrd	r7, r4, [r0, #8]
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8007158:	fb01 f103 	mul.w	r1, r1, r3
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;

      if (wIntegral_sum_temp < 0)
 800715c:	187b      	adds	r3, r7, r1
 800715e:	d424      	bmi.n	80071aa <PI_Controller+0x6e>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 8007160:	2f00      	cmp	r7, #0
 8007162:	da04      	bge.n	800716e <PI_Controller+0x32>
        {
          if (wIntegral_Term < 0)
          {
            wIntegral_sum_temp = -INT32_MAX;
 8007164:	4f16      	ldr	r7, [pc, #88]	; (80071c0 <PI_Controller+0x84>)
 8007166:	ea33 0321 	bics.w	r3, r3, r1, asr #32
 800716a:	bf28      	it	cs
 800716c:	463b      	movcs	r3, r7
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 800716e:	42a3      	cmp	r3, r4
 8007170:	dc03      	bgt.n	800717a <PI_Controller+0x3e>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8007172:	6904      	ldr	r4, [r0, #16]
 8007174:	429c      	cmp	r4, r3
 8007176:	dc00      	bgt.n	800717a <PI_Controller+0x3e>
 8007178:	461c      	mov	r4, r3
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 800717a:	8b81      	ldrh	r1, [r0, #28]
 800717c:	8bc3      	ldrh	r3, [r0, #30]
 800717e:	410a      	asrs	r2, r1
 8007180:	fa44 f303 	asr.w	r3, r4, r3
 8007184:	4413      	add	r3, r2
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8007186:	429d      	cmp	r5, r3
 8007188:	db08      	blt.n	800719c <PI_Controller+0x60>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
      wOutput_32 = hUpperOutputLimit;
    }
    else if (wOutput_32 < hLowerOutputLimit)
 800718a:	429e      	cmp	r6, r3
 800718c:	dd02      	ble.n	8007194 <PI_Controller+0x58>
    {
      wDischarge = hLowerOutputLimit - wOutput_32;
 800718e:	1af3      	subs	r3, r6, r3
 8007190:	441c      	add	r4, r3
 8007192:	4633      	mov	r3, r6
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8007194:	6084      	str	r4, [r0, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
 8007196:	b218      	sxth	r0, r3
}
 8007198:	bcf0      	pop	{r4, r5, r6, r7}
 800719a:	4770      	bx	lr
      wDischarge = hUpperOutputLimit - wOutput_32;
 800719c:	1aeb      	subs	r3, r5, r3
 800719e:	441c      	add	r4, r3
 80071a0:	462b      	mov	r3, r5
    pHandle->wIntegralTerm += wDischarge;
 80071a2:	6084      	str	r4, [r0, #8]
  return (returnValue);
 80071a4:	b218      	sxth	r0, r3
}
 80071a6:	bcf0      	pop	{r4, r5, r6, r7}
 80071a8:	4770      	bx	lr
        if (pHandle->wIntegralTerm > 0)
 80071aa:	2f00      	cmp	r7, #0
 80071ac:	dddf      	ble.n	800716e <PI_Controller+0x32>
          if (wIntegral_Term > 0)
 80071ae:	2900      	cmp	r1, #0
 80071b0:	dddd      	ble.n	800716e <PI_Controller+0x32>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80071b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80071b6:	429c      	cmp	r4, r3
 80071b8:	d1df      	bne.n	800717a <PI_Controller+0x3e>
            wIntegral_sum_temp = INT32_MAX;
 80071ba:	4623      	mov	r3, r4
 80071bc:	e7dc      	b.n	8007178 <PI_Controller+0x3c>
 80071be:	bf00      	nop
 80071c0:	80000001 	.word	0x80000001

080071c4 <PID_Controller>:
#endif
    int32_t wDifferential_Term;
    int32_t wDeltaError;
    int32_t wTemp_output;

    if (0 == pHandle->hKdGain) /* derivative terms not used */
 80071c4:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
{
 80071c8:	b570      	push	{r4, r5, r6, lr}
    if (0 == pHandle->hKdGain) /* derivative terms not used */
 80071ca:	b1b3      	cbz	r3, 80071fa <PID_Controller+0x36>
    {
      wTemp_output = PI_Controller(pHandle, wProcessVarError);
    }
    else
    {
      wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 80071cc:	6a84      	ldr	r4, [r0, #40]	; 0x28
      /* WARNING: the below instruction is not MISRA compliant, user should verify
         that Cortex-M3 assembly instruction ASR (arithmetic shift right)
         is used by the compiler to perform the shifts (instead of LSR
         logical shift right)*/
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 80071ce:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 80071d0:	4605      	mov	r5, r0
      wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 80071d2:	1b0c      	subs	r4, r1, r4
      wDifferential_Term = pHandle->hKdGain * wDeltaError;
 80071d4:	fb03 f304 	mul.w	r3, r3, r4
#else
      wDifferential_Term /= ((int32_t)pHandle->hKdDivisor);
#endif

      pHandle->wPrevProcessVarError = wProcessVarError;
 80071d8:	62a9      	str	r1, [r5, #40]	; 0x28
      wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 80071da:	fa43 f606 	asr.w	r6, r3, r6

      wTemp_output = PI_Controller(pHandle, wProcessVarError) + wDifferential_Term;
 80071de:	f7ff ffad 	bl	800713c <PI_Controller>

      if (wTemp_output > pHandle->hUpperOutputLimit)
 80071e2:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
      wTemp_output = PI_Controller(pHandle, wProcessVarError) + wDifferential_Term;
 80071e6:	4430      	add	r0, r6
      if (wTemp_output > pHandle->hUpperOutputLimit)
 80071e8:	4283      	cmp	r3, r0
 80071ea:	db04      	blt.n	80071f6 <PID_Controller+0x32>
      {
        wTemp_output = pHandle->hUpperOutputLimit;
      }
      else if (wTemp_output < pHandle->hLowerOutputLimit)
 80071ec:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 80071f0:	4283      	cmp	r3, r0
 80071f2:	bfb8      	it	lt
 80071f4:	4603      	movlt	r3, r0
    returnValue = (int16_t) wTemp_output;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 80071f6:	b218      	sxth	r0, r3
 80071f8:	bd70      	pop	{r4, r5, r6, pc}
      wTemp_output = PI_Controller(pHandle, wProcessVarError);
 80071fa:	f7ff ff9f 	bl	800713c <PI_Controller>
 80071fe:	4603      	mov	r3, r0
}
 8007200:	b218      	sxth	r0, r3
 8007202:	bd70      	pop	{r4, r5, r6, pc}

08007204 <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 8007204:	b430      	push	{r4, r5}
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8007206:	6884      	ldr	r4, [r0, #8]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
    wAux /= 65536;

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8007208:	f9b0 1000 	ldrsh.w	r1, [r0]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 800720c:	8b25      	ldrh	r5, [r4, #24]
 800720e:	89e3      	ldrh	r3, [r4, #14]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8007210:	89a2      	ldrh	r2, [r4, #12]
 8007212:	8ae4      	ldrh	r4, [r4, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8007214:	fb13 f305 	smulbb	r3, r3, r5
    wAux /= 65536;
 8007218:	fb12 3304 	smlabb	r3, r2, r4, r3
 800721c:	2b00      	cmp	r3, #0
 800721e:	bfbc      	itt	lt
 8007220:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8007224:	33ff      	addlt	r3, #255	; 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8007226:	ebd1 4323 	rsbs	r3, r1, r3, asr #16
 800722a:	bf48      	it	mi
 800722c:	330f      	addmi	r3, #15
 800722e:	eb01 1323 	add.w	r3, r1, r3, asr #4
 8007232:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8007234:	bc30      	pop	{r4, r5}
 8007236:	4770      	bx	lr

08007238 <R3_1_GetPhaseCurrents>:
  * @brief  Computes and stores in the handler the latest converted motor phase currents in ab_t format.
  *
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8007238:	2900      	cmp	r1, #0
 800723a:	d041      	beq.n	80072c0 <R3_1_GetPhaseCurrents+0x88>

    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800723c:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8007240:	e9d2 3200 	ldrd	r3, r2, [r2]
{
 8007244:	b4f0      	push	{r4, r5, r6, r7}
    ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
    ADCDataReg1 = ADCx->JDR1;
 8007246:	f8d3 5080 	ldr.w	r5, [r3, #128]	; 0x80
    ADCDataReg2 = ADCx->JDR2;
 800724a:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800724e:	6853      	ldr	r3, [r2, #4]
    Sector = (uint8_t)pHandle->_Super.Sector;
 8007250:	f890 407a 	ldrb.w	r4, [r0, #122]	; 0x7a
 8007254:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725c:	2c05      	cmp	r4, #5
 800725e:	6053      	str	r3, [r2, #4]
 8007260:	d910      	bls.n	8007284 <R3_1_GetPhaseCurrents+0x4c>
 8007262:	f9b1 6000 	ldrsh.w	r6, [r1]
 8007266:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 800726a:	b2b3      	uxth	r3, r6
 800726c:	fa1f f28c 	uxth.w	r2, ip
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007270:	4413      	add	r3, r2
 8007272:	425b      	negs	r3, r3
    pHandle->_Super.Ia = Iab->a;
 8007274:	f8a0 6062 	strh.w	r6, [r0, #98]	; 0x62
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007278:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    pHandle->_Super.Ib = Iab->b;
 800727c:	f8a0 c064 	strh.w	ip, [r0, #100]	; 0x64
  }
}
 8007280:	bcf0      	pop	{r4, r5, r6, r7}
 8007282:	4770      	bx	lr
 8007284:	2301      	movs	r3, #1
 8007286:	fa03 f404 	lsl.w	r4, r3, r4
 800728a:	f014 0f21 	tst.w	r4, #33	; 0x21
 800728e:	d018      	beq.n	80072c2 <R3_1_GetPhaseCurrents+0x8a>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8007290:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
        if (Aux < -INT16_MAX)
 8007294:	4b4e      	ldr	r3, [pc, #312]	; (80073d0 <R3_1_GetPhaseCurrents+0x198>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8007296:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8007298:	429c      	cmp	r4, r3
 800729a:	da3a      	bge.n	8007312 <R3_1_GetPhaseCurrents+0xda>
 800729c:	461c      	mov	r4, r3
          Iab->b = -INT16_MAX;
 800729e:	804b      	strh	r3, [r1, #2]
 80072a0:	469c      	mov	ip, r3
 80072a2:	f248 0201 	movw	r2, #32769	; 0x8001
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 80072a6:	f8d0 5090 	ldr.w	r5, [r0, #144]	; 0x90
 80072aa:	1b7d      	subs	r5, r7, r5
        Aux -= (int32_t)Iab->b;             /* Ia  */
 80072ac:	1b2c      	subs	r4, r5, r4
        if (Aux > INT16_MAX)
 80072ae:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80072b2:	db27      	blt.n	8007304 <R3_1_GetPhaseCurrents+0xcc>
          Iab->a = INT16_MAX;
 80072b4:	f647 74ff 	movw	r4, #32767	; 0x7fff
 80072b8:	4623      	mov	r3, r4
 80072ba:	800c      	strh	r4, [r1, #0]
 80072bc:	4626      	mov	r6, r4
 80072be:	e7d7      	b.n	8007270 <R3_1_GetPhaseCurrents+0x38>
 80072c0:	4770      	bx	lr
 80072c2:	f014 0f06 	tst.w	r4, #6
 80072c6:	d12e      	bne.n	8007326 <R3_1_GetPhaseCurrents+0xee>
 80072c8:	f014 0f18 	tst.w	r4, #24
 80072cc:	d0c9      	beq.n	8007262 <R3_1_GetPhaseCurrents+0x2a>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 80072ce:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
        if (Aux < -INT16_MAX)
 80072d2:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 80072d6:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 80072d8:	429c      	cmp	r4, r3
 80072da:	db04      	blt.n	80072e6 <R3_1_GetPhaseCurrents+0xae>
        else  if (Aux > INT16_MAX)
 80072dc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80072e0:	db6a      	blt.n	80073b8 <R3_1_GetPhaseCurrents+0x180>
          Iab->a = INT16_MAX;
 80072e2:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80072e6:	800b      	strh	r3, [r1, #0]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 80072e8:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
        if (Aux < -INT16_MAX)
 80072ec:	4b38      	ldr	r3, [pc, #224]	; (80073d0 <R3_1_GetPhaseCurrents+0x198>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 80072ee:	1bd2      	subs	r2, r2, r7
        if (Aux < -INT16_MAX)
 80072f0:	429a      	cmp	r2, r3
 80072f2:	da50      	bge.n	8007396 <R3_1_GetPhaseCurrents+0x15e>
 80072f4:	f9b1 6000 	ldrsh.w	r6, [r1]
          Iab->b = -INT16_MAX;
 80072f8:	804b      	strh	r3, [r1, #2]
 80072fa:	469c      	mov	ip, r3
 80072fc:	f248 0201 	movw	r2, #32769	; 0x8001
 8007300:	b2b3      	uxth	r3, r6
 8007302:	e7b5      	b.n	8007270 <R3_1_GetPhaseCurrents+0x38>
        else  if (Aux < -INT16_MAX)
 8007304:	4e32      	ldr	r6, [pc, #200]	; (80073d0 <R3_1_GetPhaseCurrents+0x198>)
 8007306:	42b4      	cmp	r4, r6
 8007308:	da35      	bge.n	8007376 <R3_1_GetPhaseCurrents+0x13e>
          Iab->a = -INT16_MAX;
 800730a:	800e      	strh	r6, [r1, #0]
 800730c:	f248 0301 	movw	r3, #32769	; 0x8001
 8007310:	e7ae      	b.n	8007270 <R3_1_GetPhaseCurrents+0x38>
        else  if (Aux > INT16_MAX)
 8007312:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007316:	db28      	blt.n	800736a <R3_1_GetPhaseCurrents+0x132>
          Iab->b = INT16_MAX;
 8007318:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800731c:	461a      	mov	r2, r3
 800731e:	804b      	strh	r3, [r1, #2]
 8007320:	461c      	mov	r4, r3
 8007322:	469c      	mov	ip, r3
 8007324:	e7bf      	b.n	80072a6 <R3_1_GetPhaseCurrents+0x6e>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007326:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
        if (Aux < -INT16_MAX)
 800732a:	4b29      	ldr	r3, [pc, #164]	; (80073d0 <R3_1_GetPhaseCurrents+0x198>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800732c:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 800732e:	429c      	cmp	r4, r3
 8007330:	db15      	blt.n	800735e <R3_1_GetPhaseCurrents+0x126>
        else  if (Aux > INT16_MAX)
 8007332:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007336:	db2a      	blt.n	800738e <R3_1_GetPhaseCurrents+0x156>
          Iab->a = INT16_MAX;
 8007338:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800733c:	4613      	mov	r3, r2
 800733e:	800a      	strh	r2, [r1, #0]
 8007340:	4614      	mov	r4, r2
 8007342:	4616      	mov	r6, r2
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8007344:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007348:	1aba      	subs	r2, r7, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 800734a:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 800734c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8007350:	db15      	blt.n	800737e <R3_1_GetPhaseCurrents+0x146>
          Iab->b = INT16_MAX;
 8007352:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8007356:	4622      	mov	r2, r4
 8007358:	804c      	strh	r4, [r1, #2]
 800735a:	46a4      	mov	ip, r4
 800735c:	e788      	b.n	8007270 <R3_1_GetPhaseCurrents+0x38>
 800735e:	461c      	mov	r4, r3
          Iab->a = -INT16_MAX;
 8007360:	800b      	strh	r3, [r1, #0]
 8007362:	461e      	mov	r6, r3
 8007364:	f248 0301 	movw	r3, #32769	; 0x8001
 8007368:	e7ec      	b.n	8007344 <R3_1_GetPhaseCurrents+0x10c>
          Iab->b = (int16_t)Aux;
 800736a:	fa0f fc84 	sxth.w	ip, r4
 800736e:	f8a1 c002 	strh.w	ip, [r1, #2]
 8007372:	b2a2      	uxth	r2, r4
 8007374:	e797      	b.n	80072a6 <R3_1_GetPhaseCurrents+0x6e>
          Iab->a = (int16_t)Aux;
 8007376:	b226      	sxth	r6, r4
 8007378:	800e      	strh	r6, [r1, #0]
 800737a:	b2a3      	uxth	r3, r4
 800737c:	e778      	b.n	8007270 <R3_1_GetPhaseCurrents+0x38>
        else  if (Aux < -INT16_MAX)
 800737e:	4c14      	ldr	r4, [pc, #80]	; (80073d0 <R3_1_GetPhaseCurrents+0x198>)
 8007380:	42a2      	cmp	r2, r4
 8007382:	da13      	bge.n	80073ac <R3_1_GetPhaseCurrents+0x174>
          Iab->b = -INT16_MAX;
 8007384:	804c      	strh	r4, [r1, #2]
 8007386:	46a4      	mov	ip, r4
 8007388:	f248 0201 	movw	r2, #32769	; 0x8001
 800738c:	e770      	b.n	8007270 <R3_1_GetPhaseCurrents+0x38>
          Iab->a = (int16_t)Aux;
 800738e:	b226      	sxth	r6, r4
 8007390:	800e      	strh	r6, [r1, #0]
 8007392:	b2a3      	uxth	r3, r4
 8007394:	e7d6      	b.n	8007344 <R3_1_GetPhaseCurrents+0x10c>
        else  if (Aux > INT16_MAX)
 8007396:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800739a:	db0f      	blt.n	80073bc <R3_1_GetPhaseCurrents+0x184>
 800739c:	f9b1 6000 	ldrsh.w	r6, [r1]
          Iab->b = INT16_MAX;
 80073a0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80073a4:	804a      	strh	r2, [r1, #2]
 80073a6:	4694      	mov	ip, r2
 80073a8:	b2b3      	uxth	r3, r6
 80073aa:	e761      	b.n	8007270 <R3_1_GetPhaseCurrents+0x38>
          Iab->b = (int16_t)Aux;
 80073ac:	fa0f fc82 	sxth.w	ip, r2
 80073b0:	f8a1 c002 	strh.w	ip, [r1, #2]
 80073b4:	b292      	uxth	r2, r2
 80073b6:	e75b      	b.n	8007270 <R3_1_GetPhaseCurrents+0x38>
          Iab->a = (int16_t)Aux;
 80073b8:	800c      	strh	r4, [r1, #0]
 80073ba:	e795      	b.n	80072e8 <R3_1_GetPhaseCurrents+0xb0>
 80073bc:	f9b1 6000 	ldrsh.w	r6, [r1]
          Iab->b = (int16_t)Aux;
 80073c0:	fa0f fc82 	sxth.w	ip, r2
 80073c4:	b2b3      	uxth	r3, r6
 80073c6:	f8a1 c002 	strh.w	ip, [r1, #2]
 80073ca:	b292      	uxth	r2, r2
 80073cc:	e750      	b.n	8007270 <R3_1_GetPhaseCurrents+0x38>
 80073ce:	bf00      	nop
 80073d0:	ffff8001 	.word	0xffff8001

080073d4 <R3_1_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns the return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_1_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 80073d4:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80073d6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 80073da:	f890 4099 	ldrb.w	r4, [r0, #153]	; 0x99
 80073de:	f880 407a 	strb.w	r4, [r0, #122]	; 0x7a
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 80073e2:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80073e6:	685b      	ldr	r3, [r3, #4]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 80073e8:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 80073ec:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 80073ee:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 80073f0:	f8b0 4052 	ldrh.w	r4, [r0, #82]	; 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 80073f4:	f8b0 0054 	ldrh.w	r0, [r0, #84]	; 0x54
  WRITE_REG(TIMx->CCR2, CompareValue);
 80073f8:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 80073fa:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 80073fc:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80073fe:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007400:	4904      	ldr	r1, [pc, #16]	; (8007414 <R3_1_SetADCSampPointPolarization+0x40>)
 8007402:	685b      	ldr	r3, [r3, #4]
}
 8007404:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007408:	420b      	tst	r3, r1
}
 800740a:	bf14      	ite	ne
 800740c:	2001      	movne	r0, #1
 800740e:	2000      	moveq	r0, #0
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	02000070 	.word	0x02000070

08007418 <R3_1_HFCurrentsPolarizationAB>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_1_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8007418:	b311      	cbz	r1, 8007460 <R3_1_HFCurrentsPolarizationAB+0x48>
#endif /* __ICCARM__ */
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800741a:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800741e:	e9d2 3200 	ldrd	r3, r2, [r2]
{
 8007422:	b470      	push	{r4, r5, r6}
    ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
    uint32_t ADCDataReg1 = ADCx->JDR1;
 8007424:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    uint32_t ADCDataReg2 = ADCx->JDR2;
 8007428:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800742c:	6853      	ldr	r3, [r2, #4]
 800742e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007432:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007436:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8007438:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 800743c:	2b0f      	cmp	r3, #15
 800743e:	d80b      	bhi.n	8007458 <R3_1_HFCurrentsPolarizationAB+0x40>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
      pHandle-> PhaseBOffset += ADCDataReg2;
 8007440:	e9d0 4222 	ldrd	r4, r2, [r0, #136]	; 0x88
      pHandle->PolarizationCounter++;
 8007444:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
      pHandle-> PhaseAOffset += ADCDataReg1;
 8007448:	4434      	add	r4, r6
      pHandle-> PhaseBOffset += ADCDataReg2;
 800744a:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 800744c:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 800744e:	e9c0 4222 	strd	r4, r2, [r0, #136]	; 0x88
      pHandle->PolarizationCounter++;
 8007452:	b2db      	uxtb	r3, r3
 8007454:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8007458:	2300      	movs	r3, #0
 800745a:	600b      	str	r3, [r1, #0]
    Iab->b = 0;
  }
}
 800745c:	bc70      	pop	{r4, r5, r6}
 800745e:	4770      	bx	lr
 8007460:	4770      	bx	lr
 8007462:	bf00      	nop

08007464 <R3_1_HFCurrentsPolarizationC>:
  *                Min value: 0 (low sides ON)
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
static void R3_1_HFCurrentsPolarizationC(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8007464:	b301      	cbz	r1, 80074a8 <R3_1_HFCurrentsPolarizationC+0x44>
#endif /* __ICCARM__ */
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007466:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
{
 800746a:	b410      	push	{r4}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800746c:	e9d3 4200 	ldrd	r4, r2, [r3]
    ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
    uint32_t ADCDataReg2 = ADCx->JDR2;
 8007470:	f8d4 4084 	ldr.w	r4, [r4, #132]	; 0x84
 8007474:	6853      	ldr	r3, [r2, #4]
 8007476:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800747a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800747e:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8007480:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8007484:	2b0f      	cmp	r3, #15
 8007486:	d80a      	bhi.n	800749e <R3_1_HFCurrentsPolarizationC+0x3a>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 8007488:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 800748c:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pHandle->PolarizationCounter++;
 8007490:	3301      	adds	r3, #1
 8007492:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 8007494:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 8007496:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 800749a:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 800749e:	2300      	movs	r3, #0
 80074a0:	600b      	str	r3, [r1, #0]
    Iab->b = 0;
  }
}
 80074a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a6:	4770      	bx	lr
 80074a8:	4770      	bx	lr
 80074aa:	bf00      	nop

080074ac <R3_1_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80074ac:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 80074b0:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80074b4:	685b      	ldr	r3, [r3, #4]
  pHandle->ADCRegularLocked = true;
 80074b6:	2101      	movs	r1, #1
{
 80074b8:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->ADCRegularLocked = true;
 80074ba:	f880 10a0 	strb.w	r1, [r0, #160]	; 0xa0
  pHandle->_Super.TurnOnLowSidesAction = false;
 80074be:	2500      	movs	r5, #0
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 80074c0:	fa22 f101 	lsr.w	r1, r2, r1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80074c4:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 80074c8:	3a05      	subs	r2, #5
  pHandle->_Super.TurnOnLowSidesAction = false;
 80074ca:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
  WRITE_REG(TIMx->CCR1, CompareValue);
 80074ce:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80074d0:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80074d2:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80074d4:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80074d6:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80074d8:	691a      	ldr	r2, [r3, #16]
 80074da:	07d2      	lsls	r2, r2, #31
 80074dc:	d5fc      	bpl.n	80074d8 <R3_1_SwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80074de:	f06f 0201 	mvn.w	r2, #1
 80074e2:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80074e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 80074e6:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80074ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80074ee:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80074f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 80074f2:	2902      	cmp	r1, #2
 80074f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074f8:	645a      	str	r2, [r3, #68]	; 0x44
 80074fa:	d008      	beq.n	800750e <R3_1_SwitchOnPWM+0x62>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80074fc:	f06f 0201 	mvn.w	r2, #1
 8007500:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007502:	68da      	ldr	r2, [r3, #12]
 8007504:	f042 0201 	orr.w	r2, r2, #1
 8007508:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 800750a:	bcf0      	pop	{r4, r5, r6, r7}
 800750c:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800750e:	f8d3 c020 	ldr.w	ip, [r3, #32]
 8007512:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8007514:	f8b0 7048 	ldrh.w	r7, [r0, #72]	; 0x48
 8007518:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800751a:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
 800751e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007520:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
 8007524:	f240 5055 	movw	r0, #1365	; 0x555
 8007528:	ea1c 0f00 	tst.w	ip, r0
 800752c:	d103      	bne.n	8007536 <R3_1_SwitchOnPWM+0x8a>
 800752e:	62b7      	str	r7, [r6, #40]	; 0x28
 8007530:	62a5      	str	r5, [r4, #40]	; 0x28
 8007532:	6291      	str	r1, [r2, #40]	; 0x28
 8007534:	e7e2      	b.n	80074fc <R3_1_SwitchOnPWM+0x50>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007536:	61b7      	str	r7, [r6, #24]
 8007538:	61a5      	str	r5, [r4, #24]
 800753a:	6191      	str	r1, [r2, #24]
 800753c:	e7de      	b.n	80074fc <R3_1_SwitchOnPWM+0x50>
 800753e:	bf00      	nop

08007540 <R3_1_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007540:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->_Super.BrakeActionLock)
 8007544:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007548:	685b      	ldr	r3, [r3, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800754a:	68da      	ldr	r2, [r3, #12]
 800754c:	f022 0201 	bic.w	r2, r2, #1
{
 8007550:	b430      	push	{r4, r5}
 8007552:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007554:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007556:	2400      	movs	r4, #0
 8007558:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800755c:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
 8007560:	645a      	str	r2, [r3, #68]	; 0x44
  if (true == pHandle->_Super.BrakeActionLock)
 8007562:	b919      	cbnz	r1, 800756c <R3_1_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 8007564:	f890 207b 	ldrb.w	r2, [r0, #123]	; 0x7b
 8007568:	2a02      	cmp	r2, #2
 800756a:	d00d      	beq.n	8007588 <R3_1_SwitchOffPWM+0x48>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800756c:	f06f 0201 	mvn.w	r2, #1
 8007570:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007572:	691a      	ldr	r2, [r3, #16]
 8007574:	07d2      	lsls	r2, r2, #31
 8007576:	d5fc      	bpl.n	8007572 <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007578:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked = false;
 800757c:	2200      	movs	r2, #0
 800757e:	6119      	str	r1, [r3, #16]
}
 8007580:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked = false;
 8007582:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
}
 8007586:	4770      	bx	lr
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007588:	e9d0 140f 	ldrd	r1, r4, [r0, #60]	; 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800758c:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007590:	6c42      	ldr	r2, [r0, #68]	; 0x44
  WRITE_REG(GPIOx->BRR, PinMask);
 8007592:	628d      	str	r5, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007594:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007598:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
 800759c:	62a5      	str	r5, [r4, #40]	; 0x28
 800759e:	6291      	str	r1, [r2, #40]	; 0x28
 80075a0:	e7e4      	b.n	800756c <R3_1_SwitchOffPWM+0x2c>
 80075a2:	bf00      	nop

080075a4 <R3_1_RLGetPhaseCurrents>:
  }
  else
  {
#endif
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80075a4:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    int32_t wAux;

    /* Disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset)
 80075a8:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 80075ac:	b430      	push	{r4, r5}
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 80075ae:	e9d2 5000 	ldrd	r5, r0, [r2]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80075b2:	6842      	ldr	r2, [r0, #4]
         - (int32_t)ADCx->JDR2;

    /* Check saturation */
    if (wAux > -INT16_MAX)
 80075b4:	4c0f      	ldr	r4, [pc, #60]	; (80075f4 <R3_1_RLGetPhaseCurrents+0x50>)
 80075b6:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80075ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80075be:	6042      	str	r2, [r0, #4]
         - (int32_t)ADCx->JDR2;
 80075c0:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
    wAux = ((int32_t)pHandle->PhaseBOffset)
 80075c4:	1a9b      	subs	r3, r3, r2
    if (wAux > -INT16_MAX)
 80075c6:	42a3      	cmp	r3, r4
 80075c8:	db0e      	blt.n	80075e8 <R3_1_RLGetPhaseCurrents+0x44>
    {
      if (wAux < INT16_MAX)
 80075ca:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80075ce:	4293      	cmp	r3, r2
 80075d0:	dd05      	ble.n	80075de <R3_1_RLGetPhaseCurrents+0x3a>
 80075d2:	f647 73ff 	movw	r3, #32767	; 0x7fff
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 80075d6:	800b      	strh	r3, [r1, #0]
    pStator_Currents->b = (int16_t)wAux;
 80075d8:	804b      	strh	r3, [r1, #2]
#ifdef NULL_PTR_CHECK_R3_1_PWM_CURR_FDB
  }
#endif
}
 80075da:	bc30      	pop	{r4, r5}
 80075dc:	4770      	bx	lr
 80075de:	b21b      	sxth	r3, r3
    pStator_Currents->a = (int16_t)wAux;
 80075e0:	800b      	strh	r3, [r1, #0]
    pStator_Currents->b = (int16_t)wAux;
 80075e2:	804b      	strh	r3, [r1, #2]
}
 80075e4:	bc30      	pop	{r4, r5}
 80075e6:	4770      	bx	lr
 80075e8:	4b03      	ldr	r3, [pc, #12]	; (80075f8 <R3_1_RLGetPhaseCurrents+0x54>)
    pStator_Currents->a = (int16_t)wAux;
 80075ea:	800b      	strh	r3, [r1, #0]
    pStator_Currents->b = (int16_t)wAux;
 80075ec:	804b      	strh	r3, [r1, #2]
}
 80075ee:	bc30      	pop	{r4, r5}
 80075f0:	4770      	bx	lr
 80075f2:	bf00      	nop
 80075f4:	ffff8002 	.word	0xffff8002
 80075f8:	ffff8001 	.word	0xffff8001

080075fc <R3_1_RLSwitchOnPWM>:
  }
  else
  {
#endif
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80075fc:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 8007600:	e9d2 1300 	ldrd	r1, r3, [r2]
{
 8007604:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007606:	f06f 0201 	mvn.w	r2, #1

    pHandle->ADCRegularLocked=true;
 800760a:	2401      	movs	r4, #1
 800760c:	f880 40a0 	strb.w	r4, [r0, #160]	; 0xa0
 8007610:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007612:	691a      	ldr	r2, [r3, #16]
 8007614:	07d4      	lsls	r4, r2, #31
 8007616:	d5fc      	bpl.n	8007612 <R3_1_RLSwitchOnPWM+0x16>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8007618:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800761c:	f06f 0501 	mvn.w	r5, #1
 8007620:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007622:	2401      	movs	r4, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007624:	611d      	str	r5, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007626:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007628:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800762a:	691a      	ldr	r2, [r3, #16]
 800762c:	07d2      	lsls	r2, r2, #31
 800762e:	d5fc      	bpl.n	800762a <R3_1_RLSwitchOnPWM+0x2e>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007630:	68da      	ldr	r2, [r3, #12]

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 8007632:	f890 407b 	ldrb.w	r4, [r0, #123]	; 0x7b
 8007636:	f042 0201 	orr.w	r2, r2, #1
 800763a:	60da      	str	r2, [r3, #12]
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800763c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800763e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007642:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007644:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 8007646:	2c02      	cmp	r4, #2
 8007648:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800764c:	645a      	str	r2, [r3, #68]	; 0x44
 800764e:	d114      	bne.n	800767a <R3_1_RLSwitchOnPWM+0x7e>
    {
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 8007650:	f8d3 e020 	ldr.w	lr, [r3, #32]
 8007654:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8007656:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007658:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800765a:	f8b0 7048 	ldrh.w	r7, [r0, #72]	; 0x48
 800765e:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
 8007662:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 8007666:	f240 5c55 	movw	ip, #1365	; 0x555
 800766a:	ea1e 0f0c 	tst.w	lr, ip
  WRITE_REG(GPIOx->BSRR, PinMask);
 800766e:	bf15      	itete	ne
 8007670:	61b7      	strne	r7, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007672:	62b7      	streq	r7, [r6, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007674:	61a5      	strne	r5, [r4, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007676:	62a5      	streq	r5, [r4, #40]	; 0x28
 8007678:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx */
    pHdl->Sector = SECTOR_4;
 800767a:	2303      	movs	r3, #3
 800767c:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
  MODIFY_REG(ADCx->CR,
 8007680:	688b      	ldr	r3, [r1, #8]
 8007682:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007686:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800768a:	f043 0308 	orr.w	r3, r3, #8
 800768e:	608b      	str	r3, [r1, #8]
    LL_ADC_INJ_StartConversion(ADCx);

#ifdef NULL_PTR_CHECK_R3_1_PWM_CURR_FDB
  }
#endif
}
 8007690:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007692:	bf00      	nop

08007694 <R3_1_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007694:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8007698:	685b      	ldr	r3, [r3, #4]
{
 800769a:	b470      	push	{r4, r5, r6}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800769c:	f06f 0201 	mvn.w	r2, #1
  pHandle->_Super.TurnOnLowSidesAction = true;
 80076a0:	2401      	movs	r4, #1
 80076a2:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
 80076a6:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80076a8:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80076aa:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80076ac:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80076ae:	691a      	ldr	r2, [r3, #16]
 80076b0:	07d2      	lsls	r2, r2, #31
 80076b2:	d5fc      	bpl.n	80076ae <R3_1_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80076b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 80076b6:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
 80076ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80076be:	2902      	cmp	r1, #2
 80076c0:	645a      	str	r2, [r3, #68]	; 0x44
 80076c2:	d10b      	bne.n	80076dc <R3_1_TurnOnLowSides+0x48>
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80076c4:	e9d0 510f 	ldrd	r5, r1, [r0, #60]	; 0x3c
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80076c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80076ca:	f8b0 6048 	ldrh.w	r6, [r0, #72]	; 0x48
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80076ce:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80076d2:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
  WRITE_REG(GPIOx->BSRR, PinMask);
 80076d6:	61ae      	str	r6, [r5, #24]
 80076d8:	618c      	str	r4, [r1, #24]
 80076da:	619a      	str	r2, [r3, #24]
}
 80076dc:	bc70      	pop	{r4, r5, r6}
 80076de:	4770      	bx	lr

080076e0 <R3_1_RLTurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80076e0:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
  pHandle->ADCRegularLocked = true;
 80076e4:	2301      	movs	r3, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80076e6:	6852      	ldr	r2, [r2, #4]
  pHandle->ADCRegularLocked = true;
 80076e8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  WRITE_REG(TIMx->CCR1, CompareValue);
 80076ec:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80076ee:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80076f2:	6351      	str	r1, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80076f4:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80076f6:	6913      	ldr	r3, [r2, #16]
 80076f8:	07db      	lsls	r3, r3, #31
 80076fa:	d5fc      	bpl.n	80076f6 <R3_1_RLTurnOnLowSides+0x16>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80076fc:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 80076fe:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
 8007702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007706:	2902      	cmp	r1, #2
 8007708:	6453      	str	r3, [r2, #68]	; 0x44
 800770a:	d000      	beq.n	800770e <R3_1_RLTurnOnLowSides+0x2e>
 800770c:	4770      	bx	lr
{
 800770e:	b470      	push	{r4, r5, r6}
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007710:	e9d0 510f 	ldrd	r5, r1, [r0, #60]	; 0x3c
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007714:	6c43      	ldr	r3, [r0, #68]	; 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8007716:	f8b0 6048 	ldrh.w	r6, [r0, #72]	; 0x48
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800771a:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800771e:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 8007722:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007724:	628c      	str	r4, [r1, #40]	; 0x28
 8007726:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007728:	bc70      	pop	{r4, r5, r6}
 800772a:	4770      	bx	lr

0800772c <R3_1_Init>:
  if (MC_NULL == pHandle)
 800772c:	2800      	cmp	r0, #0
 800772e:	f000 81e1 	beq.w	8007af4 <R3_1_Init+0x3c8>
{
 8007732:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8007736:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
      if (TIM1 ==  TIMx)
 800773a:	f8df a508 	ldr.w	sl, [pc, #1288]	; 8007c44 <R3_1_Init+0x518>
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800773e:	6819      	ldr	r1, [r3, #0]
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8007740:	f8d3 c008 	ldr.w	ip, [r3, #8]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007744:	f8d1 9004 	ldr.w	r9, [r1, #4]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8007748:	e9d3 5205 	ldrd	r5, r2, [r3, #20]
{
 800774c:	b091      	sub	sp, #68	; 0x44
 800774e:	f029 0904 	bic.w	r9, r9, #4
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8007752:	9201      	str	r2, [sp, #4]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8007754:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007756:	9202      	str	r2, [sp, #8]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 8007758:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800775a:	9203      	str	r2, [sp, #12]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800775c:	e9d3 7603 	ldrd	r7, r6, [r3, #12]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007760:	685a      	ldr	r2, [r3, #4]
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8007762:	e9d3 8e07 	ldrd	r8, lr, [r3, #28]
 8007766:	f8c1 9004 	str.w	r9, [r1, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800776a:	f04f 0904 	mov.w	r9, #4
 800776e:	f8c1 9000 	str.w	r9, [r1]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8007772:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8007776:	f029 0920 	bic.w	r9, r9, #32
 800777a:	f8c1 9004 	str.w	r9, [r1, #4]
      if (TIM1 ==  TIMx)
 800777e:	4552      	cmp	r2, sl
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8007780:	f04f 0920 	mov.w	r9, #32
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8007784:	f8df a4c0 	ldr.w	sl, [pc, #1216]	; 8007c48 <R3_1_Init+0x51c>
 8007788:	f8c1 9000 	str.w	r9, [r1]
 800778c:	f8da 9010 	ldr.w	r9, [sl, #16]
 8007790:	bf0c      	ite	eq
 8007792:	f449 6900 	orreq.w	r9, r9, #2048	; 0x800
 8007796:	f449 5900 	orrne.w	r9, r9, #8192	; 0x2000
 800779a:	f8ca 9010 	str.w	r9, [sl, #16]
      if (OPAMPParams != NULL)
 800779e:	f1bc 0f00 	cmp.w	ip, #0
 80077a2:	d015      	beq.n	80077d0 <R3_1_Init+0xa4>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 80077a4:	e9dc ba00 	ldrd	fp, sl, [ip]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 80077a8:	f8db 9000 	ldr.w	r9, [fp]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 80077ac:	f8dc c018 	ldr.w	ip, [ip, #24]
 80077b0:	f049 0901 	orr.w	r9, r9, #1
 80077b4:	f8cb 9000 	str.w	r9, [fp]
 80077b8:	f8da 9000 	ldr.w	r9, [sl]
 80077bc:	f049 0901 	orr.w	r9, r9, #1
 80077c0:	f8ca 9000 	str.w	r9, [sl]
 80077c4:	f8dc 9000 	ldr.w	r9, [ip]
 80077c8:	f049 0901 	orr.w	r9, r9, #1
 80077cc:	f8cc 9000 	str.w	r9, [ip]
      if (COMP_OCPAx != NULL)
 80077d0:	2f00      	cmp	r7, #0
 80077d2:	d063      	beq.n	800789c <R3_1_Init+0x170>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 80077d4:	f893 c063 	ldrb.w	ip, [r3, #99]	; 0x63
 80077d8:	f1bc 0f01 	cmp.w	ip, #1
 80077dc:	d052      	beq.n	8007884 <R3_1_Init+0x158>
 80077de:	f1b8 0f00 	cmp.w	r8, #0
 80077e2:	d04f      	beq.n	8007884 <R3_1_Init+0x158>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 80077e4:	f8d3 a02c 	ldr.w	sl, [r3, #44]	; 0x2c
  LL_DAC_ConvertData12LeftAligned(DACx, DAC_Channel, hDACVref);
 80077e8:	f8b3 405e 	ldrh.w	r4, [r3, #94]	; 0x5e
 80077ec:	9404      	str	r4, [sp, #16]
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 80077ee:	ea4f 4b9a 	mov.w	fp, sl, lsr #18
 80077f2:	f108 0908 	add.w	r9, r8, #8
 80077f6:	f00b 0b3c 	and.w	fp, fp, #60	; 0x3c
  SET_BIT(DACx->SWTRIGR,
 80077fa:	f00a 0c03 	and.w	ip, sl, #3
 80077fe:	f8cd c014 	str.w	ip, [sp, #20]
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8007802:	f85b c009 	ldr.w	ip, [fp, r9]
 8007806:	9c04      	ldr	r4, [sp, #16]
 8007808:	f42c 4c7f 	bic.w	ip, ip, #65280	; 0xff00
 800780c:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
 8007810:	ea44 0c0c 	orr.w	ip, r4, ip
 8007814:	f84b c009 	str.w	ip, [fp, r9]
  SET_BIT(DACx->SWTRIGR,
 8007818:	9c05      	ldr	r4, [sp, #20]
 800781a:	f8d8 c004 	ldr.w	ip, [r8, #4]
 800781e:	ea44 0c0c 	orr.w	ip, r4, ip
 8007822:	f8c8 c004 	str.w	ip, [r8, #4]
  return ((READ_BIT(DACx->CR,
 8007826:	f8d8 9000 	ldr.w	r9, [r8]
 800782a:	f00a 0c10 	and.w	ip, sl, #16
 800782e:	f04f 0a01 	mov.w	sl, #1
 8007832:	fa0a fc0c 	lsl.w	ip, sl, ip
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8007836:	ea3c 0409 	bics.w	r4, ip, r9
 800783a:	f000 821c 	beq.w	8007c76 <R3_1_Init+0x54a>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 800783e:	f8df 93f4 	ldr.w	r9, [pc, #1012]	; 8007c34 <R3_1_Init+0x508>
 8007842:	f8df a3fc 	ldr.w	sl, [pc, #1020]	; 8007c40 <R3_1_Init+0x514>
 8007846:	f8d9 9000 	ldr.w	r9, [r9]
  SET_BIT(DACx->CR,
 800784a:	f8d8 b000 	ldr.w	fp, [r8]
 800784e:	fbaa 4909 	umull	r4, r9, sl, r9
 8007852:	ea4f 49d9 	mov.w	r9, r9, lsr #19
 8007856:	ea4c 0c0b 	orr.w	ip, ip, fp
 800785a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800785e:	f8c8 c000 	str.w	ip, [r8]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 8007862:	f8cd 9018 	str.w	r9, [sp, #24]
    while (wait_loop_index != 0UL)
 8007866:	f8dd c018 	ldr.w	ip, [sp, #24]
 800786a:	f1bc 0f00 	cmp.w	ip, #0
 800786e:	d009      	beq.n	8007884 <R3_1_Init+0x158>
 8007870:	9c01      	ldr	r4, [sp, #4]
 8007872:	469c      	mov	ip, r3
      wait_loop_index--;
 8007874:	9b06      	ldr	r3, [sp, #24]
 8007876:	3b01      	subs	r3, #1
 8007878:	9306      	str	r3, [sp, #24]
    while (wait_loop_index != 0UL)
 800787a:	9b06      	ldr	r3, [sp, #24]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1f9      	bne.n	8007874 <R3_1_Init+0x148>
 8007880:	4663      	mov	r3, ip
 8007882:	9401      	str	r4, [sp, #4]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007884:	f8d7 c000 	ldr.w	ip, [r7]
 8007888:	f04c 0c01 	orr.w	ip, ip, #1
 800788c:	f8c7 c000 	str.w	ip, [r7]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007890:	f8d7 c000 	ldr.w	ip, [r7]
 8007894:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 8007898:	f8c7 c000 	str.w	ip, [r7]
      if (COMP_OCPBx != NULL)
 800789c:	2e00      	cmp	r6, #0
 800789e:	d053      	beq.n	8007948 <R3_1_Init+0x21c>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 80078a0:	f893 7064 	ldrb.w	r7, [r3, #100]	; 0x64
 80078a4:	2f01      	cmp	r7, #1
 80078a6:	d047      	beq.n	8007938 <R3_1_Init+0x20c>
 80078a8:	f1be 0f00 	cmp.w	lr, #0
 80078ac:	d044      	beq.n	8007938 <R3_1_Init+0x20c>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 80078ae:	6b1f      	ldr	r7, [r3, #48]	; 0x30
  LL_DAC_ConvertData12LeftAligned(DACx, DAC_Channel, hDACVref);
 80078b0:	f8b3 a05e 	ldrh.w	sl, [r3, #94]	; 0x5e
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 80078b4:	ea4f 4997 	mov.w	r9, r7, lsr #18
 80078b8:	f10e 0808 	add.w	r8, lr, #8
 80078bc:	f009 093c 	and.w	r9, r9, #60	; 0x3c
  SET_BIT(DACx->SWTRIGR,
 80078c0:	f007 0b03 	and.w	fp, r7, #3
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 80078c4:	f859 c008 	ldr.w	ip, [r9, r8]
 80078c8:	f42c 4c7f 	bic.w	ip, ip, #65280	; 0xff00
 80078cc:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
 80078d0:	ea4a 0c0c 	orr.w	ip, sl, ip
 80078d4:	f849 c008 	str.w	ip, [r9, r8]
  SET_BIT(DACx->SWTRIGR,
 80078d8:	f8de c004 	ldr.w	ip, [lr, #4]
 80078dc:	ea4b 0b0c 	orr.w	fp, fp, ip
 80078e0:	f8ce b004 	str.w	fp, [lr, #4]
  return ((READ_BIT(DACx->CR,
 80078e4:	f007 0710 	and.w	r7, r7, #16
 80078e8:	f04f 0801 	mov.w	r8, #1
 80078ec:	f8de c000 	ldr.w	ip, [lr]
 80078f0:	fa08 f707 	lsl.w	r7, r8, r7
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 80078f4:	ea37 040c 	bics.w	r4, r7, ip
 80078f8:	f000 81da 	beq.w	8007cb0 <R3_1_Init+0x584>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 80078fc:	f8df c334 	ldr.w	ip, [pc, #820]	; 8007c34 <R3_1_Init+0x508>
 8007900:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8007c40 <R3_1_Init+0x514>
 8007904:	f8dc c000 	ldr.w	ip, [ip]
  SET_BIT(DACx->CR,
 8007908:	f8de 8000 	ldr.w	r8, [lr]
 800790c:	fba9 4c0c 	umull	r4, ip, r9, ip
 8007910:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 8007914:	ea47 0708 	orr.w	r7, r7, r8
 8007918:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 800791c:	f8ce 7000 	str.w	r7, [lr]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 8007920:	f8cd c020 	str.w	ip, [sp, #32]
    while (wait_loop_index != 0UL)
 8007924:	9f08      	ldr	r7, [sp, #32]
 8007926:	b13f      	cbz	r7, 8007938 <R3_1_Init+0x20c>
 8007928:	9c01      	ldr	r4, [sp, #4]
      wait_loop_index--;
 800792a:	9f08      	ldr	r7, [sp, #32]
 800792c:	3f01      	subs	r7, #1
 800792e:	9708      	str	r7, [sp, #32]
    while (wait_loop_index != 0UL)
 8007930:	9f08      	ldr	r7, [sp, #32]
 8007932:	2f00      	cmp	r7, #0
 8007934:	d1f9      	bne.n	800792a <R3_1_Init+0x1fe>
 8007936:	9401      	str	r4, [sp, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007938:	6837      	ldr	r7, [r6, #0]
 800793a:	f047 0701 	orr.w	r7, r7, #1
 800793e:	6037      	str	r7, [r6, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007940:	6837      	ldr	r7, [r6, #0]
 8007942:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8007946:	6037      	str	r7, [r6, #0]
      if (COMP_OCPCx != NULL)
 8007948:	2d00      	cmp	r5, #0
 800794a:	d04d      	beq.n	80079e8 <R3_1_Init+0x2bc>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 800794c:	f893 6065 	ldrb.w	r6, [r3, #101]	; 0x65
 8007950:	2e01      	cmp	r6, #1
 8007952:	d041      	beq.n	80079d8 <R3_1_Init+0x2ac>
 8007954:	9e02      	ldr	r6, [sp, #8]
 8007956:	2e00      	cmp	r6, #0
 8007958:	d03e      	beq.n	80079d8 <R3_1_Init+0x2ac>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 800795a:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  LL_DAC_ConvertData12LeftAligned(DACx, DAC_Channel, hDACVref);
 800795c:	f8b3 905e 	ldrh.w	r9, [r3, #94]	; 0x5e
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8007960:	ea4f 4e94 	mov.w	lr, r4, lsr #18
 8007964:	f106 0c08 	add.w	ip, r6, #8
 8007968:	f00e 0e3c 	and.w	lr, lr, #60	; 0x3c
  SET_BIT(DACx->SWTRIGR,
 800796c:	f004 0803 	and.w	r8, r4, #3
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8007970:	f85e 700c 	ldr.w	r7, [lr, ip]
 8007974:	f427 477f 	bic.w	r7, r7, #65280	; 0xff00
 8007978:	f027 07f0 	bic.w	r7, r7, #240	; 0xf0
 800797c:	ea49 0707 	orr.w	r7, r9, r7
 8007980:	f84e 700c 	str.w	r7, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 8007984:	6877      	ldr	r7, [r6, #4]
 8007986:	ea48 0707 	orr.w	r7, r8, r7
 800798a:	6077      	str	r7, [r6, #4]
  return ((READ_BIT(DACx->CR,
 800798c:	9f02      	ldr	r7, [sp, #8]
 800798e:	f004 0610 	and.w	r6, r4, #16
 8007992:	f04f 0c01 	mov.w	ip, #1
 8007996:	683f      	ldr	r7, [r7, #0]
 8007998:	fa0c f606 	lsl.w	r6, ip, r6
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800799c:	ea36 0407 	bics.w	r4, r6, r7
 80079a0:	f000 8133 	beq.w	8007c0a <R3_1_Init+0x4de>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 80079a4:	4fa3      	ldr	r7, [pc, #652]	; (8007c34 <R3_1_Init+0x508>)
  SET_BIT(DACx->CR,
 80079a6:	9c02      	ldr	r4, [sp, #8]
 80079a8:	f8d7 8000 	ldr.w	r8, [r7]
 80079ac:	f8df e290 	ldr.w	lr, [pc, #656]	; 8007c40 <R3_1_Init+0x514>
 80079b0:	f8d4 c000 	ldr.w	ip, [r4]
 80079b4:	fbae e708 	umull	lr, r7, lr, r8
 80079b8:	0cff      	lsrs	r7, r7, #19
 80079ba:	ea46 060c 	orr.w	r6, r6, ip
 80079be:	00ff      	lsls	r7, r7, #3
 80079c0:	6026      	str	r6, [r4, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 80079c2:	970a      	str	r7, [sp, #40]	; 0x28
    while (wait_loop_index != 0UL)
 80079c4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80079c6:	b13e      	cbz	r6, 80079d8 <R3_1_Init+0x2ac>
 80079c8:	9c01      	ldr	r4, [sp, #4]
      wait_loop_index--;
 80079ca:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80079cc:	3e01      	subs	r6, #1
 80079ce:	960a      	str	r6, [sp, #40]	; 0x28
    while (wait_loop_index != 0UL)
 80079d0:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80079d2:	2e00      	cmp	r6, #0
 80079d4:	d1f9      	bne.n	80079ca <R3_1_Init+0x29e>
 80079d6:	9401      	str	r4, [sp, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80079d8:	682e      	ldr	r6, [r5, #0]
 80079da:	f046 0601 	orr.w	r6, r6, #1
 80079de:	602e      	str	r6, [r5, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80079e0:	682e      	ldr	r6, [r5, #0]
 80079e2:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 80079e6:	602e      	str	r6, [r5, #0]
      if (COMP_OVPx != NULL)
 80079e8:	9c01      	ldr	r4, [sp, #4]
 80079ea:	2c00      	cmp	r4, #0
 80079ec:	d049      	beq.n	8007a82 <R3_1_Init+0x356>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 80079ee:	f893 5066 	ldrb.w	r5, [r3, #102]	; 0x66
 80079f2:	2d01      	cmp	r5, #1
 80079f4:	d03c      	beq.n	8007a70 <R3_1_Init+0x344>
 80079f6:	9c03      	ldr	r4, [sp, #12]
 80079f8:	2c00      	cmp	r4, #0
 80079fa:	d039      	beq.n	8007a70 <R3_1_Init+0x344>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 80079fc:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  LL_DAC_ConvertData12LeftAligned(DACx, DAC_Channel, hDACVref);
 80079fe:	f8b3 8060 	ldrh.w	r8, [r3, #96]	; 0x60
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8007a02:	ea4f 4c95 	mov.w	ip, r5, lsr #18
 8007a06:	f104 0708 	add.w	r7, r4, #8
 8007a0a:	f00c 0c3c 	and.w	ip, ip, #60	; 0x3c
  SET_BIT(DACx->SWTRIGR,
 8007a0e:	f005 0e03 	and.w	lr, r5, #3
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8007a12:	f85c 6007 	ldr.w	r6, [ip, r7]
 8007a16:	f426 467f 	bic.w	r6, r6, #65280	; 0xff00
 8007a1a:	f026 06f0 	bic.w	r6, r6, #240	; 0xf0
 8007a1e:	ea48 0606 	orr.w	r6, r8, r6
 8007a22:	f84c 6007 	str.w	r6, [ip, r7]
  SET_BIT(DACx->SWTRIGR,
 8007a26:	6866      	ldr	r6, [r4, #4]
 8007a28:	ea4e 0606 	orr.w	r6, lr, r6
 8007a2c:	6066      	str	r6, [r4, #4]
  return ((READ_BIT(DACx->CR,
 8007a2e:	f005 0510 	and.w	r5, r5, #16
 8007a32:	2701      	movs	r7, #1
 8007a34:	6826      	ldr	r6, [r4, #0]
 8007a36:	fa07 f505 	lsl.w	r5, r7, r5
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8007a3a:	ea35 0406 	bics.w	r4, r5, r6
 8007a3e:	f000 8105 	beq.w	8007c4c <R3_1_Init+0x520>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 8007a42:	4e7c      	ldr	r6, [pc, #496]	; (8007c34 <R3_1_Init+0x508>)
  SET_BIT(DACx->CR,
 8007a44:	9c03      	ldr	r4, [sp, #12]
 8007a46:	6836      	ldr	r6, [r6, #0]
 8007a48:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8007c40 <R3_1_Init+0x514>
 8007a4c:	6827      	ldr	r7, [r4, #0]
 8007a4e:	fbac c606 	umull	ip, r6, ip, r6
 8007a52:	0cf6      	lsrs	r6, r6, #19
 8007a54:	433d      	orrs	r5, r7
 8007a56:	00f6      	lsls	r6, r6, #3
 8007a58:	6025      	str	r5, [r4, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 8007a5a:	960c      	str	r6, [sp, #48]	; 0x30
    while (wait_loop_index != 0UL)
 8007a5c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a5e:	b13d      	cbz	r5, 8007a70 <R3_1_Init+0x344>
 8007a60:	9c01      	ldr	r4, [sp, #4]
      wait_loop_index--;
 8007a62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a64:	3d01      	subs	r5, #1
 8007a66:	950c      	str	r5, [sp, #48]	; 0x30
    while (wait_loop_index != 0UL)
 8007a68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a6a:	2d00      	cmp	r5, #0
 8007a6c:	d1f9      	bne.n	8007a62 <R3_1_Init+0x336>
 8007a6e:	9401      	str	r4, [sp, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007a70:	9c01      	ldr	r4, [sp, #4]
 8007a72:	6825      	ldr	r5, [r4, #0]
 8007a74:	f045 0501 	orr.w	r5, r5, #1
 8007a78:	6025      	str	r5, [r4, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007a7a:	6825      	ldr	r5, [r4, #0]
 8007a7c:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 8007a80:	6025      	str	r5, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007a82:	688c      	ldr	r4, [r1, #8]
 8007a84:	07e7      	lsls	r7, r4, #31
 8007a86:	d560      	bpl.n	8007b4a <R3_1_Init+0x41e>
  volatile uint32_t Brk2Timeout = 1000;
 8007a88:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007a8c:	910f      	str	r1, [sp, #60]	; 0x3c
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8007a8e:	6811      	ldr	r1, [r2, #0]
 8007a90:	f021 0101 	bic.w	r1, r1, #1
 8007a94:	6011      	str	r1, [r2, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007a96:	6851      	ldr	r1, [r2, #4]
 8007a98:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 8007a9c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007aa0:	6051      	str	r1, [r2, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007aa2:	6991      	ldr	r1, [r2, #24]
 8007aa4:	f041 0108 	orr.w	r1, r1, #8
 8007aa8:	6191      	str	r1, [r2, #24]
 8007aaa:	6991      	ldr	r1, [r2, #24]
 8007aac:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007ab0:	6191      	str	r1, [r2, #24]
 8007ab2:	69d1      	ldr	r1, [r2, #28]
 8007ab4:	f041 0108 	orr.w	r1, r1, #8
 8007ab8:	61d1      	str	r1, [r2, #28]
 8007aba:	69d1      	ldr	r1, [r2, #28]
 8007abc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8007ac0:	61d1      	str	r1, [r2, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007ac2:	6951      	ldr	r1, [r2, #20]
 8007ac4:	f041 0101 	orr.w	r1, r1, #1
 8007ac8:	6151      	str	r1, [r2, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 8007aca:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
 8007ace:	2902      	cmp	r1, #2
 8007ad0:	d011      	beq.n	8007af6 <R3_1_Init+0x3ca>
    if (M1 == pHandle->_Super.Motor)
 8007ad2:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
 8007ad6:	b9b9      	cbnz	r1, 8007b08 <R3_1_Init+0x3dc>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 8007ad8:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d00f      	beq.n	8007b00 <R3_1_Init+0x3d4>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 8007ae0:	2b03      	cmp	r3, #3
 8007ae2:	d111      	bne.n	8007b08 <R3_1_Init+0x3dc>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007ae4:	2101      	movs	r1, #1
 8007ae6:	6311      	str	r1, [r2, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007ae8:	6951      	ldr	r1, [r2, #20]
 8007aea:	f041 0101 	orr.w	r1, r1, #1
 8007aee:	6151      	str	r1, [r2, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007af0:	6313      	str	r3, [r2, #48]	; 0x30
 8007af2:	e009      	b.n	8007b08 <R3_1_Init+0x3dc>
 8007af4:	4770      	bx	lr
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 8007af6:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8007afa:	2901      	cmp	r1, #1
 8007afc:	f000 80ee 	beq.w	8007cdc <R3_1_Init+0x5b0>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 8007b00:	f8b0 3094 	ldrh.w	r3, [r0, #148]	; 0x94
 8007b04:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8007b06:	6253      	str	r3, [r2, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8007b08:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8007b0c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8007b0e:	6913      	ldr	r3, [r2, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 8007b10:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8007b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b16:	b159      	cbz	r1, 8007b30 <R3_1_Init+0x404>
 8007b18:	b153      	cbz	r3, 8007b30 <R3_1_Init+0x404>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8007b1a:	f46f 7180 	mvn.w	r1, #256	; 0x100
 8007b1e:	6111      	str	r1, [r2, #16]
    Brk2Timeout--;
 8007b20:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b22:	3b01      	subs	r3, #1
 8007b24:	930f      	str	r3, [sp, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8007b26:	6913      	ldr	r3, [r2, #16]
 8007b28:	f413 7f80 	tst.w	r3, #256	; 0x100
  while ((Brk2Timeout != 0u) && (1U == result))
 8007b2c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b2e:	d14e      	bne.n	8007bce <R3_1_Init+0x4a2>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8007b30:	68d3      	ldr	r3, [r2, #12]
 8007b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b36:	60d3      	str	r3, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 8007b38:	6a13      	ldr	r3, [r2, #32]
 8007b3a:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8007b3e:	f043 0305 	orr.w	r3, r3, #5
 8007b42:	6213      	str	r3, [r2, #32]
}
 8007b44:	b011      	add	sp, #68	; 0x44
 8007b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007b4a:	688c      	ldr	r4, [r1, #8]
 8007b4c:	f024 4420 	bic.w	r4, r4, #2684354560	; 0xa0000000
 8007b50:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8007b54:	608c      	str	r4, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007b56:	688c      	ldr	r4, [r1, #8]
 8007b58:	00e6      	lsls	r6, r4, #3
 8007b5a:	d53b      	bpl.n	8007bd4 <R3_1_Init+0x4a8>
  MODIFY_REG(ADCx->CR,
 8007b5c:	688c      	ldr	r4, [r1, #8]
 8007b5e:	f024 4440 	bic.w	r4, r4, #3221225472	; 0xc0000000
 8007b62:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8007b66:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8007b6a:	608c      	str	r4, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007b6c:	688c      	ldr	r4, [r1, #8]
 8007b6e:	2c00      	cmp	r4, #0
 8007b70:	dbfc      	blt.n	8007b6c <R3_1_Init+0x440>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007b72:	680c      	ldr	r4, [r1, #0]
 8007b74:	07e5      	lsls	r5, r4, #31
 8007b76:	d408      	bmi.n	8007b8a <R3_1_Init+0x45e>
  MODIFY_REG(ADCx->CR,
 8007b78:	4d2f      	ldr	r5, [pc, #188]	; (8007c38 <R3_1_Init+0x50c>)
 8007b7a:	688c      	ldr	r4, [r1, #8]
 8007b7c:	402c      	ands	r4, r5
 8007b7e:	f044 0401 	orr.w	r4, r4, #1
 8007b82:	608c      	str	r4, [r1, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007b84:	680c      	ldr	r4, [r1, #0]
 8007b86:	07e4      	lsls	r4, r4, #31
 8007b88:	d5f7      	bpl.n	8007b7a <R3_1_Init+0x44e>
  MODIFY_REG(ADCx->CR,
 8007b8a:	688d      	ldr	r5, [r1, #8]
 8007b8c:	4e2a      	ldr	r6, [pc, #168]	; (8007c38 <R3_1_Init+0x50c>)
 8007b8e:	4035      	ands	r5, r6
 8007b90:	f045 0508 	orr.w	r5, r5, #8
 8007b94:	608d      	str	r5, [r1, #8]
  MODIFY_REG(ADCx->CR,
 8007b96:	688d      	ldr	r5, [r1, #8]
 8007b98:	4035      	ands	r5, r6
 8007b9a:	f045 0520 	orr.w	r5, r5, #32
 8007b9e:	608d      	str	r5, [r1, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8007ba0:	68cc      	ldr	r4, [r1, #12]
 8007ba2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007ba6:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
 8007baa:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 8007bae:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8007bb0:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 8007bb2:	f024 040f 	bic.w	r4, r4, #15
 8007bb6:	630c      	str	r4, [r1, #48]	; 0x30
  MODIFY_REG(ADCx->CR,
 8007bb8:	688c      	ldr	r4, [r1, #8]
 8007bba:	4034      	ands	r4, r6
 8007bbc:	f044 0404 	orr.w	r4, r4, #4
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8007bc0:	2540      	movs	r5, #64	; 0x40
  MODIFY_REG(ADCx->CR,
 8007bc2:	608c      	str	r4, [r1, #8]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8007bc4:	600d      	str	r5, [r1, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8007bc6:	684c      	ldr	r4, [r1, #4]
 8007bc8:	432c      	orrs	r4, r5
 8007bca:	604c      	str	r4, [r1, #4]
 8007bcc:	e75c      	b.n	8007a88 <R3_1_Init+0x35c>
  while ((Brk2Timeout != 0u) && (1U == result))
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1a5      	bne.n	8007b1e <R3_1_Init+0x3f2>
 8007bd2:	e7ad      	b.n	8007b30 <R3_1_Init+0x404>
                                         * (SystemCoreClock / (100000UL * 2UL)));
 8007bd4:	4c17      	ldr	r4, [pc, #92]	; (8007c34 <R3_1_Init+0x508>)
  MODIFY_REG(ADCx->CR,
 8007bd6:	688d      	ldr	r5, [r1, #8]
 8007bd8:	6824      	ldr	r4, [r4, #0]
 8007bda:	4e18      	ldr	r6, [pc, #96]	; (8007c3c <R3_1_Init+0x510>)
 8007bdc:	09a4      	lsrs	r4, r4, #6
 8007bde:	fba6 6404 	umull	r6, r4, r6, r4
 8007be2:	f025 4510 	bic.w	r5, r5, #2415919104	; 0x90000000
 8007be6:	09a4      	lsrs	r4, r4, #6
 8007be8:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8007bec:	0064      	lsls	r4, r4, #1
 8007bee:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8007bf2:	608d      	str	r5, [r1, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 8007bf4:	940e      	str	r4, [sp, #56]	; 0x38
    while (wait_loop_index != 0UL)
 8007bf6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007bf8:	2c00      	cmp	r4, #0
 8007bfa:	d0af      	beq.n	8007b5c <R3_1_Init+0x430>
      wait_loop_index--;
 8007bfc:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007bfe:	3c01      	subs	r4, #1
 8007c00:	940e      	str	r4, [sp, #56]	; 0x38
    while (wait_loop_index != 0UL)
 8007c02:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007c04:	2c00      	cmp	r4, #0
 8007c06:	d1f9      	bne.n	8007bfc <R3_1_Init+0x4d0>
 8007c08:	e7a8      	b.n	8007b5c <R3_1_Init+0x430>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007c0a:	4e0a      	ldr	r6, [pc, #40]	; (8007c34 <R3_1_Init+0x508>)
 8007c0c:	4f0c      	ldr	r7, [pc, #48]	; (8007c40 <R3_1_Init+0x514>)
 8007c0e:	6836      	ldr	r6, [r6, #0]
 8007c10:	fba7 4606 	umull	r4, r6, r7, r6
 8007c14:	0cf6      	lsrs	r6, r6, #19
 8007c16:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8007c1a:	960b      	str	r6, [sp, #44]	; 0x2c
    while (wait_loop_index != 0UL)
 8007c1c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007c1e:	2e00      	cmp	r6, #0
 8007c20:	f43f aeda 	beq.w	80079d8 <R3_1_Init+0x2ac>
 8007c24:	9c01      	ldr	r4, [sp, #4]
      wait_loop_index--;
 8007c26:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007c28:	3e01      	subs	r6, #1
 8007c2a:	960b      	str	r6, [sp, #44]	; 0x2c
    while (wait_loop_index != 0UL)
 8007c2c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007c2e:	2e00      	cmp	r6, #0
 8007c30:	d1f9      	bne.n	8007c26 <R3_1_Init+0x4fa>
 8007c32:	e6d0      	b.n	80079d6 <R3_1_Init+0x2aa>
 8007c34:	200003d8 	.word	0x200003d8
 8007c38:	7fffffc0 	.word	0x7fffffc0
 8007c3c:	053e2d63 	.word	0x053e2d63
 8007c40:	431bde83 	.word	0x431bde83
 8007c44:	40012c00 	.word	0x40012c00
 8007c48:	e0042000 	.word	0xe0042000
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007c4c:	4d29      	ldr	r5, [pc, #164]	; (8007cf4 <R3_1_Init+0x5c8>)
 8007c4e:	4e2a      	ldr	r6, [pc, #168]	; (8007cf8 <R3_1_Init+0x5cc>)
 8007c50:	682d      	ldr	r5, [r5, #0]
 8007c52:	fba6 4505 	umull	r4, r5, r6, r5
 8007c56:	0ced      	lsrs	r5, r5, #19
 8007c58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c5c:	950d      	str	r5, [sp, #52]	; 0x34
    while (wait_loop_index != 0UL)
 8007c5e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007c60:	2d00      	cmp	r5, #0
 8007c62:	f43f af05 	beq.w	8007a70 <R3_1_Init+0x344>
 8007c66:	9c01      	ldr	r4, [sp, #4]
      wait_loop_index--;
 8007c68:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007c6a:	3d01      	subs	r5, #1
 8007c6c:	950d      	str	r5, [sp, #52]	; 0x34
    while (wait_loop_index != 0UL)
 8007c6e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007c70:	2d00      	cmp	r5, #0
 8007c72:	d1f9      	bne.n	8007c68 <R3_1_Init+0x53c>
 8007c74:	e6fb      	b.n	8007a6e <R3_1_Init+0x342>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007c76:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007cf4 <R3_1_Init+0x5c8>
 8007c7a:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8007cf8 <R3_1_Init+0x5cc>
 8007c7e:	f8dc c000 	ldr.w	ip, [ip]
 8007c82:	fba8 4c0c 	umull	r4, ip, r8, ip
 8007c86:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 8007c8a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8007c8e:	f8cd c01c 	str.w	ip, [sp, #28]
    while (wait_loop_index != 0UL)
 8007c92:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007c96:	f1bc 0f00 	cmp.w	ip, #0
 8007c9a:	f43f adf3 	beq.w	8007884 <R3_1_Init+0x158>
 8007c9e:	9c01      	ldr	r4, [sp, #4]
 8007ca0:	469c      	mov	ip, r3
      wait_loop_index--;
 8007ca2:	9b07      	ldr	r3, [sp, #28]
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	9307      	str	r3, [sp, #28]
    while (wait_loop_index != 0UL)
 8007ca8:	9b07      	ldr	r3, [sp, #28]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d1f9      	bne.n	8007ca2 <R3_1_Init+0x576>
 8007cae:	e5e7      	b.n	8007880 <R3_1_Init+0x154>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007cb0:	4f10      	ldr	r7, [pc, #64]	; (8007cf4 <R3_1_Init+0x5c8>)
 8007cb2:	f8df c044 	ldr.w	ip, [pc, #68]	; 8007cf8 <R3_1_Init+0x5cc>
 8007cb6:	683f      	ldr	r7, [r7, #0]
 8007cb8:	fbac 4707 	umull	r4, r7, ip, r7
 8007cbc:	0cff      	lsrs	r7, r7, #19
 8007cbe:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8007cc2:	9709      	str	r7, [sp, #36]	; 0x24
    while (wait_loop_index != 0UL)
 8007cc4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007cc6:	2f00      	cmp	r7, #0
 8007cc8:	f43f ae36 	beq.w	8007938 <R3_1_Init+0x20c>
 8007ccc:	9c01      	ldr	r4, [sp, #4]
      wait_loop_index--;
 8007cce:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007cd0:	3f01      	subs	r7, #1
 8007cd2:	9709      	str	r7, [sp, #36]	; 0x24
    while (wait_loop_index != 0UL)
 8007cd4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007cd6:	2f00      	cmp	r7, #0
 8007cd8:	d1f9      	bne.n	8007cce <R3_1_Init+0x5a2>
 8007cda:	e62c      	b.n	8007936 <R3_1_Init+0x20a>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 8007cdc:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007ce0:	2b03      	cmp	r3, #3
 8007ce2:	f47f af0d 	bne.w	8007b00 <R3_1_Init+0x3d4>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007ce6:	6311      	str	r1, [r2, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007ce8:	6951      	ldr	r1, [r2, #20]
 8007cea:	f041 0101 	orr.w	r1, r1, #1
 8007cee:	6151      	str	r1, [r2, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8007cf2:	e705      	b.n	8007b00 <R3_1_Init+0x3d4>
 8007cf4:	200003d8 	.word	0x200003d8
 8007cf8:	431bde83 	.word	0x431bde83

08007cfc <R3_1_SetOffsetCalib>:
{
 8007cfc:	b410      	push	{r4}
  pHandle->PhaseBOffset = offsets->phaseBOffset;
 8007cfe:	e9d1 3400 	ldrd	r3, r4, [r1]
  pHandle->PhaseCOffset = offsets->phaseCOffset;
 8007d02:	688a      	ldr	r2, [r1, #8]
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8007d04:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  pHdl->offsetCalibStatus = true;
 8007d08:	2301      	movs	r3, #1
  pHandle->PhaseCOffset = offsets->phaseCOffset;
 8007d0a:	e9c0 4223 	strd	r4, r2, [r0, #140]	; 0x8c
  pHdl->offsetCalibStatus = true;
 8007d0e:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
}
 8007d12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d16:	4770      	bx	lr

08007d18 <R3_1_GetOffsetCalib>:
{
 8007d18:	b410      	push	{r4}
  offsets->phaseBOffset = pHandle->PhaseBOffset;
 8007d1a:	e9d0 4222 	ldrd	r4, r2, [r0, #136]	; 0x88
  offsets->phaseCOffset = pHandle->PhaseCOffset;
 8007d1e:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8007d22:	608b      	str	r3, [r1, #8]
  offsets->phaseBOffset = pHandle->PhaseBOffset;
 8007d24:	e9c1 4200 	strd	r4, r2, [r1]
}
 8007d28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop

08007d30 <R3_1_CurrentReadingPolarization>:
{
 8007d30:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007d32:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
  if (true == pHandle->_Super.offsetCalibStatus)
 8007d36:	f890 307f 	ldrb.w	r3, [r0, #127]	; 0x7f
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 8007d3a:	6816      	ldr	r6, [r2, #0]
{
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 8007d40:	b193      	cbz	r3, 8007d68 <R3_1_CurrentReadingPolarization+0x38>
  MODIFY_REG(ADCx->CR,
 8007d42:	68b3      	ldr	r3, [r6, #8]
 8007d44:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007d48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007d4c:	f043 0308 	orr.w	r3, r3, #8
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007d50:	2280      	movs	r2, #128	; 0x80
 8007d52:	60b3      	str	r3, [r6, #8]
 8007d54:	f8a0 2096 	strh.w	r2, [r0, #150]	; 0x96
  pHandle->_Super.Sector = SECTOR_5;
 8007d58:	2204      	movs	r2, #4
  pHandle->_Super.BrakeActionLock = false;
 8007d5a:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 8007d5c:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
  pHandle->_Super.BrakeActionLock = false;
 8007d60:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
}
 8007d64:	b003      	add	sp, #12
 8007d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007d68:	6855      	ldr	r5, [r2, #4]
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8007d6a:	6801      	ldr	r1, [r0, #0]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8007d6c:	6942      	ldr	r2, [r0, #20]
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8007d6e:	9100      	str	r1, [sp, #0]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8007d70:	9201      	str	r2, [sp, #4]
    pHandle->PolarizationCounter = 0U;
 8007d72:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
  CLEAR_BIT(TIMx->CCER, Channels);
 8007d76:	6a2a      	ldr	r2, [r5, #32]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 8007d78:	4938      	ldr	r1, [pc, #224]	; (8007e5c <R3_1_CurrentReadingPolarization+0x12c>)
    pHandle->PhaseAOffset = 0U;
 8007d7a:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8007d7e:	f422 62aa 	bic.w	r2, r2, #1360	; 0x550
 8007d82:	f022 0205 	bic.w	r2, r2, #5
    pHandle->PhaseCOffset = 0U;
 8007d86:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 8007d8a:	4f35      	ldr	r7, [pc, #212]	; (8007e60 <R3_1_CurrentReadingPolarization+0x130>)
 8007d8c:	622a      	str	r2, [r5, #32]
  pHandle->PolarizationSector=SECTOR_5;
 8007d8e:	2304      	movs	r3, #4
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007d90:	2280      	movs	r2, #128	; 0x80
 8007d92:	f8a0 2096 	strh.w	r2, [r0, #150]	; 0x96
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 8007d96:	6007      	str	r7, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 8007d98:	6141      	str	r1, [r0, #20]
  pHandle->PolarizationSector=SECTOR_5;
 8007d9a:	f880 3099 	strb.w	r3, [r0, #153]	; 0x99
  pHandle->_Super.Sector = SECTOR_5;   
 8007d9e:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
    R3_1_SwitchOnPWM(&pHandle->_Super);
 8007da2:	f7ff fb83 	bl	80074ac <R3_1_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 8007da6:	4a2f      	ldr	r2, [pc, #188]	; (8007e64 <R3_1_CurrentReadingPolarization+0x134>)
 8007da8:	686b      	ldr	r3, [r5, #4]
 8007daa:	4013      	ands	r3, r2
 8007dac:	2b70      	cmp	r3, #112	; 0x70
 8007dae:	d1fb      	bne.n	8007da8 <R3_1_CurrentReadingPolarization+0x78>
 8007db0:	68b3      	ldr	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 8007db2:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8007db6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007dba:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007dbe:	f043 0308 	orr.w	r3, r3, #8
 8007dc2:	60b3      	str	r3, [r6, #8]
 8007dc4:	f104 0798 	add.w	r7, r4, #152	; 0x98
 8007dc8:	f104 0656 	add.w	r6, r4, #86	; 0x56
 8007dcc:	4631      	mov	r1, r6
 8007dce:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 8007dd2:	463b      	mov	r3, r7
 8007dd4:	4628      	mov	r0, r5
 8007dd6:	f7fa ff0d 	bl	8002bf4 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM(&pHandle->_Super);
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f7ff fbb0 	bl	8007540 <R3_1_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 8007de0:	2300      	movs	r3, #0
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 8007de2:	4a21      	ldr	r2, [pc, #132]	; (8007e68 <R3_1_CurrentReadingPolarization+0x138>)
    pHandle->PolarizationCounter = 0U;
 8007de4:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  pHandle->PolarizationSector=SECTOR_1;
 8007de8:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  pHandle->_Super.Sector = SECTOR_1;   
 8007dec:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 8007df0:	6022      	str	r2, [r4, #0]
    R3_1_SwitchOnPWM(&pHandle->_Super);
 8007df2:	4620      	mov	r0, r4
 8007df4:	f7ff fb5a 	bl	80074ac <R3_1_SwitchOnPWM>
    waitForPolarizationEnd(TIMx,
 8007df8:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8007dfc:	463b      	mov	r3, r7
 8007dfe:	4631      	mov	r1, r6
 8007e00:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 8007e04:	4628      	mov	r0, r5
 8007e06:	f7fa fef5 	bl	8002bf4 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM(&pHandle->_Super);
 8007e0a:	4620      	mov	r0, r4
 8007e0c:	f7ff fb98 	bl	8007540 <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8007e10:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8007e14:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    if (0U == pHandle->_Super.SWerror)
 8007e18:	f8b4 0056 	ldrh.w	r0, [r4, #86]	; 0x56
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8007e1c:	0909      	lsrs	r1, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8007e1e:	0912      	lsrs	r2, r2, #4
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8007e20:	091b      	lsrs	r3, r3, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8007e22:	e9c4 1222 	strd	r1, r2, [r4, #136]	; 0x88
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8007e26:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (0U == pHandle->_Super.SWerror)
 8007e2a:	b910      	cbnz	r0, 8007e32 <R3_1_CurrentReadingPolarization+0x102>
      pHandle->_Super.offsetCalibStatus = true;
 8007e2c:	2301      	movs	r3, #1
 8007e2e:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 8007e32:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8007e36:	9900      	ldr	r1, [sp, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8007e38:	9a01      	ldr	r2, [sp, #4]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8007e3a:	6021      	str	r1, [r4, #0]
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 8007e3c:	085b      	lsrs	r3, r3, #1
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8007e3e:	6162      	str	r2, [r4, #20]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007e40:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007e42:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007e44:	63eb      	str	r3, [r5, #60]	; 0x3c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8007e46:	696b      	ldr	r3, [r5, #20]
 8007e48:	f043 0320 	orr.w	r3, r3, #32
 8007e4c:	616b      	str	r3, [r5, #20]
  SET_BIT(TIMx->CCER, Channels);
 8007e4e:	6a2b      	ldr	r3, [r5, #32]
 8007e50:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8007e54:	f043 0305 	orr.w	r3, r3, #5
 8007e58:	622b      	str	r3, [r5, #32]
 8007e5a:	e77d      	b.n	8007d58 <R3_1_CurrentReadingPolarization+0x28>
 8007e5c:	080073d5 	.word	0x080073d5
 8007e60:	08007419 	.word	0x08007419
 8007e64:	02000070 	.word	0x02000070
 8007e68:	08007465 	.word	0x08007465

08007e6c <R3_1_SetADCSampPointSectX>:
  if (MC_NULL == pHdl)
 8007e6c:	2800      	cmp	r0, #0
 8007e6e:	d038      	beq.n	8007ee2 <R3_1_SetADCSampPointSectX+0x76>
{
 8007e70:	b470      	push	{r4, r5, r6}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 8007e72:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
 8007e76:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8007e7a:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 8007e7e:	1aca      	subs	r2, r1, r3
 8007e80:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 8007e84:	b292      	uxth	r2, r2
 8007e86:	42b2      	cmp	r2, r6
 8007e88:	d917      	bls.n	8007eba <R3_1_SetADCSampPointSectX+0x4e>
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8007e8a:	1e4b      	subs	r3, r1, #1
      pHandle->_Super.Sector = SECTOR_5;
 8007e8c:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8007e8e:	b29b      	uxth	r3, r3
      pHandle->_Super.Sector = SECTOR_5;
 8007e90:	f880 207a 	strb.w	r2, [r0, #122]	; 0x7a
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007e94:	6862      	ldr	r2, [r4, #4]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8007e96:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8007e9a:	f8b0 4052 	ldrh.w	r4, [r0, #82]	; 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8007e9e:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ea2:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007ea4:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007ea6:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007ea8:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007eaa:	6852      	ldr	r2, [r2, #4]
 8007eac:	4b10      	ldr	r3, [pc, #64]	; (8007ef0 <R3_1_SetADCSampPointSectX+0x84>)
 8007eae:	421a      	tst	r2, r3
    returnValue = 0U;
 8007eb0:	bf14      	ite	ne
 8007eb2:	2001      	movne	r0, #1
 8007eb4:	2000      	moveq	r0, #0
}
 8007eb6:	bc70      	pop	{r4, r5, r6}
 8007eb8:	4770      	bx	lr
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 8007eba:	f8b0 505a 	ldrh.w	r5, [r0, #90]	; 0x5a
 8007ebe:	1b5d      	subs	r5, r3, r5
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 8007ec0:	b2ad      	uxth	r5, r5
 8007ec2:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 8007ec6:	d80d      	bhi.n	8007ee4 <R3_1_SetADCSampPointSectX+0x78>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8007ec8:	4433      	add	r3, r6
 8007eca:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 8007ecc:	4299      	cmp	r1, r3
 8007ece:	d8e1      	bhi.n	8007e94 <R3_1_SetADCSampPointSectX+0x28>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8007ed0:	43db      	mvns	r3, r3
 8007ed2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 8007ed6:	f44f 7280 	mov.w	r2, #256	; 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8007eda:	b29b      	uxth	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 8007edc:	f8a0 2096 	strh.w	r2, [r0, #150]	; 0x96
 8007ee0:	e7d8      	b.n	8007e94 <R3_1_SetADCSampPointSectX+0x28>
}
 8007ee2:	4770      	bx	lr
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8007ee4:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
 8007ee8:	1a9b      	subs	r3, r3, r2
 8007eea:	b29b      	uxth	r3, r3
 8007eec:	e7d2      	b.n	8007e94 <R3_1_SetADCSampPointSectX+0x28>
 8007eee:	bf00      	nop
 8007ef0:	02000070 	.word	0x02000070

08007ef4 <R3_1_TIMx_UP_IRQHandler>:
  if (MC_NULL == pHandle)
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	2800      	cmp	r0, #0
 8007ef8:	d039      	beq.n	8007f6e <R3_1_TIMx_UP_IRQHandler+0x7a>
{
 8007efa:	b4f0      	push	{r4, r5, r6, r7}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007efc:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
 8007f00:	f890 607a 	ldrb.w	r6, [r0, #122]	; 0x7a
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 8007f04:	6808      	ldr	r0, [r1, #0]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007f06:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    if (OPAMPParams != NULL)
 8007f0a:	b1d4      	cbz	r4, 8007f42 <R3_1_TIMx_UP_IRQHandler+0x4e>
      while (ADCx->JSQR != 0x0u)
 8007f0c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1fc      	bne.n	8007f0c <R3_1_TIMx_UP_IRQHandler+0x18>
 8007f12:	b233      	sxth	r3, r6
 8007f14:	eb04 0783 	add.w	r7, r4, r3, lsl #2
      operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8007f18:	f854 c023 	ldr.w	ip, [r4, r3, lsl #2]
      if (operationAmp != NULL)
 8007f1c:	f1bc 0f00 	cmp.w	ip, #0
 8007f20:	d007      	beq.n	8007f32 <R3_1_TIMx_UP_IRQHandler+0x3e>
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8007f22:	f8dc 3000 	ldr.w	r3, [ip]
 8007f26:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8007f28:	f423 7386 	bic.w	r3, r3, #268	; 0x10c
 8007f2c:	4323      	orrs	r3, r4
 8007f2e:	f8cc 3000 	str.w	r3, [ip]
      operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8007f32:	69bc      	ldr	r4, [r7, #24]
      if (operationAmp != NULL)
 8007f34:	b12c      	cbz	r4, 8007f42 <R3_1_TIMx_UP_IRQHandler+0x4e>
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8007f36:	6823      	ldr	r3, [r4, #0]
 8007f38:	6cbf      	ldr	r7, [r7, #72]	; 0x48
 8007f3a:	f423 7386 	bic.w	r3, r3, #268	; 0x10c
 8007f3e:	433b      	orrs	r3, r7
 8007f40:	6023      	str	r3, [r4, #0]
    ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007f42:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8007f46:	f8b2 3096 	ldrh.w	r3, [r2, #150]	; 0x96
 8007f4a:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8007f4c:	430b      	orrs	r3, r1
 8007f4e:	64c3      	str	r3, [r0, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007f50:	686b      	ldr	r3, [r5, #4]
 8007f52:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f5a:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007f5e:	2180      	movs	r1, #128	; 0x80
 8007f60:	606b      	str	r3, [r5, #4]
    tempPointer = &(pHandle->_Super.Motor);
 8007f62:	f102 0078 	add.w	r0, r2, #120	; 0x78
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007f66:	f8a2 1096 	strh.w	r1, [r2, #150]	; 0x96
}
 8007f6a:	bcf0      	pop	{r4, r5, r6, r7}
 8007f6c:	4770      	bx	lr
 8007f6e:	4770      	bx	lr

08007f70 <R3_1_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 8007f70:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
{
 8007f74:	b430      	push	{r4, r5}
  if (false == pHandle->_Super.RLDetectionMode)
 8007f76:	2900      	cmp	r1, #0
 8007f78:	d13f      	bne.n	8007ffa <R3_1_RLDetectionModeEnable+0x8a>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007f7a:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 8007f7e:	f890 507b 	ldrb.w	r5, [r0, #123]	; 0x7b
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007f82:	685b      	ldr	r3, [r3, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007f84:	699a      	ldr	r2, [r3, #24]
 8007f86:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007f8a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007f8e:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007f92:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007f94:	6a1a      	ldr	r2, [r3, #32]
 8007f96:	f042 0201 	orr.w	r2, r2, #1
 8007f9a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007f9c:	6a1a      	ldr	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 8007f9e:	2d01      	cmp	r5, #1
 8007fa0:	f022 0204 	bic.w	r2, r2, #4
 8007fa4:	621a      	str	r2, [r3, #32]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007fa6:	f103 0418 	add.w	r4, r3, #24
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007faa:	6359      	str	r1, [r3, #52]	; 0x34
 8007fac:	d032      	beq.n	8008014 <R3_1_RLDetectionModeEnable+0xa4>
    else if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 8007fae:	2d02      	cmp	r5, #2
 8007fb0:	d10f      	bne.n	8007fd2 <R3_1_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007fb2:	699a      	ldr	r2, [r3, #24]
 8007fb4:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007fb8:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007fbc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007fc0:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007fc2:	6a1a      	ldr	r2, [r3, #32]
 8007fc4:	f042 0210 	orr.w	r2, r2, #16
 8007fc8:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007fca:	6a1a      	ldr	r2, [r3, #32]
 8007fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fd0:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007fd2:	6862      	ldr	r2, [r4, #4]
 8007fd4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007fd8:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007fdc:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8007fe0:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007fe2:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8007fe4:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8007fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fec:	621a      	str	r2, [r3, #32]
 8007fee:	6a1a      	ldr	r2, [r3, #32]
 8007ff0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ff4:	621a      	str	r2, [r3, #32]
 8007ff6:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8007ffa:	4b0f      	ldr	r3, [pc, #60]	; (8008038 <R3_1_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 8007ffc:	490f      	ldr	r1, [pc, #60]	; (800803c <R3_1_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8007ffe:	4a10      	ldr	r2, [pc, #64]	; (8008040 <R3_1_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8008000:	4c10      	ldr	r4, [pc, #64]	; (8008044 <R3_1_RLDetectionModeEnable+0xd4>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8008002:	6003      	str	r3, [r0, #0]
  pHandle->_Super.RLDetectionMode = true;
 8008004:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8008006:	6104      	str	r4, [r0, #16]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8008008:	e9c0 2101 	strd	r2, r1, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 800800c:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
}
 8008010:	bc30      	pop	{r4, r5}
 8008012:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008014:	699a      	ldr	r2, [r3, #24]
 8008016:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800801a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800801e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008022:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008024:	6a1a      	ldr	r2, [r3, #32]
 8008026:	f022 0210 	bic.w	r2, r2, #16
 800802a:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 800802c:	6a1a      	ldr	r2, [r3, #32]
 800802e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008032:	621a      	str	r2, [r3, #32]
 8008034:	e7cd      	b.n	8007fd2 <R3_1_RLDetectionModeEnable+0x62>
 8008036:	bf00      	nop
 8008038:	080075a5 	.word	0x080075a5
 800803c:	080075fd 	.word	0x080075fd
 8008040:	08007541 	.word	0x08007541
 8008044:	080076e1 	.word	0x080076e1

08008048 <R3_1_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 8008048:	f890 307e 	ldrb.w	r3, [r0, #126]	; 0x7e
 800804c:	2b00      	cmp	r3, #0
 800804e:	d03c      	beq.n	80080ca <R3_1_RLDetectionModeDisable+0x82>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008050:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8008054:	685b      	ldr	r3, [r3, #4]
{
 8008056:	b470      	push	{r4, r5, r6}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008058:	699a      	ldr	r2, [r3, #24]
 800805a:	4c40      	ldr	r4, [pc, #256]	; (800815c <R3_1_RLDetectionModeDisable+0x114>)
 800805c:	f8b0 6094 	ldrh.w	r6, [r0, #148]	; 0x94
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 8008060:	f890 507b 	ldrb.w	r5, [r0, #123]	; 0x7b
 8008064:	4022      	ands	r2, r4
 8008066:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800806a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800806c:	6a19      	ldr	r1, [r3, #32]
 800806e:	2d01      	cmp	r5, #1
 8008070:	f041 0101 	orr.w	r1, r1, #1
 8008074:	6219      	str	r1, [r3, #32]
 8008076:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800807a:	d027      	beq.n	80080cc <R3_1_RLDetectionModeDisable+0x84>
    else if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800807c:	2d02      	cmp	r5, #2
 800807e:	d049      	beq.n	8008114 <R3_1_RLDetectionModeDisable+0xcc>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008080:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008082:	6999      	ldr	r1, [r3, #24]
 8008084:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008088:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 800808c:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8008090:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8008092:	6a19      	ldr	r1, [r3, #32]
 8008094:	f041 0110 	orr.w	r1, r1, #16
 8008098:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800809a:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800809c:	69d9      	ldr	r1, [r3, #28]
 800809e:	400c      	ands	r4, r1
 80080a0:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 80080a4:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80080a6:	6a19      	ldr	r1, [r3, #32]
 80080a8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80080ac:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 80080ae:	492c      	ldr	r1, [pc, #176]	; (8008160 <R3_1_RLDetectionModeDisable+0x118>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80080b0:	4a2c      	ldr	r2, [pc, #176]	; (8008164 <R3_1_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 80080b2:	63de      	str	r6, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80080b4:	4d2c      	ldr	r5, [pc, #176]	; (8008168 <R3_1_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 80080b6:	4c2d      	ldr	r4, [pc, #180]	; (800816c <R3_1_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 80080b8:	6005      	str	r5, [r0, #0]
    pHandle->_Super.RLDetectionMode = false;
 80080ba:	2300      	movs	r3, #0
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 80080bc:	6104      	str	r4, [r0, #16]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80080be:	e9c0 2101 	strd	r2, r1, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 80080c2:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
}
 80080c6:	bc70      	pop	{r4, r5, r6}
 80080c8:	4770      	bx	lr
 80080ca:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 80080cc:	6a19      	ldr	r1, [r3, #32]
 80080ce:	f041 0104 	orr.w	r1, r1, #4
 80080d2:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80080d4:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80080d6:	6999      	ldr	r1, [r3, #24]
 80080d8:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 80080dc:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 80080e0:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 80080e4:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80080e6:	6a19      	ldr	r1, [r3, #32]
 80080e8:	f041 0110 	orr.w	r1, r1, #16
 80080ec:	6219      	str	r1, [r3, #32]
 80080ee:	6a19      	ldr	r1, [r3, #32]
 80080f0:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80080f4:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80080f6:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80080f8:	69d9      	ldr	r1, [r3, #28]
 80080fa:	400c      	ands	r4, r1
 80080fc:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8008100:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8008102:	6a19      	ldr	r1, [r3, #32]
 8008104:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008108:	6219      	str	r1, [r3, #32]
 800810a:	6a19      	ldr	r1, [r3, #32]
 800810c:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8008110:	6219      	str	r1, [r3, #32]
 8008112:	e7cc      	b.n	80080ae <R3_1_RLDetectionModeDisable+0x66>
  CLEAR_BIT(TIMx->CCER, Channels);
 8008114:	6a19      	ldr	r1, [r3, #32]
 8008116:	f021 0104 	bic.w	r1, r1, #4
 800811a:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800811c:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800811e:	6999      	ldr	r1, [r3, #24]
 8008120:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8008124:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8008128:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 800812c:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800812e:	6a19      	ldr	r1, [r3, #32]
 8008130:	f041 0110 	orr.w	r1, r1, #16
 8008134:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008136:	6a19      	ldr	r1, [r3, #32]
 8008138:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 800813c:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800813e:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008140:	69d9      	ldr	r1, [r3, #28]
 8008142:	400c      	ands	r4, r1
 8008144:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8008148:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800814a:	6a19      	ldr	r1, [r3, #32]
 800814c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8008150:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8008152:	6a19      	ldr	r1, [r3, #32]
 8008154:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008158:	6219      	str	r1, [r3, #32]
 800815a:	e7a8      	b.n	80080ae <R3_1_RLDetectionModeDisable+0x66>
 800815c:	fffeff8c 	.word	0xfffeff8c
 8008160:	080074ad 	.word	0x080074ad
 8008164:	08007541 	.word	0x08007541
 8008168:	08007239 	.word	0x08007239
 800816c:	08007695 	.word	0x08007695

08008170 <R3_1_RLDetectionModeSetDuty>:
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008170:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8008174:	6852      	ldr	r2, [r2, #4]
{
 8008176:	b470      	push	{r4, r5, r6}
 8008178:	4603      	mov	r3, r0
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800817a:	f8b0 4094 	ldrh.w	r4, [r0, #148]	; 0x94
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800817e:	f8b0 5074 	ldrh.w	r5, [r0, #116]	; 0x74
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8008182:	69d0      	ldr	r0, [r2, #28]
 8008184:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8008188:	fb04 f101 	mul.w	r1, r4, r1
 800818c:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
 8008190:	0c09      	lsrs	r1, r1, #16
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 8008192:	1b64      	subs	r4, r4, r5
    pHandle->ADCRegularLocked = true;
 8008194:	2601      	movs	r6, #1
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 8008196:	f8b3 5076 	ldrh.w	r5, [r3, #118]	; 0x76
    pHandle->_Super.CntPhA = (uint16_t)val;
 800819a:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
 800819e:	f440 40e0 	orr.w	r0, r0, #28672	; 0x7000
    pHandle->ADCRegularLocked = true;
 80081a2:	f883 60a0 	strb.w	r6, [r3, #160]	; 0xa0
 80081a6:	61d0      	str	r0, [r2, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80081a8:	6414      	str	r4, [r2, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 80081aa:	63d5      	str	r5, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 80081ac:	6351      	str	r1, [r2, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80081ae:	6851      	ldr	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 80081b0:	f8b3 0056 	ldrh.w	r0, [r3, #86]	; 0x56
 80081b4:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 80081b8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80081bc:	f041 0170 	orr.w	r1, r1, #112	; 0x70
    pHdl->Sector = SECTOR_4;
 80081c0:	2403      	movs	r4, #3
 80081c2:	6051      	str	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 80081c4:	42b0      	cmp	r0, r6
    pHdl->Sector = SECTOR_4;
 80081c6:	f883 407a 	strb.w	r4, [r3, #122]	; 0x7a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80081ca:	6852      	ldr	r2, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 80081cc:	d006      	beq.n	80081dc <R3_1_RLDetectionModeSetDuty+0x6c>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80081ce:	4b06      	ldr	r3, [pc, #24]	; (80081e8 <R3_1_RLDetectionModeSetDuty+0x78>)
 80081d0:	421a      	tst	r2, r3
      hAux = MC_DURATION;
 80081d2:	bf14      	ite	ne
 80081d4:	4630      	movne	r0, r6
 80081d6:	2000      	moveq	r0, #0
}
 80081d8:	bc70      	pop	{r4, r5, r6}
 80081da:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 80081dc:	2200      	movs	r2, #0
 80081de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 80081e2:	bc70      	pop	{r4, r5, r6}
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	02000070 	.word	0x02000070

080081ec <R3_1_RLTurnOnLowSidesAndStart>:
  }
  else
  {
#endif
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80081ec:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c

    pHandle->ADCRegularLocked=true;
 80081f0:	2201      	movs	r2, #1
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80081f2:	685b      	ldr	r3, [r3, #4]
    pHandle->ADCRegularLocked=true;
 80081f4:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80081f8:	f06f 0201 	mvn.w	r2, #1
{
 80081fc:	b430      	push	{r4, r5}
 80081fe:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008200:	691a      	ldr	r2, [r3, #16]
 8008202:	07d1      	lsls	r1, r2, #31
 8008204:	d5fc      	bpl.n	8008200 <R3_1_RLTurnOnLowSidesAndStart+0x14>
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH2(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH3(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8008206:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
  WRITE_REG(TIMx->CCR1, CompareValue);
 800820a:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800820c:	f06f 0401 	mvn.w	r4, #1
 8008210:	3a05      	subs	r2, #5
 8008212:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008214:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008216:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008218:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800821a:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800821c:	691a      	ldr	r2, [r3, #16]
 800821e:	07d2      	lsls	r2, r2, #31
 8008220:	d5fc      	bpl.n	800821c <R3_1_RLTurnOnLowSidesAndStart+0x30>
    {
      /* Nothing to do */
    }

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8008222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    LL_TIM_EnableAllOutputs (TIMx);

    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 8008224:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8008228:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800822c:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800822e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 8008230:	2902      	cmp	r1, #2
 8008232:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008236:	645a      	str	r2, [r3, #68]	; 0x44
 8008238:	d10b      	bne.n	8008252 <R3_1_RLTurnOnLowSidesAndStart+0x66>
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800823a:	e9d0 140f 	ldrd	r1, r4, [r0, #60]	; 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800823e:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008242:	6c42      	ldr	r2, [r0, #68]	; 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008244:	618d      	str	r5, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008246:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800824a:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
 800824e:	61a5      	str	r5, [r4, #24]
 8008250:	6191      	str	r1, [r2, #24]
    else
    {
      /* Nothing to do */
    }

    pHdl->Sector = SECTOR_4;
 8008252:	2203      	movs	r2, #3
 8008254:	f880 207a 	strb.w	r2, [r0, #122]	; 0x7a
  SET_BIT(TIMx->CCER, Channels);
 8008258:	6a1a      	ldr	r2, [r3, #32]
 800825a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800825e:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8008260:	68da      	ldr	r2, [r3, #12]
 8008262:	f042 0201 	orr.w	r2, r2, #1
 8008266:	60da      	str	r2, [r3, #12]

    LL_TIM_EnableIT_UPDATE(TIMx);
#ifdef NULL_PTR_CHECK_R3_1_PWM_CURR_FDB
  }
#endif
}
 8008268:	bc30      	pop	{r4, r5}
 800826a:	4770      	bx	lr

0800826c <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800826c:	8982      	ldrh	r2, [r0, #12]
 800826e:	8a41      	ldrh	r1, [r0, #18]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008270:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8008272:	440a      	add	r2, r1
 8008274:	0852      	lsrs	r2, r2, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008276:	b183      	cbz	r3, 800829a <RVBS_Clear+0x2e>
{
 8008278:	b410      	push	{r4}
    {
      pHandle->aBuffer[index] = aux;
 800827a:	6944      	ldr	r4, [r0, #20]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800827c:	2300      	movs	r3, #0
      pHandle->aBuffer[index] = aux;
 800827e:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8008282:	3301      	adds	r3, #1
 8008284:	8941      	ldrh	r1, [r0, #10]
 8008286:	b29b      	uxth	r3, r3
 8008288:	4299      	cmp	r1, r3
 800828a:	d8f8      	bhi.n	800827e <RVBS_Clear+0x12>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 800828c:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 800828e:	8082      	strh	r2, [r0, #4]
    pHandle->_Super.AvBusVoltage_d = aux;
 8008290:	80c2      	strh	r2, [r0, #6]
    pHandle->index = 0U;
 8008292:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8008294:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008298:	4770      	bx	lr
    pHandle->index = 0U;
 800829a:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 800829c:	8082      	strh	r2, [r0, #4]
    pHandle->_Super.AvBusVoltage_d = aux;
 800829e:	80c2      	strh	r2, [r0, #6]
    pHandle->index = 0U;
 80082a0:	7643      	strb	r3, [r0, #25]
 80082a2:	4770      	bx	lr

080082a4 <RVBS_Init>:
{
 80082a4:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 80082a6:	f7ff ffe1 	bl	800826c <RVBS_Clear>
}
 80082aa:	bd08      	pop	{r3, pc}

080082ac <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
 80082ac:	b410      	push	{r4}
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 80082ae:	8981      	ldrh	r1, [r0, #12]
 80082b0:	89c4      	ldrh	r4, [r0, #14]
 80082b2:	88c2      	ldrh	r2, [r0, #6]
 80082b4:	42a1      	cmp	r1, r4
{
 80082b6:	4603      	mov	r3, r0
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 80082b8:	d00f      	beq.n	80082da <RVBS_CheckFaultState+0x2e>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 80082ba:	8a40      	ldrh	r0, [r0, #18]
 80082bc:	4290      	cmp	r0, r2
 80082be:	d808      	bhi.n	80082d2 <RVBS_CheckFaultState+0x26>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 80082c0:	7c18      	ldrb	r0, [r3, #16]
 80082c2:	b9a0      	cbnz	r0, 80082ee <RVBS_CheckFaultState+0x42>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 80082c4:	4294      	cmp	r4, r2
 80082c6:	d918      	bls.n	80082fa <RVBS_CheckFaultState+0x4e>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 80082c8:	2201      	movs	r2, #1
 80082ca:	741a      	strb	r2, [r3, #16]
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 80082cc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082d0:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 80082d2:	2004      	movs	r0, #4
}
 80082d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082d8:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 80082da:	4291      	cmp	r1, r2
 80082dc:	d30d      	bcc.n	80082fa <RVBS_CheckFaultState+0x4e>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 80082de:	8a40      	ldrh	r0, [r0, #18]
}
 80082e0:	f85d 4b04 	ldr.w	r4, [sp], #4
        fault = MC_UNDER_VOLT;
 80082e4:	4290      	cmp	r0, r2
 80082e6:	bf8c      	ite	hi
 80082e8:	2004      	movhi	r0, #4
 80082ea:	2000      	movls	r0, #0
}
 80082ec:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 80082ee:	4291      	cmp	r1, r2
 80082f0:	d307      	bcc.n	8008302 <RVBS_CheckFaultState+0x56>
        fault = MC_NO_ERROR;
 80082f2:	2000      	movs	r0, #0
}
 80082f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082f8:	4770      	bx	lr
        fault = MC_OVER_VOLT;
 80082fa:	2002      	movs	r0, #2
}
 80082fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008300:	4770      	bx	lr
          pHandle->OverVoltageHysteresisUpDir = false;
 8008302:	2200      	movs	r2, #0
 8008304:	741a      	strb	r2, [r3, #16]
          fault = MC_OVER_VOLT;
 8008306:	2002      	movs	r0, #2
 8008308:	e7e4      	b.n	80082d4 <RVBS_CheckFaultState+0x28>
 800830a:	bf00      	nop

0800830c <RVBS_CalcAvVbus>:
    if (0xFFFFU == hAux)
 800830c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008310:	4299      	cmp	r1, r3
{
 8008312:	b570      	push	{r4, r5, r6, lr}
 8008314:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 8008316:	d020      	beq.n	800835a <RVBS_CalcAvVbus+0x4e>
      pHandle->aBuffer[pHandle->index] = hAux;
 8008318:	7e43      	ldrb	r3, [r0, #25]
 800831a:	6942      	ldr	r2, [r0, #20]
 800831c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8008320:	8945      	ldrh	r5, [r0, #10]
 8008322:	f015 03ff 	ands.w	r3, r5, #255	; 0xff
 8008326:	d00d      	beq.n	8008344 <RVBS_CalcAvVbus+0x38>
 8008328:	3b01      	subs	r3, #1
 800832a:	b2db      	uxtb	r3, r3
 800832c:	eb02 0643 	add.w	r6, r2, r3, lsl #1
 8008330:	3a02      	subs	r2, #2
      wtemp = 0u;
 8008332:	2300      	movs	r3, #0
        wtemp += pHandle->aBuffer[i];
 8008334:	f832 0f02 	ldrh.w	r0, [r2, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8008338:	42b2      	cmp	r2, r6
        wtemp += pHandle->aBuffer[i];
 800833a:	4403      	add	r3, r0
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800833c:	d1fa      	bne.n	8008334 <RVBS_CalcAvVbus+0x28>
 800833e:	fbb3 f3f5 	udiv	r3, r3, r5
 8008342:	b29b      	uxth	r3, r3
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8008344:	7e62      	ldrb	r2, [r4, #25]
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8008346:	80e3      	strh	r3, [r4, #6]
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8008348:	3d01      	subs	r5, #1
 800834a:	42aa      	cmp	r2, r5
        pHandle->index++;
 800834c:	bf34      	ite	cc
 800834e:	3201      	addcc	r2, #1
        pHandle->index = 0U;
 8008350:	2300      	movcs	r3, #0
      pHandle->_Super.LatestConv = hAux;
 8008352:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 8008354:	bf34      	ite	cc
 8008356:	7662      	strbcc	r2, [r4, #25]
        pHandle->index = 0U;
 8008358:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800835a:	4620      	mov	r0, r4
 800835c:	f7ff ffa6 	bl	80082ac <RVBS_CheckFaultState>
 8008360:	8120      	strh	r0, [r4, #8]
}
 8008362:	bd70      	pop	{r4, r5, r6, pc}

08008364 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8008364:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8008366:	2201      	movs	r2, #1
 8008368:	6142      	str	r2, [r0, #20]
    pHandle->TargetFinal = 0;
 800836a:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 800836e:	e9c0 3303 	strd	r3, r3, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 8008372:	4770      	bx	lr

08008374 <SPD_GetMecAngle>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->wMecAngle);
#else
  return (pHandle->wMecAngle);
#endif
}
 8008374:	6880      	ldr	r0, [r0, #8]
 8008376:	4770      	bx	lr

08008378 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8008378:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800837c:	4770      	bx	lr
 800837e:	bf00      	nop

08008380 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8008380:	f9b1 1000 	ldrsh.w	r1, [r1]
{
 8008384:	b430      	push	{r4, r5}
 8008386:	b28a      	uxth	r2, r1
    if (*pMecSpeedUnit < 0)
 8008388:	2900      	cmp	r1, #0
    {
      hAux = -(*pMecSpeedUnit);
 800838a:	bfb8      	it	lt
 800838c:	4252      	neglt	r2, r2
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800838e:	8ac5      	ldrh	r5, [r0, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8008390:	78c4      	ldrb	r4, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8008392:	7803      	ldrb	r3, [r0, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8008394:	8a81      	ldrh	r1, [r0, #20]
      hAux = -(*pMecSpeedUnit);
 8008396:	bfb8      	it	lt
 8008398:	b292      	uxthlt	r2, r2
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800839a:	4295      	cmp	r5, r2
 800839c:	d819      	bhi.n	80083d2 <SPD_IsMecSpeedReliable+0x52>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800839e:	4291      	cmp	r1, r2
 80083a0:	bf2c      	ite	cs
 80083a2:	2200      	movcs	r2, #0
 80083a4:	2201      	movcc	r2, #1
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 80083a6:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
 80083aa:	b2a9      	uxth	r1, r5
 80083ac:	2d00      	cmp	r5, #0
    {
      hAux = -(pHandle->hMecAccelUnitP);
 80083ae:	bfb8      	it	lt
 80083b0:	4249      	neglt	r1, r1
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80083b2:	8b05      	ldrh	r5, [r0, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 80083b4:	bfb8      	it	lt
 80083b6:	b289      	uxthlt	r1, r1
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80083b8:	428d      	cmp	r5, r1
 80083ba:	d300      	bcc.n	80083be <SPD_IsMecSpeedReliable+0x3e>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 80083bc:	b15a      	cbz	r2, 80083d6 <SPD_IsMecSpeedReliable+0x56>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 80083be:	429c      	cmp	r4, r3
 80083c0:	d901      	bls.n	80083c6 <SPD_IsMecSpeedReliable+0x46>
      {
        bSpeedErrorNumber++;
 80083c2:	3301      	adds	r3, #1
 80083c4:	b2db      	uxtb	r3, r3
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80083c6:	7003      	strb	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 80083c8:	1b18      	subs	r0, r3, r4
 80083ca:	bf18      	it	ne
 80083cc:	2001      	movne	r0, #1
 80083ce:	bc30      	pop	{r4, r5}
 80083d0:	4770      	bx	lr
      SpeedError = true;
 80083d2:	2201      	movs	r2, #1
 80083d4:	e7e7      	b.n	80083a6 <SPD_IsMecSpeedReliable+0x26>
        bSpeedErrorNumber = 0u;
 80083d6:	429c      	cmp	r4, r3
 80083d8:	bf88      	it	hi
 80083da:	2300      	movhi	r3, #0
 80083dc:	e7f3      	b.n	80083c6 <SPD_IsMecSpeedReliable+0x46>
 80083de:	bf00      	nop

080083e0 <STC_Init>:
  * @retval none.
  *
  * - Called once right after object creation at initialization of the whole MC core.
  */
__weak void STC_Init(SpeednTorqCtrl_Handle_t *pHandle, PID_Handle_t *pPI, SpeednPosFdbk_Handle_t *SPD_Handle)
{
 80083e0:	b430      	push	{r4, r5}
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 80083e2:	f9b0 502c 	ldrsh.w	r5, [r0, #44]	; 0x2c
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 80083e6:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
    pHandle->PISpeed = pPI;
 80083ea:	6101      	str	r1, [r0, #16]
    pHandle->TargetFinal = 0;
 80083ec:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 80083ee:	042d      	lsls	r5, r5, #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 80083f0:	0424      	lsls	r4, r4, #16
    pHandle->Mode = pHandle->ModeDefault;
 80083f2:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
    pHandle->SPD = SPD_Handle;
 80083f6:	6142      	str	r2, [r0, #20]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 80083f8:	e9c0 5401 	strd	r5, r4, [r0, #4]
    pHandle->Mode = pHandle->ModeDefault;
 80083fc:	7001      	strb	r1, [r0, #0]
    pHandle->TargetFinal = 0;
 80083fe:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 8008400:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8008402:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8008404:	bc30      	pop	{r4, r5}
 8008406:	4770      	bx	lr

08008408 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8008408:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800840a:	4770      	bx	lr

0800840c <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 800840c:	7803      	ldrb	r3, [r0, #0]
 800840e:	2b03      	cmp	r3, #3
 8008410:	d000      	beq.n	8008414 <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8008412:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8008414:	6900      	ldr	r0, [r0, #16]
 8008416:	2100      	movs	r1, #0
 8008418:	f7fe be8e 	b.w	8007138 <PID_SetIntegralTerm>

0800841c <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800841c:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800841e:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8008420:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8008422:	4770      	bx	lr

08008424 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8008424:	4603      	mov	r3, r0
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8008426:	7800      	ldrb	r0, [r0, #0]
 8008428:	2804      	cmp	r0, #4
{
 800842a:	b430      	push	{r4, r5}
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800842c:	d015      	beq.n	800845a <STC_ExecRamp+0x36>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800842e:	8bdc      	ldrh	r4, [r3, #30]
 8008430:	428c      	cmp	r4, r1
 8008432:	db15      	blt.n	8008460 <STC_ExecRamp+0x3c>
      {
        allowedRange = false;
      }
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8008434:	f9b3 4024 	ldrsh.w	r4, [r3, #36]	; 0x24
 8008438:	428c      	cmp	r4, r1
 800843a:	dc11      	bgt.n	8008460 <STC_ExecRamp+0x3c>
      {
        allowedRange = false;
      }
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800843c:	8c1c      	ldrh	r4, [r3, #32]
 800843e:	428c      	cmp	r4, r1
 8008440:	dd03      	ble.n	800844a <STC_ExecRamp+0x26>
      {
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8008442:	f9b3 4022 	ldrsh.w	r4, [r3, #34]	; 0x22
 8008446:	428c      	cmp	r4, r1
 8008448:	db0a      	blt.n	8008460 <STC_ExecRamp+0x3c>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800844a:	685c      	ldr	r4, [r3, #4]
    }

    if (true == allowedRange)
    {
      /* Interrupts the execution of any previous ramp command */
      if (0U == hDurationms)
 800844c:	b9ca      	cbnz	r2, 8008482 <STC_ExecRamp+0x5e>
      {
        if (MCM_SPEED_MODE == pHandle->Mode)
 800844e:	2803      	cmp	r0, #3
 8008450:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8008454:	d10e      	bne.n	8008474 <STC_ExecRamp+0x50>
        {
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8008456:	6059      	str	r1, [r3, #4]
 8008458:	e00d      	b.n	8008476 <STC_ExecRamp+0x52>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 800845a:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 800845c:	4288      	cmp	r0, r1
 800845e:	da02      	bge.n	8008466 <STC_ExecRamp+0x42>
        allowedRange = false;
 8008460:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8008462:	bc30      	pop	{r4, r5}
 8008464:	4770      	bx	lr
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8008466:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
      hCurrentReference = STC_GetTorqueRef(pHandle);
 800846a:	6898      	ldr	r0, [r3, #8]
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800846c:	428c      	cmp	r4, r1
 800846e:	dcf7      	bgt.n	8008460 <STC_ExecRamp+0x3c>
      if (0U == hDurationms)
 8008470:	b9d2      	cbnz	r2, 80084a8 <STC_ExecRamp+0x84>
 8008472:	0409      	lsls	r1, r1, #16
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8008474:	6099      	str	r1, [r3, #8]
        pHandle->RampRemainingStep = 0U;
 8008476:	2200      	movs	r2, #0
 8008478:	2001      	movs	r0, #1
 800847a:	60da      	str	r2, [r3, #12]
        pHandle->IncDecAmount = 0;
 800847c:	619a      	str	r2, [r3, #24]
}
 800847e:	bc30      	pop	{r4, r5}
 8008480:	4770      	bx	lr
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8008482:	1420      	asrs	r0, r4, #16
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8008484:	8b9c      	ldrh	r4, [r3, #28]
        wAux /= 1000U;
 8008486:	4d09      	ldr	r5, [pc, #36]	; (80084ac <STC_ExecRamp+0x88>)
        pHandle->TargetFinal = hTargetFinal;
 8008488:	8059      	strh	r1, [r3, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800848a:	fb02 f204 	mul.w	r2, r2, r4
        wAux /= 1000U;
 800848e:	fba5 4202 	umull	r4, r2, r5, r2
 8008492:	0992      	lsrs	r2, r2, #6
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8008494:	1a09      	subs	r1, r1, r0
        pHandle->RampRemainingStep++;
 8008496:	3201      	adds	r2, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8008498:	0409      	lsls	r1, r1, #16
        pHandle->IncDecAmount = wAux1;
 800849a:	2001      	movs	r0, #1
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800849c:	fb91 f1f2 	sdiv	r1, r1, r2
        pHandle->RampRemainingStep++;
 80084a0:	60da      	str	r2, [r3, #12]
        pHandle->IncDecAmount = wAux1;
 80084a2:	6199      	str	r1, [r3, #24]
}
 80084a4:	bc30      	pop	{r4, r5}
 80084a6:	4770      	bx	lr
  return ((int16_t)(pHandle->TorqueRef >> 16));
 80084a8:	1400      	asrs	r0, r0, #16
 80084aa:	e7eb      	b.n	8008484 <STC_ExecRamp+0x60>
 80084ac:	10624dd3 	.word	0x10624dd3

080084b0 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 80084b0:	b570      	push	{r4, r5, r6, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 80084b2:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80084b6:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 80084b8:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->SpeedRefUnitExt;
 80084ba:	2a04      	cmp	r2, #4
 80084bc:	bf18      	it	ne
 80084be:	460d      	movne	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 80084c0:	2b01      	cmp	r3, #1
 80084c2:	d90a      	bls.n	80084da <STC_CalcTorqueReference+0x2a>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 80084c4:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 80084c6:	3b01      	subs	r3, #1
 80084c8:	60c3      	str	r3, [r0, #12]
      wCurrentReference += pHandle->IncDecAmount;
 80084ca:	440d      	add	r5, r1
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 80084cc:	2a03      	cmp	r2, #3
 80084ce:	ea4f 4625 	mov.w	r6, r5, asr #16
 80084d2:	d00c      	beq.n	80084ee <STC_CalcTorqueReference+0x3e>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
    }
    else
    {
      pHandle->TorqueRef = wCurrentReference;
 80084d4:	6085      	str	r5, [r0, #8]
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 80084d6:	b230      	sxth	r0, r6
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 80084d8:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 80084da:	d1f7      	bne.n	80084cc <STC_CalcTorqueReference+0x1c>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80084dc:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 80084e0:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80084e2:	042d      	lsls	r5, r5, #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 80084e4:	2a03      	cmp	r2, #3
      pHandle->RampRemainingStep = 0U;
 80084e6:	60c3      	str	r3, [r0, #12]
 80084e8:	ea4f 4625 	mov.w	r6, r5, asr #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 80084ec:	d1f2      	bne.n	80084d4 <STC_CalcTorqueReference+0x24>
 80084ee:	4604      	mov	r4, r0
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 80084f0:	6940      	ldr	r0, [r0, #20]
 80084f2:	f7ff ff41 	bl	8008378 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 80084f6:	1a30      	subs	r0, r6, r0
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 80084f8:	b201      	sxth	r1, r0
 80084fa:	6920      	ldr	r0, [r4, #16]
 80084fc:	f7fe fe1e 	bl	800713c <PI_Controller>
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8008500:	0403      	lsls	r3, r0, #16
 8008502:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 8008506:	bd70      	pop	{r4, r5, r6, pc}

08008508 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8008508:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 800850c:	4770      	bx	lr
 800850e:	bf00      	nop

08008510 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 8008510:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8008514:	2000      	movs	r0, #0
 8008516:	b29a      	uxth	r2, r3
 8008518:	f362 000f 	bfi	r0, r2, #0, #16
 800851c:	0c1b      	lsrs	r3, r3, #16
{
 800851e:	b082      	sub	sp, #8
  return (IqdRefDefault);
 8008520:	f363 401f 	bfi	r0, r3, #16, #16
}
 8008524:	b002      	add	sp, #8
 8008526:	4770      	bx	lr

08008528 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8008528:	b510      	push	{r4, lr}
 800852a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800852c:	6940      	ldr	r0, [r0, #20]
 800852e:	f7ff ff23 	bl	8008378 <SPD_GetAvrgMecSpeedUnit>
 8008532:	0400      	lsls	r0, r0, #16
 8008534:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8008536:	bd10      	pop	{r4, pc}

08008538 <TC_Init>:
  * @param  pSTC pointer on the handler of the current instance of the SpeednTorqCtrl component.
  * @param  pENC handler of the current instance of the EncAlignCtrl component.
 
  */
void TC_Init(PosCtrl_Handle_t *pHandle, PID_Handle_t *pPIDPosReg, SpeednTorqCtrl_Handle_t *pSTC, ENCODER_Handle_t *pENC)
{
 8008538:	b410      	push	{r4}
  pHandle->ElapseTime = 0.0f;

  pHandle->PositionControlRegulation = DISABLE;
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;

  pHandle->pENC = pENC;
 800853a:	6643      	str	r3, [r0, #100]	; 0x64
  pHandle->MovementDuration = 0.0f;
 800853c:	2400      	movs	r4, #0
  pHandle->ReceivedTh = 0.0f;
 800853e:	2300      	movs	r3, #0
  pHandle->MovementDuration = 0.0f;
 8008540:	6004      	str	r4, [r0, #0]
  pHandle->AngleStep = 0.0f;
 8008542:	60c4      	str	r4, [r0, #12]
  pHandle->SubStep[0] = 0.0f;
 8008544:	6104      	str	r4, [r0, #16]
  pHandle->SubStep[1] = 0.0f;
 8008546:	6144      	str	r4, [r0, #20]
  pHandle->SubStep[2] = 0.0f;
 8008548:	6184      	str	r4, [r0, #24]
  pHandle->SubStep[3] = 0.0f;
 800854a:	61c4      	str	r4, [r0, #28]
  pHandle->SubStep[4] = 0.0f;
 800854c:	6204      	str	r4, [r0, #32]
  pHandle->SubStep[5] = 0.0f;
 800854e:	6244      	str	r4, [r0, #36]	; 0x24
  pHandle->SubStepDuration = 0;
 8008550:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->Jerk = 0.0f;
 8008552:	6344      	str	r4, [r0, #52]	; 0x34
  pHandle->CruiseSpeed = 0.0f;
 8008554:	6384      	str	r4, [r0, #56]	; 0x38
  pHandle->Acceleration = 0.0f;
 8008556:	63c4      	str	r4, [r0, #60]	; 0x3c
  pHandle->Omega = 0.0f;
 8008558:	6404      	str	r4, [r0, #64]	; 0x40
  pHandle->OmegaPrev = 0.0f;
 800855a:	6444      	str	r4, [r0, #68]	; 0x44
  pHandle->Theta = 0.0f;
 800855c:	6484      	str	r4, [r0, #72]	; 0x48
  pHandle->ThetaPrev = 0.0f;
 800855e:	64c4      	str	r4, [r0, #76]	; 0x4c
  pHandle->ElapseTime = 0.0f;
 8008560:	62c4      	str	r4, [r0, #44]	; 0x2c
  pHandle->pSTC = pSTC;
  pHandle->PIDPosRegulator = pPIDPosReg;
 8008562:	e9c0 211a 	strd	r2, r1, [r0, #104]	; 0x68
  pHandle->ReceivedTh = 0.0f;
 8008566:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  pHandle->TcTick = 0;
 800856a:	6583      	str	r3, [r0, #88]	; 0x58
  pHandle->PositionControlRegulation = DISABLE;
 800856c:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008570:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  pHandle->MecAngleOffset = 0;
 8008574:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
 8008578:	f85d 4b04 	ldr.w	r4, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop

08008580 <TC_MoveCommand>:
  * This function implements the Trajectory Control mode. When fDuration is different from 0,
  * the trajectory of the movement, and therefore its acceleration and speed, are computed. 
  * 
  */
bool TC_MoveCommand(PosCtrl_Handle_t *pHandle, float startingAngle, float angleStep, float movementDuration)
{
 8008580:	4603      	mov	r3, r0

  bool RetConfigStatus = false;
  float fMinimumStepDuration;

  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 8008582:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 8008586:	2803      	cmp	r0, #3
 8008588:	d050      	beq.n	800862c <TC_MoveCommand+0xac>
  else
  {
    /* Nothing to do */
  }

  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 800858a:	b108      	cbz	r0, 8008590 <TC_MoveCommand+0x10>
  bool RetConfigStatus = false;
 800858c:	2000      	movs	r0, #0
  else
  {
    /* Nothing to do */
  }
  return (RetConfigStatus);
}
 800858e:	4770      	bx	lr
  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 8008590:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8008594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008598:	ddf9      	ble.n	800858e <TC_MoveCommand+0xe>
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800859a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800859e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8008638 <TC_MoveCommand+0xb8>
    pHandle->StartingAngle = startingAngle;
 80085a2:	ed83 0a01 	vstr	s0, [r3, #4]
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80085a6:	eef2 5a02 	vmov.f32	s11, #34	; 0x41100000  9.0
 80085aa:	ee67 5aa5 	vmul.f32	s11, s15, s11
    pHandle->FinalAngle = startingAngle + angleStep;
 80085ae:	ee30 5a20 	vadd.f32	s10, s0, s1
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80085b2:	eec1 7a25 	vdiv.f32	s15, s2, s11
    pHandle->SubStep[0] = 0 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 80085b6:	2200      	movs	r2, #0
    pHandle->PositionControlRegulation = ENABLE;
 80085b8:	2001      	movs	r0, #1
 80085ba:	f883 0051 	strb.w	r0, [r3, #81]	; 0x51
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 80085be:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    pHandle->SubStep[0] = 0 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 80085c2:	611a      	str	r2, [r3, #16]
    pHandle->SubStep[1] = 0 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 80085c4:	615a      	str	r2, [r3, #20]
    pHandle->SubStep[2] = 0 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80085c6:	619a      	str	r2, [r3, #24]
    pHandle->ElapseTime = 0.0f;
 80085c8:	62da      	str	r2, [r3, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 80085ca:	641a      	str	r2, [r3, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 80085cc:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80085ce:	eeb2 6a08 	vmov.f32	s12, #40	; 0x41400000  12.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80085d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    pHandle->FinalAngle = startingAngle + angleStep;
 80085d6:	ed83 5a02 	vstr	s10, [r3, #8]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80085da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pHandle->SubStep[3] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 80085de:	eef2 6a03 	vmov.f32	s13, #35	; 0x41180000  9.5
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80085e2:	ee67 7aa5 	vmul.f32	s15, s15, s11
    pHandle->AngleStep = angleStep;
 80085e6:	edc3 0a03 	vstr	s1, [r3, #12]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80085ea:	ee27 7a87 	vmul.f32	s14, s15, s14
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80085ee:	edc3 7a00 	vstr	s15, [r3]
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80085f2:	ee27 5a07 	vmul.f32	s10, s14, s14
 80085f6:	ee27 6a06 	vmul.f32	s12, s14, s12
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80085fa:	ee75 5a05 	vadd.f32	s11, s10, s10
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80085fe:	ee26 6a05 	vmul.f32	s12, s12, s10
    pHandle->SubStep[3] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8008602:	ee67 6a26 	vmul.f32	s13, s14, s13
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008606:	ee80 5a86 	vdiv.f32	s10, s1, s12
    pHandle->Theta = startingAngle;
 800860a:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800860e:	ee65 7a85 	vmul.f32	s15, s11, s10
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008612:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008616:	ed83 5a0d 	vstr	s10, [r3, #52]	; 0x34
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800861a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    pHandle->SubStep[3] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800861e:	edc3 6a07 	vstr	s13, [r3, #28]
    pHandle->SubStep[4] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8008622:	edc3 6a08 	vstr	s13, [r3, #32]
    pHandle->SubStep[5] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008626:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
 800862a:	4770      	bx	lr
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 800862c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8008630:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008634:	dcb1      	bgt.n	800859a <TC_MoveCommand+0x1a>
 8008636:	e7a9      	b.n	800858c <TC_MoveCommand+0xc>
 8008638:	3de38e39 	.word	0x3de38e39

0800863c <TC_FollowCommand>:
void TC_FollowCommand(PosCtrl_Handle_t *pHandle, float Angle)
{
  float omega = 0, acceleration = 0, dt = 0;

  /* Estimate speed */
  if (pHandle->ReceivedTh > 0)
 800863c:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8008640:	b363      	cbz	r3, 800869c <TC_FollowCommand+0x60>
  {
    /* Calculate dt */
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 8008642:	edd0 7a16 	vldr	s15, [r0, #88]	; 0x58
 8008646:	ed90 7a17 	vldr	s14, [r0, #92]	; 0x5c
 800864a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pHandle->TcTick = 0;
 800864e:	2200      	movs	r2, #0
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 8008650:	ee67 7a87 	vmul.f32	s15, s15, s14
    pHandle->TcTick = 0;
 8008654:	6582      	str	r2, [r0, #88]	; 0x58
    if (dt > 0)
 8008656:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800865a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800865e:	dd29      	ble.n	80086b4 <TC_FollowCommand+0x78>
    {
      omega = (Angle - pHandle->ThetaPrev) / dt;
 8008660:	edd0 6a13 	vldr	s13, [r0, #76]	; 0x4c
 8008664:	ee70 6a66 	vsub.f32	s13, s0, s13
  {
    /* Nothing to do */
  }

  /* Estimated acceleration */
  if (pHandle->ReceivedTh > 1)
 8008668:	2b01      	cmp	r3, #1
      omega = (Angle - pHandle->ThetaPrev) / dt;
 800866a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  if (pHandle->ReceivedTh > 1)
 800866e:	d917      	bls.n	80086a0 <TC_FollowCommand+0x64>
  {
    if (dt > 0)
    {
      acceleration = (omega - pHandle->OmegaPrev) / dt;
 8008670:	ed90 6a11 	vldr	s12, [r0, #68]	; 0x44
 8008674:	ee37 6a46 	vsub.f32	s12, s14, s12
 8008678:	eec6 6a27 	vdiv.f32	s13, s12, s15
  {
    /* Nothing to do */
  }

  /* Update state variable */
  pHandle->ThetaPrev  = Angle;
 800867c:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
  pHandle->OmegaPrev = omega;
 8008680:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
  pHandle->Acceleration = acceleration;
  pHandle->Omega = omega;
  pHandle->Theta = Angle;

  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
  pHandle->MovementDuration = 0;
 8008684:	2200      	movs	r2, #0
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 8008686:	2303      	movs	r3, #3
  pHandle->Acceleration = acceleration;
 8008688:	edc0 6a0f 	vstr	s13, [r0, #60]	; 0x3c
  pHandle->Omega = omega;
 800868c:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
  pHandle->Theta = Angle;
 8008690:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
  pHandle->MovementDuration = 0;
 8008694:	6002      	str	r2, [r0, #0]
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 8008696:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
}
 800869a:	4770      	bx	lr
  float omega = 0, acceleration = 0, dt = 0;
 800869c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80086c4 <TC_FollowCommand+0x88>
  pHandle->ThetaPrev  = Angle;
 80086a0:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
    pHandle->ReceivedTh++;
 80086a4:	3301      	adds	r3, #1
 80086a6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  pHandle->OmegaPrev = omega;
 80086aa:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
 80086ae:	eddf 6a05 	vldr	s13, [pc, #20]	; 80086c4 <TC_FollowCommand+0x88>
 80086b2:	e7e7      	b.n	8008684 <TC_FollowCommand+0x48>
  if (pHandle->ReceivedTh > 1)
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d9f1      	bls.n	800869c <TC_FollowCommand+0x60>
  float omega = 0, acceleration = 0, dt = 0;
 80086b8:	ed9f 7a02 	vldr	s14, [pc, #8]	; 80086c4 <TC_FollowCommand+0x88>
 80086bc:	eef0 6a47 	vmov.f32	s13, s14
 80086c0:	e7dc      	b.n	800867c <TC_FollowCommand+0x40>
 80086c2:	bf00      	nop
 80086c4:	00000000 	.word	0x00000000

080086c8 <TC_PositionRegulation>:
/**
  * @brief  Proceeds on the position control loop.
  * @param  pHandle: handler of the current instance of the Position Control component.
  */
void TC_PositionRegulation(PosCtrl_Handle_t *pHandle)
{
 80086c8:	b538      	push	{r3, r4, r5, lr}
  int32_t wMecAngleRef;
  int32_t wMecAngle;
  int32_t wError;
  int32_t hTorqueRef_Pos;

  if (pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING)
 80086ca:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d038      	beq.n	8008744 <TC_PositionRegulation+0x7c>
  else
  {
    /* Nothing to do */
  }

  if (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING)
 80086d2:	2b03      	cmp	r3, #3
 80086d4:	d003      	beq.n	80086de <TC_PositionRegulation+0x16>
  else
  {
    /* Nothing to do */
  }

  if (pHandle->PositionControlRegulation == ENABLE)
 80086d6:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 80086da:	b9a3      	cbnz	r3, 8008706 <TC_PositionRegulation+0x3e>
  else
  {
    /* Nothing to do */
  }

}
 80086dc:	bd38      	pop	{r3, r4, r5, pc}
  * @brief  Updates the angular position.
  * @param  pHandle handler of the current instance of the Position Control component.
  */
static inline void TC_FollowExecution(PosCtrl_Handle_t *pHandle)
{
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80086de:	edd0 6a0c 	vldr	s13, [r0, #48]	; 0x30
 80086e2:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
 80086e6:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80086ea:	ed90 7a12 	vldr	s14, [r0, #72]	; 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 80086ee:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80086f2:	eee6 7a26 	vfma.f32	s15, s12, s13
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80086f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80086fa:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80086fe:	ed80 7a12 	vstr	s14, [r0, #72]	; 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0ea      	beq.n	80086dc <TC_PositionRegulation+0x14>
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 8008706:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800885c <TC_PositionRegulation+0x194>
 800870a:	edd0 7a12 	vldr	s15, [r0, #72]	; 0x48
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800870e:	6e83      	ldr	r3, [r0, #104]	; 0x68
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 8008710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008714:	4604      	mov	r4, r0
 8008716:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800871a:	6958      	ldr	r0, [r3, #20]
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 800871c:	ee17 5a90 	vmov	r5, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 8008720:	f7ff fe28 	bl	8008374 <SPD_GetMecAngle>
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 8008724:	1a29      	subs	r1, r5, r0
 8008726:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008728:	f7fe fd4c 	bl	80071c4 <PID_Controller>
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 800872c:	2104      	movs	r1, #4
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 800872e:	4605      	mov	r5, r0
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8008730:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008732:	f7ff fe73 	bl	800841c <STC_SetControlMode>
    STC_ExecRamp(pHandle->pSTC, hTorqueRef_Pos, 0);
 8008736:	4629      	mov	r1, r5
 8008738:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800873a:	2200      	movs	r2, #0
}
 800873c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    STC_ExecRamp(pHandle->pSTC, hTorqueRef_Pos, 0);
 8008740:	f7ff be70 	b.w	8008424 <STC_ExecRamp>
  if (pHandle->ElapseTime < pHandle->SubStep[0])            /* 1st Sub-Step interval time of acceleration phase */
 8008744:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 8008748:	edd0 5a04 	vldr	s11, [r0, #16]
 800874c:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 8008750:	ed90 6a00 	vldr	s12, [r0]
 8008754:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8008758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800875c:	ee77 6a27 	vadd.f32	s13, s14, s15
 8008760:	ee36 5a27 	vadd.f32	s10, s12, s15
 8008764:	d529      	bpl.n	80087ba <TC_PositionRegulation+0xf2>
 8008766:	edd0 5a0d 	vldr	s11, [r0, #52]	; 0x34
 800876a:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
 800876e:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
 8008772:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8008776:	ee66 5a27 	vmul.f32	s11, s12, s15
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800877a:	ee37 7a25 	vadd.f32	s14, s14, s11
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 800877e:	edd0 5a12 	vldr	s11, [r0, #72]	; 0x48
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 8008782:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 8008786:	eee7 5a27 	vfma.f32	s11, s14, s15
static inline bool TC_RampCompleted(PosCtrl_Handle_t *pHandle)
{
  bool retVal = false;

  /* Check that entire sequence (Acceleration - Cruise - Deceleration) is completed */
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 800878a:	eef4 6ac5 	vcmpe.f32	s13, s10
 800878e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 8008792:	ed80 6a0f 	vstr	s12, [r0, #60]	; 0x3c
  pHandle->ElapseTime += pHandle->SamplingTime;
 8008796:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 800879a:	edc0 5a12 	vstr	s11, [r0, #72]	; 0x48
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 800879e:	dd9a      	ble.n	80086d6 <TC_PositionRegulation+0xe>
    if (TC_ZERO_ALIGNMENT_START == pHandle->AlignmentStatus)
 80087a0:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 80087a4:	2b01      	cmp	r3, #1
      pHandle->AlignmentStatus = TC_ALIGNMENT_ERROR;
 80087a6:	bf04      	itt	eq
 80087a8:	2305      	moveq	r3, #5
 80087aa:	f880 3062 	strbeq.w	r3, [r0, #98]	; 0x62
    pHandle->ElapseTime = 0;
 80087ae:	2200      	movs	r2, #0
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 80087b0:	2300      	movs	r3, #0
    pHandle->ElapseTime = 0;
 80087b2:	62c2      	str	r2, [r0, #44]	; 0x2c
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 80087b4:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80087b8:	e78d      	b.n	80086d6 <TC_PositionRegulation+0xe>
  else if (pHandle->ElapseTime < pHandle->SubStep[1])       /* 2nd Sub-Step interval time of acceleration phase */
 80087ba:	edd0 5a05 	vldr	s11, [r0, #20]
 80087be:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80087c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c6:	d414      	bmi.n	80087f2 <TC_PositionRegulation+0x12a>
  else if (pHandle->ElapseTime < pHandle->SubStep[2])       /* 3rd Sub-Step interval time of acceleration phase */
 80087c8:	edd0 5a06 	vldr	s11, [r0, #24]
 80087cc:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80087d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087d4:	d414      	bmi.n	8008800 <TC_PositionRegulation+0x138>
  else if (pHandle->ElapseTime < pHandle->SubStep[3])       /* Speed Cruise phase (after acceleration and before
 80087d6:	edd0 5a07 	vldr	s11, [r0, #28]
 80087da:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80087de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087e2:	d51a      	bpl.n	800881a <TC_PositionRegulation+0x152>
    pHandle->Omega = pHandle->CruiseSpeed;
 80087e4:	eddf 5a1e 	vldr	s11, [pc, #120]	; 8008860 <TC_PositionRegulation+0x198>
 80087e8:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 80087ec:	eeb0 6a65 	vmov.f32	s12, s11
 80087f0:	e7c3      	b.n	800877a <TC_PositionRegulation+0xb2>
 80087f2:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
 80087f6:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
 80087fa:	ee66 5a27 	vmul.f32	s11, s12, s15
 80087fe:	e7bc      	b.n	800877a <TC_PositionRegulation+0xb2>
 8008800:	edd0 5a0d 	vldr	s11, [r0, #52]	; 0x34
 8008804:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
 8008808:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
 800880c:	ee67 5aa5 	vmul.f32	s11, s15, s11
 8008810:	ee36 6a65 	vsub.f32	s12, s12, s11
 8008814:	ee66 5a27 	vmul.f32	s11, s12, s15
 8008818:	e7af      	b.n	800877a <TC_PositionRegulation+0xb2>
  else if (pHandle->ElapseTime < pHandle->SubStep[4])       /* 1st Sub-Step interval time of deceleration phase */
 800881a:	edd0 5a08 	vldr	s11, [r0, #32]
 800881e:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8008822:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008826:	d4eb      	bmi.n	8008800 <TC_PositionRegulation+0x138>
  else if (pHandle->ElapseTime < pHandle->SubStep[5])       /* 2nd Sub-Step interval time of deceleration phase */
 8008828:	edd0 5a09 	vldr	s11, [r0, #36]	; 0x24
 800882c:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8008830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008834:	d4dd      	bmi.n	80087f2 <TC_PositionRegulation+0x12a>
  else if (pHandle->ElapseTime < pHandle->MovementDuration) /* 3rd Sub-Step interval time of deceleration phase */
 8008836:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800883a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800883e:	d492      	bmi.n	8008766 <TC_PositionRegulation+0x9e>
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 8008840:	eef4 6ac5 	vcmpe.f32	s13, s10
    pHandle->Theta = pHandle->FinalAngle;
 8008844:	6882      	ldr	r2, [r0, #8]
  pHandle->ElapseTime += pHandle->SamplingTime;
 8008846:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 800884a:	2302      	movs	r3, #2
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 800884c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    pHandle->Theta = pHandle->FinalAngle;
 8008850:	6482      	str	r2, [r0, #72]	; 0x48
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 8008852:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 8008856:	dca3      	bgt.n	80087a0 <TC_PositionRegulation+0xd8>
 8008858:	e73d      	b.n	80086d6 <TC_PositionRegulation+0xe>
 800885a:	bf00      	nop
 800885c:	4622f983 	.word	0x4622f983
 8008860:	00000000 	.word	0x00000000

08008864 <TC_EncAlignmentCommand>:
  if (TC_ALIGNMENT_COMPLETED == pHandle->AlignmentStatus)
 8008864:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 8008868:	2b02      	cmp	r3, #2
 800886a:	d012      	beq.n	8008892 <TC_EncAlignmentCommand+0x2e>
{
 800886c:	b510      	push	{r4, lr}
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 800886e:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 8008872:	2b04      	cmp	r3, #4
{
 8008874:	b082      	sub	sp, #8
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 8008876:	d010      	beq.n	800889a <TC_EncAlignmentCommand+0x36>
      pHandle->pENC->_Super.wMecAngle = 0;
 8008878:	6e44      	ldr	r4, [r0, #100]	; 0x64
 800887a:	2300      	movs	r3, #0
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800887c:	2102      	movs	r1, #2
      pHandle->PositionControlRegulation = ENABLE;
 800887e:	2201      	movs	r2, #1
      pHandle->pENC->_Super.wMecAngle = 0;
 8008880:	60a3      	str	r3, [r4, #8]
      pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008882:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 8008886:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
      pHandle->PositionControlRegulation = ENABLE;
 800888a:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
}
 800888e:	b002      	add	sp, #8
 8008890:	bd10      	pop	{r4, pc}
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008892:	2300      	movs	r3, #0
 8008894:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 8008898:	4770      	bx	lr
 800889a:	4604      	mov	r4, r0
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800889c:	6e82      	ldr	r2, [r0, #104]	; 0x68
      pHandle->EncoderAbsoluteAligned = false;
 800889e:	2300      	movs	r3, #0
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80088a0:	6950      	ldr	r0, [r2, #20]
      pHandle->EncoderAbsoluteAligned = false;
 80088a2:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80088a6:	f7ff fd65 	bl	8008374 <SPD_GetMecAngle>
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 80088aa:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80088ae:	9001      	str	r0, [sp, #4]
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d005      	beq.n	80088c0 <TC_EncAlignmentCommand+0x5c>
  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 80088b4:	b123      	cbz	r3, 80088c0 <TC_EncAlignmentCommand+0x5c>
      pHandle->AlignmentStatus = TC_ZERO_ALIGNMENT_START;
 80088b6:	2301      	movs	r3, #1
 80088b8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 80088bc:	b002      	add	sp, #8
 80088be:	bd10      	pop	{r4, pc}
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80088c0:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80088c4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8008968 <TC_EncAlignmentCommand+0x104>
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80088c8:	ed9f 6a28 	vldr	s12, [pc, #160]	; 800896c <TC_EncAlignmentCommand+0x108>
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80088cc:	eddf 3a28 	vldr	s7, [pc, #160]	; 8008970 <TC_EncAlignmentCommand+0x10c>
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80088d0:	eddf 5a28 	vldr	s11, [pc, #160]	; 8008974 <TC_EncAlignmentCommand+0x110>
    pHandle->AngleStep = angleStep;
 80088d4:	ed9f 5a28 	vldr	s10, [pc, #160]	; 8008978 <TC_EncAlignmentCommand+0x114>
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80088d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    pHandle->SubStep[0] = 0 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 80088dc:	2300      	movs	r3, #0
    pHandle->PositionControlRegulation = ENABLE;
 80088de:	2201      	movs	r2, #1
 80088e0:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 80088e4:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
    pHandle->SubStep[0] = 0 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 80088e8:	6123      	str	r3, [r4, #16]
    pHandle->SubStep[1] = 0 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 80088ea:	6163      	str	r3, [r4, #20]
    pHandle->SubStep[2] = 0 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80088ec:	61a3      	str	r3, [r4, #24]
    pHandle->ElapseTime = 0.0f;
 80088ee:	62e3      	str	r3, [r4, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 80088f0:	6423      	str	r3, [r4, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 80088f2:	63e3      	str	r3, [r4, #60]	; 0x3c
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80088f4:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80088f8:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80088fc:	ee66 6aa7 	vmul.f32	s13, s13, s15
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008900:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 8008904:	eddd 7a01 	vldr	s15, [sp, #4]
    pHandle->AngleStep = angleStep;
 8008908:	ed84 5a03 	vstr	s10, [r4, #12]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800890c:	ee27 7a26 	vmul.f32	s14, s14, s13
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 8008910:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008914:	ee27 6a06 	vmul.f32	s12, s14, s12
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 8008918:	ee67 7aa5 	vmul.f32	s15, s15, s11
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800891c:	ee66 6a06 	vmul.f32	s13, s12, s12
    pHandle->SubStep[3] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8008920:	eef2 5a03 	vmov.f32	s11, #35	; 0x41180000  9.5
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008924:	ee26 4a86 	vmul.f32	s8, s13, s12
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008928:	ee76 6aa6 	vadd.f32	s13, s13, s13
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800892c:	eec3 4a84 	vdiv.f32	s9, s7, s8
    pHandle->SubStep[3] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8008930:	ee66 5a25 	vmul.f32	s11, s12, s11
    pHandle->FinalAngle = startingAngle + angleStep;
 8008934:	ee37 5a85 	vadd.f32	s10, s15, s10
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008938:	ee66 6aa4 	vmul.f32	s13, s13, s9
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800893c:	ed84 7a00 	vstr	s14, [r4]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008940:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008944:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008948:	edc4 4a0d 	vstr	s9, [r4, #52]	; 0x34
    pHandle->SubStep[3] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800894c:	edc4 5a07 	vstr	s11, [r4, #28]
    pHandle->SubStep[4] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8008950:	edc4 5a08 	vstr	s11, [r4, #32]
    pHandle->SubStep[5] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008954:	edc4 5a09 	vstr	s11, [r4, #36]	; 0x24
    pHandle->StartingAngle = startingAngle;
 8008958:	edc4 7a01 	vstr	s15, [r4, #4]
    pHandle->Theta = startingAngle;
 800895c:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
    pHandle->FinalAngle = startingAngle + angleStep;
 8008960:	ed84 5a02 	vstr	s10, [r4, #8]
 8008964:	e7a7      	b.n	80088b6 <TC_EncAlignmentCommand+0x52>
 8008966:	bf00      	nop
 8008968:	3e638e39 	.word	0x3e638e39
 800896c:	3de38e39 	.word	0x3de38e39
 8008970:	3f060a92 	.word	0x3f060a92
 8008974:	38c90fdb 	.word	0x38c90fdb
 8008978:	40c90fdb 	.word	0x40c90fdb

0800897c <TC_GetAlignmentStatus>:
  * @param  pHandle handler of the current instance of the Position Control component.
  */
AlignStatus_t TC_GetAlignmentStatus(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->AlignmentStatus);
}
 800897c:	f890 0062 	ldrb.w	r0, [r0, #98]	; 0x62
 8008980:	4770      	bx	lr
 8008982:	bf00      	nop

08008984 <TC_IncTick>:
  * @brief  Increments Tick counter used in follow mode.
  * @param  pHandle handler of the current instance of the Position Control component.
  */
void TC_IncTick(PosCtrl_Handle_t *pHandle)
{
  pHandle->TcTick++;
 8008984:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8008986:	3301      	adds	r3, #1
 8008988:	6583      	str	r3, [r0, #88]	; 0x58
}
 800898a:	4770      	bx	lr

0800898c <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800898c:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800898e:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 8008990:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8008992:	7003      	strb	r3, [r0, #0]
    pHandle->_Super.hElAngle = 0;
 8008994:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 8008996:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 8008998:	8243      	strh	r3, [r0, #18]
    pHandle->wElSpeedDpp32 = 0;
 800899a:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->hRemainingStep = 0U;
 800899e:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->hElAngleAccu = 0;
 80089a0:	8603      	strh	r3, [r0, #48]	; 0x30
    pHandle->bTransitionStarted = false;
 80089a2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    pHandle->bTransitionEnded = false;
 80089a6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    pHandle->bTransitionLocked = false;
 80089aa:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32

    pHandle->bCopyObserver = false;
 80089ae:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 80089b2:	4770      	bx	lr

080089b4 <VSS_Init>:
{
 80089b4:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 80089b6:	f7ff ffe9 	bl	800898c <VSS_Clear>
}
 80089ba:	bd08      	pop	{r3, pc}

080089bc <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 80089bc:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80089c0:	bb33      	cbnz	r3, 8008a10 <VSS_SetMecAcceleration+0x54>
 80089c2:	8b43      	ldrh	r3, [r0, #26]
{
 80089c4:	b470      	push	{r4, r5, r6}
 80089c6:	69c4      	ldr	r4, [r0, #28]
 80089c8:	7845      	ldrb	r5, [r0, #1]
 80089ca:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	fb04 f401 	mul.w	r4, r4, r1
 80089d4:	fb94 f4f3 	sdiv	r4, r4, r3
    {
      if (0U == hDurationms)
 80089d8:	b192      	cbz	r2, 8008a00 <VSS_SetMecAcceleration+0x44>

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
      }
      else
      {
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 80089da:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 80089dc:	4e13      	ldr	r6, [pc, #76]	; (8008a2c <VSS_SetMecAcceleration+0x70>)
 80089de:	fb02 f303 	mul.w	r3, r2, r3
 80089e2:	fba6 2303 	umull	r2, r3, r6, r3
 80089e6:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 80089ea:	3301      	adds	r3, #1
 80089ec:	b29b      	uxth	r3, r3
        pHandle->hRemainingStep = hNbrStep;
 80089ee:	8503      	strh	r3, [r0, #40]	; 0x28
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80089f0:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));

        if (0U == hNbrStep)
 80089f4:	b96b      	cbnz	r3, 8008a12 <VSS_SetMecAcceleration+0x56>
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
        }

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80089f6:	0436      	lsls	r6, r6, #16
 80089f8:	6246      	str	r6, [r0, #36]	; 0x24
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80089fa:	8541      	strh	r1, [r0, #42]	; 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 80089fc:	bc70      	pop	{r4, r5, r6}
 80089fe:	4770      	bx	lr
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8008a00:	fb14 f405 	smulbb	r4, r4, r5
 8008a04:	81c4      	strh	r4, [r0, #14]
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8008a06:	8181      	strh	r1, [r0, #12]
        pHandle->hRemainingStep = 0U;
 8008a08:	8502      	strh	r2, [r0, #40]	; 0x28
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008a0a:	8541      	strh	r1, [r0, #42]	; 0x2a
}
 8008a0c:	bc70      	pop	{r4, r5, r6}
 8008a0e:	4770      	bx	lr
 8008a10:	4770      	bx	lr
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8008a12:	fb96 f2f5 	sdiv	r2, r6, r5
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8008a16:	1aa4      	subs	r4, r4, r2
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8008a18:	0422      	lsls	r2, r4, #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8008a1a:	0436      	lsls	r6, r6, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8008a1c:	fb92 f3f3 	sdiv	r3, r2, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8008a20:	fb05 f303 	mul.w	r3, r5, r3
 8008a24:	6203      	str	r3, [r0, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8008a26:	6246      	str	r6, [r0, #36]	; 0x24
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008a28:	8541      	strh	r1, [r0, #42]	; 0x2a
 8008a2a:	e7e7      	b.n	80089fc <VSS_SetMecAcceleration+0x40>
 8008a2c:	10624dd3 	.word	0x10624dd3

08008a30 <__errno>:
 8008a30:	4b01      	ldr	r3, [pc, #4]	; (8008a38 <__errno+0x8>)
 8008a32:	6818      	ldr	r0, [r3, #0]
 8008a34:	4770      	bx	lr
 8008a36:	bf00      	nop
 8008a38:	200003e4 	.word	0x200003e4

08008a3c <__libc_init_array>:
 8008a3c:	b570      	push	{r4, r5, r6, lr}
 8008a3e:	4e0d      	ldr	r6, [pc, #52]	; (8008a74 <__libc_init_array+0x38>)
 8008a40:	4c0d      	ldr	r4, [pc, #52]	; (8008a78 <__libc_init_array+0x3c>)
 8008a42:	1ba4      	subs	r4, r4, r6
 8008a44:	10a4      	asrs	r4, r4, #2
 8008a46:	2500      	movs	r5, #0
 8008a48:	42a5      	cmp	r5, r4
 8008a4a:	d109      	bne.n	8008a60 <__libc_init_array+0x24>
 8008a4c:	4e0b      	ldr	r6, [pc, #44]	; (8008a7c <__libc_init_array+0x40>)
 8008a4e:	4c0c      	ldr	r4, [pc, #48]	; (8008a80 <__libc_init_array+0x44>)
 8008a50:	f002 f860 	bl	800ab14 <_init>
 8008a54:	1ba4      	subs	r4, r4, r6
 8008a56:	10a4      	asrs	r4, r4, #2
 8008a58:	2500      	movs	r5, #0
 8008a5a:	42a5      	cmp	r5, r4
 8008a5c:	d105      	bne.n	8008a6a <__libc_init_array+0x2e>
 8008a5e:	bd70      	pop	{r4, r5, r6, pc}
 8008a60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a64:	4798      	blx	r3
 8008a66:	3501      	adds	r5, #1
 8008a68:	e7ee      	b.n	8008a48 <__libc_init_array+0xc>
 8008a6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008a6e:	4798      	blx	r3
 8008a70:	3501      	adds	r5, #1
 8008a72:	e7f2      	b.n	8008a5a <__libc_init_array+0x1e>
 8008a74:	0800af90 	.word	0x0800af90
 8008a78:	0800af90 	.word	0x0800af90
 8008a7c:	0800af90 	.word	0x0800af90
 8008a80:	0800af94 	.word	0x0800af94

08008a84 <memcpy>:
 8008a84:	b510      	push	{r4, lr}
 8008a86:	1e43      	subs	r3, r0, #1
 8008a88:	440a      	add	r2, r1
 8008a8a:	4291      	cmp	r1, r2
 8008a8c:	d100      	bne.n	8008a90 <memcpy+0xc>
 8008a8e:	bd10      	pop	{r4, pc}
 8008a90:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a94:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a98:	e7f7      	b.n	8008a8a <memcpy+0x6>

08008a9a <memset>:
 8008a9a:	4402      	add	r2, r0
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d100      	bne.n	8008aa4 <memset+0xa>
 8008aa2:	4770      	bx	lr
 8008aa4:	f803 1b01 	strb.w	r1, [r3], #1
 8008aa8:	e7f9      	b.n	8008a9e <memset+0x4>

08008aaa <__cvt>:
 8008aaa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008aae:	ec55 4b10 	vmov	r4, r5, d0
 8008ab2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8008ab4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008ab8:	2d00      	cmp	r5, #0
 8008aba:	460e      	mov	r6, r1
 8008abc:	4691      	mov	r9, r2
 8008abe:	4619      	mov	r1, r3
 8008ac0:	bfb8      	it	lt
 8008ac2:	4622      	movlt	r2, r4
 8008ac4:	462b      	mov	r3, r5
 8008ac6:	f027 0720 	bic.w	r7, r7, #32
 8008aca:	bfbb      	ittet	lt
 8008acc:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008ad0:	461d      	movlt	r5, r3
 8008ad2:	2300      	movge	r3, #0
 8008ad4:	232d      	movlt	r3, #45	; 0x2d
 8008ad6:	bfb8      	it	lt
 8008ad8:	4614      	movlt	r4, r2
 8008ada:	2f46      	cmp	r7, #70	; 0x46
 8008adc:	700b      	strb	r3, [r1, #0]
 8008ade:	d004      	beq.n	8008aea <__cvt+0x40>
 8008ae0:	2f45      	cmp	r7, #69	; 0x45
 8008ae2:	d100      	bne.n	8008ae6 <__cvt+0x3c>
 8008ae4:	3601      	adds	r6, #1
 8008ae6:	2102      	movs	r1, #2
 8008ae8:	e000      	b.n	8008aec <__cvt+0x42>
 8008aea:	2103      	movs	r1, #3
 8008aec:	ab03      	add	r3, sp, #12
 8008aee:	9301      	str	r3, [sp, #4]
 8008af0:	ab02      	add	r3, sp, #8
 8008af2:	9300      	str	r3, [sp, #0]
 8008af4:	4632      	mov	r2, r6
 8008af6:	4653      	mov	r3, sl
 8008af8:	ec45 4b10 	vmov	d0, r4, r5
 8008afc:	f000 fce0 	bl	80094c0 <_dtoa_r>
 8008b00:	2f47      	cmp	r7, #71	; 0x47
 8008b02:	4680      	mov	r8, r0
 8008b04:	d102      	bne.n	8008b0c <__cvt+0x62>
 8008b06:	f019 0f01 	tst.w	r9, #1
 8008b0a:	d026      	beq.n	8008b5a <__cvt+0xb0>
 8008b0c:	2f46      	cmp	r7, #70	; 0x46
 8008b0e:	eb08 0906 	add.w	r9, r8, r6
 8008b12:	d111      	bne.n	8008b38 <__cvt+0x8e>
 8008b14:	f898 3000 	ldrb.w	r3, [r8]
 8008b18:	2b30      	cmp	r3, #48	; 0x30
 8008b1a:	d10a      	bne.n	8008b32 <__cvt+0x88>
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	2300      	movs	r3, #0
 8008b20:	4620      	mov	r0, r4
 8008b22:	4629      	mov	r1, r5
 8008b24:	f7f7 fff8 	bl	8000b18 <__aeabi_dcmpeq>
 8008b28:	b918      	cbnz	r0, 8008b32 <__cvt+0x88>
 8008b2a:	f1c6 0601 	rsb	r6, r6, #1
 8008b2e:	f8ca 6000 	str.w	r6, [sl]
 8008b32:	f8da 3000 	ldr.w	r3, [sl]
 8008b36:	4499      	add	r9, r3
 8008b38:	2200      	movs	r2, #0
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	4629      	mov	r1, r5
 8008b40:	f7f7 ffea 	bl	8000b18 <__aeabi_dcmpeq>
 8008b44:	b938      	cbnz	r0, 8008b56 <__cvt+0xac>
 8008b46:	2230      	movs	r2, #48	; 0x30
 8008b48:	9b03      	ldr	r3, [sp, #12]
 8008b4a:	454b      	cmp	r3, r9
 8008b4c:	d205      	bcs.n	8008b5a <__cvt+0xb0>
 8008b4e:	1c59      	adds	r1, r3, #1
 8008b50:	9103      	str	r1, [sp, #12]
 8008b52:	701a      	strb	r2, [r3, #0]
 8008b54:	e7f8      	b.n	8008b48 <__cvt+0x9e>
 8008b56:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b5a:	9b03      	ldr	r3, [sp, #12]
 8008b5c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b5e:	eba3 0308 	sub.w	r3, r3, r8
 8008b62:	4640      	mov	r0, r8
 8008b64:	6013      	str	r3, [r2, #0]
 8008b66:	b004      	add	sp, #16
 8008b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08008b6c <__exponent>:
 8008b6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008b6e:	2900      	cmp	r1, #0
 8008b70:	4604      	mov	r4, r0
 8008b72:	bfba      	itte	lt
 8008b74:	4249      	neglt	r1, r1
 8008b76:	232d      	movlt	r3, #45	; 0x2d
 8008b78:	232b      	movge	r3, #43	; 0x2b
 8008b7a:	2909      	cmp	r1, #9
 8008b7c:	f804 2b02 	strb.w	r2, [r4], #2
 8008b80:	7043      	strb	r3, [r0, #1]
 8008b82:	dd20      	ble.n	8008bc6 <__exponent+0x5a>
 8008b84:	f10d 0307 	add.w	r3, sp, #7
 8008b88:	461f      	mov	r7, r3
 8008b8a:	260a      	movs	r6, #10
 8008b8c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008b90:	fb06 1115 	mls	r1, r6, r5, r1
 8008b94:	3130      	adds	r1, #48	; 0x30
 8008b96:	2d09      	cmp	r5, #9
 8008b98:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008b9c:	f103 32ff 	add.w	r2, r3, #4294967295
 8008ba0:	4629      	mov	r1, r5
 8008ba2:	dc09      	bgt.n	8008bb8 <__exponent+0x4c>
 8008ba4:	3130      	adds	r1, #48	; 0x30
 8008ba6:	3b02      	subs	r3, #2
 8008ba8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008bac:	42bb      	cmp	r3, r7
 8008bae:	4622      	mov	r2, r4
 8008bb0:	d304      	bcc.n	8008bbc <__exponent+0x50>
 8008bb2:	1a10      	subs	r0, r2, r0
 8008bb4:	b003      	add	sp, #12
 8008bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008bb8:	4613      	mov	r3, r2
 8008bba:	e7e7      	b.n	8008b8c <__exponent+0x20>
 8008bbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008bc0:	f804 2b01 	strb.w	r2, [r4], #1
 8008bc4:	e7f2      	b.n	8008bac <__exponent+0x40>
 8008bc6:	2330      	movs	r3, #48	; 0x30
 8008bc8:	4419      	add	r1, r3
 8008bca:	7083      	strb	r3, [r0, #2]
 8008bcc:	1d02      	adds	r2, r0, #4
 8008bce:	70c1      	strb	r1, [r0, #3]
 8008bd0:	e7ef      	b.n	8008bb2 <__exponent+0x46>
	...

08008bd4 <_printf_float>:
 8008bd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bd8:	b08d      	sub	sp, #52	; 0x34
 8008bda:	460c      	mov	r4, r1
 8008bdc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8008be0:	4616      	mov	r6, r2
 8008be2:	461f      	mov	r7, r3
 8008be4:	4605      	mov	r5, r0
 8008be6:	f001 fa23 	bl	800a030 <_localeconv_r>
 8008bea:	6803      	ldr	r3, [r0, #0]
 8008bec:	9304      	str	r3, [sp, #16]
 8008bee:	4618      	mov	r0, r3
 8008bf0:	f7f7 fb16 	bl	8000220 <strlen>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	930a      	str	r3, [sp, #40]	; 0x28
 8008bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8008bfc:	9005      	str	r0, [sp, #20]
 8008bfe:	3307      	adds	r3, #7
 8008c00:	f023 0307 	bic.w	r3, r3, #7
 8008c04:	f103 0208 	add.w	r2, r3, #8
 8008c08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008c0c:	f8d4 b000 	ldr.w	fp, [r4]
 8008c10:	f8c8 2000 	str.w	r2, [r8]
 8008c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c18:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c1c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c20:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c24:	9307      	str	r3, [sp, #28]
 8008c26:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c2a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c2e:	4ba7      	ldr	r3, [pc, #668]	; (8008ecc <_printf_float+0x2f8>)
 8008c30:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c34:	f7f7 ffa2 	bl	8000b7c <__aeabi_dcmpun>
 8008c38:	bb70      	cbnz	r0, 8008c98 <_printf_float+0xc4>
 8008c3a:	f04f 32ff 	mov.w	r2, #4294967295
 8008c3e:	4ba3      	ldr	r3, [pc, #652]	; (8008ecc <_printf_float+0x2f8>)
 8008c40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c44:	f7f7 ff7c 	bl	8000b40 <__aeabi_dcmple>
 8008c48:	bb30      	cbnz	r0, 8008c98 <_printf_float+0xc4>
 8008c4a:	2200      	movs	r2, #0
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	4640      	mov	r0, r8
 8008c50:	4649      	mov	r1, r9
 8008c52:	f7f7 ff6b 	bl	8000b2c <__aeabi_dcmplt>
 8008c56:	b110      	cbz	r0, 8008c5e <_printf_float+0x8a>
 8008c58:	232d      	movs	r3, #45	; 0x2d
 8008c5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c5e:	4a9c      	ldr	r2, [pc, #624]	; (8008ed0 <_printf_float+0x2fc>)
 8008c60:	4b9c      	ldr	r3, [pc, #624]	; (8008ed4 <_printf_float+0x300>)
 8008c62:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008c66:	bf8c      	ite	hi
 8008c68:	4690      	movhi	r8, r2
 8008c6a:	4698      	movls	r8, r3
 8008c6c:	2303      	movs	r3, #3
 8008c6e:	f02b 0204 	bic.w	r2, fp, #4
 8008c72:	6123      	str	r3, [r4, #16]
 8008c74:	6022      	str	r2, [r4, #0]
 8008c76:	f04f 0900 	mov.w	r9, #0
 8008c7a:	9700      	str	r7, [sp, #0]
 8008c7c:	4633      	mov	r3, r6
 8008c7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008c80:	4621      	mov	r1, r4
 8008c82:	4628      	mov	r0, r5
 8008c84:	f000 f9e6 	bl	8009054 <_printf_common>
 8008c88:	3001      	adds	r0, #1
 8008c8a:	f040 808d 	bne.w	8008da8 <_printf_float+0x1d4>
 8008c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008c92:	b00d      	add	sp, #52	; 0x34
 8008c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c98:	4642      	mov	r2, r8
 8008c9a:	464b      	mov	r3, r9
 8008c9c:	4640      	mov	r0, r8
 8008c9e:	4649      	mov	r1, r9
 8008ca0:	f7f7 ff6c 	bl	8000b7c <__aeabi_dcmpun>
 8008ca4:	b110      	cbz	r0, 8008cac <_printf_float+0xd8>
 8008ca6:	4a8c      	ldr	r2, [pc, #560]	; (8008ed8 <_printf_float+0x304>)
 8008ca8:	4b8c      	ldr	r3, [pc, #560]	; (8008edc <_printf_float+0x308>)
 8008caa:	e7da      	b.n	8008c62 <_printf_float+0x8e>
 8008cac:	6861      	ldr	r1, [r4, #4]
 8008cae:	1c4b      	adds	r3, r1, #1
 8008cb0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8008cb4:	a80a      	add	r0, sp, #40	; 0x28
 8008cb6:	d13e      	bne.n	8008d36 <_printf_float+0x162>
 8008cb8:	2306      	movs	r3, #6
 8008cba:	6063      	str	r3, [r4, #4]
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8008cc2:	ab09      	add	r3, sp, #36	; 0x24
 8008cc4:	9300      	str	r3, [sp, #0]
 8008cc6:	ec49 8b10 	vmov	d0, r8, r9
 8008cca:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008cce:	6022      	str	r2, [r4, #0]
 8008cd0:	f8cd a004 	str.w	sl, [sp, #4]
 8008cd4:	6861      	ldr	r1, [r4, #4]
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	f7ff fee7 	bl	8008aaa <__cvt>
 8008cdc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8008ce0:	2b47      	cmp	r3, #71	; 0x47
 8008ce2:	4680      	mov	r8, r0
 8008ce4:	d109      	bne.n	8008cfa <_printf_float+0x126>
 8008ce6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce8:	1cd8      	adds	r0, r3, #3
 8008cea:	db02      	blt.n	8008cf2 <_printf_float+0x11e>
 8008cec:	6862      	ldr	r2, [r4, #4]
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	dd47      	ble.n	8008d82 <_printf_float+0x1ae>
 8008cf2:	f1aa 0a02 	sub.w	sl, sl, #2
 8008cf6:	fa5f fa8a 	uxtb.w	sl, sl
 8008cfa:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008cfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d00:	d824      	bhi.n	8008d4c <_printf_float+0x178>
 8008d02:	3901      	subs	r1, #1
 8008d04:	4652      	mov	r2, sl
 8008d06:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d0a:	9109      	str	r1, [sp, #36]	; 0x24
 8008d0c:	f7ff ff2e 	bl	8008b6c <__exponent>
 8008d10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d12:	1813      	adds	r3, r2, r0
 8008d14:	2a01      	cmp	r2, #1
 8008d16:	4681      	mov	r9, r0
 8008d18:	6123      	str	r3, [r4, #16]
 8008d1a:	dc02      	bgt.n	8008d22 <_printf_float+0x14e>
 8008d1c:	6822      	ldr	r2, [r4, #0]
 8008d1e:	07d1      	lsls	r1, r2, #31
 8008d20:	d501      	bpl.n	8008d26 <_printf_float+0x152>
 8008d22:	3301      	adds	r3, #1
 8008d24:	6123      	str	r3, [r4, #16]
 8008d26:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0a5      	beq.n	8008c7a <_printf_float+0xa6>
 8008d2e:	232d      	movs	r3, #45	; 0x2d
 8008d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d34:	e7a1      	b.n	8008c7a <_printf_float+0xa6>
 8008d36:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8008d3a:	f000 8177 	beq.w	800902c <_printf_float+0x458>
 8008d3e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8008d42:	d1bb      	bne.n	8008cbc <_printf_float+0xe8>
 8008d44:	2900      	cmp	r1, #0
 8008d46:	d1b9      	bne.n	8008cbc <_printf_float+0xe8>
 8008d48:	2301      	movs	r3, #1
 8008d4a:	e7b6      	b.n	8008cba <_printf_float+0xe6>
 8008d4c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8008d50:	d119      	bne.n	8008d86 <_printf_float+0x1b2>
 8008d52:	2900      	cmp	r1, #0
 8008d54:	6863      	ldr	r3, [r4, #4]
 8008d56:	dd0c      	ble.n	8008d72 <_printf_float+0x19e>
 8008d58:	6121      	str	r1, [r4, #16]
 8008d5a:	b913      	cbnz	r3, 8008d62 <_printf_float+0x18e>
 8008d5c:	6822      	ldr	r2, [r4, #0]
 8008d5e:	07d2      	lsls	r2, r2, #31
 8008d60:	d502      	bpl.n	8008d68 <_printf_float+0x194>
 8008d62:	3301      	adds	r3, #1
 8008d64:	440b      	add	r3, r1
 8008d66:	6123      	str	r3, [r4, #16]
 8008d68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d6a:	65a3      	str	r3, [r4, #88]	; 0x58
 8008d6c:	f04f 0900 	mov.w	r9, #0
 8008d70:	e7d9      	b.n	8008d26 <_printf_float+0x152>
 8008d72:	b913      	cbnz	r3, 8008d7a <_printf_float+0x1a6>
 8008d74:	6822      	ldr	r2, [r4, #0]
 8008d76:	07d0      	lsls	r0, r2, #31
 8008d78:	d501      	bpl.n	8008d7e <_printf_float+0x1aa>
 8008d7a:	3302      	adds	r3, #2
 8008d7c:	e7f3      	b.n	8008d66 <_printf_float+0x192>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e7f1      	b.n	8008d66 <_printf_float+0x192>
 8008d82:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8008d86:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	db05      	blt.n	8008d9a <_printf_float+0x1c6>
 8008d8e:	6822      	ldr	r2, [r4, #0]
 8008d90:	6123      	str	r3, [r4, #16]
 8008d92:	07d1      	lsls	r1, r2, #31
 8008d94:	d5e8      	bpl.n	8008d68 <_printf_float+0x194>
 8008d96:	3301      	adds	r3, #1
 8008d98:	e7e5      	b.n	8008d66 <_printf_float+0x192>
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	bfd4      	ite	le
 8008d9e:	f1c3 0302 	rsble	r3, r3, #2
 8008da2:	2301      	movgt	r3, #1
 8008da4:	4413      	add	r3, r2
 8008da6:	e7de      	b.n	8008d66 <_printf_float+0x192>
 8008da8:	6823      	ldr	r3, [r4, #0]
 8008daa:	055a      	lsls	r2, r3, #21
 8008dac:	d407      	bmi.n	8008dbe <_printf_float+0x1ea>
 8008dae:	6923      	ldr	r3, [r4, #16]
 8008db0:	4642      	mov	r2, r8
 8008db2:	4631      	mov	r1, r6
 8008db4:	4628      	mov	r0, r5
 8008db6:	47b8      	blx	r7
 8008db8:	3001      	adds	r0, #1
 8008dba:	d12b      	bne.n	8008e14 <_printf_float+0x240>
 8008dbc:	e767      	b.n	8008c8e <_printf_float+0xba>
 8008dbe:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8008dc2:	f240 80dc 	bls.w	8008f7e <_printf_float+0x3aa>
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	2300      	movs	r3, #0
 8008dca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008dce:	f7f7 fea3 	bl	8000b18 <__aeabi_dcmpeq>
 8008dd2:	2800      	cmp	r0, #0
 8008dd4:	d033      	beq.n	8008e3e <_printf_float+0x26a>
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	4a41      	ldr	r2, [pc, #260]	; (8008ee0 <_printf_float+0x30c>)
 8008dda:	4631      	mov	r1, r6
 8008ddc:	4628      	mov	r0, r5
 8008dde:	47b8      	blx	r7
 8008de0:	3001      	adds	r0, #1
 8008de2:	f43f af54 	beq.w	8008c8e <_printf_float+0xba>
 8008de6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008dea:	429a      	cmp	r2, r3
 8008dec:	db02      	blt.n	8008df4 <_printf_float+0x220>
 8008dee:	6823      	ldr	r3, [r4, #0]
 8008df0:	07d8      	lsls	r0, r3, #31
 8008df2:	d50f      	bpl.n	8008e14 <_printf_float+0x240>
 8008df4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008df8:	4631      	mov	r1, r6
 8008dfa:	4628      	mov	r0, r5
 8008dfc:	47b8      	blx	r7
 8008dfe:	3001      	adds	r0, #1
 8008e00:	f43f af45 	beq.w	8008c8e <_printf_float+0xba>
 8008e04:	f04f 0800 	mov.w	r8, #0
 8008e08:	f104 091a 	add.w	r9, r4, #26
 8008e0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e0e:	3b01      	subs	r3, #1
 8008e10:	4543      	cmp	r3, r8
 8008e12:	dc09      	bgt.n	8008e28 <_printf_float+0x254>
 8008e14:	6823      	ldr	r3, [r4, #0]
 8008e16:	079b      	lsls	r3, r3, #30
 8008e18:	f100 8103 	bmi.w	8009022 <_printf_float+0x44e>
 8008e1c:	68e0      	ldr	r0, [r4, #12]
 8008e1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e20:	4298      	cmp	r0, r3
 8008e22:	bfb8      	it	lt
 8008e24:	4618      	movlt	r0, r3
 8008e26:	e734      	b.n	8008c92 <_printf_float+0xbe>
 8008e28:	2301      	movs	r3, #1
 8008e2a:	464a      	mov	r2, r9
 8008e2c:	4631      	mov	r1, r6
 8008e2e:	4628      	mov	r0, r5
 8008e30:	47b8      	blx	r7
 8008e32:	3001      	adds	r0, #1
 8008e34:	f43f af2b 	beq.w	8008c8e <_printf_float+0xba>
 8008e38:	f108 0801 	add.w	r8, r8, #1
 8008e3c:	e7e6      	b.n	8008e0c <_printf_float+0x238>
 8008e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	dc2b      	bgt.n	8008e9c <_printf_float+0x2c8>
 8008e44:	2301      	movs	r3, #1
 8008e46:	4a26      	ldr	r2, [pc, #152]	; (8008ee0 <_printf_float+0x30c>)
 8008e48:	4631      	mov	r1, r6
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	47b8      	blx	r7
 8008e4e:	3001      	adds	r0, #1
 8008e50:	f43f af1d 	beq.w	8008c8e <_printf_float+0xba>
 8008e54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e56:	b923      	cbnz	r3, 8008e62 <_printf_float+0x28e>
 8008e58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e5a:	b913      	cbnz	r3, 8008e62 <_printf_float+0x28e>
 8008e5c:	6823      	ldr	r3, [r4, #0]
 8008e5e:	07d9      	lsls	r1, r3, #31
 8008e60:	d5d8      	bpl.n	8008e14 <_printf_float+0x240>
 8008e62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e66:	4631      	mov	r1, r6
 8008e68:	4628      	mov	r0, r5
 8008e6a:	47b8      	blx	r7
 8008e6c:	3001      	adds	r0, #1
 8008e6e:	f43f af0e 	beq.w	8008c8e <_printf_float+0xba>
 8008e72:	f04f 0900 	mov.w	r9, #0
 8008e76:	f104 0a1a 	add.w	sl, r4, #26
 8008e7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e7c:	425b      	negs	r3, r3
 8008e7e:	454b      	cmp	r3, r9
 8008e80:	dc01      	bgt.n	8008e86 <_printf_float+0x2b2>
 8008e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e84:	e794      	b.n	8008db0 <_printf_float+0x1dc>
 8008e86:	2301      	movs	r3, #1
 8008e88:	4652      	mov	r2, sl
 8008e8a:	4631      	mov	r1, r6
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	47b8      	blx	r7
 8008e90:	3001      	adds	r0, #1
 8008e92:	f43f aefc 	beq.w	8008c8e <_printf_float+0xba>
 8008e96:	f109 0901 	add.w	r9, r9, #1
 8008e9a:	e7ee      	b.n	8008e7a <_printf_float+0x2a6>
 8008e9c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008e9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	bfa8      	it	ge
 8008ea4:	461a      	movge	r2, r3
 8008ea6:	2a00      	cmp	r2, #0
 8008ea8:	4691      	mov	r9, r2
 8008eaa:	dd07      	ble.n	8008ebc <_printf_float+0x2e8>
 8008eac:	4613      	mov	r3, r2
 8008eae:	4631      	mov	r1, r6
 8008eb0:	4642      	mov	r2, r8
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	47b8      	blx	r7
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	f43f aee9 	beq.w	8008c8e <_printf_float+0xba>
 8008ebc:	f104 031a 	add.w	r3, r4, #26
 8008ec0:	f04f 0b00 	mov.w	fp, #0
 8008ec4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ec8:	9306      	str	r3, [sp, #24]
 8008eca:	e015      	b.n	8008ef8 <_printf_float+0x324>
 8008ecc:	7fefffff 	.word	0x7fefffff
 8008ed0:	0800ad2c 	.word	0x0800ad2c
 8008ed4:	0800ad28 	.word	0x0800ad28
 8008ed8:	0800ad34 	.word	0x0800ad34
 8008edc:	0800ad30 	.word	0x0800ad30
 8008ee0:	0800ad38 	.word	0x0800ad38
 8008ee4:	2301      	movs	r3, #1
 8008ee6:	9a06      	ldr	r2, [sp, #24]
 8008ee8:	4631      	mov	r1, r6
 8008eea:	4628      	mov	r0, r5
 8008eec:	47b8      	blx	r7
 8008eee:	3001      	adds	r0, #1
 8008ef0:	f43f aecd 	beq.w	8008c8e <_printf_float+0xba>
 8008ef4:	f10b 0b01 	add.w	fp, fp, #1
 8008ef8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8008efc:	ebaa 0309 	sub.w	r3, sl, r9
 8008f00:	455b      	cmp	r3, fp
 8008f02:	dcef      	bgt.n	8008ee4 <_printf_float+0x310>
 8008f04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	44d0      	add	r8, sl
 8008f0c:	db15      	blt.n	8008f3a <_printf_float+0x366>
 8008f0e:	6823      	ldr	r3, [r4, #0]
 8008f10:	07da      	lsls	r2, r3, #31
 8008f12:	d412      	bmi.n	8008f3a <_printf_float+0x366>
 8008f14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f18:	eba3 020a 	sub.w	r2, r3, sl
 8008f1c:	eba3 0a01 	sub.w	sl, r3, r1
 8008f20:	4592      	cmp	sl, r2
 8008f22:	bfa8      	it	ge
 8008f24:	4692      	movge	sl, r2
 8008f26:	f1ba 0f00 	cmp.w	sl, #0
 8008f2a:	dc0e      	bgt.n	8008f4a <_printf_float+0x376>
 8008f2c:	f04f 0800 	mov.w	r8, #0
 8008f30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008f34:	f104 091a 	add.w	r9, r4, #26
 8008f38:	e019      	b.n	8008f6e <_printf_float+0x39a>
 8008f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f3e:	4631      	mov	r1, r6
 8008f40:	4628      	mov	r0, r5
 8008f42:	47b8      	blx	r7
 8008f44:	3001      	adds	r0, #1
 8008f46:	d1e5      	bne.n	8008f14 <_printf_float+0x340>
 8008f48:	e6a1      	b.n	8008c8e <_printf_float+0xba>
 8008f4a:	4653      	mov	r3, sl
 8008f4c:	4642      	mov	r2, r8
 8008f4e:	4631      	mov	r1, r6
 8008f50:	4628      	mov	r0, r5
 8008f52:	47b8      	blx	r7
 8008f54:	3001      	adds	r0, #1
 8008f56:	d1e9      	bne.n	8008f2c <_printf_float+0x358>
 8008f58:	e699      	b.n	8008c8e <_printf_float+0xba>
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	464a      	mov	r2, r9
 8008f5e:	4631      	mov	r1, r6
 8008f60:	4628      	mov	r0, r5
 8008f62:	47b8      	blx	r7
 8008f64:	3001      	adds	r0, #1
 8008f66:	f43f ae92 	beq.w	8008c8e <_printf_float+0xba>
 8008f6a:	f108 0801 	add.w	r8, r8, #1
 8008f6e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f72:	1a9b      	subs	r3, r3, r2
 8008f74:	eba3 030a 	sub.w	r3, r3, sl
 8008f78:	4543      	cmp	r3, r8
 8008f7a:	dcee      	bgt.n	8008f5a <_printf_float+0x386>
 8008f7c:	e74a      	b.n	8008e14 <_printf_float+0x240>
 8008f7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f80:	2a01      	cmp	r2, #1
 8008f82:	dc01      	bgt.n	8008f88 <_printf_float+0x3b4>
 8008f84:	07db      	lsls	r3, r3, #31
 8008f86:	d53a      	bpl.n	8008ffe <_printf_float+0x42a>
 8008f88:	2301      	movs	r3, #1
 8008f8a:	4642      	mov	r2, r8
 8008f8c:	4631      	mov	r1, r6
 8008f8e:	4628      	mov	r0, r5
 8008f90:	47b8      	blx	r7
 8008f92:	3001      	adds	r0, #1
 8008f94:	f43f ae7b 	beq.w	8008c8e <_printf_float+0xba>
 8008f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f9c:	4631      	mov	r1, r6
 8008f9e:	4628      	mov	r0, r5
 8008fa0:	47b8      	blx	r7
 8008fa2:	3001      	adds	r0, #1
 8008fa4:	f108 0801 	add.w	r8, r8, #1
 8008fa8:	f43f ae71 	beq.w	8008c8e <_printf_float+0xba>
 8008fac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fae:	2200      	movs	r2, #0
 8008fb0:	f103 3aff 	add.w	sl, r3, #4294967295
 8008fb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008fb8:	2300      	movs	r3, #0
 8008fba:	f7f7 fdad 	bl	8000b18 <__aeabi_dcmpeq>
 8008fbe:	b9c8      	cbnz	r0, 8008ff4 <_printf_float+0x420>
 8008fc0:	4653      	mov	r3, sl
 8008fc2:	4642      	mov	r2, r8
 8008fc4:	4631      	mov	r1, r6
 8008fc6:	4628      	mov	r0, r5
 8008fc8:	47b8      	blx	r7
 8008fca:	3001      	adds	r0, #1
 8008fcc:	d10e      	bne.n	8008fec <_printf_float+0x418>
 8008fce:	e65e      	b.n	8008c8e <_printf_float+0xba>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	4652      	mov	r2, sl
 8008fd4:	4631      	mov	r1, r6
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	47b8      	blx	r7
 8008fda:	3001      	adds	r0, #1
 8008fdc:	f43f ae57 	beq.w	8008c8e <_printf_float+0xba>
 8008fe0:	f108 0801 	add.w	r8, r8, #1
 8008fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	4543      	cmp	r3, r8
 8008fea:	dcf1      	bgt.n	8008fd0 <_printf_float+0x3fc>
 8008fec:	464b      	mov	r3, r9
 8008fee:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ff2:	e6de      	b.n	8008db2 <_printf_float+0x1de>
 8008ff4:	f04f 0800 	mov.w	r8, #0
 8008ff8:	f104 0a1a 	add.w	sl, r4, #26
 8008ffc:	e7f2      	b.n	8008fe4 <_printf_float+0x410>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e7df      	b.n	8008fc2 <_printf_float+0x3ee>
 8009002:	2301      	movs	r3, #1
 8009004:	464a      	mov	r2, r9
 8009006:	4631      	mov	r1, r6
 8009008:	4628      	mov	r0, r5
 800900a:	47b8      	blx	r7
 800900c:	3001      	adds	r0, #1
 800900e:	f43f ae3e 	beq.w	8008c8e <_printf_float+0xba>
 8009012:	f108 0801 	add.w	r8, r8, #1
 8009016:	68e3      	ldr	r3, [r4, #12]
 8009018:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800901a:	1a9b      	subs	r3, r3, r2
 800901c:	4543      	cmp	r3, r8
 800901e:	dcf0      	bgt.n	8009002 <_printf_float+0x42e>
 8009020:	e6fc      	b.n	8008e1c <_printf_float+0x248>
 8009022:	f04f 0800 	mov.w	r8, #0
 8009026:	f104 0919 	add.w	r9, r4, #25
 800902a:	e7f4      	b.n	8009016 <_printf_float+0x442>
 800902c:	2900      	cmp	r1, #0
 800902e:	f43f ae8b 	beq.w	8008d48 <_printf_float+0x174>
 8009032:	2300      	movs	r3, #0
 8009034:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8009038:	ab09      	add	r3, sp, #36	; 0x24
 800903a:	9300      	str	r3, [sp, #0]
 800903c:	ec49 8b10 	vmov	d0, r8, r9
 8009040:	6022      	str	r2, [r4, #0]
 8009042:	f8cd a004 	str.w	sl, [sp, #4]
 8009046:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800904a:	4628      	mov	r0, r5
 800904c:	f7ff fd2d 	bl	8008aaa <__cvt>
 8009050:	4680      	mov	r8, r0
 8009052:	e648      	b.n	8008ce6 <_printf_float+0x112>

08009054 <_printf_common>:
 8009054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009058:	4691      	mov	r9, r2
 800905a:	461f      	mov	r7, r3
 800905c:	688a      	ldr	r2, [r1, #8]
 800905e:	690b      	ldr	r3, [r1, #16]
 8009060:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009064:	4293      	cmp	r3, r2
 8009066:	bfb8      	it	lt
 8009068:	4613      	movlt	r3, r2
 800906a:	f8c9 3000 	str.w	r3, [r9]
 800906e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009072:	4606      	mov	r6, r0
 8009074:	460c      	mov	r4, r1
 8009076:	b112      	cbz	r2, 800907e <_printf_common+0x2a>
 8009078:	3301      	adds	r3, #1
 800907a:	f8c9 3000 	str.w	r3, [r9]
 800907e:	6823      	ldr	r3, [r4, #0]
 8009080:	0699      	lsls	r1, r3, #26
 8009082:	bf42      	ittt	mi
 8009084:	f8d9 3000 	ldrmi.w	r3, [r9]
 8009088:	3302      	addmi	r3, #2
 800908a:	f8c9 3000 	strmi.w	r3, [r9]
 800908e:	6825      	ldr	r5, [r4, #0]
 8009090:	f015 0506 	ands.w	r5, r5, #6
 8009094:	d107      	bne.n	80090a6 <_printf_common+0x52>
 8009096:	f104 0a19 	add.w	sl, r4, #25
 800909a:	68e3      	ldr	r3, [r4, #12]
 800909c:	f8d9 2000 	ldr.w	r2, [r9]
 80090a0:	1a9b      	subs	r3, r3, r2
 80090a2:	42ab      	cmp	r3, r5
 80090a4:	dc28      	bgt.n	80090f8 <_printf_common+0xa4>
 80090a6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80090aa:	6822      	ldr	r2, [r4, #0]
 80090ac:	3300      	adds	r3, #0
 80090ae:	bf18      	it	ne
 80090b0:	2301      	movne	r3, #1
 80090b2:	0692      	lsls	r2, r2, #26
 80090b4:	d42d      	bmi.n	8009112 <_printf_common+0xbe>
 80090b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090ba:	4639      	mov	r1, r7
 80090bc:	4630      	mov	r0, r6
 80090be:	47c0      	blx	r8
 80090c0:	3001      	adds	r0, #1
 80090c2:	d020      	beq.n	8009106 <_printf_common+0xb2>
 80090c4:	6823      	ldr	r3, [r4, #0]
 80090c6:	68e5      	ldr	r5, [r4, #12]
 80090c8:	f8d9 2000 	ldr.w	r2, [r9]
 80090cc:	f003 0306 	and.w	r3, r3, #6
 80090d0:	2b04      	cmp	r3, #4
 80090d2:	bf08      	it	eq
 80090d4:	1aad      	subeq	r5, r5, r2
 80090d6:	68a3      	ldr	r3, [r4, #8]
 80090d8:	6922      	ldr	r2, [r4, #16]
 80090da:	bf0c      	ite	eq
 80090dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090e0:	2500      	movne	r5, #0
 80090e2:	4293      	cmp	r3, r2
 80090e4:	bfc4      	itt	gt
 80090e6:	1a9b      	subgt	r3, r3, r2
 80090e8:	18ed      	addgt	r5, r5, r3
 80090ea:	f04f 0900 	mov.w	r9, #0
 80090ee:	341a      	adds	r4, #26
 80090f0:	454d      	cmp	r5, r9
 80090f2:	d11a      	bne.n	800912a <_printf_common+0xd6>
 80090f4:	2000      	movs	r0, #0
 80090f6:	e008      	b.n	800910a <_printf_common+0xb6>
 80090f8:	2301      	movs	r3, #1
 80090fa:	4652      	mov	r2, sl
 80090fc:	4639      	mov	r1, r7
 80090fe:	4630      	mov	r0, r6
 8009100:	47c0      	blx	r8
 8009102:	3001      	adds	r0, #1
 8009104:	d103      	bne.n	800910e <_printf_common+0xba>
 8009106:	f04f 30ff 	mov.w	r0, #4294967295
 800910a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800910e:	3501      	adds	r5, #1
 8009110:	e7c3      	b.n	800909a <_printf_common+0x46>
 8009112:	18e1      	adds	r1, r4, r3
 8009114:	1c5a      	adds	r2, r3, #1
 8009116:	2030      	movs	r0, #48	; 0x30
 8009118:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800911c:	4422      	add	r2, r4
 800911e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009122:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009126:	3302      	adds	r3, #2
 8009128:	e7c5      	b.n	80090b6 <_printf_common+0x62>
 800912a:	2301      	movs	r3, #1
 800912c:	4622      	mov	r2, r4
 800912e:	4639      	mov	r1, r7
 8009130:	4630      	mov	r0, r6
 8009132:	47c0      	blx	r8
 8009134:	3001      	adds	r0, #1
 8009136:	d0e6      	beq.n	8009106 <_printf_common+0xb2>
 8009138:	f109 0901 	add.w	r9, r9, #1
 800913c:	e7d8      	b.n	80090f0 <_printf_common+0x9c>
	...

08009140 <_printf_i>:
 8009140:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009144:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009148:	460c      	mov	r4, r1
 800914a:	7e09      	ldrb	r1, [r1, #24]
 800914c:	b085      	sub	sp, #20
 800914e:	296e      	cmp	r1, #110	; 0x6e
 8009150:	4617      	mov	r7, r2
 8009152:	4606      	mov	r6, r0
 8009154:	4698      	mov	r8, r3
 8009156:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009158:	f000 80b3 	beq.w	80092c2 <_printf_i+0x182>
 800915c:	d822      	bhi.n	80091a4 <_printf_i+0x64>
 800915e:	2963      	cmp	r1, #99	; 0x63
 8009160:	d036      	beq.n	80091d0 <_printf_i+0x90>
 8009162:	d80a      	bhi.n	800917a <_printf_i+0x3a>
 8009164:	2900      	cmp	r1, #0
 8009166:	f000 80b9 	beq.w	80092dc <_printf_i+0x19c>
 800916a:	2958      	cmp	r1, #88	; 0x58
 800916c:	f000 8083 	beq.w	8009276 <_printf_i+0x136>
 8009170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009174:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009178:	e032      	b.n	80091e0 <_printf_i+0xa0>
 800917a:	2964      	cmp	r1, #100	; 0x64
 800917c:	d001      	beq.n	8009182 <_printf_i+0x42>
 800917e:	2969      	cmp	r1, #105	; 0x69
 8009180:	d1f6      	bne.n	8009170 <_printf_i+0x30>
 8009182:	6820      	ldr	r0, [r4, #0]
 8009184:	6813      	ldr	r3, [r2, #0]
 8009186:	0605      	lsls	r5, r0, #24
 8009188:	f103 0104 	add.w	r1, r3, #4
 800918c:	d52a      	bpl.n	80091e4 <_printf_i+0xa4>
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	6011      	str	r1, [r2, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	da03      	bge.n	800919e <_printf_i+0x5e>
 8009196:	222d      	movs	r2, #45	; 0x2d
 8009198:	425b      	negs	r3, r3
 800919a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800919e:	486f      	ldr	r0, [pc, #444]	; (800935c <_printf_i+0x21c>)
 80091a0:	220a      	movs	r2, #10
 80091a2:	e039      	b.n	8009218 <_printf_i+0xd8>
 80091a4:	2973      	cmp	r1, #115	; 0x73
 80091a6:	f000 809d 	beq.w	80092e4 <_printf_i+0x1a4>
 80091aa:	d808      	bhi.n	80091be <_printf_i+0x7e>
 80091ac:	296f      	cmp	r1, #111	; 0x6f
 80091ae:	d020      	beq.n	80091f2 <_printf_i+0xb2>
 80091b0:	2970      	cmp	r1, #112	; 0x70
 80091b2:	d1dd      	bne.n	8009170 <_printf_i+0x30>
 80091b4:	6823      	ldr	r3, [r4, #0]
 80091b6:	f043 0320 	orr.w	r3, r3, #32
 80091ba:	6023      	str	r3, [r4, #0]
 80091bc:	e003      	b.n	80091c6 <_printf_i+0x86>
 80091be:	2975      	cmp	r1, #117	; 0x75
 80091c0:	d017      	beq.n	80091f2 <_printf_i+0xb2>
 80091c2:	2978      	cmp	r1, #120	; 0x78
 80091c4:	d1d4      	bne.n	8009170 <_printf_i+0x30>
 80091c6:	2378      	movs	r3, #120	; 0x78
 80091c8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80091cc:	4864      	ldr	r0, [pc, #400]	; (8009360 <_printf_i+0x220>)
 80091ce:	e055      	b.n	800927c <_printf_i+0x13c>
 80091d0:	6813      	ldr	r3, [r2, #0]
 80091d2:	1d19      	adds	r1, r3, #4
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	6011      	str	r1, [r2, #0]
 80091d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091e0:	2301      	movs	r3, #1
 80091e2:	e08c      	b.n	80092fe <_printf_i+0x1be>
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6011      	str	r1, [r2, #0]
 80091e8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80091ec:	bf18      	it	ne
 80091ee:	b21b      	sxthne	r3, r3
 80091f0:	e7cf      	b.n	8009192 <_printf_i+0x52>
 80091f2:	6813      	ldr	r3, [r2, #0]
 80091f4:	6825      	ldr	r5, [r4, #0]
 80091f6:	1d18      	adds	r0, r3, #4
 80091f8:	6010      	str	r0, [r2, #0]
 80091fa:	0628      	lsls	r0, r5, #24
 80091fc:	d501      	bpl.n	8009202 <_printf_i+0xc2>
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	e002      	b.n	8009208 <_printf_i+0xc8>
 8009202:	0668      	lsls	r0, r5, #25
 8009204:	d5fb      	bpl.n	80091fe <_printf_i+0xbe>
 8009206:	881b      	ldrh	r3, [r3, #0]
 8009208:	4854      	ldr	r0, [pc, #336]	; (800935c <_printf_i+0x21c>)
 800920a:	296f      	cmp	r1, #111	; 0x6f
 800920c:	bf14      	ite	ne
 800920e:	220a      	movne	r2, #10
 8009210:	2208      	moveq	r2, #8
 8009212:	2100      	movs	r1, #0
 8009214:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009218:	6865      	ldr	r5, [r4, #4]
 800921a:	60a5      	str	r5, [r4, #8]
 800921c:	2d00      	cmp	r5, #0
 800921e:	f2c0 8095 	blt.w	800934c <_printf_i+0x20c>
 8009222:	6821      	ldr	r1, [r4, #0]
 8009224:	f021 0104 	bic.w	r1, r1, #4
 8009228:	6021      	str	r1, [r4, #0]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d13d      	bne.n	80092aa <_printf_i+0x16a>
 800922e:	2d00      	cmp	r5, #0
 8009230:	f040 808e 	bne.w	8009350 <_printf_i+0x210>
 8009234:	4665      	mov	r5, ip
 8009236:	2a08      	cmp	r2, #8
 8009238:	d10b      	bne.n	8009252 <_printf_i+0x112>
 800923a:	6823      	ldr	r3, [r4, #0]
 800923c:	07db      	lsls	r3, r3, #31
 800923e:	d508      	bpl.n	8009252 <_printf_i+0x112>
 8009240:	6923      	ldr	r3, [r4, #16]
 8009242:	6862      	ldr	r2, [r4, #4]
 8009244:	429a      	cmp	r2, r3
 8009246:	bfde      	ittt	le
 8009248:	2330      	movle	r3, #48	; 0x30
 800924a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800924e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009252:	ebac 0305 	sub.w	r3, ip, r5
 8009256:	6123      	str	r3, [r4, #16]
 8009258:	f8cd 8000 	str.w	r8, [sp]
 800925c:	463b      	mov	r3, r7
 800925e:	aa03      	add	r2, sp, #12
 8009260:	4621      	mov	r1, r4
 8009262:	4630      	mov	r0, r6
 8009264:	f7ff fef6 	bl	8009054 <_printf_common>
 8009268:	3001      	adds	r0, #1
 800926a:	d14d      	bne.n	8009308 <_printf_i+0x1c8>
 800926c:	f04f 30ff 	mov.w	r0, #4294967295
 8009270:	b005      	add	sp, #20
 8009272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009276:	4839      	ldr	r0, [pc, #228]	; (800935c <_printf_i+0x21c>)
 8009278:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800927c:	6813      	ldr	r3, [r2, #0]
 800927e:	6821      	ldr	r1, [r4, #0]
 8009280:	1d1d      	adds	r5, r3, #4
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	6015      	str	r5, [r2, #0]
 8009286:	060a      	lsls	r2, r1, #24
 8009288:	d50b      	bpl.n	80092a2 <_printf_i+0x162>
 800928a:	07ca      	lsls	r2, r1, #31
 800928c:	bf44      	itt	mi
 800928e:	f041 0120 	orrmi.w	r1, r1, #32
 8009292:	6021      	strmi	r1, [r4, #0]
 8009294:	b91b      	cbnz	r3, 800929e <_printf_i+0x15e>
 8009296:	6822      	ldr	r2, [r4, #0]
 8009298:	f022 0220 	bic.w	r2, r2, #32
 800929c:	6022      	str	r2, [r4, #0]
 800929e:	2210      	movs	r2, #16
 80092a0:	e7b7      	b.n	8009212 <_printf_i+0xd2>
 80092a2:	064d      	lsls	r5, r1, #25
 80092a4:	bf48      	it	mi
 80092a6:	b29b      	uxthmi	r3, r3
 80092a8:	e7ef      	b.n	800928a <_printf_i+0x14a>
 80092aa:	4665      	mov	r5, ip
 80092ac:	fbb3 f1f2 	udiv	r1, r3, r2
 80092b0:	fb02 3311 	mls	r3, r2, r1, r3
 80092b4:	5cc3      	ldrb	r3, [r0, r3]
 80092b6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80092ba:	460b      	mov	r3, r1
 80092bc:	2900      	cmp	r1, #0
 80092be:	d1f5      	bne.n	80092ac <_printf_i+0x16c>
 80092c0:	e7b9      	b.n	8009236 <_printf_i+0xf6>
 80092c2:	6813      	ldr	r3, [r2, #0]
 80092c4:	6825      	ldr	r5, [r4, #0]
 80092c6:	6961      	ldr	r1, [r4, #20]
 80092c8:	1d18      	adds	r0, r3, #4
 80092ca:	6010      	str	r0, [r2, #0]
 80092cc:	0628      	lsls	r0, r5, #24
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	d501      	bpl.n	80092d6 <_printf_i+0x196>
 80092d2:	6019      	str	r1, [r3, #0]
 80092d4:	e002      	b.n	80092dc <_printf_i+0x19c>
 80092d6:	066a      	lsls	r2, r5, #25
 80092d8:	d5fb      	bpl.n	80092d2 <_printf_i+0x192>
 80092da:	8019      	strh	r1, [r3, #0]
 80092dc:	2300      	movs	r3, #0
 80092de:	6123      	str	r3, [r4, #16]
 80092e0:	4665      	mov	r5, ip
 80092e2:	e7b9      	b.n	8009258 <_printf_i+0x118>
 80092e4:	6813      	ldr	r3, [r2, #0]
 80092e6:	1d19      	adds	r1, r3, #4
 80092e8:	6011      	str	r1, [r2, #0]
 80092ea:	681d      	ldr	r5, [r3, #0]
 80092ec:	6862      	ldr	r2, [r4, #4]
 80092ee:	2100      	movs	r1, #0
 80092f0:	4628      	mov	r0, r5
 80092f2:	f7f6 ff9d 	bl	8000230 <memchr>
 80092f6:	b108      	cbz	r0, 80092fc <_printf_i+0x1bc>
 80092f8:	1b40      	subs	r0, r0, r5
 80092fa:	6060      	str	r0, [r4, #4]
 80092fc:	6863      	ldr	r3, [r4, #4]
 80092fe:	6123      	str	r3, [r4, #16]
 8009300:	2300      	movs	r3, #0
 8009302:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009306:	e7a7      	b.n	8009258 <_printf_i+0x118>
 8009308:	6923      	ldr	r3, [r4, #16]
 800930a:	462a      	mov	r2, r5
 800930c:	4639      	mov	r1, r7
 800930e:	4630      	mov	r0, r6
 8009310:	47c0      	blx	r8
 8009312:	3001      	adds	r0, #1
 8009314:	d0aa      	beq.n	800926c <_printf_i+0x12c>
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	079b      	lsls	r3, r3, #30
 800931a:	d413      	bmi.n	8009344 <_printf_i+0x204>
 800931c:	68e0      	ldr	r0, [r4, #12]
 800931e:	9b03      	ldr	r3, [sp, #12]
 8009320:	4298      	cmp	r0, r3
 8009322:	bfb8      	it	lt
 8009324:	4618      	movlt	r0, r3
 8009326:	e7a3      	b.n	8009270 <_printf_i+0x130>
 8009328:	2301      	movs	r3, #1
 800932a:	464a      	mov	r2, r9
 800932c:	4639      	mov	r1, r7
 800932e:	4630      	mov	r0, r6
 8009330:	47c0      	blx	r8
 8009332:	3001      	adds	r0, #1
 8009334:	d09a      	beq.n	800926c <_printf_i+0x12c>
 8009336:	3501      	adds	r5, #1
 8009338:	68e3      	ldr	r3, [r4, #12]
 800933a:	9a03      	ldr	r2, [sp, #12]
 800933c:	1a9b      	subs	r3, r3, r2
 800933e:	42ab      	cmp	r3, r5
 8009340:	dcf2      	bgt.n	8009328 <_printf_i+0x1e8>
 8009342:	e7eb      	b.n	800931c <_printf_i+0x1dc>
 8009344:	2500      	movs	r5, #0
 8009346:	f104 0919 	add.w	r9, r4, #25
 800934a:	e7f5      	b.n	8009338 <_printf_i+0x1f8>
 800934c:	2b00      	cmp	r3, #0
 800934e:	d1ac      	bne.n	80092aa <_printf_i+0x16a>
 8009350:	7803      	ldrb	r3, [r0, #0]
 8009352:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009356:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800935a:	e76c      	b.n	8009236 <_printf_i+0xf6>
 800935c:	0800ad3a 	.word	0x0800ad3a
 8009360:	0800ad4b 	.word	0x0800ad4b

08009364 <siprintf>:
 8009364:	b40e      	push	{r1, r2, r3}
 8009366:	b500      	push	{lr}
 8009368:	b09c      	sub	sp, #112	; 0x70
 800936a:	ab1d      	add	r3, sp, #116	; 0x74
 800936c:	9002      	str	r0, [sp, #8]
 800936e:	9006      	str	r0, [sp, #24]
 8009370:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009374:	4809      	ldr	r0, [pc, #36]	; (800939c <siprintf+0x38>)
 8009376:	9107      	str	r1, [sp, #28]
 8009378:	9104      	str	r1, [sp, #16]
 800937a:	4909      	ldr	r1, [pc, #36]	; (80093a0 <siprintf+0x3c>)
 800937c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009380:	9105      	str	r1, [sp, #20]
 8009382:	6800      	ldr	r0, [r0, #0]
 8009384:	9301      	str	r3, [sp, #4]
 8009386:	a902      	add	r1, sp, #8
 8009388:	f001 fa54 	bl	800a834 <_svfiprintf_r>
 800938c:	9b02      	ldr	r3, [sp, #8]
 800938e:	2200      	movs	r2, #0
 8009390:	701a      	strb	r2, [r3, #0]
 8009392:	b01c      	add	sp, #112	; 0x70
 8009394:	f85d eb04 	ldr.w	lr, [sp], #4
 8009398:	b003      	add	sp, #12
 800939a:	4770      	bx	lr
 800939c:	200003e4 	.word	0x200003e4
 80093a0:	ffff0208 	.word	0xffff0208

080093a4 <quorem>:
 80093a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a8:	6903      	ldr	r3, [r0, #16]
 80093aa:	690c      	ldr	r4, [r1, #16]
 80093ac:	42a3      	cmp	r3, r4
 80093ae:	4680      	mov	r8, r0
 80093b0:	f2c0 8082 	blt.w	80094b8 <quorem+0x114>
 80093b4:	3c01      	subs	r4, #1
 80093b6:	f101 0714 	add.w	r7, r1, #20
 80093ba:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80093be:	f100 0614 	add.w	r6, r0, #20
 80093c2:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80093c6:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80093ca:	eb06 030c 	add.w	r3, r6, ip
 80093ce:	3501      	adds	r5, #1
 80093d0:	eb07 090c 	add.w	r9, r7, ip
 80093d4:	9301      	str	r3, [sp, #4]
 80093d6:	fbb0 f5f5 	udiv	r5, r0, r5
 80093da:	b395      	cbz	r5, 8009442 <quorem+0x9e>
 80093dc:	f04f 0a00 	mov.w	sl, #0
 80093e0:	4638      	mov	r0, r7
 80093e2:	46b6      	mov	lr, r6
 80093e4:	46d3      	mov	fp, sl
 80093e6:	f850 2b04 	ldr.w	r2, [r0], #4
 80093ea:	b293      	uxth	r3, r2
 80093ec:	fb05 a303 	mla	r3, r5, r3, sl
 80093f0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093f4:	b29b      	uxth	r3, r3
 80093f6:	ebab 0303 	sub.w	r3, fp, r3
 80093fa:	0c12      	lsrs	r2, r2, #16
 80093fc:	f8de b000 	ldr.w	fp, [lr]
 8009400:	fb05 a202 	mla	r2, r5, r2, sl
 8009404:	fa13 f38b 	uxtah	r3, r3, fp
 8009408:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800940c:	fa1f fb82 	uxth.w	fp, r2
 8009410:	f8de 2000 	ldr.w	r2, [lr]
 8009414:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8009418:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800941c:	b29b      	uxth	r3, r3
 800941e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009422:	4581      	cmp	r9, r0
 8009424:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8009428:	f84e 3b04 	str.w	r3, [lr], #4
 800942c:	d2db      	bcs.n	80093e6 <quorem+0x42>
 800942e:	f856 300c 	ldr.w	r3, [r6, ip]
 8009432:	b933      	cbnz	r3, 8009442 <quorem+0x9e>
 8009434:	9b01      	ldr	r3, [sp, #4]
 8009436:	3b04      	subs	r3, #4
 8009438:	429e      	cmp	r6, r3
 800943a:	461a      	mov	r2, r3
 800943c:	d330      	bcc.n	80094a0 <quorem+0xfc>
 800943e:	f8c8 4010 	str.w	r4, [r8, #16]
 8009442:	4640      	mov	r0, r8
 8009444:	f001 f820 	bl	800a488 <__mcmp>
 8009448:	2800      	cmp	r0, #0
 800944a:	db25      	blt.n	8009498 <quorem+0xf4>
 800944c:	3501      	adds	r5, #1
 800944e:	4630      	mov	r0, r6
 8009450:	f04f 0c00 	mov.w	ip, #0
 8009454:	f857 2b04 	ldr.w	r2, [r7], #4
 8009458:	f8d0 e000 	ldr.w	lr, [r0]
 800945c:	b293      	uxth	r3, r2
 800945e:	ebac 0303 	sub.w	r3, ip, r3
 8009462:	0c12      	lsrs	r2, r2, #16
 8009464:	fa13 f38e 	uxtah	r3, r3, lr
 8009468:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800946c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009470:	b29b      	uxth	r3, r3
 8009472:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009476:	45b9      	cmp	r9, r7
 8009478:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800947c:	f840 3b04 	str.w	r3, [r0], #4
 8009480:	d2e8      	bcs.n	8009454 <quorem+0xb0>
 8009482:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8009486:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800948a:	b92a      	cbnz	r2, 8009498 <quorem+0xf4>
 800948c:	3b04      	subs	r3, #4
 800948e:	429e      	cmp	r6, r3
 8009490:	461a      	mov	r2, r3
 8009492:	d30b      	bcc.n	80094ac <quorem+0x108>
 8009494:	f8c8 4010 	str.w	r4, [r8, #16]
 8009498:	4628      	mov	r0, r5
 800949a:	b003      	add	sp, #12
 800949c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094a0:	6812      	ldr	r2, [r2, #0]
 80094a2:	3b04      	subs	r3, #4
 80094a4:	2a00      	cmp	r2, #0
 80094a6:	d1ca      	bne.n	800943e <quorem+0x9a>
 80094a8:	3c01      	subs	r4, #1
 80094aa:	e7c5      	b.n	8009438 <quorem+0x94>
 80094ac:	6812      	ldr	r2, [r2, #0]
 80094ae:	3b04      	subs	r3, #4
 80094b0:	2a00      	cmp	r2, #0
 80094b2:	d1ef      	bne.n	8009494 <quorem+0xf0>
 80094b4:	3c01      	subs	r4, #1
 80094b6:	e7ea      	b.n	800948e <quorem+0xea>
 80094b8:	2000      	movs	r0, #0
 80094ba:	e7ee      	b.n	800949a <quorem+0xf6>
 80094bc:	0000      	movs	r0, r0
	...

080094c0 <_dtoa_r>:
 80094c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	ec57 6b10 	vmov	r6, r7, d0
 80094c8:	b097      	sub	sp, #92	; 0x5c
 80094ca:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80094cc:	9106      	str	r1, [sp, #24]
 80094ce:	4604      	mov	r4, r0
 80094d0:	920b      	str	r2, [sp, #44]	; 0x2c
 80094d2:	9312      	str	r3, [sp, #72]	; 0x48
 80094d4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80094d8:	e9cd 6700 	strd	r6, r7, [sp]
 80094dc:	b93d      	cbnz	r5, 80094ee <_dtoa_r+0x2e>
 80094de:	2010      	movs	r0, #16
 80094e0:	f000 fdb4 	bl	800a04c <malloc>
 80094e4:	6260      	str	r0, [r4, #36]	; 0x24
 80094e6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80094ea:	6005      	str	r5, [r0, #0]
 80094ec:	60c5      	str	r5, [r0, #12]
 80094ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80094f0:	6819      	ldr	r1, [r3, #0]
 80094f2:	b151      	cbz	r1, 800950a <_dtoa_r+0x4a>
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	604a      	str	r2, [r1, #4]
 80094f8:	2301      	movs	r3, #1
 80094fa:	4093      	lsls	r3, r2
 80094fc:	608b      	str	r3, [r1, #8]
 80094fe:	4620      	mov	r0, r4
 8009500:	f000 fde0 	bl	800a0c4 <_Bfree>
 8009504:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009506:	2200      	movs	r2, #0
 8009508:	601a      	str	r2, [r3, #0]
 800950a:	1e3b      	subs	r3, r7, #0
 800950c:	bfbb      	ittet	lt
 800950e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009512:	9301      	strlt	r3, [sp, #4]
 8009514:	2300      	movge	r3, #0
 8009516:	2201      	movlt	r2, #1
 8009518:	bfac      	ite	ge
 800951a:	f8c8 3000 	strge.w	r3, [r8]
 800951e:	f8c8 2000 	strlt.w	r2, [r8]
 8009522:	4baf      	ldr	r3, [pc, #700]	; (80097e0 <_dtoa_r+0x320>)
 8009524:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009528:	ea33 0308 	bics.w	r3, r3, r8
 800952c:	d114      	bne.n	8009558 <_dtoa_r+0x98>
 800952e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009530:	f242 730f 	movw	r3, #9999	; 0x270f
 8009534:	6013      	str	r3, [r2, #0]
 8009536:	9b00      	ldr	r3, [sp, #0]
 8009538:	b923      	cbnz	r3, 8009544 <_dtoa_r+0x84>
 800953a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800953e:	2800      	cmp	r0, #0
 8009540:	f000 8542 	beq.w	8009fc8 <_dtoa_r+0xb08>
 8009544:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009546:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80097f4 <_dtoa_r+0x334>
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 8544 	beq.w	8009fd8 <_dtoa_r+0xb18>
 8009550:	f10b 0303 	add.w	r3, fp, #3
 8009554:	f000 bd3e 	b.w	8009fd4 <_dtoa_r+0xb14>
 8009558:	e9dd 6700 	ldrd	r6, r7, [sp]
 800955c:	2200      	movs	r2, #0
 800955e:	2300      	movs	r3, #0
 8009560:	4630      	mov	r0, r6
 8009562:	4639      	mov	r1, r7
 8009564:	f7f7 fad8 	bl	8000b18 <__aeabi_dcmpeq>
 8009568:	4681      	mov	r9, r0
 800956a:	b168      	cbz	r0, 8009588 <_dtoa_r+0xc8>
 800956c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800956e:	2301      	movs	r3, #1
 8009570:	6013      	str	r3, [r2, #0]
 8009572:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 8524 	beq.w	8009fc2 <_dtoa_r+0xb02>
 800957a:	4b9a      	ldr	r3, [pc, #616]	; (80097e4 <_dtoa_r+0x324>)
 800957c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800957e:	f103 3bff 	add.w	fp, r3, #4294967295
 8009582:	6013      	str	r3, [r2, #0]
 8009584:	f000 bd28 	b.w	8009fd8 <_dtoa_r+0xb18>
 8009588:	aa14      	add	r2, sp, #80	; 0x50
 800958a:	a915      	add	r1, sp, #84	; 0x54
 800958c:	ec47 6b10 	vmov	d0, r6, r7
 8009590:	4620      	mov	r0, r4
 8009592:	f000 fff0 	bl	800a576 <__d2b>
 8009596:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800959a:	9004      	str	r0, [sp, #16]
 800959c:	2d00      	cmp	r5, #0
 800959e:	d07c      	beq.n	800969a <_dtoa_r+0x1da>
 80095a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80095a4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80095a8:	46b2      	mov	sl, r6
 80095aa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80095ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80095b2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80095b6:	2200      	movs	r2, #0
 80095b8:	4b8b      	ldr	r3, [pc, #556]	; (80097e8 <_dtoa_r+0x328>)
 80095ba:	4650      	mov	r0, sl
 80095bc:	4659      	mov	r1, fp
 80095be:	f7f6 fe8b 	bl	80002d8 <__aeabi_dsub>
 80095c2:	a381      	add	r3, pc, #516	; (adr r3, 80097c8 <_dtoa_r+0x308>)
 80095c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095c8:	f7f7 f83e 	bl	8000648 <__aeabi_dmul>
 80095cc:	a380      	add	r3, pc, #512	; (adr r3, 80097d0 <_dtoa_r+0x310>)
 80095ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d2:	f7f6 fe83 	bl	80002dc <__adddf3>
 80095d6:	4606      	mov	r6, r0
 80095d8:	4628      	mov	r0, r5
 80095da:	460f      	mov	r7, r1
 80095dc:	f7f6 ffca 	bl	8000574 <__aeabi_i2d>
 80095e0:	a37d      	add	r3, pc, #500	; (adr r3, 80097d8 <_dtoa_r+0x318>)
 80095e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095e6:	f7f7 f82f 	bl	8000648 <__aeabi_dmul>
 80095ea:	4602      	mov	r2, r0
 80095ec:	460b      	mov	r3, r1
 80095ee:	4630      	mov	r0, r6
 80095f0:	4639      	mov	r1, r7
 80095f2:	f7f6 fe73 	bl	80002dc <__adddf3>
 80095f6:	4606      	mov	r6, r0
 80095f8:	460f      	mov	r7, r1
 80095fa:	f7f7 fad5 	bl	8000ba8 <__aeabi_d2iz>
 80095fe:	2200      	movs	r2, #0
 8009600:	4682      	mov	sl, r0
 8009602:	2300      	movs	r3, #0
 8009604:	4630      	mov	r0, r6
 8009606:	4639      	mov	r1, r7
 8009608:	f7f7 fa90 	bl	8000b2c <__aeabi_dcmplt>
 800960c:	b148      	cbz	r0, 8009622 <_dtoa_r+0x162>
 800960e:	4650      	mov	r0, sl
 8009610:	f7f6 ffb0 	bl	8000574 <__aeabi_i2d>
 8009614:	4632      	mov	r2, r6
 8009616:	463b      	mov	r3, r7
 8009618:	f7f7 fa7e 	bl	8000b18 <__aeabi_dcmpeq>
 800961c:	b908      	cbnz	r0, 8009622 <_dtoa_r+0x162>
 800961e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009622:	f1ba 0f16 	cmp.w	sl, #22
 8009626:	d859      	bhi.n	80096dc <_dtoa_r+0x21c>
 8009628:	4970      	ldr	r1, [pc, #448]	; (80097ec <_dtoa_r+0x32c>)
 800962a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800962e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009632:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009636:	f7f7 fa97 	bl	8000b68 <__aeabi_dcmpgt>
 800963a:	2800      	cmp	r0, #0
 800963c:	d050      	beq.n	80096e0 <_dtoa_r+0x220>
 800963e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009642:	2300      	movs	r3, #0
 8009644:	930f      	str	r3, [sp, #60]	; 0x3c
 8009646:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009648:	1b5d      	subs	r5, r3, r5
 800964a:	f1b5 0801 	subs.w	r8, r5, #1
 800964e:	bf49      	itett	mi
 8009650:	f1c5 0301 	rsbmi	r3, r5, #1
 8009654:	2300      	movpl	r3, #0
 8009656:	9305      	strmi	r3, [sp, #20]
 8009658:	f04f 0800 	movmi.w	r8, #0
 800965c:	bf58      	it	pl
 800965e:	9305      	strpl	r3, [sp, #20]
 8009660:	f1ba 0f00 	cmp.w	sl, #0
 8009664:	db3e      	blt.n	80096e4 <_dtoa_r+0x224>
 8009666:	2300      	movs	r3, #0
 8009668:	44d0      	add	r8, sl
 800966a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800966e:	9307      	str	r3, [sp, #28]
 8009670:	9b06      	ldr	r3, [sp, #24]
 8009672:	2b09      	cmp	r3, #9
 8009674:	f200 8090 	bhi.w	8009798 <_dtoa_r+0x2d8>
 8009678:	2b05      	cmp	r3, #5
 800967a:	bfc4      	itt	gt
 800967c:	3b04      	subgt	r3, #4
 800967e:	9306      	strgt	r3, [sp, #24]
 8009680:	9b06      	ldr	r3, [sp, #24]
 8009682:	f1a3 0302 	sub.w	r3, r3, #2
 8009686:	bfcc      	ite	gt
 8009688:	2500      	movgt	r5, #0
 800968a:	2501      	movle	r5, #1
 800968c:	2b03      	cmp	r3, #3
 800968e:	f200 808f 	bhi.w	80097b0 <_dtoa_r+0x2f0>
 8009692:	e8df f003 	tbb	[pc, r3]
 8009696:	7f7d      	.short	0x7f7d
 8009698:	7131      	.short	0x7131
 800969a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800969e:	441d      	add	r5, r3
 80096a0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80096a4:	2820      	cmp	r0, #32
 80096a6:	dd13      	ble.n	80096d0 <_dtoa_r+0x210>
 80096a8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80096ac:	9b00      	ldr	r3, [sp, #0]
 80096ae:	fa08 f800 	lsl.w	r8, r8, r0
 80096b2:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80096b6:	fa23 f000 	lsr.w	r0, r3, r0
 80096ba:	ea48 0000 	orr.w	r0, r8, r0
 80096be:	f7f6 ff49 	bl	8000554 <__aeabi_ui2d>
 80096c2:	2301      	movs	r3, #1
 80096c4:	4682      	mov	sl, r0
 80096c6:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80096ca:	3d01      	subs	r5, #1
 80096cc:	9313      	str	r3, [sp, #76]	; 0x4c
 80096ce:	e772      	b.n	80095b6 <_dtoa_r+0xf6>
 80096d0:	9b00      	ldr	r3, [sp, #0]
 80096d2:	f1c0 0020 	rsb	r0, r0, #32
 80096d6:	fa03 f000 	lsl.w	r0, r3, r0
 80096da:	e7f0      	b.n	80096be <_dtoa_r+0x1fe>
 80096dc:	2301      	movs	r3, #1
 80096de:	e7b1      	b.n	8009644 <_dtoa_r+0x184>
 80096e0:	900f      	str	r0, [sp, #60]	; 0x3c
 80096e2:	e7b0      	b.n	8009646 <_dtoa_r+0x186>
 80096e4:	9b05      	ldr	r3, [sp, #20]
 80096e6:	eba3 030a 	sub.w	r3, r3, sl
 80096ea:	9305      	str	r3, [sp, #20]
 80096ec:	f1ca 0300 	rsb	r3, sl, #0
 80096f0:	9307      	str	r3, [sp, #28]
 80096f2:	2300      	movs	r3, #0
 80096f4:	930e      	str	r3, [sp, #56]	; 0x38
 80096f6:	e7bb      	b.n	8009670 <_dtoa_r+0x1b0>
 80096f8:	2301      	movs	r3, #1
 80096fa:	930a      	str	r3, [sp, #40]	; 0x28
 80096fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096fe:	2b00      	cmp	r3, #0
 8009700:	dd59      	ble.n	80097b6 <_dtoa_r+0x2f6>
 8009702:	9302      	str	r3, [sp, #8]
 8009704:	4699      	mov	r9, r3
 8009706:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009708:	2200      	movs	r2, #0
 800970a:	6072      	str	r2, [r6, #4]
 800970c:	2204      	movs	r2, #4
 800970e:	f102 0014 	add.w	r0, r2, #20
 8009712:	4298      	cmp	r0, r3
 8009714:	6871      	ldr	r1, [r6, #4]
 8009716:	d953      	bls.n	80097c0 <_dtoa_r+0x300>
 8009718:	4620      	mov	r0, r4
 800971a:	f000 fc9f 	bl	800a05c <_Balloc>
 800971e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009720:	6030      	str	r0, [r6, #0]
 8009722:	f1b9 0f0e 	cmp.w	r9, #14
 8009726:	f8d3 b000 	ldr.w	fp, [r3]
 800972a:	f200 80e6 	bhi.w	80098fa <_dtoa_r+0x43a>
 800972e:	2d00      	cmp	r5, #0
 8009730:	f000 80e3 	beq.w	80098fa <_dtoa_r+0x43a>
 8009734:	ed9d 7b00 	vldr	d7, [sp]
 8009738:	f1ba 0f00 	cmp.w	sl, #0
 800973c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8009740:	dd74      	ble.n	800982c <_dtoa_r+0x36c>
 8009742:	4a2a      	ldr	r2, [pc, #168]	; (80097ec <_dtoa_r+0x32c>)
 8009744:	f00a 030f 	and.w	r3, sl, #15
 8009748:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800974c:	ed93 7b00 	vldr	d7, [r3]
 8009750:	ea4f 162a 	mov.w	r6, sl, asr #4
 8009754:	06f0      	lsls	r0, r6, #27
 8009756:	ed8d 7b08 	vstr	d7, [sp, #32]
 800975a:	d565      	bpl.n	8009828 <_dtoa_r+0x368>
 800975c:	4b24      	ldr	r3, [pc, #144]	; (80097f0 <_dtoa_r+0x330>)
 800975e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009762:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009766:	f7f7 f899 	bl	800089c <__aeabi_ddiv>
 800976a:	e9cd 0100 	strd	r0, r1, [sp]
 800976e:	f006 060f 	and.w	r6, r6, #15
 8009772:	2503      	movs	r5, #3
 8009774:	4f1e      	ldr	r7, [pc, #120]	; (80097f0 <_dtoa_r+0x330>)
 8009776:	e04c      	b.n	8009812 <_dtoa_r+0x352>
 8009778:	2301      	movs	r3, #1
 800977a:	930a      	str	r3, [sp, #40]	; 0x28
 800977c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800977e:	4453      	add	r3, sl
 8009780:	f103 0901 	add.w	r9, r3, #1
 8009784:	9302      	str	r3, [sp, #8]
 8009786:	464b      	mov	r3, r9
 8009788:	2b01      	cmp	r3, #1
 800978a:	bfb8      	it	lt
 800978c:	2301      	movlt	r3, #1
 800978e:	e7ba      	b.n	8009706 <_dtoa_r+0x246>
 8009790:	2300      	movs	r3, #0
 8009792:	e7b2      	b.n	80096fa <_dtoa_r+0x23a>
 8009794:	2300      	movs	r3, #0
 8009796:	e7f0      	b.n	800977a <_dtoa_r+0x2ba>
 8009798:	2501      	movs	r5, #1
 800979a:	2300      	movs	r3, #0
 800979c:	9306      	str	r3, [sp, #24]
 800979e:	950a      	str	r5, [sp, #40]	; 0x28
 80097a0:	f04f 33ff 	mov.w	r3, #4294967295
 80097a4:	9302      	str	r3, [sp, #8]
 80097a6:	4699      	mov	r9, r3
 80097a8:	2200      	movs	r2, #0
 80097aa:	2312      	movs	r3, #18
 80097ac:	920b      	str	r2, [sp, #44]	; 0x2c
 80097ae:	e7aa      	b.n	8009706 <_dtoa_r+0x246>
 80097b0:	2301      	movs	r3, #1
 80097b2:	930a      	str	r3, [sp, #40]	; 0x28
 80097b4:	e7f4      	b.n	80097a0 <_dtoa_r+0x2e0>
 80097b6:	2301      	movs	r3, #1
 80097b8:	9302      	str	r3, [sp, #8]
 80097ba:	4699      	mov	r9, r3
 80097bc:	461a      	mov	r2, r3
 80097be:	e7f5      	b.n	80097ac <_dtoa_r+0x2ec>
 80097c0:	3101      	adds	r1, #1
 80097c2:	6071      	str	r1, [r6, #4]
 80097c4:	0052      	lsls	r2, r2, #1
 80097c6:	e7a2      	b.n	800970e <_dtoa_r+0x24e>
 80097c8:	636f4361 	.word	0x636f4361
 80097cc:	3fd287a7 	.word	0x3fd287a7
 80097d0:	8b60c8b3 	.word	0x8b60c8b3
 80097d4:	3fc68a28 	.word	0x3fc68a28
 80097d8:	509f79fb 	.word	0x509f79fb
 80097dc:	3fd34413 	.word	0x3fd34413
 80097e0:	7ff00000 	.word	0x7ff00000
 80097e4:	0800ad39 	.word	0x0800ad39
 80097e8:	3ff80000 	.word	0x3ff80000
 80097ec:	0800ad98 	.word	0x0800ad98
 80097f0:	0800ad70 	.word	0x0800ad70
 80097f4:	0800ad65 	.word	0x0800ad65
 80097f8:	07f1      	lsls	r1, r6, #31
 80097fa:	d508      	bpl.n	800980e <_dtoa_r+0x34e>
 80097fc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009804:	f7f6 ff20 	bl	8000648 <__aeabi_dmul>
 8009808:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800980c:	3501      	adds	r5, #1
 800980e:	1076      	asrs	r6, r6, #1
 8009810:	3708      	adds	r7, #8
 8009812:	2e00      	cmp	r6, #0
 8009814:	d1f0      	bne.n	80097f8 <_dtoa_r+0x338>
 8009816:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800981a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800981e:	f7f7 f83d 	bl	800089c <__aeabi_ddiv>
 8009822:	e9cd 0100 	strd	r0, r1, [sp]
 8009826:	e01a      	b.n	800985e <_dtoa_r+0x39e>
 8009828:	2502      	movs	r5, #2
 800982a:	e7a3      	b.n	8009774 <_dtoa_r+0x2b4>
 800982c:	f000 80a0 	beq.w	8009970 <_dtoa_r+0x4b0>
 8009830:	f1ca 0600 	rsb	r6, sl, #0
 8009834:	4b9f      	ldr	r3, [pc, #636]	; (8009ab4 <_dtoa_r+0x5f4>)
 8009836:	4fa0      	ldr	r7, [pc, #640]	; (8009ab8 <_dtoa_r+0x5f8>)
 8009838:	f006 020f 	and.w	r2, r6, #15
 800983c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8009848:	f7f6 fefe 	bl	8000648 <__aeabi_dmul>
 800984c:	e9cd 0100 	strd	r0, r1, [sp]
 8009850:	1136      	asrs	r6, r6, #4
 8009852:	2300      	movs	r3, #0
 8009854:	2502      	movs	r5, #2
 8009856:	2e00      	cmp	r6, #0
 8009858:	d17f      	bne.n	800995a <_dtoa_r+0x49a>
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1e1      	bne.n	8009822 <_dtoa_r+0x362>
 800985e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009860:	2b00      	cmp	r3, #0
 8009862:	f000 8087 	beq.w	8009974 <_dtoa_r+0x4b4>
 8009866:	e9dd 6700 	ldrd	r6, r7, [sp]
 800986a:	2200      	movs	r2, #0
 800986c:	4b93      	ldr	r3, [pc, #588]	; (8009abc <_dtoa_r+0x5fc>)
 800986e:	4630      	mov	r0, r6
 8009870:	4639      	mov	r1, r7
 8009872:	f7f7 f95b 	bl	8000b2c <__aeabi_dcmplt>
 8009876:	2800      	cmp	r0, #0
 8009878:	d07c      	beq.n	8009974 <_dtoa_r+0x4b4>
 800987a:	f1b9 0f00 	cmp.w	r9, #0
 800987e:	d079      	beq.n	8009974 <_dtoa_r+0x4b4>
 8009880:	9b02      	ldr	r3, [sp, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	dd35      	ble.n	80098f2 <_dtoa_r+0x432>
 8009886:	f10a 33ff 	add.w	r3, sl, #4294967295
 800988a:	9308      	str	r3, [sp, #32]
 800988c:	4639      	mov	r1, r7
 800988e:	2200      	movs	r2, #0
 8009890:	4b8b      	ldr	r3, [pc, #556]	; (8009ac0 <_dtoa_r+0x600>)
 8009892:	4630      	mov	r0, r6
 8009894:	f7f6 fed8 	bl	8000648 <__aeabi_dmul>
 8009898:	e9cd 0100 	strd	r0, r1, [sp]
 800989c:	9f02      	ldr	r7, [sp, #8]
 800989e:	3501      	adds	r5, #1
 80098a0:	4628      	mov	r0, r5
 80098a2:	f7f6 fe67 	bl	8000574 <__aeabi_i2d>
 80098a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098aa:	f7f6 fecd 	bl	8000648 <__aeabi_dmul>
 80098ae:	2200      	movs	r2, #0
 80098b0:	4b84      	ldr	r3, [pc, #528]	; (8009ac4 <_dtoa_r+0x604>)
 80098b2:	f7f6 fd13 	bl	80002dc <__adddf3>
 80098b6:	4605      	mov	r5, r0
 80098b8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80098bc:	2f00      	cmp	r7, #0
 80098be:	d15d      	bne.n	800997c <_dtoa_r+0x4bc>
 80098c0:	2200      	movs	r2, #0
 80098c2:	4b81      	ldr	r3, [pc, #516]	; (8009ac8 <_dtoa_r+0x608>)
 80098c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098c8:	f7f6 fd06 	bl	80002d8 <__aeabi_dsub>
 80098cc:	462a      	mov	r2, r5
 80098ce:	4633      	mov	r3, r6
 80098d0:	e9cd 0100 	strd	r0, r1, [sp]
 80098d4:	f7f7 f948 	bl	8000b68 <__aeabi_dcmpgt>
 80098d8:	2800      	cmp	r0, #0
 80098da:	f040 8288 	bne.w	8009dee <_dtoa_r+0x92e>
 80098de:	462a      	mov	r2, r5
 80098e0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80098e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80098e8:	f7f7 f920 	bl	8000b2c <__aeabi_dcmplt>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	f040 827c 	bne.w	8009dea <_dtoa_r+0x92a>
 80098f2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80098f6:	e9cd 2300 	strd	r2, r3, [sp]
 80098fa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	f2c0 8150 	blt.w	8009ba2 <_dtoa_r+0x6e2>
 8009902:	f1ba 0f0e 	cmp.w	sl, #14
 8009906:	f300 814c 	bgt.w	8009ba2 <_dtoa_r+0x6e2>
 800990a:	4b6a      	ldr	r3, [pc, #424]	; (8009ab4 <_dtoa_r+0x5f4>)
 800990c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009910:	ed93 7b00 	vldr	d7, [r3]
 8009914:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009916:	2b00      	cmp	r3, #0
 8009918:	ed8d 7b02 	vstr	d7, [sp, #8]
 800991c:	f280 80d8 	bge.w	8009ad0 <_dtoa_r+0x610>
 8009920:	f1b9 0f00 	cmp.w	r9, #0
 8009924:	f300 80d4 	bgt.w	8009ad0 <_dtoa_r+0x610>
 8009928:	f040 825e 	bne.w	8009de8 <_dtoa_r+0x928>
 800992c:	2200      	movs	r2, #0
 800992e:	4b66      	ldr	r3, [pc, #408]	; (8009ac8 <_dtoa_r+0x608>)
 8009930:	ec51 0b17 	vmov	r0, r1, d7
 8009934:	f7f6 fe88 	bl	8000648 <__aeabi_dmul>
 8009938:	e9dd 2300 	ldrd	r2, r3, [sp]
 800993c:	f7f7 f90a 	bl	8000b54 <__aeabi_dcmpge>
 8009940:	464f      	mov	r7, r9
 8009942:	464e      	mov	r6, r9
 8009944:	2800      	cmp	r0, #0
 8009946:	f040 8234 	bne.w	8009db2 <_dtoa_r+0x8f2>
 800994a:	2331      	movs	r3, #49	; 0x31
 800994c:	f10b 0501 	add.w	r5, fp, #1
 8009950:	f88b 3000 	strb.w	r3, [fp]
 8009954:	f10a 0a01 	add.w	sl, sl, #1
 8009958:	e22f      	b.n	8009dba <_dtoa_r+0x8fa>
 800995a:	07f2      	lsls	r2, r6, #31
 800995c:	d505      	bpl.n	800996a <_dtoa_r+0x4aa>
 800995e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009962:	f7f6 fe71 	bl	8000648 <__aeabi_dmul>
 8009966:	3501      	adds	r5, #1
 8009968:	2301      	movs	r3, #1
 800996a:	1076      	asrs	r6, r6, #1
 800996c:	3708      	adds	r7, #8
 800996e:	e772      	b.n	8009856 <_dtoa_r+0x396>
 8009970:	2502      	movs	r5, #2
 8009972:	e774      	b.n	800985e <_dtoa_r+0x39e>
 8009974:	f8cd a020 	str.w	sl, [sp, #32]
 8009978:	464f      	mov	r7, r9
 800997a:	e791      	b.n	80098a0 <_dtoa_r+0x3e0>
 800997c:	4b4d      	ldr	r3, [pc, #308]	; (8009ab4 <_dtoa_r+0x5f4>)
 800997e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009982:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 8009986:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009988:	2b00      	cmp	r3, #0
 800998a:	d047      	beq.n	8009a1c <_dtoa_r+0x55c>
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	2000      	movs	r0, #0
 8009992:	494e      	ldr	r1, [pc, #312]	; (8009acc <_dtoa_r+0x60c>)
 8009994:	f7f6 ff82 	bl	800089c <__aeabi_ddiv>
 8009998:	462a      	mov	r2, r5
 800999a:	4633      	mov	r3, r6
 800999c:	f7f6 fc9c 	bl	80002d8 <__aeabi_dsub>
 80099a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80099a4:	465d      	mov	r5, fp
 80099a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099aa:	f7f7 f8fd 	bl	8000ba8 <__aeabi_d2iz>
 80099ae:	4606      	mov	r6, r0
 80099b0:	f7f6 fde0 	bl	8000574 <__aeabi_i2d>
 80099b4:	4602      	mov	r2, r0
 80099b6:	460b      	mov	r3, r1
 80099b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80099bc:	f7f6 fc8c 	bl	80002d8 <__aeabi_dsub>
 80099c0:	3630      	adds	r6, #48	; 0x30
 80099c2:	f805 6b01 	strb.w	r6, [r5], #1
 80099c6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80099ca:	e9cd 0100 	strd	r0, r1, [sp]
 80099ce:	f7f7 f8ad 	bl	8000b2c <__aeabi_dcmplt>
 80099d2:	2800      	cmp	r0, #0
 80099d4:	d163      	bne.n	8009a9e <_dtoa_r+0x5de>
 80099d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80099da:	2000      	movs	r0, #0
 80099dc:	4937      	ldr	r1, [pc, #220]	; (8009abc <_dtoa_r+0x5fc>)
 80099de:	f7f6 fc7b 	bl	80002d8 <__aeabi_dsub>
 80099e2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80099e6:	f7f7 f8a1 	bl	8000b2c <__aeabi_dcmplt>
 80099ea:	2800      	cmp	r0, #0
 80099ec:	f040 80b7 	bne.w	8009b5e <_dtoa_r+0x69e>
 80099f0:	eba5 030b 	sub.w	r3, r5, fp
 80099f4:	429f      	cmp	r7, r3
 80099f6:	f77f af7c 	ble.w	80098f2 <_dtoa_r+0x432>
 80099fa:	2200      	movs	r2, #0
 80099fc:	4b30      	ldr	r3, [pc, #192]	; (8009ac0 <_dtoa_r+0x600>)
 80099fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a02:	f7f6 fe21 	bl	8000648 <__aeabi_dmul>
 8009a06:	2200      	movs	r2, #0
 8009a08:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009a0c:	4b2c      	ldr	r3, [pc, #176]	; (8009ac0 <_dtoa_r+0x600>)
 8009a0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a12:	f7f6 fe19 	bl	8000648 <__aeabi_dmul>
 8009a16:	e9cd 0100 	strd	r0, r1, [sp]
 8009a1a:	e7c4      	b.n	80099a6 <_dtoa_r+0x4e6>
 8009a1c:	462a      	mov	r2, r5
 8009a1e:	4633      	mov	r3, r6
 8009a20:	f7f6 fe12 	bl	8000648 <__aeabi_dmul>
 8009a24:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009a28:	eb0b 0507 	add.w	r5, fp, r7
 8009a2c:	465e      	mov	r6, fp
 8009a2e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a32:	f7f7 f8b9 	bl	8000ba8 <__aeabi_d2iz>
 8009a36:	4607      	mov	r7, r0
 8009a38:	f7f6 fd9c 	bl	8000574 <__aeabi_i2d>
 8009a3c:	3730      	adds	r7, #48	; 0x30
 8009a3e:	4602      	mov	r2, r0
 8009a40:	460b      	mov	r3, r1
 8009a42:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a46:	f7f6 fc47 	bl	80002d8 <__aeabi_dsub>
 8009a4a:	f806 7b01 	strb.w	r7, [r6], #1
 8009a4e:	42ae      	cmp	r6, r5
 8009a50:	e9cd 0100 	strd	r0, r1, [sp]
 8009a54:	f04f 0200 	mov.w	r2, #0
 8009a58:	d126      	bne.n	8009aa8 <_dtoa_r+0x5e8>
 8009a5a:	4b1c      	ldr	r3, [pc, #112]	; (8009acc <_dtoa_r+0x60c>)
 8009a5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009a60:	f7f6 fc3c 	bl	80002dc <__adddf3>
 8009a64:	4602      	mov	r2, r0
 8009a66:	460b      	mov	r3, r1
 8009a68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a6c:	f7f7 f87c 	bl	8000b68 <__aeabi_dcmpgt>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d174      	bne.n	8009b5e <_dtoa_r+0x69e>
 8009a74:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8009a78:	2000      	movs	r0, #0
 8009a7a:	4914      	ldr	r1, [pc, #80]	; (8009acc <_dtoa_r+0x60c>)
 8009a7c:	f7f6 fc2c 	bl	80002d8 <__aeabi_dsub>
 8009a80:	4602      	mov	r2, r0
 8009a82:	460b      	mov	r3, r1
 8009a84:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009a88:	f7f7 f850 	bl	8000b2c <__aeabi_dcmplt>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	f43f af30 	beq.w	80098f2 <_dtoa_r+0x432>
 8009a92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009a96:	2b30      	cmp	r3, #48	; 0x30
 8009a98:	f105 32ff 	add.w	r2, r5, #4294967295
 8009a9c:	d002      	beq.n	8009aa4 <_dtoa_r+0x5e4>
 8009a9e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009aa2:	e04a      	b.n	8009b3a <_dtoa_r+0x67a>
 8009aa4:	4615      	mov	r5, r2
 8009aa6:	e7f4      	b.n	8009a92 <_dtoa_r+0x5d2>
 8009aa8:	4b05      	ldr	r3, [pc, #20]	; (8009ac0 <_dtoa_r+0x600>)
 8009aaa:	f7f6 fdcd 	bl	8000648 <__aeabi_dmul>
 8009aae:	e9cd 0100 	strd	r0, r1, [sp]
 8009ab2:	e7bc      	b.n	8009a2e <_dtoa_r+0x56e>
 8009ab4:	0800ad98 	.word	0x0800ad98
 8009ab8:	0800ad70 	.word	0x0800ad70
 8009abc:	3ff00000 	.word	0x3ff00000
 8009ac0:	40240000 	.word	0x40240000
 8009ac4:	401c0000 	.word	0x401c0000
 8009ac8:	40140000 	.word	0x40140000
 8009acc:	3fe00000 	.word	0x3fe00000
 8009ad0:	e9dd 6700 	ldrd	r6, r7, [sp]
 8009ad4:	465d      	mov	r5, fp
 8009ad6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009ada:	4630      	mov	r0, r6
 8009adc:	4639      	mov	r1, r7
 8009ade:	f7f6 fedd 	bl	800089c <__aeabi_ddiv>
 8009ae2:	f7f7 f861 	bl	8000ba8 <__aeabi_d2iz>
 8009ae6:	4680      	mov	r8, r0
 8009ae8:	f7f6 fd44 	bl	8000574 <__aeabi_i2d>
 8009aec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009af0:	f7f6 fdaa 	bl	8000648 <__aeabi_dmul>
 8009af4:	4602      	mov	r2, r0
 8009af6:	460b      	mov	r3, r1
 8009af8:	4630      	mov	r0, r6
 8009afa:	4639      	mov	r1, r7
 8009afc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8009b00:	f7f6 fbea 	bl	80002d8 <__aeabi_dsub>
 8009b04:	f805 6b01 	strb.w	r6, [r5], #1
 8009b08:	eba5 060b 	sub.w	r6, r5, fp
 8009b0c:	45b1      	cmp	r9, r6
 8009b0e:	4602      	mov	r2, r0
 8009b10:	460b      	mov	r3, r1
 8009b12:	d139      	bne.n	8009b88 <_dtoa_r+0x6c8>
 8009b14:	f7f6 fbe2 	bl	80002dc <__adddf3>
 8009b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b1c:	4606      	mov	r6, r0
 8009b1e:	460f      	mov	r7, r1
 8009b20:	f7f7 f822 	bl	8000b68 <__aeabi_dcmpgt>
 8009b24:	b9c8      	cbnz	r0, 8009b5a <_dtoa_r+0x69a>
 8009b26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	4639      	mov	r1, r7
 8009b2e:	f7f6 fff3 	bl	8000b18 <__aeabi_dcmpeq>
 8009b32:	b110      	cbz	r0, 8009b3a <_dtoa_r+0x67a>
 8009b34:	f018 0f01 	tst.w	r8, #1
 8009b38:	d10f      	bne.n	8009b5a <_dtoa_r+0x69a>
 8009b3a:	9904      	ldr	r1, [sp, #16]
 8009b3c:	4620      	mov	r0, r4
 8009b3e:	f000 fac1 	bl	800a0c4 <_Bfree>
 8009b42:	2300      	movs	r3, #0
 8009b44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b46:	702b      	strb	r3, [r5, #0]
 8009b48:	f10a 0301 	add.w	r3, sl, #1
 8009b4c:	6013      	str	r3, [r2, #0]
 8009b4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f000 8241 	beq.w	8009fd8 <_dtoa_r+0xb18>
 8009b56:	601d      	str	r5, [r3, #0]
 8009b58:	e23e      	b.n	8009fd8 <_dtoa_r+0xb18>
 8009b5a:	f8cd a020 	str.w	sl, [sp, #32]
 8009b5e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009b62:	2a39      	cmp	r2, #57	; 0x39
 8009b64:	f105 33ff 	add.w	r3, r5, #4294967295
 8009b68:	d108      	bne.n	8009b7c <_dtoa_r+0x6bc>
 8009b6a:	459b      	cmp	fp, r3
 8009b6c:	d10a      	bne.n	8009b84 <_dtoa_r+0x6c4>
 8009b6e:	9b08      	ldr	r3, [sp, #32]
 8009b70:	3301      	adds	r3, #1
 8009b72:	9308      	str	r3, [sp, #32]
 8009b74:	2330      	movs	r3, #48	; 0x30
 8009b76:	f88b 3000 	strb.w	r3, [fp]
 8009b7a:	465b      	mov	r3, fp
 8009b7c:	781a      	ldrb	r2, [r3, #0]
 8009b7e:	3201      	adds	r2, #1
 8009b80:	701a      	strb	r2, [r3, #0]
 8009b82:	e78c      	b.n	8009a9e <_dtoa_r+0x5de>
 8009b84:	461d      	mov	r5, r3
 8009b86:	e7ea      	b.n	8009b5e <_dtoa_r+0x69e>
 8009b88:	2200      	movs	r2, #0
 8009b8a:	4b9b      	ldr	r3, [pc, #620]	; (8009df8 <_dtoa_r+0x938>)
 8009b8c:	f7f6 fd5c 	bl	8000648 <__aeabi_dmul>
 8009b90:	2200      	movs	r2, #0
 8009b92:	2300      	movs	r3, #0
 8009b94:	4606      	mov	r6, r0
 8009b96:	460f      	mov	r7, r1
 8009b98:	f7f6 ffbe 	bl	8000b18 <__aeabi_dcmpeq>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d09a      	beq.n	8009ad6 <_dtoa_r+0x616>
 8009ba0:	e7cb      	b.n	8009b3a <_dtoa_r+0x67a>
 8009ba2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ba4:	2a00      	cmp	r2, #0
 8009ba6:	f000 808b 	beq.w	8009cc0 <_dtoa_r+0x800>
 8009baa:	9a06      	ldr	r2, [sp, #24]
 8009bac:	2a01      	cmp	r2, #1
 8009bae:	dc6e      	bgt.n	8009c8e <_dtoa_r+0x7ce>
 8009bb0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009bb2:	2a00      	cmp	r2, #0
 8009bb4:	d067      	beq.n	8009c86 <_dtoa_r+0x7c6>
 8009bb6:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009bba:	9f07      	ldr	r7, [sp, #28]
 8009bbc:	9d05      	ldr	r5, [sp, #20]
 8009bbe:	9a05      	ldr	r2, [sp, #20]
 8009bc0:	2101      	movs	r1, #1
 8009bc2:	441a      	add	r2, r3
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	9205      	str	r2, [sp, #20]
 8009bc8:	4498      	add	r8, r3
 8009bca:	f000 fb1b 	bl	800a204 <__i2b>
 8009bce:	4606      	mov	r6, r0
 8009bd0:	2d00      	cmp	r5, #0
 8009bd2:	dd0c      	ble.n	8009bee <_dtoa_r+0x72e>
 8009bd4:	f1b8 0f00 	cmp.w	r8, #0
 8009bd8:	dd09      	ble.n	8009bee <_dtoa_r+0x72e>
 8009bda:	4545      	cmp	r5, r8
 8009bdc:	9a05      	ldr	r2, [sp, #20]
 8009bde:	462b      	mov	r3, r5
 8009be0:	bfa8      	it	ge
 8009be2:	4643      	movge	r3, r8
 8009be4:	1ad2      	subs	r2, r2, r3
 8009be6:	9205      	str	r2, [sp, #20]
 8009be8:	1aed      	subs	r5, r5, r3
 8009bea:	eba8 0803 	sub.w	r8, r8, r3
 8009bee:	9b07      	ldr	r3, [sp, #28]
 8009bf0:	b1eb      	cbz	r3, 8009c2e <_dtoa_r+0x76e>
 8009bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d067      	beq.n	8009cc8 <_dtoa_r+0x808>
 8009bf8:	b18f      	cbz	r7, 8009c1e <_dtoa_r+0x75e>
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	463a      	mov	r2, r7
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f000 fba0 	bl	800a344 <__pow5mult>
 8009c04:	9a04      	ldr	r2, [sp, #16]
 8009c06:	4601      	mov	r1, r0
 8009c08:	4606      	mov	r6, r0
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f000 fb03 	bl	800a216 <__multiply>
 8009c10:	9904      	ldr	r1, [sp, #16]
 8009c12:	9008      	str	r0, [sp, #32]
 8009c14:	4620      	mov	r0, r4
 8009c16:	f000 fa55 	bl	800a0c4 <_Bfree>
 8009c1a:	9b08      	ldr	r3, [sp, #32]
 8009c1c:	9304      	str	r3, [sp, #16]
 8009c1e:	9b07      	ldr	r3, [sp, #28]
 8009c20:	1bda      	subs	r2, r3, r7
 8009c22:	d004      	beq.n	8009c2e <_dtoa_r+0x76e>
 8009c24:	9904      	ldr	r1, [sp, #16]
 8009c26:	4620      	mov	r0, r4
 8009c28:	f000 fb8c 	bl	800a344 <__pow5mult>
 8009c2c:	9004      	str	r0, [sp, #16]
 8009c2e:	2101      	movs	r1, #1
 8009c30:	4620      	mov	r0, r4
 8009c32:	f000 fae7 	bl	800a204 <__i2b>
 8009c36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c38:	4607      	mov	r7, r0
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	f000 81d0 	beq.w	8009fe0 <_dtoa_r+0xb20>
 8009c40:	461a      	mov	r2, r3
 8009c42:	4601      	mov	r1, r0
 8009c44:	4620      	mov	r0, r4
 8009c46:	f000 fb7d 	bl	800a344 <__pow5mult>
 8009c4a:	9b06      	ldr	r3, [sp, #24]
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	4607      	mov	r7, r0
 8009c50:	dc40      	bgt.n	8009cd4 <_dtoa_r+0x814>
 8009c52:	9b00      	ldr	r3, [sp, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d139      	bne.n	8009ccc <_dtoa_r+0x80c>
 8009c58:	9b01      	ldr	r3, [sp, #4]
 8009c5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d136      	bne.n	8009cd0 <_dtoa_r+0x810>
 8009c62:	9b01      	ldr	r3, [sp, #4]
 8009c64:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009c68:	0d1b      	lsrs	r3, r3, #20
 8009c6a:	051b      	lsls	r3, r3, #20
 8009c6c:	b12b      	cbz	r3, 8009c7a <_dtoa_r+0x7ba>
 8009c6e:	9b05      	ldr	r3, [sp, #20]
 8009c70:	3301      	adds	r3, #1
 8009c72:	9305      	str	r3, [sp, #20]
 8009c74:	f108 0801 	add.w	r8, r8, #1
 8009c78:	2301      	movs	r3, #1
 8009c7a:	9307      	str	r3, [sp, #28]
 8009c7c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d12a      	bne.n	8009cd8 <_dtoa_r+0x818>
 8009c82:	2001      	movs	r0, #1
 8009c84:	e030      	b.n	8009ce8 <_dtoa_r+0x828>
 8009c86:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009c88:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009c8c:	e795      	b.n	8009bba <_dtoa_r+0x6fa>
 8009c8e:	9b07      	ldr	r3, [sp, #28]
 8009c90:	f109 37ff 	add.w	r7, r9, #4294967295
 8009c94:	42bb      	cmp	r3, r7
 8009c96:	bfbf      	itttt	lt
 8009c98:	9b07      	ldrlt	r3, [sp, #28]
 8009c9a:	9707      	strlt	r7, [sp, #28]
 8009c9c:	1afa      	sublt	r2, r7, r3
 8009c9e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8009ca0:	bfbb      	ittet	lt
 8009ca2:	189b      	addlt	r3, r3, r2
 8009ca4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8009ca6:	1bdf      	subge	r7, r3, r7
 8009ca8:	2700      	movlt	r7, #0
 8009caa:	f1b9 0f00 	cmp.w	r9, #0
 8009cae:	bfb5      	itete	lt
 8009cb0:	9b05      	ldrlt	r3, [sp, #20]
 8009cb2:	9d05      	ldrge	r5, [sp, #20]
 8009cb4:	eba3 0509 	sublt.w	r5, r3, r9
 8009cb8:	464b      	movge	r3, r9
 8009cba:	bfb8      	it	lt
 8009cbc:	2300      	movlt	r3, #0
 8009cbe:	e77e      	b.n	8009bbe <_dtoa_r+0x6fe>
 8009cc0:	9f07      	ldr	r7, [sp, #28]
 8009cc2:	9d05      	ldr	r5, [sp, #20]
 8009cc4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8009cc6:	e783      	b.n	8009bd0 <_dtoa_r+0x710>
 8009cc8:	9a07      	ldr	r2, [sp, #28]
 8009cca:	e7ab      	b.n	8009c24 <_dtoa_r+0x764>
 8009ccc:	2300      	movs	r3, #0
 8009cce:	e7d4      	b.n	8009c7a <_dtoa_r+0x7ba>
 8009cd0:	9b00      	ldr	r3, [sp, #0]
 8009cd2:	e7d2      	b.n	8009c7a <_dtoa_r+0x7ba>
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	9307      	str	r3, [sp, #28]
 8009cd8:	693b      	ldr	r3, [r7, #16]
 8009cda:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8009cde:	6918      	ldr	r0, [r3, #16]
 8009ce0:	f000 fa42 	bl	800a168 <__hi0bits>
 8009ce4:	f1c0 0020 	rsb	r0, r0, #32
 8009ce8:	4440      	add	r0, r8
 8009cea:	f010 001f 	ands.w	r0, r0, #31
 8009cee:	d047      	beq.n	8009d80 <_dtoa_r+0x8c0>
 8009cf0:	f1c0 0320 	rsb	r3, r0, #32
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	dd3b      	ble.n	8009d70 <_dtoa_r+0x8b0>
 8009cf8:	9b05      	ldr	r3, [sp, #20]
 8009cfa:	f1c0 001c 	rsb	r0, r0, #28
 8009cfe:	4403      	add	r3, r0
 8009d00:	9305      	str	r3, [sp, #20]
 8009d02:	4405      	add	r5, r0
 8009d04:	4480      	add	r8, r0
 8009d06:	9b05      	ldr	r3, [sp, #20]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	dd05      	ble.n	8009d18 <_dtoa_r+0x858>
 8009d0c:	461a      	mov	r2, r3
 8009d0e:	9904      	ldr	r1, [sp, #16]
 8009d10:	4620      	mov	r0, r4
 8009d12:	f000 fb65 	bl	800a3e0 <__lshift>
 8009d16:	9004      	str	r0, [sp, #16]
 8009d18:	f1b8 0f00 	cmp.w	r8, #0
 8009d1c:	dd05      	ble.n	8009d2a <_dtoa_r+0x86a>
 8009d1e:	4639      	mov	r1, r7
 8009d20:	4642      	mov	r2, r8
 8009d22:	4620      	mov	r0, r4
 8009d24:	f000 fb5c 	bl	800a3e0 <__lshift>
 8009d28:	4607      	mov	r7, r0
 8009d2a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009d2c:	b353      	cbz	r3, 8009d84 <_dtoa_r+0x8c4>
 8009d2e:	4639      	mov	r1, r7
 8009d30:	9804      	ldr	r0, [sp, #16]
 8009d32:	f000 fba9 	bl	800a488 <__mcmp>
 8009d36:	2800      	cmp	r0, #0
 8009d38:	da24      	bge.n	8009d84 <_dtoa_r+0x8c4>
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	220a      	movs	r2, #10
 8009d3e:	9904      	ldr	r1, [sp, #16]
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 f9d6 	bl	800a0f2 <__multadd>
 8009d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d48:	9004      	str	r0, [sp, #16]
 8009d4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	f000 814d 	beq.w	8009fee <_dtoa_r+0xb2e>
 8009d54:	2300      	movs	r3, #0
 8009d56:	4631      	mov	r1, r6
 8009d58:	220a      	movs	r2, #10
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f000 f9c9 	bl	800a0f2 <__multadd>
 8009d60:	9b02      	ldr	r3, [sp, #8]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	4606      	mov	r6, r0
 8009d66:	dc4f      	bgt.n	8009e08 <_dtoa_r+0x948>
 8009d68:	9b06      	ldr	r3, [sp, #24]
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	dd4c      	ble.n	8009e08 <_dtoa_r+0x948>
 8009d6e:	e011      	b.n	8009d94 <_dtoa_r+0x8d4>
 8009d70:	d0c9      	beq.n	8009d06 <_dtoa_r+0x846>
 8009d72:	9a05      	ldr	r2, [sp, #20]
 8009d74:	331c      	adds	r3, #28
 8009d76:	441a      	add	r2, r3
 8009d78:	9205      	str	r2, [sp, #20]
 8009d7a:	441d      	add	r5, r3
 8009d7c:	4498      	add	r8, r3
 8009d7e:	e7c2      	b.n	8009d06 <_dtoa_r+0x846>
 8009d80:	4603      	mov	r3, r0
 8009d82:	e7f6      	b.n	8009d72 <_dtoa_r+0x8b2>
 8009d84:	f1b9 0f00 	cmp.w	r9, #0
 8009d88:	dc38      	bgt.n	8009dfc <_dtoa_r+0x93c>
 8009d8a:	9b06      	ldr	r3, [sp, #24]
 8009d8c:	2b02      	cmp	r3, #2
 8009d8e:	dd35      	ble.n	8009dfc <_dtoa_r+0x93c>
 8009d90:	f8cd 9008 	str.w	r9, [sp, #8]
 8009d94:	9b02      	ldr	r3, [sp, #8]
 8009d96:	b963      	cbnz	r3, 8009db2 <_dtoa_r+0x8f2>
 8009d98:	4639      	mov	r1, r7
 8009d9a:	2205      	movs	r2, #5
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f000 f9a8 	bl	800a0f2 <__multadd>
 8009da2:	4601      	mov	r1, r0
 8009da4:	4607      	mov	r7, r0
 8009da6:	9804      	ldr	r0, [sp, #16]
 8009da8:	f000 fb6e 	bl	800a488 <__mcmp>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	f73f adcc 	bgt.w	800994a <_dtoa_r+0x48a>
 8009db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009db4:	465d      	mov	r5, fp
 8009db6:	ea6f 0a03 	mvn.w	sl, r3
 8009dba:	f04f 0900 	mov.w	r9, #0
 8009dbe:	4639      	mov	r1, r7
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f000 f97f 	bl	800a0c4 <_Bfree>
 8009dc6:	2e00      	cmp	r6, #0
 8009dc8:	f43f aeb7 	beq.w	8009b3a <_dtoa_r+0x67a>
 8009dcc:	f1b9 0f00 	cmp.w	r9, #0
 8009dd0:	d005      	beq.n	8009dde <_dtoa_r+0x91e>
 8009dd2:	45b1      	cmp	r9, r6
 8009dd4:	d003      	beq.n	8009dde <_dtoa_r+0x91e>
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f000 f973 	bl	800a0c4 <_Bfree>
 8009dde:	4631      	mov	r1, r6
 8009de0:	4620      	mov	r0, r4
 8009de2:	f000 f96f 	bl	800a0c4 <_Bfree>
 8009de6:	e6a8      	b.n	8009b3a <_dtoa_r+0x67a>
 8009de8:	2700      	movs	r7, #0
 8009dea:	463e      	mov	r6, r7
 8009dec:	e7e1      	b.n	8009db2 <_dtoa_r+0x8f2>
 8009dee:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009df2:	463e      	mov	r6, r7
 8009df4:	e5a9      	b.n	800994a <_dtoa_r+0x48a>
 8009df6:	bf00      	nop
 8009df8:	40240000 	.word	0x40240000
 8009dfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009dfe:	f8cd 9008 	str.w	r9, [sp, #8]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	f000 80fa 	beq.w	8009ffc <_dtoa_r+0xb3c>
 8009e08:	2d00      	cmp	r5, #0
 8009e0a:	dd05      	ble.n	8009e18 <_dtoa_r+0x958>
 8009e0c:	4631      	mov	r1, r6
 8009e0e:	462a      	mov	r2, r5
 8009e10:	4620      	mov	r0, r4
 8009e12:	f000 fae5 	bl	800a3e0 <__lshift>
 8009e16:	4606      	mov	r6, r0
 8009e18:	9b07      	ldr	r3, [sp, #28]
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d04c      	beq.n	8009eb8 <_dtoa_r+0x9f8>
 8009e1e:	6871      	ldr	r1, [r6, #4]
 8009e20:	4620      	mov	r0, r4
 8009e22:	f000 f91b 	bl	800a05c <_Balloc>
 8009e26:	6932      	ldr	r2, [r6, #16]
 8009e28:	3202      	adds	r2, #2
 8009e2a:	4605      	mov	r5, r0
 8009e2c:	0092      	lsls	r2, r2, #2
 8009e2e:	f106 010c 	add.w	r1, r6, #12
 8009e32:	300c      	adds	r0, #12
 8009e34:	f7fe fe26 	bl	8008a84 <memcpy>
 8009e38:	2201      	movs	r2, #1
 8009e3a:	4629      	mov	r1, r5
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f000 facf 	bl	800a3e0 <__lshift>
 8009e42:	9b00      	ldr	r3, [sp, #0]
 8009e44:	f8cd b014 	str.w	fp, [sp, #20]
 8009e48:	f003 0301 	and.w	r3, r3, #1
 8009e4c:	46b1      	mov	r9, r6
 8009e4e:	9307      	str	r3, [sp, #28]
 8009e50:	4606      	mov	r6, r0
 8009e52:	4639      	mov	r1, r7
 8009e54:	9804      	ldr	r0, [sp, #16]
 8009e56:	f7ff faa5 	bl	80093a4 <quorem>
 8009e5a:	4649      	mov	r1, r9
 8009e5c:	4605      	mov	r5, r0
 8009e5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8009e62:	9804      	ldr	r0, [sp, #16]
 8009e64:	f000 fb10 	bl	800a488 <__mcmp>
 8009e68:	4632      	mov	r2, r6
 8009e6a:	9000      	str	r0, [sp, #0]
 8009e6c:	4639      	mov	r1, r7
 8009e6e:	4620      	mov	r0, r4
 8009e70:	f000 fb24 	bl	800a4bc <__mdiff>
 8009e74:	68c3      	ldr	r3, [r0, #12]
 8009e76:	4602      	mov	r2, r0
 8009e78:	bb03      	cbnz	r3, 8009ebc <_dtoa_r+0x9fc>
 8009e7a:	4601      	mov	r1, r0
 8009e7c:	9008      	str	r0, [sp, #32]
 8009e7e:	9804      	ldr	r0, [sp, #16]
 8009e80:	f000 fb02 	bl	800a488 <__mcmp>
 8009e84:	9a08      	ldr	r2, [sp, #32]
 8009e86:	4603      	mov	r3, r0
 8009e88:	4611      	mov	r1, r2
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	9308      	str	r3, [sp, #32]
 8009e8e:	f000 f919 	bl	800a0c4 <_Bfree>
 8009e92:	9b08      	ldr	r3, [sp, #32]
 8009e94:	b9a3      	cbnz	r3, 8009ec0 <_dtoa_r+0xa00>
 8009e96:	9a06      	ldr	r2, [sp, #24]
 8009e98:	b992      	cbnz	r2, 8009ec0 <_dtoa_r+0xa00>
 8009e9a:	9a07      	ldr	r2, [sp, #28]
 8009e9c:	b982      	cbnz	r2, 8009ec0 <_dtoa_r+0xa00>
 8009e9e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009ea2:	d029      	beq.n	8009ef8 <_dtoa_r+0xa38>
 8009ea4:	9b00      	ldr	r3, [sp, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	dd01      	ble.n	8009eae <_dtoa_r+0x9ee>
 8009eaa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8009eae:	9b05      	ldr	r3, [sp, #20]
 8009eb0:	1c5d      	adds	r5, r3, #1
 8009eb2:	f883 8000 	strb.w	r8, [r3]
 8009eb6:	e782      	b.n	8009dbe <_dtoa_r+0x8fe>
 8009eb8:	4630      	mov	r0, r6
 8009eba:	e7c2      	b.n	8009e42 <_dtoa_r+0x982>
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e7e3      	b.n	8009e88 <_dtoa_r+0x9c8>
 8009ec0:	9a00      	ldr	r2, [sp, #0]
 8009ec2:	2a00      	cmp	r2, #0
 8009ec4:	db04      	blt.n	8009ed0 <_dtoa_r+0xa10>
 8009ec6:	d125      	bne.n	8009f14 <_dtoa_r+0xa54>
 8009ec8:	9a06      	ldr	r2, [sp, #24]
 8009eca:	bb1a      	cbnz	r2, 8009f14 <_dtoa_r+0xa54>
 8009ecc:	9a07      	ldr	r2, [sp, #28]
 8009ece:	bb0a      	cbnz	r2, 8009f14 <_dtoa_r+0xa54>
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	ddec      	ble.n	8009eae <_dtoa_r+0x9ee>
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	9904      	ldr	r1, [sp, #16]
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f000 fa81 	bl	800a3e0 <__lshift>
 8009ede:	4639      	mov	r1, r7
 8009ee0:	9004      	str	r0, [sp, #16]
 8009ee2:	f000 fad1 	bl	800a488 <__mcmp>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	dc03      	bgt.n	8009ef2 <_dtoa_r+0xa32>
 8009eea:	d1e0      	bne.n	8009eae <_dtoa_r+0x9ee>
 8009eec:	f018 0f01 	tst.w	r8, #1
 8009ef0:	d0dd      	beq.n	8009eae <_dtoa_r+0x9ee>
 8009ef2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009ef6:	d1d8      	bne.n	8009eaa <_dtoa_r+0x9ea>
 8009ef8:	9b05      	ldr	r3, [sp, #20]
 8009efa:	9a05      	ldr	r2, [sp, #20]
 8009efc:	1c5d      	adds	r5, r3, #1
 8009efe:	2339      	movs	r3, #57	; 0x39
 8009f00:	7013      	strb	r3, [r2, #0]
 8009f02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009f06:	2b39      	cmp	r3, #57	; 0x39
 8009f08:	f105 32ff 	add.w	r2, r5, #4294967295
 8009f0c:	d04f      	beq.n	8009fae <_dtoa_r+0xaee>
 8009f0e:	3301      	adds	r3, #1
 8009f10:	7013      	strb	r3, [r2, #0]
 8009f12:	e754      	b.n	8009dbe <_dtoa_r+0x8fe>
 8009f14:	9a05      	ldr	r2, [sp, #20]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	f102 0501 	add.w	r5, r2, #1
 8009f1c:	dd06      	ble.n	8009f2c <_dtoa_r+0xa6c>
 8009f1e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8009f22:	d0e9      	beq.n	8009ef8 <_dtoa_r+0xa38>
 8009f24:	f108 0801 	add.w	r8, r8, #1
 8009f28:	9b05      	ldr	r3, [sp, #20]
 8009f2a:	e7c2      	b.n	8009eb2 <_dtoa_r+0x9f2>
 8009f2c:	9a02      	ldr	r2, [sp, #8]
 8009f2e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8009f32:	eba5 030b 	sub.w	r3, r5, fp
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d021      	beq.n	8009f7e <_dtoa_r+0xabe>
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	220a      	movs	r2, #10
 8009f3e:	9904      	ldr	r1, [sp, #16]
 8009f40:	4620      	mov	r0, r4
 8009f42:	f000 f8d6 	bl	800a0f2 <__multadd>
 8009f46:	45b1      	cmp	r9, r6
 8009f48:	9004      	str	r0, [sp, #16]
 8009f4a:	f04f 0300 	mov.w	r3, #0
 8009f4e:	f04f 020a 	mov.w	r2, #10
 8009f52:	4649      	mov	r1, r9
 8009f54:	4620      	mov	r0, r4
 8009f56:	d105      	bne.n	8009f64 <_dtoa_r+0xaa4>
 8009f58:	f000 f8cb 	bl	800a0f2 <__multadd>
 8009f5c:	4681      	mov	r9, r0
 8009f5e:	4606      	mov	r6, r0
 8009f60:	9505      	str	r5, [sp, #20]
 8009f62:	e776      	b.n	8009e52 <_dtoa_r+0x992>
 8009f64:	f000 f8c5 	bl	800a0f2 <__multadd>
 8009f68:	4631      	mov	r1, r6
 8009f6a:	4681      	mov	r9, r0
 8009f6c:	2300      	movs	r3, #0
 8009f6e:	220a      	movs	r2, #10
 8009f70:	4620      	mov	r0, r4
 8009f72:	f000 f8be 	bl	800a0f2 <__multadd>
 8009f76:	4606      	mov	r6, r0
 8009f78:	e7f2      	b.n	8009f60 <_dtoa_r+0xaa0>
 8009f7a:	f04f 0900 	mov.w	r9, #0
 8009f7e:	2201      	movs	r2, #1
 8009f80:	9904      	ldr	r1, [sp, #16]
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 fa2c 	bl	800a3e0 <__lshift>
 8009f88:	4639      	mov	r1, r7
 8009f8a:	9004      	str	r0, [sp, #16]
 8009f8c:	f000 fa7c 	bl	800a488 <__mcmp>
 8009f90:	2800      	cmp	r0, #0
 8009f92:	dcb6      	bgt.n	8009f02 <_dtoa_r+0xa42>
 8009f94:	d102      	bne.n	8009f9c <_dtoa_r+0xadc>
 8009f96:	f018 0f01 	tst.w	r8, #1
 8009f9a:	d1b2      	bne.n	8009f02 <_dtoa_r+0xa42>
 8009f9c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009fa0:	2b30      	cmp	r3, #48	; 0x30
 8009fa2:	f105 32ff 	add.w	r2, r5, #4294967295
 8009fa6:	f47f af0a 	bne.w	8009dbe <_dtoa_r+0x8fe>
 8009faa:	4615      	mov	r5, r2
 8009fac:	e7f6      	b.n	8009f9c <_dtoa_r+0xadc>
 8009fae:	4593      	cmp	fp, r2
 8009fb0:	d105      	bne.n	8009fbe <_dtoa_r+0xafe>
 8009fb2:	2331      	movs	r3, #49	; 0x31
 8009fb4:	f10a 0a01 	add.w	sl, sl, #1
 8009fb8:	f88b 3000 	strb.w	r3, [fp]
 8009fbc:	e6ff      	b.n	8009dbe <_dtoa_r+0x8fe>
 8009fbe:	4615      	mov	r5, r2
 8009fc0:	e79f      	b.n	8009f02 <_dtoa_r+0xa42>
 8009fc2:	f8df b064 	ldr.w	fp, [pc, #100]	; 800a028 <_dtoa_r+0xb68>
 8009fc6:	e007      	b.n	8009fd8 <_dtoa_r+0xb18>
 8009fc8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009fca:	f8df b060 	ldr.w	fp, [pc, #96]	; 800a02c <_dtoa_r+0xb6c>
 8009fce:	b11b      	cbz	r3, 8009fd8 <_dtoa_r+0xb18>
 8009fd0:	f10b 0308 	add.w	r3, fp, #8
 8009fd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009fd6:	6013      	str	r3, [r2, #0]
 8009fd8:	4658      	mov	r0, fp
 8009fda:	b017      	add	sp, #92	; 0x5c
 8009fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fe0:	9b06      	ldr	r3, [sp, #24]
 8009fe2:	2b01      	cmp	r3, #1
 8009fe4:	f77f ae35 	ble.w	8009c52 <_dtoa_r+0x792>
 8009fe8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009fea:	9307      	str	r3, [sp, #28]
 8009fec:	e649      	b.n	8009c82 <_dtoa_r+0x7c2>
 8009fee:	9b02      	ldr	r3, [sp, #8]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	dc03      	bgt.n	8009ffc <_dtoa_r+0xb3c>
 8009ff4:	9b06      	ldr	r3, [sp, #24]
 8009ff6:	2b02      	cmp	r3, #2
 8009ff8:	f73f aecc 	bgt.w	8009d94 <_dtoa_r+0x8d4>
 8009ffc:	465d      	mov	r5, fp
 8009ffe:	4639      	mov	r1, r7
 800a000:	9804      	ldr	r0, [sp, #16]
 800a002:	f7ff f9cf 	bl	80093a4 <quorem>
 800a006:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800a00a:	f805 8b01 	strb.w	r8, [r5], #1
 800a00e:	9a02      	ldr	r2, [sp, #8]
 800a010:	eba5 030b 	sub.w	r3, r5, fp
 800a014:	429a      	cmp	r2, r3
 800a016:	ddb0      	ble.n	8009f7a <_dtoa_r+0xaba>
 800a018:	2300      	movs	r3, #0
 800a01a:	220a      	movs	r2, #10
 800a01c:	9904      	ldr	r1, [sp, #16]
 800a01e:	4620      	mov	r0, r4
 800a020:	f000 f867 	bl	800a0f2 <__multadd>
 800a024:	9004      	str	r0, [sp, #16]
 800a026:	e7ea      	b.n	8009ffe <_dtoa_r+0xb3e>
 800a028:	0800ad38 	.word	0x0800ad38
 800a02c:	0800ad5c 	.word	0x0800ad5c

0800a030 <_localeconv_r>:
 800a030:	4b04      	ldr	r3, [pc, #16]	; (800a044 <_localeconv_r+0x14>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	6a18      	ldr	r0, [r3, #32]
 800a036:	4b04      	ldr	r3, [pc, #16]	; (800a048 <_localeconv_r+0x18>)
 800a038:	2800      	cmp	r0, #0
 800a03a:	bf08      	it	eq
 800a03c:	4618      	moveq	r0, r3
 800a03e:	30f0      	adds	r0, #240	; 0xf0
 800a040:	4770      	bx	lr
 800a042:	bf00      	nop
 800a044:	200003e4 	.word	0x200003e4
 800a048:	20000448 	.word	0x20000448

0800a04c <malloc>:
 800a04c:	4b02      	ldr	r3, [pc, #8]	; (800a058 <malloc+0xc>)
 800a04e:	4601      	mov	r1, r0
 800a050:	6818      	ldr	r0, [r3, #0]
 800a052:	f000 bb3b 	b.w	800a6cc <_malloc_r>
 800a056:	bf00      	nop
 800a058:	200003e4 	.word	0x200003e4

0800a05c <_Balloc>:
 800a05c:	b570      	push	{r4, r5, r6, lr}
 800a05e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a060:	4604      	mov	r4, r0
 800a062:	460e      	mov	r6, r1
 800a064:	b93d      	cbnz	r5, 800a076 <_Balloc+0x1a>
 800a066:	2010      	movs	r0, #16
 800a068:	f7ff fff0 	bl	800a04c <malloc>
 800a06c:	6260      	str	r0, [r4, #36]	; 0x24
 800a06e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a072:	6005      	str	r5, [r0, #0]
 800a074:	60c5      	str	r5, [r0, #12]
 800a076:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800a078:	68eb      	ldr	r3, [r5, #12]
 800a07a:	b183      	cbz	r3, 800a09e <_Balloc+0x42>
 800a07c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800a084:	b9b8      	cbnz	r0, 800a0b6 <_Balloc+0x5a>
 800a086:	2101      	movs	r1, #1
 800a088:	fa01 f506 	lsl.w	r5, r1, r6
 800a08c:	1d6a      	adds	r2, r5, #5
 800a08e:	0092      	lsls	r2, r2, #2
 800a090:	4620      	mov	r0, r4
 800a092:	f000 fabf 	bl	800a614 <_calloc_r>
 800a096:	b160      	cbz	r0, 800a0b2 <_Balloc+0x56>
 800a098:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800a09c:	e00e      	b.n	800a0bc <_Balloc+0x60>
 800a09e:	2221      	movs	r2, #33	; 0x21
 800a0a0:	2104      	movs	r1, #4
 800a0a2:	4620      	mov	r0, r4
 800a0a4:	f000 fab6 	bl	800a614 <_calloc_r>
 800a0a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a0aa:	60e8      	str	r0, [r5, #12]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1e4      	bne.n	800a07c <_Balloc+0x20>
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	bd70      	pop	{r4, r5, r6, pc}
 800a0b6:	6802      	ldr	r2, [r0, #0]
 800a0b8:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800a0bc:	2300      	movs	r3, #0
 800a0be:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a0c2:	e7f7      	b.n	800a0b4 <_Balloc+0x58>

0800a0c4 <_Bfree>:
 800a0c4:	b570      	push	{r4, r5, r6, lr}
 800a0c6:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800a0c8:	4606      	mov	r6, r0
 800a0ca:	460d      	mov	r5, r1
 800a0cc:	b93c      	cbnz	r4, 800a0de <_Bfree+0x1a>
 800a0ce:	2010      	movs	r0, #16
 800a0d0:	f7ff ffbc 	bl	800a04c <malloc>
 800a0d4:	6270      	str	r0, [r6, #36]	; 0x24
 800a0d6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a0da:	6004      	str	r4, [r0, #0]
 800a0dc:	60c4      	str	r4, [r0, #12]
 800a0de:	b13d      	cbz	r5, 800a0f0 <_Bfree+0x2c>
 800a0e0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800a0e2:	686a      	ldr	r2, [r5, #4]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a0ea:	6029      	str	r1, [r5, #0]
 800a0ec:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800a0f0:	bd70      	pop	{r4, r5, r6, pc}

0800a0f2 <__multadd>:
 800a0f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f6:	690d      	ldr	r5, [r1, #16]
 800a0f8:	461f      	mov	r7, r3
 800a0fa:	4606      	mov	r6, r0
 800a0fc:	460c      	mov	r4, r1
 800a0fe:	f101 0c14 	add.w	ip, r1, #20
 800a102:	2300      	movs	r3, #0
 800a104:	f8dc 0000 	ldr.w	r0, [ip]
 800a108:	b281      	uxth	r1, r0
 800a10a:	fb02 7101 	mla	r1, r2, r1, r7
 800a10e:	0c0f      	lsrs	r7, r1, #16
 800a110:	0c00      	lsrs	r0, r0, #16
 800a112:	fb02 7000 	mla	r0, r2, r0, r7
 800a116:	b289      	uxth	r1, r1
 800a118:	3301      	adds	r3, #1
 800a11a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800a11e:	429d      	cmp	r5, r3
 800a120:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800a124:	f84c 1b04 	str.w	r1, [ip], #4
 800a128:	dcec      	bgt.n	800a104 <__multadd+0x12>
 800a12a:	b1d7      	cbz	r7, 800a162 <__multadd+0x70>
 800a12c:	68a3      	ldr	r3, [r4, #8]
 800a12e:	42ab      	cmp	r3, r5
 800a130:	dc12      	bgt.n	800a158 <__multadd+0x66>
 800a132:	6861      	ldr	r1, [r4, #4]
 800a134:	4630      	mov	r0, r6
 800a136:	3101      	adds	r1, #1
 800a138:	f7ff ff90 	bl	800a05c <_Balloc>
 800a13c:	6922      	ldr	r2, [r4, #16]
 800a13e:	3202      	adds	r2, #2
 800a140:	f104 010c 	add.w	r1, r4, #12
 800a144:	4680      	mov	r8, r0
 800a146:	0092      	lsls	r2, r2, #2
 800a148:	300c      	adds	r0, #12
 800a14a:	f7fe fc9b 	bl	8008a84 <memcpy>
 800a14e:	4621      	mov	r1, r4
 800a150:	4630      	mov	r0, r6
 800a152:	f7ff ffb7 	bl	800a0c4 <_Bfree>
 800a156:	4644      	mov	r4, r8
 800a158:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a15c:	3501      	adds	r5, #1
 800a15e:	615f      	str	r7, [r3, #20]
 800a160:	6125      	str	r5, [r4, #16]
 800a162:	4620      	mov	r0, r4
 800a164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a168 <__hi0bits>:
 800a168:	0c02      	lsrs	r2, r0, #16
 800a16a:	0412      	lsls	r2, r2, #16
 800a16c:	4603      	mov	r3, r0
 800a16e:	b9b2      	cbnz	r2, 800a19e <__hi0bits+0x36>
 800a170:	0403      	lsls	r3, r0, #16
 800a172:	2010      	movs	r0, #16
 800a174:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800a178:	bf04      	itt	eq
 800a17a:	021b      	lsleq	r3, r3, #8
 800a17c:	3008      	addeq	r0, #8
 800a17e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800a182:	bf04      	itt	eq
 800a184:	011b      	lsleq	r3, r3, #4
 800a186:	3004      	addeq	r0, #4
 800a188:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800a18c:	bf04      	itt	eq
 800a18e:	009b      	lsleq	r3, r3, #2
 800a190:	3002      	addeq	r0, #2
 800a192:	2b00      	cmp	r3, #0
 800a194:	db06      	blt.n	800a1a4 <__hi0bits+0x3c>
 800a196:	005b      	lsls	r3, r3, #1
 800a198:	d503      	bpl.n	800a1a2 <__hi0bits+0x3a>
 800a19a:	3001      	adds	r0, #1
 800a19c:	4770      	bx	lr
 800a19e:	2000      	movs	r0, #0
 800a1a0:	e7e8      	b.n	800a174 <__hi0bits+0xc>
 800a1a2:	2020      	movs	r0, #32
 800a1a4:	4770      	bx	lr

0800a1a6 <__lo0bits>:
 800a1a6:	6803      	ldr	r3, [r0, #0]
 800a1a8:	f013 0207 	ands.w	r2, r3, #7
 800a1ac:	4601      	mov	r1, r0
 800a1ae:	d00b      	beq.n	800a1c8 <__lo0bits+0x22>
 800a1b0:	07da      	lsls	r2, r3, #31
 800a1b2:	d423      	bmi.n	800a1fc <__lo0bits+0x56>
 800a1b4:	0798      	lsls	r0, r3, #30
 800a1b6:	bf49      	itett	mi
 800a1b8:	085b      	lsrmi	r3, r3, #1
 800a1ba:	089b      	lsrpl	r3, r3, #2
 800a1bc:	2001      	movmi	r0, #1
 800a1be:	600b      	strmi	r3, [r1, #0]
 800a1c0:	bf5c      	itt	pl
 800a1c2:	600b      	strpl	r3, [r1, #0]
 800a1c4:	2002      	movpl	r0, #2
 800a1c6:	4770      	bx	lr
 800a1c8:	b298      	uxth	r0, r3
 800a1ca:	b9a8      	cbnz	r0, 800a1f8 <__lo0bits+0x52>
 800a1cc:	0c1b      	lsrs	r3, r3, #16
 800a1ce:	2010      	movs	r0, #16
 800a1d0:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a1d4:	bf04      	itt	eq
 800a1d6:	0a1b      	lsreq	r3, r3, #8
 800a1d8:	3008      	addeq	r0, #8
 800a1da:	071a      	lsls	r2, r3, #28
 800a1dc:	bf04      	itt	eq
 800a1de:	091b      	lsreq	r3, r3, #4
 800a1e0:	3004      	addeq	r0, #4
 800a1e2:	079a      	lsls	r2, r3, #30
 800a1e4:	bf04      	itt	eq
 800a1e6:	089b      	lsreq	r3, r3, #2
 800a1e8:	3002      	addeq	r0, #2
 800a1ea:	07da      	lsls	r2, r3, #31
 800a1ec:	d402      	bmi.n	800a1f4 <__lo0bits+0x4e>
 800a1ee:	085b      	lsrs	r3, r3, #1
 800a1f0:	d006      	beq.n	800a200 <__lo0bits+0x5a>
 800a1f2:	3001      	adds	r0, #1
 800a1f4:	600b      	str	r3, [r1, #0]
 800a1f6:	4770      	bx	lr
 800a1f8:	4610      	mov	r0, r2
 800a1fa:	e7e9      	b.n	800a1d0 <__lo0bits+0x2a>
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	4770      	bx	lr
 800a200:	2020      	movs	r0, #32
 800a202:	4770      	bx	lr

0800a204 <__i2b>:
 800a204:	b510      	push	{r4, lr}
 800a206:	460c      	mov	r4, r1
 800a208:	2101      	movs	r1, #1
 800a20a:	f7ff ff27 	bl	800a05c <_Balloc>
 800a20e:	2201      	movs	r2, #1
 800a210:	6144      	str	r4, [r0, #20]
 800a212:	6102      	str	r2, [r0, #16]
 800a214:	bd10      	pop	{r4, pc}

0800a216 <__multiply>:
 800a216:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a21a:	4614      	mov	r4, r2
 800a21c:	690a      	ldr	r2, [r1, #16]
 800a21e:	6923      	ldr	r3, [r4, #16]
 800a220:	429a      	cmp	r2, r3
 800a222:	bfb8      	it	lt
 800a224:	460b      	movlt	r3, r1
 800a226:	4688      	mov	r8, r1
 800a228:	bfbc      	itt	lt
 800a22a:	46a0      	movlt	r8, r4
 800a22c:	461c      	movlt	r4, r3
 800a22e:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a232:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a236:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a23a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a23e:	eb07 0609 	add.w	r6, r7, r9
 800a242:	42b3      	cmp	r3, r6
 800a244:	bfb8      	it	lt
 800a246:	3101      	addlt	r1, #1
 800a248:	f7ff ff08 	bl	800a05c <_Balloc>
 800a24c:	f100 0514 	add.w	r5, r0, #20
 800a250:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800a254:	462b      	mov	r3, r5
 800a256:	2200      	movs	r2, #0
 800a258:	4573      	cmp	r3, lr
 800a25a:	d316      	bcc.n	800a28a <__multiply+0x74>
 800a25c:	f104 0214 	add.w	r2, r4, #20
 800a260:	f108 0114 	add.w	r1, r8, #20
 800a264:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800a268:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800a26c:	9300      	str	r3, [sp, #0]
 800a26e:	9b00      	ldr	r3, [sp, #0]
 800a270:	9201      	str	r2, [sp, #4]
 800a272:	4293      	cmp	r3, r2
 800a274:	d80c      	bhi.n	800a290 <__multiply+0x7a>
 800a276:	2e00      	cmp	r6, #0
 800a278:	dd03      	ble.n	800a282 <__multiply+0x6c>
 800a27a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d05d      	beq.n	800a33e <__multiply+0x128>
 800a282:	6106      	str	r6, [r0, #16]
 800a284:	b003      	add	sp, #12
 800a286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a28a:	f843 2b04 	str.w	r2, [r3], #4
 800a28e:	e7e3      	b.n	800a258 <__multiply+0x42>
 800a290:	f8b2 b000 	ldrh.w	fp, [r2]
 800a294:	f1bb 0f00 	cmp.w	fp, #0
 800a298:	d023      	beq.n	800a2e2 <__multiply+0xcc>
 800a29a:	4689      	mov	r9, r1
 800a29c:	46ac      	mov	ip, r5
 800a29e:	f04f 0800 	mov.w	r8, #0
 800a2a2:	f859 4b04 	ldr.w	r4, [r9], #4
 800a2a6:	f8dc a000 	ldr.w	sl, [ip]
 800a2aa:	b2a3      	uxth	r3, r4
 800a2ac:	fa1f fa8a 	uxth.w	sl, sl
 800a2b0:	fb0b a303 	mla	r3, fp, r3, sl
 800a2b4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a2b8:	f8dc 4000 	ldr.w	r4, [ip]
 800a2bc:	4443      	add	r3, r8
 800a2be:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a2c2:	fb0b 840a 	mla	r4, fp, sl, r8
 800a2c6:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800a2ca:	46e2      	mov	sl, ip
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a2d2:	454f      	cmp	r7, r9
 800a2d4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800a2d8:	f84a 3b04 	str.w	r3, [sl], #4
 800a2dc:	d82b      	bhi.n	800a336 <__multiply+0x120>
 800a2de:	f8cc 8004 	str.w	r8, [ip, #4]
 800a2e2:	9b01      	ldr	r3, [sp, #4]
 800a2e4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800a2e8:	3204      	adds	r2, #4
 800a2ea:	f1ba 0f00 	cmp.w	sl, #0
 800a2ee:	d020      	beq.n	800a332 <__multiply+0x11c>
 800a2f0:	682b      	ldr	r3, [r5, #0]
 800a2f2:	4689      	mov	r9, r1
 800a2f4:	46a8      	mov	r8, r5
 800a2f6:	f04f 0b00 	mov.w	fp, #0
 800a2fa:	f8b9 c000 	ldrh.w	ip, [r9]
 800a2fe:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800a302:	fb0a 440c 	mla	r4, sl, ip, r4
 800a306:	445c      	add	r4, fp
 800a308:	46c4      	mov	ip, r8
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800a310:	f84c 3b04 	str.w	r3, [ip], #4
 800a314:	f859 3b04 	ldr.w	r3, [r9], #4
 800a318:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800a31c:	0c1b      	lsrs	r3, r3, #16
 800a31e:	fb0a b303 	mla	r3, sl, r3, fp
 800a322:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800a326:	454f      	cmp	r7, r9
 800a328:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800a32c:	d805      	bhi.n	800a33a <__multiply+0x124>
 800a32e:	f8c8 3004 	str.w	r3, [r8, #4]
 800a332:	3504      	adds	r5, #4
 800a334:	e79b      	b.n	800a26e <__multiply+0x58>
 800a336:	46d4      	mov	ip, sl
 800a338:	e7b3      	b.n	800a2a2 <__multiply+0x8c>
 800a33a:	46e0      	mov	r8, ip
 800a33c:	e7dd      	b.n	800a2fa <__multiply+0xe4>
 800a33e:	3e01      	subs	r6, #1
 800a340:	e799      	b.n	800a276 <__multiply+0x60>
	...

0800a344 <__pow5mult>:
 800a344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a348:	4615      	mov	r5, r2
 800a34a:	f012 0203 	ands.w	r2, r2, #3
 800a34e:	4606      	mov	r6, r0
 800a350:	460f      	mov	r7, r1
 800a352:	d007      	beq.n	800a364 <__pow5mult+0x20>
 800a354:	3a01      	subs	r2, #1
 800a356:	4c21      	ldr	r4, [pc, #132]	; (800a3dc <__pow5mult+0x98>)
 800a358:	2300      	movs	r3, #0
 800a35a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a35e:	f7ff fec8 	bl	800a0f2 <__multadd>
 800a362:	4607      	mov	r7, r0
 800a364:	10ad      	asrs	r5, r5, #2
 800a366:	d035      	beq.n	800a3d4 <__pow5mult+0x90>
 800a368:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a36a:	b93c      	cbnz	r4, 800a37c <__pow5mult+0x38>
 800a36c:	2010      	movs	r0, #16
 800a36e:	f7ff fe6d 	bl	800a04c <malloc>
 800a372:	6270      	str	r0, [r6, #36]	; 0x24
 800a374:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a378:	6004      	str	r4, [r0, #0]
 800a37a:	60c4      	str	r4, [r0, #12]
 800a37c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a380:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a384:	b94c      	cbnz	r4, 800a39a <__pow5mult+0x56>
 800a386:	f240 2171 	movw	r1, #625	; 0x271
 800a38a:	4630      	mov	r0, r6
 800a38c:	f7ff ff3a 	bl	800a204 <__i2b>
 800a390:	2300      	movs	r3, #0
 800a392:	f8c8 0008 	str.w	r0, [r8, #8]
 800a396:	4604      	mov	r4, r0
 800a398:	6003      	str	r3, [r0, #0]
 800a39a:	f04f 0800 	mov.w	r8, #0
 800a39e:	07eb      	lsls	r3, r5, #31
 800a3a0:	d50a      	bpl.n	800a3b8 <__pow5mult+0x74>
 800a3a2:	4639      	mov	r1, r7
 800a3a4:	4622      	mov	r2, r4
 800a3a6:	4630      	mov	r0, r6
 800a3a8:	f7ff ff35 	bl	800a216 <__multiply>
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	4681      	mov	r9, r0
 800a3b0:	4630      	mov	r0, r6
 800a3b2:	f7ff fe87 	bl	800a0c4 <_Bfree>
 800a3b6:	464f      	mov	r7, r9
 800a3b8:	106d      	asrs	r5, r5, #1
 800a3ba:	d00b      	beq.n	800a3d4 <__pow5mult+0x90>
 800a3bc:	6820      	ldr	r0, [r4, #0]
 800a3be:	b938      	cbnz	r0, 800a3d0 <__pow5mult+0x8c>
 800a3c0:	4622      	mov	r2, r4
 800a3c2:	4621      	mov	r1, r4
 800a3c4:	4630      	mov	r0, r6
 800a3c6:	f7ff ff26 	bl	800a216 <__multiply>
 800a3ca:	6020      	str	r0, [r4, #0]
 800a3cc:	f8c0 8000 	str.w	r8, [r0]
 800a3d0:	4604      	mov	r4, r0
 800a3d2:	e7e4      	b.n	800a39e <__pow5mult+0x5a>
 800a3d4:	4638      	mov	r0, r7
 800a3d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3da:	bf00      	nop
 800a3dc:	0800ae60 	.word	0x0800ae60

0800a3e0 <__lshift>:
 800a3e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e4:	460c      	mov	r4, r1
 800a3e6:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a3ea:	6923      	ldr	r3, [r4, #16]
 800a3ec:	6849      	ldr	r1, [r1, #4]
 800a3ee:	eb0a 0903 	add.w	r9, sl, r3
 800a3f2:	68a3      	ldr	r3, [r4, #8]
 800a3f4:	4607      	mov	r7, r0
 800a3f6:	4616      	mov	r6, r2
 800a3f8:	f109 0501 	add.w	r5, r9, #1
 800a3fc:	42ab      	cmp	r3, r5
 800a3fe:	db32      	blt.n	800a466 <__lshift+0x86>
 800a400:	4638      	mov	r0, r7
 800a402:	f7ff fe2b 	bl	800a05c <_Balloc>
 800a406:	2300      	movs	r3, #0
 800a408:	4680      	mov	r8, r0
 800a40a:	f100 0114 	add.w	r1, r0, #20
 800a40e:	461a      	mov	r2, r3
 800a410:	4553      	cmp	r3, sl
 800a412:	db2b      	blt.n	800a46c <__lshift+0x8c>
 800a414:	6920      	ldr	r0, [r4, #16]
 800a416:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a41a:	f104 0314 	add.w	r3, r4, #20
 800a41e:	f016 021f 	ands.w	r2, r6, #31
 800a422:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a426:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a42a:	d025      	beq.n	800a478 <__lshift+0x98>
 800a42c:	f1c2 0e20 	rsb	lr, r2, #32
 800a430:	2000      	movs	r0, #0
 800a432:	681e      	ldr	r6, [r3, #0]
 800a434:	468a      	mov	sl, r1
 800a436:	4096      	lsls	r6, r2
 800a438:	4330      	orrs	r0, r6
 800a43a:	f84a 0b04 	str.w	r0, [sl], #4
 800a43e:	f853 0b04 	ldr.w	r0, [r3], #4
 800a442:	459c      	cmp	ip, r3
 800a444:	fa20 f00e 	lsr.w	r0, r0, lr
 800a448:	d814      	bhi.n	800a474 <__lshift+0x94>
 800a44a:	6048      	str	r0, [r1, #4]
 800a44c:	b108      	cbz	r0, 800a452 <__lshift+0x72>
 800a44e:	f109 0502 	add.w	r5, r9, #2
 800a452:	3d01      	subs	r5, #1
 800a454:	4638      	mov	r0, r7
 800a456:	f8c8 5010 	str.w	r5, [r8, #16]
 800a45a:	4621      	mov	r1, r4
 800a45c:	f7ff fe32 	bl	800a0c4 <_Bfree>
 800a460:	4640      	mov	r0, r8
 800a462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a466:	3101      	adds	r1, #1
 800a468:	005b      	lsls	r3, r3, #1
 800a46a:	e7c7      	b.n	800a3fc <__lshift+0x1c>
 800a46c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800a470:	3301      	adds	r3, #1
 800a472:	e7cd      	b.n	800a410 <__lshift+0x30>
 800a474:	4651      	mov	r1, sl
 800a476:	e7dc      	b.n	800a432 <__lshift+0x52>
 800a478:	3904      	subs	r1, #4
 800a47a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a47e:	f841 2f04 	str.w	r2, [r1, #4]!
 800a482:	459c      	cmp	ip, r3
 800a484:	d8f9      	bhi.n	800a47a <__lshift+0x9a>
 800a486:	e7e4      	b.n	800a452 <__lshift+0x72>

0800a488 <__mcmp>:
 800a488:	6903      	ldr	r3, [r0, #16]
 800a48a:	690a      	ldr	r2, [r1, #16]
 800a48c:	1a9b      	subs	r3, r3, r2
 800a48e:	b530      	push	{r4, r5, lr}
 800a490:	d10c      	bne.n	800a4ac <__mcmp+0x24>
 800a492:	0092      	lsls	r2, r2, #2
 800a494:	3014      	adds	r0, #20
 800a496:	3114      	adds	r1, #20
 800a498:	1884      	adds	r4, r0, r2
 800a49a:	4411      	add	r1, r2
 800a49c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a4a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a4a4:	4295      	cmp	r5, r2
 800a4a6:	d003      	beq.n	800a4b0 <__mcmp+0x28>
 800a4a8:	d305      	bcc.n	800a4b6 <__mcmp+0x2e>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	4618      	mov	r0, r3
 800a4ae:	bd30      	pop	{r4, r5, pc}
 800a4b0:	42a0      	cmp	r0, r4
 800a4b2:	d3f3      	bcc.n	800a49c <__mcmp+0x14>
 800a4b4:	e7fa      	b.n	800a4ac <__mcmp+0x24>
 800a4b6:	f04f 33ff 	mov.w	r3, #4294967295
 800a4ba:	e7f7      	b.n	800a4ac <__mcmp+0x24>

0800a4bc <__mdiff>:
 800a4bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c0:	460d      	mov	r5, r1
 800a4c2:	4607      	mov	r7, r0
 800a4c4:	4611      	mov	r1, r2
 800a4c6:	4628      	mov	r0, r5
 800a4c8:	4614      	mov	r4, r2
 800a4ca:	f7ff ffdd 	bl	800a488 <__mcmp>
 800a4ce:	1e06      	subs	r6, r0, #0
 800a4d0:	d108      	bne.n	800a4e4 <__mdiff+0x28>
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	4638      	mov	r0, r7
 800a4d6:	f7ff fdc1 	bl	800a05c <_Balloc>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4e4:	bfa4      	itt	ge
 800a4e6:	4623      	movge	r3, r4
 800a4e8:	462c      	movge	r4, r5
 800a4ea:	4638      	mov	r0, r7
 800a4ec:	6861      	ldr	r1, [r4, #4]
 800a4ee:	bfa6      	itte	ge
 800a4f0:	461d      	movge	r5, r3
 800a4f2:	2600      	movge	r6, #0
 800a4f4:	2601      	movlt	r6, #1
 800a4f6:	f7ff fdb1 	bl	800a05c <_Balloc>
 800a4fa:	692b      	ldr	r3, [r5, #16]
 800a4fc:	60c6      	str	r6, [r0, #12]
 800a4fe:	6926      	ldr	r6, [r4, #16]
 800a500:	f105 0914 	add.w	r9, r5, #20
 800a504:	f104 0214 	add.w	r2, r4, #20
 800a508:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800a50c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800a510:	f100 0514 	add.w	r5, r0, #20
 800a514:	f04f 0e00 	mov.w	lr, #0
 800a518:	f852 ab04 	ldr.w	sl, [r2], #4
 800a51c:	f859 4b04 	ldr.w	r4, [r9], #4
 800a520:	fa1e f18a 	uxtah	r1, lr, sl
 800a524:	b2a3      	uxth	r3, r4
 800a526:	1ac9      	subs	r1, r1, r3
 800a528:	0c23      	lsrs	r3, r4, #16
 800a52a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800a52e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a532:	b289      	uxth	r1, r1
 800a534:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800a538:	45c8      	cmp	r8, r9
 800a53a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a53e:	4694      	mov	ip, r2
 800a540:	f845 3b04 	str.w	r3, [r5], #4
 800a544:	d8e8      	bhi.n	800a518 <__mdiff+0x5c>
 800a546:	45bc      	cmp	ip, r7
 800a548:	d304      	bcc.n	800a554 <__mdiff+0x98>
 800a54a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800a54e:	b183      	cbz	r3, 800a572 <__mdiff+0xb6>
 800a550:	6106      	str	r6, [r0, #16]
 800a552:	e7c5      	b.n	800a4e0 <__mdiff+0x24>
 800a554:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a558:	fa1e f381 	uxtah	r3, lr, r1
 800a55c:	141a      	asrs	r2, r3, #16
 800a55e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a562:	b29b      	uxth	r3, r3
 800a564:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a568:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800a56c:	f845 3b04 	str.w	r3, [r5], #4
 800a570:	e7e9      	b.n	800a546 <__mdiff+0x8a>
 800a572:	3e01      	subs	r6, #1
 800a574:	e7e9      	b.n	800a54a <__mdiff+0x8e>

0800a576 <__d2b>:
 800a576:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a57a:	460e      	mov	r6, r1
 800a57c:	2101      	movs	r1, #1
 800a57e:	ec59 8b10 	vmov	r8, r9, d0
 800a582:	4615      	mov	r5, r2
 800a584:	f7ff fd6a 	bl	800a05c <_Balloc>
 800a588:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800a58c:	4607      	mov	r7, r0
 800a58e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a592:	bb34      	cbnz	r4, 800a5e2 <__d2b+0x6c>
 800a594:	9301      	str	r3, [sp, #4]
 800a596:	f1b8 0300 	subs.w	r3, r8, #0
 800a59a:	d027      	beq.n	800a5ec <__d2b+0x76>
 800a59c:	a802      	add	r0, sp, #8
 800a59e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800a5a2:	f7ff fe00 	bl	800a1a6 <__lo0bits>
 800a5a6:	9900      	ldr	r1, [sp, #0]
 800a5a8:	b1f0      	cbz	r0, 800a5e8 <__d2b+0x72>
 800a5aa:	9a01      	ldr	r2, [sp, #4]
 800a5ac:	f1c0 0320 	rsb	r3, r0, #32
 800a5b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a5b4:	430b      	orrs	r3, r1
 800a5b6:	40c2      	lsrs	r2, r0
 800a5b8:	617b      	str	r3, [r7, #20]
 800a5ba:	9201      	str	r2, [sp, #4]
 800a5bc:	9b01      	ldr	r3, [sp, #4]
 800a5be:	61bb      	str	r3, [r7, #24]
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	bf14      	ite	ne
 800a5c4:	2102      	movne	r1, #2
 800a5c6:	2101      	moveq	r1, #1
 800a5c8:	6139      	str	r1, [r7, #16]
 800a5ca:	b1c4      	cbz	r4, 800a5fe <__d2b+0x88>
 800a5cc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800a5d0:	4404      	add	r4, r0
 800a5d2:	6034      	str	r4, [r6, #0]
 800a5d4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a5d8:	6028      	str	r0, [r5, #0]
 800a5da:	4638      	mov	r0, r7
 800a5dc:	b003      	add	sp, #12
 800a5de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a5e6:	e7d5      	b.n	800a594 <__d2b+0x1e>
 800a5e8:	6179      	str	r1, [r7, #20]
 800a5ea:	e7e7      	b.n	800a5bc <__d2b+0x46>
 800a5ec:	a801      	add	r0, sp, #4
 800a5ee:	f7ff fdda 	bl	800a1a6 <__lo0bits>
 800a5f2:	9b01      	ldr	r3, [sp, #4]
 800a5f4:	617b      	str	r3, [r7, #20]
 800a5f6:	2101      	movs	r1, #1
 800a5f8:	6139      	str	r1, [r7, #16]
 800a5fa:	3020      	adds	r0, #32
 800a5fc:	e7e5      	b.n	800a5ca <__d2b+0x54>
 800a5fe:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800a602:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a606:	6030      	str	r0, [r6, #0]
 800a608:	6918      	ldr	r0, [r3, #16]
 800a60a:	f7ff fdad 	bl	800a168 <__hi0bits>
 800a60e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800a612:	e7e1      	b.n	800a5d8 <__d2b+0x62>

0800a614 <_calloc_r>:
 800a614:	b538      	push	{r3, r4, r5, lr}
 800a616:	fb02 f401 	mul.w	r4, r2, r1
 800a61a:	4621      	mov	r1, r4
 800a61c:	f000 f856 	bl	800a6cc <_malloc_r>
 800a620:	4605      	mov	r5, r0
 800a622:	b118      	cbz	r0, 800a62c <_calloc_r+0x18>
 800a624:	4622      	mov	r2, r4
 800a626:	2100      	movs	r1, #0
 800a628:	f7fe fa37 	bl	8008a9a <memset>
 800a62c:	4628      	mov	r0, r5
 800a62e:	bd38      	pop	{r3, r4, r5, pc}

0800a630 <_free_r>:
 800a630:	b538      	push	{r3, r4, r5, lr}
 800a632:	4605      	mov	r5, r0
 800a634:	2900      	cmp	r1, #0
 800a636:	d045      	beq.n	800a6c4 <_free_r+0x94>
 800a638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a63c:	1f0c      	subs	r4, r1, #4
 800a63e:	2b00      	cmp	r3, #0
 800a640:	bfb8      	it	lt
 800a642:	18e4      	addlt	r4, r4, r3
 800a644:	f000 fa29 	bl	800aa9a <__malloc_lock>
 800a648:	4a1f      	ldr	r2, [pc, #124]	; (800a6c8 <_free_r+0x98>)
 800a64a:	6813      	ldr	r3, [r2, #0]
 800a64c:	4610      	mov	r0, r2
 800a64e:	b933      	cbnz	r3, 800a65e <_free_r+0x2e>
 800a650:	6063      	str	r3, [r4, #4]
 800a652:	6014      	str	r4, [r2, #0]
 800a654:	4628      	mov	r0, r5
 800a656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a65a:	f000 ba1f 	b.w	800aa9c <__malloc_unlock>
 800a65e:	42a3      	cmp	r3, r4
 800a660:	d90c      	bls.n	800a67c <_free_r+0x4c>
 800a662:	6821      	ldr	r1, [r4, #0]
 800a664:	1862      	adds	r2, r4, r1
 800a666:	4293      	cmp	r3, r2
 800a668:	bf04      	itt	eq
 800a66a:	681a      	ldreq	r2, [r3, #0]
 800a66c:	685b      	ldreq	r3, [r3, #4]
 800a66e:	6063      	str	r3, [r4, #4]
 800a670:	bf04      	itt	eq
 800a672:	1852      	addeq	r2, r2, r1
 800a674:	6022      	streq	r2, [r4, #0]
 800a676:	6004      	str	r4, [r0, #0]
 800a678:	e7ec      	b.n	800a654 <_free_r+0x24>
 800a67a:	4613      	mov	r3, r2
 800a67c:	685a      	ldr	r2, [r3, #4]
 800a67e:	b10a      	cbz	r2, 800a684 <_free_r+0x54>
 800a680:	42a2      	cmp	r2, r4
 800a682:	d9fa      	bls.n	800a67a <_free_r+0x4a>
 800a684:	6819      	ldr	r1, [r3, #0]
 800a686:	1858      	adds	r0, r3, r1
 800a688:	42a0      	cmp	r0, r4
 800a68a:	d10b      	bne.n	800a6a4 <_free_r+0x74>
 800a68c:	6820      	ldr	r0, [r4, #0]
 800a68e:	4401      	add	r1, r0
 800a690:	1858      	adds	r0, r3, r1
 800a692:	4282      	cmp	r2, r0
 800a694:	6019      	str	r1, [r3, #0]
 800a696:	d1dd      	bne.n	800a654 <_free_r+0x24>
 800a698:	6810      	ldr	r0, [r2, #0]
 800a69a:	6852      	ldr	r2, [r2, #4]
 800a69c:	605a      	str	r2, [r3, #4]
 800a69e:	4401      	add	r1, r0
 800a6a0:	6019      	str	r1, [r3, #0]
 800a6a2:	e7d7      	b.n	800a654 <_free_r+0x24>
 800a6a4:	d902      	bls.n	800a6ac <_free_r+0x7c>
 800a6a6:	230c      	movs	r3, #12
 800a6a8:	602b      	str	r3, [r5, #0]
 800a6aa:	e7d3      	b.n	800a654 <_free_r+0x24>
 800a6ac:	6820      	ldr	r0, [r4, #0]
 800a6ae:	1821      	adds	r1, r4, r0
 800a6b0:	428a      	cmp	r2, r1
 800a6b2:	bf04      	itt	eq
 800a6b4:	6811      	ldreq	r1, [r2, #0]
 800a6b6:	6852      	ldreq	r2, [r2, #4]
 800a6b8:	6062      	str	r2, [r4, #4]
 800a6ba:	bf04      	itt	eq
 800a6bc:	1809      	addeq	r1, r1, r0
 800a6be:	6021      	streq	r1, [r4, #0]
 800a6c0:	605c      	str	r4, [r3, #4]
 800a6c2:	e7c7      	b.n	800a654 <_free_r+0x24>
 800a6c4:	bd38      	pop	{r3, r4, r5, pc}
 800a6c6:	bf00      	nop
 800a6c8:	2000063c 	.word	0x2000063c

0800a6cc <_malloc_r>:
 800a6cc:	b570      	push	{r4, r5, r6, lr}
 800a6ce:	1ccd      	adds	r5, r1, #3
 800a6d0:	f025 0503 	bic.w	r5, r5, #3
 800a6d4:	3508      	adds	r5, #8
 800a6d6:	2d0c      	cmp	r5, #12
 800a6d8:	bf38      	it	cc
 800a6da:	250c      	movcc	r5, #12
 800a6dc:	2d00      	cmp	r5, #0
 800a6de:	4606      	mov	r6, r0
 800a6e0:	db01      	blt.n	800a6e6 <_malloc_r+0x1a>
 800a6e2:	42a9      	cmp	r1, r5
 800a6e4:	d903      	bls.n	800a6ee <_malloc_r+0x22>
 800a6e6:	230c      	movs	r3, #12
 800a6e8:	6033      	str	r3, [r6, #0]
 800a6ea:	2000      	movs	r0, #0
 800a6ec:	bd70      	pop	{r4, r5, r6, pc}
 800a6ee:	f000 f9d4 	bl	800aa9a <__malloc_lock>
 800a6f2:	4a21      	ldr	r2, [pc, #132]	; (800a778 <_malloc_r+0xac>)
 800a6f4:	6814      	ldr	r4, [r2, #0]
 800a6f6:	4621      	mov	r1, r4
 800a6f8:	b991      	cbnz	r1, 800a720 <_malloc_r+0x54>
 800a6fa:	4c20      	ldr	r4, [pc, #128]	; (800a77c <_malloc_r+0xb0>)
 800a6fc:	6823      	ldr	r3, [r4, #0]
 800a6fe:	b91b      	cbnz	r3, 800a708 <_malloc_r+0x3c>
 800a700:	4630      	mov	r0, r6
 800a702:	f000 f98f 	bl	800aa24 <_sbrk_r>
 800a706:	6020      	str	r0, [r4, #0]
 800a708:	4629      	mov	r1, r5
 800a70a:	4630      	mov	r0, r6
 800a70c:	f000 f98a 	bl	800aa24 <_sbrk_r>
 800a710:	1c43      	adds	r3, r0, #1
 800a712:	d124      	bne.n	800a75e <_malloc_r+0x92>
 800a714:	230c      	movs	r3, #12
 800a716:	6033      	str	r3, [r6, #0]
 800a718:	4630      	mov	r0, r6
 800a71a:	f000 f9bf 	bl	800aa9c <__malloc_unlock>
 800a71e:	e7e4      	b.n	800a6ea <_malloc_r+0x1e>
 800a720:	680b      	ldr	r3, [r1, #0]
 800a722:	1b5b      	subs	r3, r3, r5
 800a724:	d418      	bmi.n	800a758 <_malloc_r+0x8c>
 800a726:	2b0b      	cmp	r3, #11
 800a728:	d90f      	bls.n	800a74a <_malloc_r+0x7e>
 800a72a:	600b      	str	r3, [r1, #0]
 800a72c:	50cd      	str	r5, [r1, r3]
 800a72e:	18cc      	adds	r4, r1, r3
 800a730:	4630      	mov	r0, r6
 800a732:	f000 f9b3 	bl	800aa9c <__malloc_unlock>
 800a736:	f104 000b 	add.w	r0, r4, #11
 800a73a:	1d23      	adds	r3, r4, #4
 800a73c:	f020 0007 	bic.w	r0, r0, #7
 800a740:	1ac3      	subs	r3, r0, r3
 800a742:	d0d3      	beq.n	800a6ec <_malloc_r+0x20>
 800a744:	425a      	negs	r2, r3
 800a746:	50e2      	str	r2, [r4, r3]
 800a748:	e7d0      	b.n	800a6ec <_malloc_r+0x20>
 800a74a:	428c      	cmp	r4, r1
 800a74c:	684b      	ldr	r3, [r1, #4]
 800a74e:	bf16      	itet	ne
 800a750:	6063      	strne	r3, [r4, #4]
 800a752:	6013      	streq	r3, [r2, #0]
 800a754:	460c      	movne	r4, r1
 800a756:	e7eb      	b.n	800a730 <_malloc_r+0x64>
 800a758:	460c      	mov	r4, r1
 800a75a:	6849      	ldr	r1, [r1, #4]
 800a75c:	e7cc      	b.n	800a6f8 <_malloc_r+0x2c>
 800a75e:	1cc4      	adds	r4, r0, #3
 800a760:	f024 0403 	bic.w	r4, r4, #3
 800a764:	42a0      	cmp	r0, r4
 800a766:	d005      	beq.n	800a774 <_malloc_r+0xa8>
 800a768:	1a21      	subs	r1, r4, r0
 800a76a:	4630      	mov	r0, r6
 800a76c:	f000 f95a 	bl	800aa24 <_sbrk_r>
 800a770:	3001      	adds	r0, #1
 800a772:	d0cf      	beq.n	800a714 <_malloc_r+0x48>
 800a774:	6025      	str	r5, [r4, #0]
 800a776:	e7db      	b.n	800a730 <_malloc_r+0x64>
 800a778:	2000063c 	.word	0x2000063c
 800a77c:	20000640 	.word	0x20000640

0800a780 <__ssputs_r>:
 800a780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a784:	688e      	ldr	r6, [r1, #8]
 800a786:	429e      	cmp	r6, r3
 800a788:	4682      	mov	sl, r0
 800a78a:	460c      	mov	r4, r1
 800a78c:	4690      	mov	r8, r2
 800a78e:	4699      	mov	r9, r3
 800a790:	d837      	bhi.n	800a802 <__ssputs_r+0x82>
 800a792:	898a      	ldrh	r2, [r1, #12]
 800a794:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a798:	d031      	beq.n	800a7fe <__ssputs_r+0x7e>
 800a79a:	6825      	ldr	r5, [r4, #0]
 800a79c:	6909      	ldr	r1, [r1, #16]
 800a79e:	1a6f      	subs	r7, r5, r1
 800a7a0:	6965      	ldr	r5, [r4, #20]
 800a7a2:	2302      	movs	r3, #2
 800a7a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a7a8:	fb95 f5f3 	sdiv	r5, r5, r3
 800a7ac:	f109 0301 	add.w	r3, r9, #1
 800a7b0:	443b      	add	r3, r7
 800a7b2:	429d      	cmp	r5, r3
 800a7b4:	bf38      	it	cc
 800a7b6:	461d      	movcc	r5, r3
 800a7b8:	0553      	lsls	r3, r2, #21
 800a7ba:	d530      	bpl.n	800a81e <__ssputs_r+0x9e>
 800a7bc:	4629      	mov	r1, r5
 800a7be:	f7ff ff85 	bl	800a6cc <_malloc_r>
 800a7c2:	4606      	mov	r6, r0
 800a7c4:	b950      	cbnz	r0, 800a7dc <__ssputs_r+0x5c>
 800a7c6:	230c      	movs	r3, #12
 800a7c8:	f8ca 3000 	str.w	r3, [sl]
 800a7cc:	89a3      	ldrh	r3, [r4, #12]
 800a7ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7d2:	81a3      	strh	r3, [r4, #12]
 800a7d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a7dc:	463a      	mov	r2, r7
 800a7de:	6921      	ldr	r1, [r4, #16]
 800a7e0:	f7fe f950 	bl	8008a84 <memcpy>
 800a7e4:	89a3      	ldrh	r3, [r4, #12]
 800a7e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a7ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7ee:	81a3      	strh	r3, [r4, #12]
 800a7f0:	6126      	str	r6, [r4, #16]
 800a7f2:	6165      	str	r5, [r4, #20]
 800a7f4:	443e      	add	r6, r7
 800a7f6:	1bed      	subs	r5, r5, r7
 800a7f8:	6026      	str	r6, [r4, #0]
 800a7fa:	60a5      	str	r5, [r4, #8]
 800a7fc:	464e      	mov	r6, r9
 800a7fe:	454e      	cmp	r6, r9
 800a800:	d900      	bls.n	800a804 <__ssputs_r+0x84>
 800a802:	464e      	mov	r6, r9
 800a804:	4632      	mov	r2, r6
 800a806:	4641      	mov	r1, r8
 800a808:	6820      	ldr	r0, [r4, #0]
 800a80a:	f000 f92d 	bl	800aa68 <memmove>
 800a80e:	68a3      	ldr	r3, [r4, #8]
 800a810:	1b9b      	subs	r3, r3, r6
 800a812:	60a3      	str	r3, [r4, #8]
 800a814:	6823      	ldr	r3, [r4, #0]
 800a816:	441e      	add	r6, r3
 800a818:	6026      	str	r6, [r4, #0]
 800a81a:	2000      	movs	r0, #0
 800a81c:	e7dc      	b.n	800a7d8 <__ssputs_r+0x58>
 800a81e:	462a      	mov	r2, r5
 800a820:	f000 f93d 	bl	800aa9e <_realloc_r>
 800a824:	4606      	mov	r6, r0
 800a826:	2800      	cmp	r0, #0
 800a828:	d1e2      	bne.n	800a7f0 <__ssputs_r+0x70>
 800a82a:	6921      	ldr	r1, [r4, #16]
 800a82c:	4650      	mov	r0, sl
 800a82e:	f7ff feff 	bl	800a630 <_free_r>
 800a832:	e7c8      	b.n	800a7c6 <__ssputs_r+0x46>

0800a834 <_svfiprintf_r>:
 800a834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a838:	461d      	mov	r5, r3
 800a83a:	898b      	ldrh	r3, [r1, #12]
 800a83c:	061f      	lsls	r7, r3, #24
 800a83e:	b09d      	sub	sp, #116	; 0x74
 800a840:	4680      	mov	r8, r0
 800a842:	460c      	mov	r4, r1
 800a844:	4616      	mov	r6, r2
 800a846:	d50f      	bpl.n	800a868 <_svfiprintf_r+0x34>
 800a848:	690b      	ldr	r3, [r1, #16]
 800a84a:	b96b      	cbnz	r3, 800a868 <_svfiprintf_r+0x34>
 800a84c:	2140      	movs	r1, #64	; 0x40
 800a84e:	f7ff ff3d 	bl	800a6cc <_malloc_r>
 800a852:	6020      	str	r0, [r4, #0]
 800a854:	6120      	str	r0, [r4, #16]
 800a856:	b928      	cbnz	r0, 800a864 <_svfiprintf_r+0x30>
 800a858:	230c      	movs	r3, #12
 800a85a:	f8c8 3000 	str.w	r3, [r8]
 800a85e:	f04f 30ff 	mov.w	r0, #4294967295
 800a862:	e0c8      	b.n	800a9f6 <_svfiprintf_r+0x1c2>
 800a864:	2340      	movs	r3, #64	; 0x40
 800a866:	6163      	str	r3, [r4, #20]
 800a868:	2300      	movs	r3, #0
 800a86a:	9309      	str	r3, [sp, #36]	; 0x24
 800a86c:	2320      	movs	r3, #32
 800a86e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a872:	2330      	movs	r3, #48	; 0x30
 800a874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a878:	9503      	str	r5, [sp, #12]
 800a87a:	f04f 0b01 	mov.w	fp, #1
 800a87e:	4637      	mov	r7, r6
 800a880:	463d      	mov	r5, r7
 800a882:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a886:	b10b      	cbz	r3, 800a88c <_svfiprintf_r+0x58>
 800a888:	2b25      	cmp	r3, #37	; 0x25
 800a88a:	d13e      	bne.n	800a90a <_svfiprintf_r+0xd6>
 800a88c:	ebb7 0a06 	subs.w	sl, r7, r6
 800a890:	d00b      	beq.n	800a8aa <_svfiprintf_r+0x76>
 800a892:	4653      	mov	r3, sl
 800a894:	4632      	mov	r2, r6
 800a896:	4621      	mov	r1, r4
 800a898:	4640      	mov	r0, r8
 800a89a:	f7ff ff71 	bl	800a780 <__ssputs_r>
 800a89e:	3001      	adds	r0, #1
 800a8a0:	f000 80a4 	beq.w	800a9ec <_svfiprintf_r+0x1b8>
 800a8a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8a6:	4453      	add	r3, sl
 800a8a8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8aa:	783b      	ldrb	r3, [r7, #0]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 809d 	beq.w	800a9ec <_svfiprintf_r+0x1b8>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8bc:	9304      	str	r3, [sp, #16]
 800a8be:	9307      	str	r3, [sp, #28]
 800a8c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8c4:	931a      	str	r3, [sp, #104]	; 0x68
 800a8c6:	462f      	mov	r7, r5
 800a8c8:	2205      	movs	r2, #5
 800a8ca:	f817 1b01 	ldrb.w	r1, [r7], #1
 800a8ce:	4850      	ldr	r0, [pc, #320]	; (800aa10 <_svfiprintf_r+0x1dc>)
 800a8d0:	f7f5 fcae 	bl	8000230 <memchr>
 800a8d4:	9b04      	ldr	r3, [sp, #16]
 800a8d6:	b9d0      	cbnz	r0, 800a90e <_svfiprintf_r+0xda>
 800a8d8:	06d9      	lsls	r1, r3, #27
 800a8da:	bf44      	itt	mi
 800a8dc:	2220      	movmi	r2, #32
 800a8de:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a8e2:	071a      	lsls	r2, r3, #28
 800a8e4:	bf44      	itt	mi
 800a8e6:	222b      	movmi	r2, #43	; 0x2b
 800a8e8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800a8ec:	782a      	ldrb	r2, [r5, #0]
 800a8ee:	2a2a      	cmp	r2, #42	; 0x2a
 800a8f0:	d015      	beq.n	800a91e <_svfiprintf_r+0xea>
 800a8f2:	9a07      	ldr	r2, [sp, #28]
 800a8f4:	462f      	mov	r7, r5
 800a8f6:	2000      	movs	r0, #0
 800a8f8:	250a      	movs	r5, #10
 800a8fa:	4639      	mov	r1, r7
 800a8fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a900:	3b30      	subs	r3, #48	; 0x30
 800a902:	2b09      	cmp	r3, #9
 800a904:	d94d      	bls.n	800a9a2 <_svfiprintf_r+0x16e>
 800a906:	b1b8      	cbz	r0, 800a938 <_svfiprintf_r+0x104>
 800a908:	e00f      	b.n	800a92a <_svfiprintf_r+0xf6>
 800a90a:	462f      	mov	r7, r5
 800a90c:	e7b8      	b.n	800a880 <_svfiprintf_r+0x4c>
 800a90e:	4a40      	ldr	r2, [pc, #256]	; (800aa10 <_svfiprintf_r+0x1dc>)
 800a910:	1a80      	subs	r0, r0, r2
 800a912:	fa0b f000 	lsl.w	r0, fp, r0
 800a916:	4318      	orrs	r0, r3
 800a918:	9004      	str	r0, [sp, #16]
 800a91a:	463d      	mov	r5, r7
 800a91c:	e7d3      	b.n	800a8c6 <_svfiprintf_r+0x92>
 800a91e:	9a03      	ldr	r2, [sp, #12]
 800a920:	1d11      	adds	r1, r2, #4
 800a922:	6812      	ldr	r2, [r2, #0]
 800a924:	9103      	str	r1, [sp, #12]
 800a926:	2a00      	cmp	r2, #0
 800a928:	db01      	blt.n	800a92e <_svfiprintf_r+0xfa>
 800a92a:	9207      	str	r2, [sp, #28]
 800a92c:	e004      	b.n	800a938 <_svfiprintf_r+0x104>
 800a92e:	4252      	negs	r2, r2
 800a930:	f043 0302 	orr.w	r3, r3, #2
 800a934:	9207      	str	r2, [sp, #28]
 800a936:	9304      	str	r3, [sp, #16]
 800a938:	783b      	ldrb	r3, [r7, #0]
 800a93a:	2b2e      	cmp	r3, #46	; 0x2e
 800a93c:	d10c      	bne.n	800a958 <_svfiprintf_r+0x124>
 800a93e:	787b      	ldrb	r3, [r7, #1]
 800a940:	2b2a      	cmp	r3, #42	; 0x2a
 800a942:	d133      	bne.n	800a9ac <_svfiprintf_r+0x178>
 800a944:	9b03      	ldr	r3, [sp, #12]
 800a946:	1d1a      	adds	r2, r3, #4
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	9203      	str	r2, [sp, #12]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	bfb8      	it	lt
 800a950:	f04f 33ff 	movlt.w	r3, #4294967295
 800a954:	3702      	adds	r7, #2
 800a956:	9305      	str	r3, [sp, #20]
 800a958:	4d2e      	ldr	r5, [pc, #184]	; (800aa14 <_svfiprintf_r+0x1e0>)
 800a95a:	7839      	ldrb	r1, [r7, #0]
 800a95c:	2203      	movs	r2, #3
 800a95e:	4628      	mov	r0, r5
 800a960:	f7f5 fc66 	bl	8000230 <memchr>
 800a964:	b138      	cbz	r0, 800a976 <_svfiprintf_r+0x142>
 800a966:	2340      	movs	r3, #64	; 0x40
 800a968:	1b40      	subs	r0, r0, r5
 800a96a:	fa03 f000 	lsl.w	r0, r3, r0
 800a96e:	9b04      	ldr	r3, [sp, #16]
 800a970:	4303      	orrs	r3, r0
 800a972:	3701      	adds	r7, #1
 800a974:	9304      	str	r3, [sp, #16]
 800a976:	7839      	ldrb	r1, [r7, #0]
 800a978:	4827      	ldr	r0, [pc, #156]	; (800aa18 <_svfiprintf_r+0x1e4>)
 800a97a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a97e:	2206      	movs	r2, #6
 800a980:	1c7e      	adds	r6, r7, #1
 800a982:	f7f5 fc55 	bl	8000230 <memchr>
 800a986:	2800      	cmp	r0, #0
 800a988:	d038      	beq.n	800a9fc <_svfiprintf_r+0x1c8>
 800a98a:	4b24      	ldr	r3, [pc, #144]	; (800aa1c <_svfiprintf_r+0x1e8>)
 800a98c:	bb13      	cbnz	r3, 800a9d4 <_svfiprintf_r+0x1a0>
 800a98e:	9b03      	ldr	r3, [sp, #12]
 800a990:	3307      	adds	r3, #7
 800a992:	f023 0307 	bic.w	r3, r3, #7
 800a996:	3308      	adds	r3, #8
 800a998:	9303      	str	r3, [sp, #12]
 800a99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a99c:	444b      	add	r3, r9
 800a99e:	9309      	str	r3, [sp, #36]	; 0x24
 800a9a0:	e76d      	b.n	800a87e <_svfiprintf_r+0x4a>
 800a9a2:	fb05 3202 	mla	r2, r5, r2, r3
 800a9a6:	2001      	movs	r0, #1
 800a9a8:	460f      	mov	r7, r1
 800a9aa:	e7a6      	b.n	800a8fa <_svfiprintf_r+0xc6>
 800a9ac:	2300      	movs	r3, #0
 800a9ae:	3701      	adds	r7, #1
 800a9b0:	9305      	str	r3, [sp, #20]
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	250a      	movs	r5, #10
 800a9b6:	4638      	mov	r0, r7
 800a9b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9bc:	3a30      	subs	r2, #48	; 0x30
 800a9be:	2a09      	cmp	r2, #9
 800a9c0:	d903      	bls.n	800a9ca <_svfiprintf_r+0x196>
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d0c8      	beq.n	800a958 <_svfiprintf_r+0x124>
 800a9c6:	9105      	str	r1, [sp, #20]
 800a9c8:	e7c6      	b.n	800a958 <_svfiprintf_r+0x124>
 800a9ca:	fb05 2101 	mla	r1, r5, r1, r2
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	4607      	mov	r7, r0
 800a9d2:	e7f0      	b.n	800a9b6 <_svfiprintf_r+0x182>
 800a9d4:	ab03      	add	r3, sp, #12
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	4622      	mov	r2, r4
 800a9da:	4b11      	ldr	r3, [pc, #68]	; (800aa20 <_svfiprintf_r+0x1ec>)
 800a9dc:	a904      	add	r1, sp, #16
 800a9de:	4640      	mov	r0, r8
 800a9e0:	f7fe f8f8 	bl	8008bd4 <_printf_float>
 800a9e4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800a9e8:	4681      	mov	r9, r0
 800a9ea:	d1d6      	bne.n	800a99a <_svfiprintf_r+0x166>
 800a9ec:	89a3      	ldrh	r3, [r4, #12]
 800a9ee:	065b      	lsls	r3, r3, #25
 800a9f0:	f53f af35 	bmi.w	800a85e <_svfiprintf_r+0x2a>
 800a9f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9f6:	b01d      	add	sp, #116	; 0x74
 800a9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9fc:	ab03      	add	r3, sp, #12
 800a9fe:	9300      	str	r3, [sp, #0]
 800aa00:	4622      	mov	r2, r4
 800aa02:	4b07      	ldr	r3, [pc, #28]	; (800aa20 <_svfiprintf_r+0x1ec>)
 800aa04:	a904      	add	r1, sp, #16
 800aa06:	4640      	mov	r0, r8
 800aa08:	f7fe fb9a 	bl	8009140 <_printf_i>
 800aa0c:	e7ea      	b.n	800a9e4 <_svfiprintf_r+0x1b0>
 800aa0e:	bf00      	nop
 800aa10:	0800ae6c 	.word	0x0800ae6c
 800aa14:	0800ae72 	.word	0x0800ae72
 800aa18:	0800ae76 	.word	0x0800ae76
 800aa1c:	08008bd5 	.word	0x08008bd5
 800aa20:	0800a781 	.word	0x0800a781

0800aa24 <_sbrk_r>:
 800aa24:	b538      	push	{r3, r4, r5, lr}
 800aa26:	4c06      	ldr	r4, [pc, #24]	; (800aa40 <_sbrk_r+0x1c>)
 800aa28:	2300      	movs	r3, #0
 800aa2a:	4605      	mov	r5, r0
 800aa2c:	4608      	mov	r0, r1
 800aa2e:	6023      	str	r3, [r4, #0]
 800aa30:	f7f8 ffb4 	bl	800399c <_sbrk>
 800aa34:	1c43      	adds	r3, r0, #1
 800aa36:	d102      	bne.n	800aa3e <_sbrk_r+0x1a>
 800aa38:	6823      	ldr	r3, [r4, #0]
 800aa3a:	b103      	cbz	r3, 800aa3e <_sbrk_r+0x1a>
 800aa3c:	602b      	str	r3, [r5, #0]
 800aa3e:	bd38      	pop	{r3, r4, r5, pc}
 800aa40:	20000854 	.word	0x20000854

0800aa44 <__ascii_mbtowc>:
 800aa44:	b082      	sub	sp, #8
 800aa46:	b901      	cbnz	r1, 800aa4a <__ascii_mbtowc+0x6>
 800aa48:	a901      	add	r1, sp, #4
 800aa4a:	b142      	cbz	r2, 800aa5e <__ascii_mbtowc+0x1a>
 800aa4c:	b14b      	cbz	r3, 800aa62 <__ascii_mbtowc+0x1e>
 800aa4e:	7813      	ldrb	r3, [r2, #0]
 800aa50:	600b      	str	r3, [r1, #0]
 800aa52:	7812      	ldrb	r2, [r2, #0]
 800aa54:	1c10      	adds	r0, r2, #0
 800aa56:	bf18      	it	ne
 800aa58:	2001      	movne	r0, #1
 800aa5a:	b002      	add	sp, #8
 800aa5c:	4770      	bx	lr
 800aa5e:	4610      	mov	r0, r2
 800aa60:	e7fb      	b.n	800aa5a <__ascii_mbtowc+0x16>
 800aa62:	f06f 0001 	mvn.w	r0, #1
 800aa66:	e7f8      	b.n	800aa5a <__ascii_mbtowc+0x16>

0800aa68 <memmove>:
 800aa68:	4288      	cmp	r0, r1
 800aa6a:	b510      	push	{r4, lr}
 800aa6c:	eb01 0302 	add.w	r3, r1, r2
 800aa70:	d807      	bhi.n	800aa82 <memmove+0x1a>
 800aa72:	1e42      	subs	r2, r0, #1
 800aa74:	4299      	cmp	r1, r3
 800aa76:	d00a      	beq.n	800aa8e <memmove+0x26>
 800aa78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa7c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800aa80:	e7f8      	b.n	800aa74 <memmove+0xc>
 800aa82:	4283      	cmp	r3, r0
 800aa84:	d9f5      	bls.n	800aa72 <memmove+0xa>
 800aa86:	1881      	adds	r1, r0, r2
 800aa88:	1ad2      	subs	r2, r2, r3
 800aa8a:	42d3      	cmn	r3, r2
 800aa8c:	d100      	bne.n	800aa90 <memmove+0x28>
 800aa8e:	bd10      	pop	{r4, pc}
 800aa90:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa94:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800aa98:	e7f7      	b.n	800aa8a <memmove+0x22>

0800aa9a <__malloc_lock>:
 800aa9a:	4770      	bx	lr

0800aa9c <__malloc_unlock>:
 800aa9c:	4770      	bx	lr

0800aa9e <_realloc_r>:
 800aa9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa0:	4607      	mov	r7, r0
 800aaa2:	4614      	mov	r4, r2
 800aaa4:	460e      	mov	r6, r1
 800aaa6:	b921      	cbnz	r1, 800aab2 <_realloc_r+0x14>
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800aaae:	f7ff be0d 	b.w	800a6cc <_malloc_r>
 800aab2:	b922      	cbnz	r2, 800aabe <_realloc_r+0x20>
 800aab4:	f7ff fdbc 	bl	800a630 <_free_r>
 800aab8:	4625      	mov	r5, r4
 800aaba:	4628      	mov	r0, r5
 800aabc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aabe:	f000 f821 	bl	800ab04 <_malloc_usable_size_r>
 800aac2:	42a0      	cmp	r0, r4
 800aac4:	d20f      	bcs.n	800aae6 <_realloc_r+0x48>
 800aac6:	4621      	mov	r1, r4
 800aac8:	4638      	mov	r0, r7
 800aaca:	f7ff fdff 	bl	800a6cc <_malloc_r>
 800aace:	4605      	mov	r5, r0
 800aad0:	2800      	cmp	r0, #0
 800aad2:	d0f2      	beq.n	800aaba <_realloc_r+0x1c>
 800aad4:	4631      	mov	r1, r6
 800aad6:	4622      	mov	r2, r4
 800aad8:	f7fd ffd4 	bl	8008a84 <memcpy>
 800aadc:	4631      	mov	r1, r6
 800aade:	4638      	mov	r0, r7
 800aae0:	f7ff fda6 	bl	800a630 <_free_r>
 800aae4:	e7e9      	b.n	800aaba <_realloc_r+0x1c>
 800aae6:	4635      	mov	r5, r6
 800aae8:	e7e7      	b.n	800aaba <_realloc_r+0x1c>

0800aaea <__ascii_wctomb>:
 800aaea:	b149      	cbz	r1, 800ab00 <__ascii_wctomb+0x16>
 800aaec:	2aff      	cmp	r2, #255	; 0xff
 800aaee:	bf85      	ittet	hi
 800aaf0:	238a      	movhi	r3, #138	; 0x8a
 800aaf2:	6003      	strhi	r3, [r0, #0]
 800aaf4:	700a      	strbls	r2, [r1, #0]
 800aaf6:	f04f 30ff 	movhi.w	r0, #4294967295
 800aafa:	bf98      	it	ls
 800aafc:	2001      	movls	r0, #1
 800aafe:	4770      	bx	lr
 800ab00:	4608      	mov	r0, r1
 800ab02:	4770      	bx	lr

0800ab04 <_malloc_usable_size_r>:
 800ab04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab08:	1f18      	subs	r0, r3, #4
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	bfbc      	itt	lt
 800ab0e:	580b      	ldrlt	r3, [r1, r0]
 800ab10:	18c0      	addlt	r0, r0, r3
 800ab12:	4770      	bx	lr

0800ab14 <_init>:
 800ab14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab16:	bf00      	nop
 800ab18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab1a:	bc08      	pop	{r3}
 800ab1c:	469e      	mov	lr, r3
 800ab1e:	4770      	bx	lr

0800ab20 <_fini>:
 800ab20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab22:	bf00      	nop
 800ab24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab26:	bc08      	pop	{r3}
 800ab28:	469e      	mov	lr, r3
 800ab2a:	4770      	bx	lr
