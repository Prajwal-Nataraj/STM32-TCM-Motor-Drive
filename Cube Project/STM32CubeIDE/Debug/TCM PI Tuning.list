
TCM PI Tuning.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000087cc  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000021c  080089a4  080089a4  000189a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bc0  08008bc0  000203e4  2**0
                  CONTENTS
  4 .ARM          00000008  08008bc0  08008bc0  00018bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bc8  08008bc8  000203e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bc8  08008bc8  00018bc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008bcc  08008bcc  00018bcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003e4  20000000  08008bd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  200003e4  08008fb4  000203e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  08008fb4  00020678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203e4  2**0
                  CONTENTS, READONLY
 12 .debug_line   0002a459  00000000  00000000  00020414  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   00056815  00000000  00000000  0004a86d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00007a52  00000000  00000000  000a1082  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00001bf8  00000000  00000000  000a8ad8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0013933a  00000000  00000000  000aa6d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00004d80  00000000  00000000  001e3a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    00022570  00000000  00000000  001e8790  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00033f0b  00000000  00000000  0020ad00  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0023ec0b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005820  00000000  00000000  0023ec88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200003e4 	.word	0x200003e4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800898c 	.word	0x0800898c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200003e8 	.word	0x200003e8
 8000214:	0800898c 	.word	0x0800898c

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b972 	b.w	8000d60 <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	9e08      	ldr	r6, [sp, #32]
 8000a9a:	4604      	mov	r4, r0
 8000a9c:	4688      	mov	r8, r1
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d14b      	bne.n	8000b3a <__udivmoddi4+0xa6>
 8000aa2:	428a      	cmp	r2, r1
 8000aa4:	4615      	mov	r5, r2
 8000aa6:	d967      	bls.n	8000b78 <__udivmoddi4+0xe4>
 8000aa8:	fab2 f282 	clz	r2, r2
 8000aac:	b14a      	cbz	r2, 8000ac2 <__udivmoddi4+0x2e>
 8000aae:	f1c2 0720 	rsb	r7, r2, #32
 8000ab2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ab6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aba:	4095      	lsls	r5, r2
 8000abc:	ea47 0803 	orr.w	r8, r7, r3
 8000ac0:	4094      	lsls	r4, r2
 8000ac2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ac6:	0c23      	lsrs	r3, r4, #16
 8000ac8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000acc:	fa1f fc85 	uxth.w	ip, r5
 8000ad0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ad4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ad8:	fb07 f10c 	mul.w	r1, r7, ip
 8000adc:	4299      	cmp	r1, r3
 8000ade:	d909      	bls.n	8000af4 <__udivmoddi4+0x60>
 8000ae0:	18eb      	adds	r3, r5, r3
 8000ae2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ae6:	f080 811b 	bcs.w	8000d20 <__udivmoddi4+0x28c>
 8000aea:	4299      	cmp	r1, r3
 8000aec:	f240 8118 	bls.w	8000d20 <__udivmoddi4+0x28c>
 8000af0:	3f02      	subs	r7, #2
 8000af2:	442b      	add	r3, r5
 8000af4:	1a5b      	subs	r3, r3, r1
 8000af6:	b2a4      	uxth	r4, r4
 8000af8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000afc:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b04:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b08:	45a4      	cmp	ip, r4
 8000b0a:	d909      	bls.n	8000b20 <__udivmoddi4+0x8c>
 8000b0c:	192c      	adds	r4, r5, r4
 8000b0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b12:	f080 8107 	bcs.w	8000d24 <__udivmoddi4+0x290>
 8000b16:	45a4      	cmp	ip, r4
 8000b18:	f240 8104 	bls.w	8000d24 <__udivmoddi4+0x290>
 8000b1c:	3802      	subs	r0, #2
 8000b1e:	442c      	add	r4, r5
 8000b20:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b24:	eba4 040c 	sub.w	r4, r4, ip
 8000b28:	2700      	movs	r7, #0
 8000b2a:	b11e      	cbz	r6, 8000b34 <__udivmoddi4+0xa0>
 8000b2c:	40d4      	lsrs	r4, r2
 8000b2e:	2300      	movs	r3, #0
 8000b30:	e9c6 4300 	strd	r4, r3, [r6]
 8000b34:	4639      	mov	r1, r7
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d909      	bls.n	8000b52 <__udivmoddi4+0xbe>
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	f000 80eb 	beq.w	8000d1a <__udivmoddi4+0x286>
 8000b44:	2700      	movs	r7, #0
 8000b46:	e9c6 0100 	strd	r0, r1, [r6]
 8000b4a:	4638      	mov	r0, r7
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b52:	fab3 f783 	clz	r7, r3
 8000b56:	2f00      	cmp	r7, #0
 8000b58:	d147      	bne.n	8000bea <__udivmoddi4+0x156>
 8000b5a:	428b      	cmp	r3, r1
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0xd0>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 80fa 	bhi.w	8000d58 <__udivmoddi4+0x2c4>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb61 0303 	sbc.w	r3, r1, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4698      	mov	r8, r3
 8000b6e:	2e00      	cmp	r6, #0
 8000b70:	d0e0      	beq.n	8000b34 <__udivmoddi4+0xa0>
 8000b72:	e9c6 4800 	strd	r4, r8, [r6]
 8000b76:	e7dd      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000b78:	b902      	cbnz	r2, 8000b7c <__udivmoddi4+0xe8>
 8000b7a:	deff      	udf	#255	; 0xff
 8000b7c:	fab2 f282 	clz	r2, r2
 8000b80:	2a00      	cmp	r2, #0
 8000b82:	f040 808f 	bne.w	8000ca4 <__udivmoddi4+0x210>
 8000b86:	1b49      	subs	r1, r1, r5
 8000b88:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b8c:	fa1f f885 	uxth.w	r8, r5
 8000b90:	2701      	movs	r7, #1
 8000b92:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b96:	0c23      	lsrs	r3, r4, #16
 8000b98:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba0:	fb08 f10c 	mul.w	r1, r8, ip
 8000ba4:	4299      	cmp	r1, r3
 8000ba6:	d907      	bls.n	8000bb8 <__udivmoddi4+0x124>
 8000ba8:	18eb      	adds	r3, r5, r3
 8000baa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x122>
 8000bb0:	4299      	cmp	r1, r3
 8000bb2:	f200 80cd 	bhi.w	8000d50 <__udivmoddi4+0x2bc>
 8000bb6:	4684      	mov	ip, r0
 8000bb8:	1a59      	subs	r1, r3, r1
 8000bba:	b2a3      	uxth	r3, r4
 8000bbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bc4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc8:	fb08 f800 	mul.w	r8, r8, r0
 8000bcc:	45a0      	cmp	r8, r4
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x14c>
 8000bd0:	192c      	adds	r4, r5, r4
 8000bd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x14a>
 8000bd8:	45a0      	cmp	r8, r4
 8000bda:	f200 80b6 	bhi.w	8000d4a <__udivmoddi4+0x2b6>
 8000bde:	4618      	mov	r0, r3
 8000be0:	eba4 0408 	sub.w	r4, r4, r8
 8000be4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000be8:	e79f      	b.n	8000b2a <__udivmoddi4+0x96>
 8000bea:	f1c7 0c20 	rsb	ip, r7, #32
 8000bee:	40bb      	lsls	r3, r7
 8000bf0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bf4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000bf8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bfc:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c00:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c04:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c08:	4325      	orrs	r5, r4
 8000c0a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c0e:	0c2c      	lsrs	r4, r5, #16
 8000c10:	fb08 3319 	mls	r3, r8, r9, r3
 8000c14:	fa1f fa8e 	uxth.w	sl, lr
 8000c18:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c1c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c20:	429c      	cmp	r4, r3
 8000c22:	fa02 f207 	lsl.w	r2, r2, r7
 8000c26:	fa00 f107 	lsl.w	r1, r0, r7
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b0>
 8000c2c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c30:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c34:	f080 8087 	bcs.w	8000d46 <__udivmoddi4+0x2b2>
 8000c38:	429c      	cmp	r4, r3
 8000c3a:	f240 8084 	bls.w	8000d46 <__udivmoddi4+0x2b2>
 8000c3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c42:	4473      	add	r3, lr
 8000c44:	1b1b      	subs	r3, r3, r4
 8000c46:	b2ad      	uxth	r5, r5
 8000c48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c50:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c54:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c58:	45a2      	cmp	sl, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1da>
 8000c5c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c64:	d26b      	bcs.n	8000d3e <__udivmoddi4+0x2aa>
 8000c66:	45a2      	cmp	sl, r4
 8000c68:	d969      	bls.n	8000d3e <__udivmoddi4+0x2aa>
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	4474      	add	r4, lr
 8000c6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c72:	fba0 8902 	umull	r8, r9, r0, r2
 8000c76:	eba4 040a 	sub.w	r4, r4, sl
 8000c7a:	454c      	cmp	r4, r9
 8000c7c:	46c2      	mov	sl, r8
 8000c7e:	464b      	mov	r3, r9
 8000c80:	d354      	bcc.n	8000d2c <__udivmoddi4+0x298>
 8000c82:	d051      	beq.n	8000d28 <__udivmoddi4+0x294>
 8000c84:	2e00      	cmp	r6, #0
 8000c86:	d069      	beq.n	8000d5c <__udivmoddi4+0x2c8>
 8000c88:	ebb1 050a 	subs.w	r5, r1, sl
 8000c8c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c90:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c94:	40fd      	lsrs	r5, r7
 8000c96:	40fc      	lsrs	r4, r7
 8000c98:	ea4c 0505 	orr.w	r5, ip, r5
 8000c9c:	e9c6 5400 	strd	r5, r4, [r6]
 8000ca0:	2700      	movs	r7, #0
 8000ca2:	e747      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000ca4:	f1c2 0320 	rsb	r3, r2, #32
 8000ca8:	fa20 f703 	lsr.w	r7, r0, r3
 8000cac:	4095      	lsls	r5, r2
 8000cae:	fa01 f002 	lsl.w	r0, r1, r2
 8000cb2:	fa21 f303 	lsr.w	r3, r1, r3
 8000cb6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cba:	4338      	orrs	r0, r7
 8000cbc:	0c01      	lsrs	r1, r0, #16
 8000cbe:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cc2:	fa1f f885 	uxth.w	r8, r5
 8000cc6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cce:	fb07 f308 	mul.w	r3, r7, r8
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cd8:	d907      	bls.n	8000cea <__udivmoddi4+0x256>
 8000cda:	1869      	adds	r1, r5, r1
 8000cdc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ce0:	d22f      	bcs.n	8000d42 <__udivmoddi4+0x2ae>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d92d      	bls.n	8000d42 <__udivmoddi4+0x2ae>
 8000ce6:	3f02      	subs	r7, #2
 8000ce8:	4429      	add	r1, r5
 8000cea:	1acb      	subs	r3, r1, r3
 8000cec:	b281      	uxth	r1, r0
 8000cee:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cf2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cf6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cfa:	fb00 f308 	mul.w	r3, r0, r8
 8000cfe:	428b      	cmp	r3, r1
 8000d00:	d907      	bls.n	8000d12 <__udivmoddi4+0x27e>
 8000d02:	1869      	adds	r1, r5, r1
 8000d04:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d08:	d217      	bcs.n	8000d3a <__udivmoddi4+0x2a6>
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d915      	bls.n	8000d3a <__udivmoddi4+0x2a6>
 8000d0e:	3802      	subs	r0, #2
 8000d10:	4429      	add	r1, r5
 8000d12:	1ac9      	subs	r1, r1, r3
 8000d14:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d18:	e73b      	b.n	8000b92 <__udivmoddi4+0xfe>
 8000d1a:	4637      	mov	r7, r6
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	e709      	b.n	8000b34 <__udivmoddi4+0xa0>
 8000d20:	4607      	mov	r7, r0
 8000d22:	e6e7      	b.n	8000af4 <__udivmoddi4+0x60>
 8000d24:	4618      	mov	r0, r3
 8000d26:	e6fb      	b.n	8000b20 <__udivmoddi4+0x8c>
 8000d28:	4541      	cmp	r1, r8
 8000d2a:	d2ab      	bcs.n	8000c84 <__udivmoddi4+0x1f0>
 8000d2c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d30:	eb69 020e 	sbc.w	r2, r9, lr
 8000d34:	3801      	subs	r0, #1
 8000d36:	4613      	mov	r3, r2
 8000d38:	e7a4      	b.n	8000c84 <__udivmoddi4+0x1f0>
 8000d3a:	4660      	mov	r0, ip
 8000d3c:	e7e9      	b.n	8000d12 <__udivmoddi4+0x27e>
 8000d3e:	4618      	mov	r0, r3
 8000d40:	e795      	b.n	8000c6e <__udivmoddi4+0x1da>
 8000d42:	4667      	mov	r7, ip
 8000d44:	e7d1      	b.n	8000cea <__udivmoddi4+0x256>
 8000d46:	4681      	mov	r9, r0
 8000d48:	e77c      	b.n	8000c44 <__udivmoddi4+0x1b0>
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	442c      	add	r4, r5
 8000d4e:	e747      	b.n	8000be0 <__udivmoddi4+0x14c>
 8000d50:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d54:	442b      	add	r3, r5
 8000d56:	e72f      	b.n	8000bb8 <__udivmoddi4+0x124>
 8000d58:	4638      	mov	r0, r7
 8000d5a:	e708      	b.n	8000b6e <__udivmoddi4+0xda>
 8000d5c:	4637      	mov	r7, r6
 8000d5e:	e6e9      	b.n	8000b34 <__udivmoddi4+0xa0>

08000d60 <__aeabi_idiv0>:
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop

08000d64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d64:	480d      	ldr	r0, [pc, #52]	; (8000d9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d66:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d68:	f002 fd58 	bl	800381c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d6c:	480c      	ldr	r0, [pc, #48]	; (8000da0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d6e:	490d      	ldr	r1, [pc, #52]	; (8000da4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d70:	4a0d      	ldr	r2, [pc, #52]	; (8000da8 <LoopForever+0xe>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d74:	e002      	b.n	8000d7c <LoopCopyDataInit>

08000d76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d7a:	3304      	adds	r3, #4

08000d7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d80:	d3f9      	bcc.n	8000d76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d82:	4a0a      	ldr	r2, [pc, #40]	; (8000dac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d84:	4c0a      	ldr	r4, [pc, #40]	; (8000db0 <LoopForever+0x16>)
  movs r3, #0
 8000d86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d88:	e001      	b.n	8000d8e <LoopFillZerobss>

08000d8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d8c:	3204      	adds	r2, #4

08000d8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d90:	d3fb      	bcc.n	8000d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d92:	f007 fd6b 	bl	800886c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d96:	f000 fccf 	bl	8001738 <main>

08000d9a <LoopForever>:

LoopForever:
    b LoopForever
 8000d9a:	e7fe      	b.n	8000d9a <LoopForever>
  ldr   r0, =_estack
 8000d9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000da0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000da4:	200003e4 	.word	0x200003e4
  ldr r2, =_sidata
 8000da8:	08008bd0 	.word	0x08008bd0
  ldr r2, =_sbss
 8000dac:	200003e4 	.word	0x200003e4
  ldr r4, =_ebss
 8000db0:	20000678 	.word	0x20000678

08000db4 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000db4:	e7fe      	b.n	8000db4 <ADC3_IRQHandler>
	...

08000db8 <CmdProc_Direction>:
		return;
	}
}

void CmdProc_Direction(uint8_t *CmdBuf, uint32_t CmdLen, uint8_t *RspBuf, uint32_t *RspLen)
{
 8000db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t *pCmdBuf = &CMDBYTE_DATA0;
	uint8_t argGS = GetArgUINT8(pCmdBuf);
 8000dba:	78c4      	ldrb	r4, [r0, #3]

	uint8_t dir = 0;

	if(argGS == CMD_GET)
 8000dbc:	2c01      	cmp	r4, #1
{
 8000dbe:	4605      	mov	r5, r0
 8000dc0:	4616      	mov	r6, r2
 8000dc2:	461f      	mov	r7, r3
	if(argGS == CMD_GET)
 8000dc4:	d015      	beq.n	8000df2 <CmdProc_Direction+0x3a>

		RESP(CMDBYTE_FUNCCODE, (uint8_t*)&dir, sizeof(dir), RspBuf, RspLen);
		return;
	}

	if(argGS == CMD_SET)
 8000dc6:	2c02      	cmp	r4, #2
 8000dc8:	d000      	beq.n	8000dcc <CmdProc_Direction+0x14>
			NACK(CMDBYTE_FUNCCODE, CMD_RET_WRONGARGS, RspBuf, RspLen);
		else
			ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
		return;
	}
}
 8000dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(!Motor_SetDirection(dir))
 8000dcc:	7900      	ldrb	r0, [r0, #4]
 8000dce:	3000      	adds	r0, #0
 8000dd0:	bf18      	it	ne
 8000dd2:	2001      	movne	r0, #1
 8000dd4:	f000 fafe 	bl	80013d4 <Motor_SetDirection>
			NACK(CMDBYTE_FUNCCODE, CMD_RET_WRONGARGS, RspBuf, RspLen);
 8000dd8:	786b      	ldrb	r3, [r5, #1]
    RspBuf[1] = FuncCode;
 8000dda:	7073      	strb	r3, [r6, #1]
		if(!Motor_SetDirection(dir))
 8000ddc:	b998      	cbnz	r0, 8000e06 <CmdProc_Direction+0x4e>
    RspBuf[0] = GetAddr();
 8000dde:	2001      	movs	r0, #1
    RspBuf[3] = CMD_EXC_CMDS;
 8000de0:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 8000de2:	2203      	movs	r2, #3
    RspBuf[2] = 0x02;
 8000de4:	70b4      	strb	r4, [r6, #2]
    *RspLen = 5;
 8000de6:	2305      	movs	r3, #5
    RspBuf[0] = GetAddr();
 8000de8:	7030      	strb	r0, [r6, #0]
    RspBuf[3] = CMD_EXC_CMDS;
 8000dea:	70f1      	strb	r1, [r6, #3]
    RspBuf[4] = Exception;
 8000dec:	7132      	strb	r2, [r6, #4]
    *RspLen = 5;
 8000dee:	603b      	str	r3, [r7, #0]
}
 8000df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		dir = Motor_GetDirection();
 8000df2:	f000 faf5 	bl	80013e0 <Motor_GetDirection>
		RESP(CMDBYTE_FUNCCODE, (uint8_t*)&dir, sizeof(dir), RspBuf, RspLen);
 8000df6:	786b      	ldrb	r3, [r5, #1]
    RspBuf[1] = FuncCode;
 8000df8:	7073      	strb	r3, [r6, #1]
        RspBuf[3 + i] = *pData++;
 8000dfa:	70f0      	strb	r0, [r6, #3]
    *RspLen = (3 + DataLen);
 8000dfc:	2304      	movs	r3, #4
    RspBuf[0] = GetAddr();
 8000dfe:	7034      	strb	r4, [r6, #0]
    RspBuf[2] = DataLen;
 8000e00:	70b4      	strb	r4, [r6, #2]
    *RspLen = (3 + DataLen);
 8000e02:	603b      	str	r3, [r7, #0]
}
 8000e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    RspBuf[0] = GetAddr();
 8000e06:	2301      	movs	r3, #1
    RspBuf[3] = 0x00;
 8000e08:	2100      	movs	r1, #0
    *RspLen = 4;
 8000e0a:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 8000e0c:	7033      	strb	r3, [r6, #0]
    RspBuf[2] = 0x01;
 8000e0e:	70b3      	strb	r3, [r6, #2]
    RspBuf[3] = 0x00;
 8000e10:	70f1      	strb	r1, [r6, #3]
    *RspLen = 4;
 8000e12:	603a      	str	r2, [r7, #0]
}
 8000e14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e16:	bf00      	nop

08000e18 <CmdProc_SetZero>:
	else
		NACK(CMDBYTE_FUNCCODE, CMD_RET_GENERROR, RspBuf, RspLen);
}

void CmdProc_SetZero(uint8_t *CmdBuf, uint32_t CmdLen, uint8_t *RspBuf, uint32_t *RspLen)
{
 8000e18:	b570      	push	{r4, r5, r6, lr}
 8000e1a:	4606      	mov	r6, r0
 8000e1c:	4614      	mov	r4, r2
 8000e1e:	461d      	mov	r5, r3
	if(Motor_SetZero())
 8000e20:	f000 fbaa 	bl	8001578 <Motor_SetZero>
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
 8000e24:	7873      	ldrb	r3, [r6, #1]
    RspBuf[1] = FuncCode;
 8000e26:	7063      	strb	r3, [r4, #1]
    RspBuf[0] = GetAddr();
 8000e28:	2301      	movs	r3, #1
	if(Motor_SetZero())
 8000e2a:	b948      	cbnz	r0, 8000e40 <CmdProc_SetZero+0x28>
    RspBuf[2] = 0x02;
 8000e2c:	2002      	movs	r0, #2
    RspBuf[3] = CMD_EXC_CMDS;
 8000e2e:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 8000e30:	2206      	movs	r2, #6
    RspBuf[0] = GetAddr();
 8000e32:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x02;
 8000e34:	70a0      	strb	r0, [r4, #2]
    *RspLen = 5;
 8000e36:	2305      	movs	r3, #5
    RspBuf[3] = CMD_EXC_CMDS;
 8000e38:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 8000e3a:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 8000e3c:	602b      	str	r3, [r5, #0]
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
	else
		NACK(CMDBYTE_FUNCCODE, CMD_RET_GENERROR, RspBuf, RspLen);
}
 8000e3e:	bd70      	pop	{r4, r5, r6, pc}
    RspBuf[3] = 0x00;
 8000e40:	2100      	movs	r1, #0
    *RspLen = 4;
 8000e42:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 8000e44:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 8000e46:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 8000e48:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 8000e4a:	602a      	str	r2, [r5, #0]
}
 8000e4c:	bd70      	pop	{r4, r5, r6, pc}
 8000e4e:	bf00      	nop

08000e50 <CmdProc_Speed>:
{
 8000e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t argGS = GetArgUINT8(pCmdBuf);
 8000e52:	78c5      	ldrb	r5, [r0, #3]
	if(argGS == CMD_GET)
 8000e54:	2d01      	cmp	r5, #1
{
 8000e56:	4606      	mov	r6, r0
 8000e58:	4614      	mov	r4, r2
 8000e5a:	461f      	mov	r7, r3
	if(argGS == CMD_GET)
 8000e5c:	d002      	beq.n	8000e64 <CmdProc_Speed+0x14>
	if(argGS == CMD_SET)
 8000e5e:	2d02      	cmp	r5, #2
 8000e60:	d016      	beq.n	8000e90 <CmdProc_Speed+0x40>
}
 8000e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		speed = Motor_GetSpeed();
 8000e64:	f000 fab0 	bl	80013c8 <Motor_GetSpeed>
    memcpy((void*)Buf, (void*)&Val, sizeof(float32_t));
 8000e68:	ee10 3a10 	vmov	r3, s0
		RESP(CMDBYTE_FUNCCODE, (uint8_t*)data, sizeof(data), RspBuf, RspLen);
 8000e6c:	7872      	ldrb	r2, [r6, #1]
    RspBuf[1] = FuncCode;
 8000e6e:	7062      	strb	r2, [r4, #1]
        RspBuf[3 + i] = *pData++;
 8000e70:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8000e74:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8000e78:	f3c3 6107 	ubfx	r1, r3, #24, #8
    RspBuf[2] = DataLen;
 8000e7c:	2204      	movs	r2, #4
        RspBuf[3 + i] = *pData++;
 8000e7e:	70e3      	strb	r3, [r4, #3]
    RspBuf[0] = GetAddr();
 8000e80:	7025      	strb	r5, [r4, #0]
        RspBuf[3 + i] = *pData++;
 8000e82:	7126      	strb	r6, [r4, #4]
    *RspLen = (3 + DataLen);
 8000e84:	2307      	movs	r3, #7
        RspBuf[3 + i] = *pData++;
 8000e86:	7160      	strb	r0, [r4, #5]
 8000e88:	71a1      	strb	r1, [r4, #6]
    RspBuf[2] = DataLen;
 8000e8a:	70a2      	strb	r2, [r4, #2]
    *RspLen = (3 + DataLen);
 8000e8c:	603b      	str	r3, [r7, #0]
}
 8000e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(!Motor_SetSpeed(speed))
 8000e90:	6843      	ldr	r3, [r0, #4]
 8000e92:	ee00 3a10 	vmov	s0, r3
 8000e96:	f000 fa8f 	bl	80013b8 <Motor_SetSpeed>
			NACK(CMDBYTE_FUNCCODE, CMD_RET_WRONGARGS, RspBuf, RspLen);
 8000e9a:	7873      	ldrb	r3, [r6, #1]
    RspBuf[1] = FuncCode;
 8000e9c:	7063      	strb	r3, [r4, #1]
		if(!Motor_SetSpeed(speed))
 8000e9e:	b138      	cbz	r0, 8000eb0 <CmdProc_Speed+0x60>
    RspBuf[0] = GetAddr();
 8000ea0:	2301      	movs	r3, #1
    RspBuf[3] = 0x00;
 8000ea2:	2100      	movs	r1, #0
    *RspLen = 4;
 8000ea4:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 8000ea6:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 8000ea8:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 8000eaa:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 8000eac:	603a      	str	r2, [r7, #0]
}
 8000eae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    RspBuf[0] = GetAddr();
 8000eb0:	2001      	movs	r0, #1
    RspBuf[3] = CMD_EXC_CMDS;
 8000eb2:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 8000eb4:	2203      	movs	r2, #3
    RspBuf[2] = 0x02;
 8000eb6:	70a5      	strb	r5, [r4, #2]
    *RspLen = 5;
 8000eb8:	2305      	movs	r3, #5
    RspBuf[0] = GetAddr();
 8000eba:	7020      	strb	r0, [r4, #0]
    RspBuf[3] = CMD_EXC_CMDS;
 8000ebc:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 8000ebe:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 8000ec0:	603b      	str	r3, [r7, #0]
}
 8000ec2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000ec4 <CmdProc_RTZ>:

void CmdProc_RTZ(uint8_t *CmdBuf, uint32_t CmdLen, uint8_t *RspBuf, uint32_t *RspLen)
{
 8000ec4:	b570      	push	{r4, r5, r6, lr}
 8000ec6:	4606      	mov	r6, r0
 8000ec8:	4614      	mov	r4, r2
 8000eca:	461d      	mov	r5, r3
	if(Motor_RTZ())
 8000ecc:	f000 fb5c 	bl	8001588 <Motor_RTZ>
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
 8000ed0:	7873      	ldrb	r3, [r6, #1]
    RspBuf[1] = FuncCode;
 8000ed2:	7063      	strb	r3, [r4, #1]
    RspBuf[0] = GetAddr();
 8000ed4:	2301      	movs	r3, #1
	if(Motor_RTZ())
 8000ed6:	b948      	cbnz	r0, 8000eec <CmdProc_RTZ+0x28>
    RspBuf[2] = 0x02;
 8000ed8:	2002      	movs	r0, #2
    RspBuf[3] = CMD_EXC_CMDS;
 8000eda:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 8000edc:	2206      	movs	r2, #6
    RspBuf[0] = GetAddr();
 8000ede:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x02;
 8000ee0:	70a0      	strb	r0, [r4, #2]
    *RspLen = 5;
 8000ee2:	2305      	movs	r3, #5
    RspBuf[3] = CMD_EXC_CMDS;
 8000ee4:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 8000ee6:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 8000ee8:	602b      	str	r3, [r5, #0]
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
	else
		NACK(CMDBYTE_FUNCCODE, CMD_RET_GENERROR, RspBuf, RspLen);
}
 8000eea:	bd70      	pop	{r4, r5, r6, pc}
    RspBuf[3] = 0x00;
 8000eec:	2100      	movs	r1, #0
    *RspLen = 4;
 8000eee:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 8000ef0:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 8000ef2:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 8000ef4:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 8000ef6:	602a      	str	r2, [r5, #0]
}
 8000ef8:	bd70      	pop	{r4, r5, r6, pc}
 8000efa:	bf00      	nop

08000efc <CmdProc_Init>:
{
 8000efc:	b570      	push	{r4, r5, r6, lr}
 8000efe:	4606      	mov	r6, r0
 8000f00:	4614      	mov	r4, r2
 8000f02:	461d      	mov	r5, r3
	if(Motor_Init())
 8000f04:	f000 fa38 	bl	8001378 <Motor_Init>
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
 8000f08:	7873      	ldrb	r3, [r6, #1]
    RspBuf[1] = FuncCode;
 8000f0a:	7063      	strb	r3, [r4, #1]
    RspBuf[0] = GetAddr();
 8000f0c:	2301      	movs	r3, #1
	if(Motor_Init())
 8000f0e:	b948      	cbnz	r0, 8000f24 <CmdProc_Init+0x28>
    RspBuf[2] = 0x02;
 8000f10:	2002      	movs	r0, #2
    RspBuf[3] = CMD_EXC_CMDS;
 8000f12:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 8000f14:	2206      	movs	r2, #6
    RspBuf[0] = GetAddr();
 8000f16:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x02;
 8000f18:	70a0      	strb	r0, [r4, #2]
    *RspLen = 5;
 8000f1a:	2305      	movs	r3, #5
    RspBuf[3] = CMD_EXC_CMDS;
 8000f1c:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 8000f1e:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 8000f20:	602b      	str	r3, [r5, #0]
}
 8000f22:	bd70      	pop	{r4, r5, r6, pc}
    RspBuf[3] = 0x00;
 8000f24:	2100      	movs	r1, #0
    *RspLen = 4;
 8000f26:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 8000f28:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 8000f2a:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 8000f2c:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 8000f2e:	602a      	str	r2, [r5, #0]
}
 8000f30:	bd70      	pop	{r4, r5, r6, pc}
 8000f32:	bf00      	nop

08000f34 <CmdProc_ResetParams>:
{
 8000f34:	b570      	push	{r4, r5, r6, lr}
 8000f36:	4606      	mov	r6, r0
 8000f38:	4614      	mov	r4, r2
 8000f3a:	461d      	mov	r5, r3
	if(Motor_ResetParams())
 8000f3c:	f000 fa64 	bl	8001408 <Motor_ResetParams>
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
 8000f40:	7873      	ldrb	r3, [r6, #1]
    RspBuf[1] = FuncCode;
 8000f42:	7063      	strb	r3, [r4, #1]
    RspBuf[0] = GetAddr();
 8000f44:	2301      	movs	r3, #1
	if(Motor_ResetParams())
 8000f46:	b948      	cbnz	r0, 8000f5c <CmdProc_ResetParams+0x28>
    RspBuf[2] = 0x02;
 8000f48:	2002      	movs	r0, #2
    RspBuf[3] = CMD_EXC_CMDS;
 8000f4a:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 8000f4c:	2206      	movs	r2, #6
    RspBuf[0] = GetAddr();
 8000f4e:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x02;
 8000f50:	70a0      	strb	r0, [r4, #2]
    *RspLen = 5;
 8000f52:	2305      	movs	r3, #5
    RspBuf[3] = CMD_EXC_CMDS;
 8000f54:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 8000f56:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 8000f58:	602b      	str	r3, [r5, #0]
}
 8000f5a:	bd70      	pop	{r4, r5, r6, pc}
    RspBuf[3] = 0x00;
 8000f5c:	2100      	movs	r1, #0
    *RspLen = 4;
 8000f5e:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 8000f60:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 8000f62:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 8000f64:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 8000f66:	602a      	str	r2, [r5, #0]
}
 8000f68:	bd70      	pop	{r4, r5, r6, pc}
 8000f6a:	bf00      	nop

08000f6c <CmdProc_Start>:
{
 8000f6c:	b570      	push	{r4, r5, r6, lr}
 8000f6e:	4606      	mov	r6, r0
 8000f70:	4614      	mov	r4, r2
 8000f72:	461d      	mov	r5, r3
	if(Motor_Start())
 8000f74:	f000 fa5c 	bl	8001430 <Motor_Start>
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
 8000f78:	7873      	ldrb	r3, [r6, #1]
    RspBuf[1] = FuncCode;
 8000f7a:	7063      	strb	r3, [r4, #1]
    RspBuf[0] = GetAddr();
 8000f7c:	2301      	movs	r3, #1
	if(Motor_Start())
 8000f7e:	b948      	cbnz	r0, 8000f94 <CmdProc_Start+0x28>
    RspBuf[2] = 0x02;
 8000f80:	2002      	movs	r0, #2
    RspBuf[3] = CMD_EXC_CMDS;
 8000f82:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 8000f84:	2206      	movs	r2, #6
    RspBuf[0] = GetAddr();
 8000f86:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x02;
 8000f88:	70a0      	strb	r0, [r4, #2]
    *RspLen = 5;
 8000f8a:	2305      	movs	r3, #5
    RspBuf[3] = CMD_EXC_CMDS;
 8000f8c:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 8000f8e:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 8000f90:	602b      	str	r3, [r5, #0]
}
 8000f92:	bd70      	pop	{r4, r5, r6, pc}
    RspBuf[3] = 0x00;
 8000f94:	2100      	movs	r1, #0
    *RspLen = 4;
 8000f96:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 8000f98:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 8000f9a:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 8000f9c:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 8000f9e:	602a      	str	r2, [r5, #0]
}
 8000fa0:	bd70      	pop	{r4, r5, r6, pc}
 8000fa2:	bf00      	nop

08000fa4 <CmdProc_Stop>:
{
 8000fa4:	b570      	push	{r4, r5, r6, lr}
 8000fa6:	4605      	mov	r5, r0
	if(Motor_Stop(ready))
 8000fa8:	78c0      	ldrb	r0, [r0, #3]
 8000faa:	3000      	adds	r0, #0
 8000fac:	bf18      	it	ne
 8000fae:	2001      	movne	r0, #1
{
 8000fb0:	4614      	mov	r4, r2
 8000fb2:	461e      	mov	r6, r3
	if(Motor_Stop(ready))
 8000fb4:	f000 fa4a 	bl	800144c <Motor_Stop>
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
 8000fb8:	786b      	ldrb	r3, [r5, #1]
    RspBuf[1] = FuncCode;
 8000fba:	7063      	strb	r3, [r4, #1]
    RspBuf[0] = GetAddr();
 8000fbc:	2301      	movs	r3, #1
	if(Motor_Stop(ready))
 8000fbe:	b948      	cbnz	r0, 8000fd4 <CmdProc_Stop+0x30>
    RspBuf[2] = 0x02;
 8000fc0:	2002      	movs	r0, #2
    RspBuf[3] = CMD_EXC_CMDS;
 8000fc2:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 8000fc4:	2206      	movs	r2, #6
    RspBuf[0] = GetAddr();
 8000fc6:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x02;
 8000fc8:	70a0      	strb	r0, [r4, #2]
    *RspLen = 5;
 8000fca:	2305      	movs	r3, #5
    RspBuf[3] = CMD_EXC_CMDS;
 8000fcc:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 8000fce:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 8000fd0:	6033      	str	r3, [r6, #0]
}
 8000fd2:	bd70      	pop	{r4, r5, r6, pc}
    RspBuf[3] = 0x00;
 8000fd4:	2100      	movs	r1, #0
    *RspLen = 4;
 8000fd6:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 8000fd8:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 8000fda:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 8000fdc:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 8000fde:	6032      	str	r2, [r6, #0]
}
 8000fe0:	bd70      	pop	{r4, r5, r6, pc}
 8000fe2:	bf00      	nop

08000fe4 <CmdProc_Run>:
{
 8000fe4:	b570      	push	{r4, r5, r6, lr}
 8000fe6:	4606      	mov	r6, r0
	if(Motor_Run(true))
 8000fe8:	2001      	movs	r0, #1
{
 8000fea:	4614      	mov	r4, r2
 8000fec:	461d      	mov	r5, r3
	if(Motor_Run(true))
 8000fee:	f000 fa47 	bl	8001480 <Motor_Run>
		ACK(CMDBYTE_FUNCCODE, RspBuf, RspLen);
 8000ff2:	7873      	ldrb	r3, [r6, #1]
    RspBuf[1] = FuncCode;
 8000ff4:	7063      	strb	r3, [r4, #1]
    RspBuf[0] = GetAddr();
 8000ff6:	2301      	movs	r3, #1
	if(Motor_Run(true))
 8000ff8:	b948      	cbnz	r0, 800100e <CmdProc_Run+0x2a>
    RspBuf[2] = 0x02;
 8000ffa:	2002      	movs	r0, #2
    RspBuf[3] = CMD_EXC_CMDS;
 8000ffc:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 8000ffe:	2206      	movs	r2, #6
    RspBuf[0] = GetAddr();
 8001000:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x02;
 8001002:	70a0      	strb	r0, [r4, #2]
    *RspLen = 5;
 8001004:	2305      	movs	r3, #5
    RspBuf[3] = CMD_EXC_CMDS;
 8001006:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 8001008:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 800100a:	602b      	str	r3, [r5, #0]
}
 800100c:	bd70      	pop	{r4, r5, r6, pc}
    RspBuf[3] = 0x00;
 800100e:	2100      	movs	r1, #0
    *RspLen = 4;
 8001010:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 8001012:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 8001014:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 8001016:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 8001018:	602a      	str	r2, [r5, #0]
}
 800101a:	bd70      	pop	{r4, r5, r6, pc}

0800101c <CmdProc_Distance>:
{
 800101c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t argGS = GetArgUINT8(pCmdBuf);
 800101e:	78c5      	ldrb	r5, [r0, #3]
	if(argGS == CMD_GET)
 8001020:	2d01      	cmp	r5, #1
{
 8001022:	4606      	mov	r6, r0
 8001024:	4614      	mov	r4, r2
 8001026:	461f      	mov	r7, r3
	if(argGS == CMD_GET)
 8001028:	d002      	beq.n	8001030 <CmdProc_Distance+0x14>
	if(argGS == CMD_SET)
 800102a:	2d02      	cmp	r5, #2
 800102c:	d016      	beq.n	800105c <CmdProc_Distance+0x40>
}
 800102e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		distance = Motor_GetDistance();
 8001030:	f000 f9bc 	bl	80013ac <Motor_GetDistance>
    memcpy((void*)Buf, (void*)&Val, sizeof(float32_t));
 8001034:	ee10 3a10 	vmov	r3, s0
		RESP(CMDBYTE_FUNCCODE, (uint8_t*)data, sizeof(data), RspBuf, RspLen);
 8001038:	7872      	ldrb	r2, [r6, #1]
    RspBuf[1] = FuncCode;
 800103a:	7062      	strb	r2, [r4, #1]
        RspBuf[3 + i] = *pData++;
 800103c:	f3c3 2607 	ubfx	r6, r3, #8, #8
 8001040:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8001044:	f3c3 6107 	ubfx	r1, r3, #24, #8
    RspBuf[2] = DataLen;
 8001048:	2204      	movs	r2, #4
        RspBuf[3 + i] = *pData++;
 800104a:	70e3      	strb	r3, [r4, #3]
    RspBuf[0] = GetAddr();
 800104c:	7025      	strb	r5, [r4, #0]
        RspBuf[3 + i] = *pData++;
 800104e:	7126      	strb	r6, [r4, #4]
    *RspLen = (3 + DataLen);
 8001050:	2307      	movs	r3, #7
        RspBuf[3 + i] = *pData++;
 8001052:	7160      	strb	r0, [r4, #5]
 8001054:	71a1      	strb	r1, [r4, #6]
    RspBuf[2] = DataLen;
 8001056:	70a2      	strb	r2, [r4, #2]
    *RspLen = (3 + DataLen);
 8001058:	603b      	str	r3, [r7, #0]
}
 800105a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(!Motor_SetDistance(distance))
 800105c:	6843      	ldr	r3, [r0, #4]
 800105e:	ee00 3a10 	vmov	s0, r3
 8001062:	f000 f99b 	bl	800139c <Motor_SetDistance>
			NACK(CMDBYTE_FUNCCODE, CMD_RET_WRONGARGS, RspBuf, RspLen);
 8001066:	7873      	ldrb	r3, [r6, #1]
    RspBuf[1] = FuncCode;
 8001068:	7063      	strb	r3, [r4, #1]
		if(!Motor_SetDistance(distance))
 800106a:	b138      	cbz	r0, 800107c <CmdProc_Distance+0x60>
    RspBuf[0] = GetAddr();
 800106c:	2301      	movs	r3, #1
    RspBuf[3] = 0x00;
 800106e:	2100      	movs	r1, #0
    *RspLen = 4;
 8001070:	2204      	movs	r2, #4
    RspBuf[0] = GetAddr();
 8001072:	7023      	strb	r3, [r4, #0]
    RspBuf[2] = 0x01;
 8001074:	70a3      	strb	r3, [r4, #2]
    RspBuf[3] = 0x00;
 8001076:	70e1      	strb	r1, [r4, #3]
    *RspLen = 4;
 8001078:	603a      	str	r2, [r7, #0]
}
 800107a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    RspBuf[0] = GetAddr();
 800107c:	2001      	movs	r0, #1
    RspBuf[3] = CMD_EXC_CMDS;
 800107e:	21f3      	movs	r1, #243	; 0xf3
    RspBuf[4] = Exception;
 8001080:	2203      	movs	r2, #3
    RspBuf[2] = 0x02;
 8001082:	70a5      	strb	r5, [r4, #2]
    *RspLen = 5;
 8001084:	2305      	movs	r3, #5
    RspBuf[0] = GetAddr();
 8001086:	7020      	strb	r0, [r4, #0]
    RspBuf[3] = CMD_EXC_CMDS;
 8001088:	70e1      	strb	r1, [r4, #3]
    RspBuf[4] = Exception;
 800108a:	7122      	strb	r2, [r4, #4]
    *RspLen = 5;
 800108c:	603b      	str	r3, [r7, #0]
}
 800108e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001090 <Cmd_Process>:
		{ 	CMD_SETZERO		, 		CmdProc_SetZero		},
		{ 	CMD_RTZ			, 		CmdProc_RTZ 		},
};

StdReturn_t Cmd_Process(uint8_t *CmdBuf, uint8_t *RspBuf, uint32_t *RspLen)
{
 8001090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(0 == checkCRC(CmdBuf, CMDBYTE_DATALEN))
 8001094:	f890 c002 	ldrb.w	ip, [r0, #2]
    dividend = Buf[0];
 8001098:	f890 e000 	ldrb.w	lr, [r0]
    size = 4 + len;
 800109c:	f10c 0604 	add.w	r6, ip, #4
 80010a0:	b2f6      	uxtb	r6, r6
    for(uint8_t i = 1; i < size; i++)
 80010a2:	2e01      	cmp	r6, #1
 80010a4:	f240 80ab 	bls.w	80011fe <Cmd_Process+0x16e>
 80010a8:	1c43      	adds	r3, r0, #1
 80010aa:	f10c 0702 	add.w	r7, ip, #2
 80010ae:	fa53 f787 	uxtab	r7, r3, r7
 80010b2:	3e01      	subs	r6, #1
 80010b4:	4605      	mov	r5, r0
    dividend = Buf[0];
 80010b6:	4673      	mov	r3, lr
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80010b8:	f013 0f80 	tst.w	r3, #128	; 0x80
        nextDiv = Buf[i];
 80010bc:	f815 4f01 	ldrb.w	r4, [r5, #1]!
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80010c0:	bf18      	it	ne
 80010c2:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            dividend <<= 1;
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 80010ca:	f014 0f80 	tst.w	r4, #128	; 0x80
                dividend |= 0x01;
 80010ce:	bf18      	it	ne
 80010d0:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80010d4:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 80010d8:	ea4f 0844 	mov.w	r8, r4, lsl #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80010dc:	bf18      	it	ne
 80010de:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 80010e2:	fa5f f888 	uxtb.w	r8, r8
            dividend <<= 1;
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 80010ea:	f018 0f80 	tst.w	r8, #128	; 0x80
                dividend |= 0x01;
 80010ee:	bf18      	it	ne
 80010f0:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80010f4:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 80010f8:	ea4f 0884 	mov.w	r8, r4, lsl #2
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80010fc:	bf18      	it	ne
 80010fe:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 8001102:	fa5f f888 	uxtb.w	r8, r8
            dividend <<= 1;
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 800110a:	f018 0f80 	tst.w	r8, #128	; 0x80
                dividend |= 0x01;
 800110e:	bf18      	it	ne
 8001110:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001114:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 8001118:	ea4f 08c4 	mov.w	r8, r4, lsl #3
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 800111c:	bf18      	it	ne
 800111e:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 8001122:	fa5f f888 	uxtb.w	r8, r8
            dividend <<= 1;
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 800112a:	f018 0f80 	tst.w	r8, #128	; 0x80
                dividend |= 0x01;
 800112e:	bf18      	it	ne
 8001130:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001134:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 8001138:	ea4f 1804 	mov.w	r8, r4, lsl #4
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 800113c:	bf18      	it	ne
 800113e:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 8001142:	fa5f f888 	uxtb.w	r8, r8
            dividend <<= 1;
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 800114a:	f018 0f80 	tst.w	r8, #128	; 0x80
                dividend |= 0x01;
 800114e:	bf18      	it	ne
 8001150:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001154:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 8001158:	ea4f 1844 	mov.w	r8, r4, lsl #5
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 800115c:	bf18      	it	ne
 800115e:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 8001162:	fa5f f888 	uxtb.w	r8, r8
            dividend <<= 1;
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 800116a:	f018 0f80 	tst.w	r8, #128	; 0x80
                dividend |= 0x01;
 800116e:	bf18      	it	ne
 8001170:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001174:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 8001178:	ea4f 1884 	mov.w	r8, r4, lsl #6
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 800117c:	bf18      	it	ne
 800117e:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 8001182:	fa5f f888 	uxtb.w	r8, r8
            dividend <<= 1;
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 800118a:	f018 0f80 	tst.w	r8, #128	; 0x80
                dividend |= 0x01;
 800118e:	bf18      	it	ne
 8001190:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001194:	f013 0f80 	tst.w	r3, #128	; 0x80
            if((i == size - 1) && (j == 7))
 8001198:	eba5 0800 	sub.w	r8, r5, r0
            nextDiv <<= 1;
 800119c:	ea4f 14c4 	mov.w	r4, r4, lsl #7
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80011a0:	bf18      	it	ne
 80011a2:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            if((i == size - 1) && (j == 7))
 80011a6:	45b0      	cmp	r8, r6
            nextDiv <<= 1;
 80011a8:	b2e4      	uxtb	r4, r4
            if((i == size - 1) && (j == 7))
 80011aa:	d004      	beq.n	80011b6 <Cmd_Process+0x126>
            dividend <<= 1;
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 80011b0:	b10c      	cbz	r4, 80011b6 <Cmd_Process+0x126>
                dividend |= 0x01;
 80011b2:	f043 0301 	orr.w	r3, r3, #1
    for(uint8_t i = 1; i < size; i++)
 80011b6:	42bd      	cmp	r5, r7
 80011b8:	f47f af7e 	bne.w	80010b8 <Cmd_Process+0x28>
    return dividend << 1;
 80011bc:	005b      	lsls	r3, r3, #1
	if(0 == checkCRC(CmdBuf, CMDBYTE_DATALEN))
 80011be:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80011c2:	d119      	bne.n	80011f8 <Cmd_Process+0x168>
	if(DEVADDR == devAddr)
 80011c4:	f1be 0f01 	cmp.w	lr, #1
 80011c8:	d113      	bne.n	80011f2 <Cmd_Process+0x162>
	{
		if(RET_OK == Check_DevAddr(CMDBYTE_DEVADDR))
		{
			if(CMDBYTE_FUNCCODE == CmdTable[CMDBYTE_FUNCCODE].FuncCode)
 80011ca:	7845      	ldrb	r5, [r0, #1]
 80011cc:	4b5e      	ldr	r3, [pc, #376]	; (8001348 <Cmd_Process+0x2b8>)
 80011ce:	f813 7035 	ldrb.w	r7, [r3, r5, lsl #3]
 80011d2:	42af      	cmp	r7, r5
 80011d4:	f040 80b5 	bne.w	8001342 <Cmd_Process+0x2b2>
				CmdTable[CMDBYTE_FUNCCODE].FuncHandler(CmdBuf, CMDBYTE_DATALEN, RspBuf, RspLen);
 80011d8:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80011dc:	4615      	mov	r5, r2
 80011de:	460e      	mov	r6, r1
 80011e0:	685f      	ldr	r7, [r3, #4]
 80011e2:	4661      	mov	r1, ip
 80011e4:	4613      	mov	r3, r2
 80011e6:	4632      	mov	r2, r6
 80011e8:	47b8      	blx	r7
			else
				return RET_NO_IMPL;

			if (*RspLen != 0)
 80011ea:	6828      	ldr	r0, [r5, #0]
 80011ec:	b948      	cbnz	r0, 8001202 <Cmd_Process+0x172>
	}
	else
		return RET_CRC_NOK;

	return RET_OK;
}
 80011ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return RET_DEVADDR_NOK;
 80011f2:	200c      	movs	r0, #12
}
 80011f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return RET_CRC_NOK;
 80011f8:	200a      	movs	r0, #10
}
 80011fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    dividend = Buf[0];
 80011fe:	4673      	mov	r3, lr
 8001200:	e7dc      	b.n	80011bc <Cmd_Process+0x12c>
				RspBuf[*RspLen] = 0x00;								// Appending zeros for CRC calculation.
 8001202:	5434      	strb	r4, [r6, r0]
				RspBuf[*RspLen] = GetCRC(RspBuf, (*RspLen)-3);		// Send only the no. of data bytes for CRC calculation.
 8001204:	682f      	ldr	r7, [r5, #0]
    dividend = Buf[0];
 8001206:	7833      	ldrb	r3, [r6, #0]
				RspBuf[*RspLen] = GetCRC(RspBuf, (*RspLen)-3);		// Send only the no. of data bytes for CRC calculation.
 8001208:	b2fa      	uxtb	r2, r7
    size = 4 + len;
 800120a:	1c54      	adds	r4, r2, #1
 800120c:	b2e4      	uxtb	r4, r4
    for(uint8_t i = 1; i < size; i++)
 800120e:	2c01      	cmp	r4, #1
 8001210:	f240 8088 	bls.w	8001324 <Cmd_Process+0x294>
 8001214:	3a01      	subs	r2, #1
 8001216:	1c70      	adds	r0, r6, #1
 8001218:	3c01      	subs	r4, #1
 800121a:	fa50 f082 	uxtab	r0, r0, r2
 800121e:	4631      	mov	r1, r6
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001220:	f013 0f80 	tst.w	r3, #128	; 0x80
        nextDiv = Buf[i];
 8001224:	f811 2f01 	ldrb.w	r2, [r1, #1]!
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001228:	bf18      	it	ne
 800122a:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            dividend <<= 1;
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 8001232:	f012 0f80 	tst.w	r2, #128	; 0x80
                dividend |= 0x01;
 8001236:	bf18      	it	ne
 8001238:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 800123c:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 8001240:	ea4f 0c42 	mov.w	ip, r2, lsl #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001244:	bf18      	it	ne
 8001246:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 800124a:	fa5f fc8c 	uxtb.w	ip, ip
            dividend <<= 1;
 800124e:	005b      	lsls	r3, r3, #1
 8001250:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 8001252:	f01c 0f80 	tst.w	ip, #128	; 0x80
                dividend |= 0x01;
 8001256:	bf18      	it	ne
 8001258:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 800125c:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 8001260:	ea4f 0c82 	mov.w	ip, r2, lsl #2
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001264:	bf18      	it	ne
 8001266:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 800126a:	fa5f fc8c 	uxtb.w	ip, ip
            dividend <<= 1;
 800126e:	005b      	lsls	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 8001272:	f01c 0f80 	tst.w	ip, #128	; 0x80
                dividend |= 0x01;
 8001276:	bf18      	it	ne
 8001278:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 800127c:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 8001280:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001284:	bf18      	it	ne
 8001286:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 800128a:	fa5f fc8c 	uxtb.w	ip, ip
            dividend <<= 1;
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 8001292:	f01c 0f80 	tst.w	ip, #128	; 0x80
                dividend |= 0x01;
 8001296:	bf18      	it	ne
 8001298:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 800129c:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 80012a0:	ea4f 1c02 	mov.w	ip, r2, lsl #4
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80012a4:	bf18      	it	ne
 80012a6:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 80012aa:	fa5f fc8c 	uxtb.w	ip, ip
            dividend <<= 1;
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 80012b2:	f01c 0f80 	tst.w	ip, #128	; 0x80
                dividend |= 0x01;
 80012b6:	bf18      	it	ne
 80012b8:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80012bc:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 80012c0:	ea4f 1c42 	mov.w	ip, r2, lsl #5
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80012c4:	bf18      	it	ne
 80012c6:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 80012ca:	fa5f fc8c 	uxtb.w	ip, ip
            dividend <<= 1;
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 80012d2:	f01c 0f80 	tst.w	ip, #128	; 0x80
                dividend |= 0x01;
 80012d6:	bf18      	it	ne
 80012d8:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80012dc:	f013 0f80 	tst.w	r3, #128	; 0x80
            nextDiv <<= 1;
 80012e0:	ea4f 1c82 	mov.w	ip, r2, lsl #6
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80012e4:	bf18      	it	ne
 80012e6:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            nextDiv <<= 1;
 80012ea:	fa5f fc8c 	uxtb.w	ip, ip
            dividend <<= 1;
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 80012f2:	f01c 0f80 	tst.w	ip, #128	; 0x80
                dividend |= 0x01;
 80012f6:	bf18      	it	ne
 80012f8:	f043 0301 	orrne.w	r3, r3, #1
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 80012fc:	f013 0f80 	tst.w	r3, #128	; 0x80
            if((i == size - 1) && (j == 7))
 8001300:	eba1 0c06 	sub.w	ip, r1, r6
            nextDiv <<= 1;
 8001304:	ea4f 12c2 	mov.w	r2, r2, lsl #7
            dividend = (dividend & 0x80) ? (dividend ^ CRC_POL) : (dividend ^ 0);
 8001308:	bf18      	it	ne
 800130a:	f083 03db 	eorne.w	r3, r3, #219	; 0xdb
            if((i == size - 1) && (j == 7))
 800130e:	45a4      	cmp	ip, r4
            nextDiv <<= 1;
 8001310:	b2d2      	uxtb	r2, r2
            if((i == size - 1) && (j == 7))
 8001312:	d004      	beq.n	800131e <Cmd_Process+0x28e>
            dividend <<= 1;
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
            if(nextDiv & 0x80)
 8001318:	b10a      	cbz	r2, 800131e <Cmd_Process+0x28e>
                dividend |= 0x01;
 800131a:	f043 0301 	orr.w	r3, r3, #1
    for(uint8_t i = 1; i < size; i++)
 800131e:	4288      	cmp	r0, r1
 8001320:	f47f af7e 	bne.w	8001220 <Cmd_Process+0x190>
    return dividend << 1;
 8001324:	005b      	lsls	r3, r3, #1
				RspBuf[*RspLen] = GetCRC(RspBuf, (*RspLen)-3);		// Send only the no. of data bytes for CRC calculation.
 8001326:	55f3      	strb	r3, [r6, r7]
				*RspLen += 1;										// +1 for CRC byte.
 8001328:	682a      	ldr	r2, [r5, #0]
				HAL_UART_Transmit(&huart_MD, RspBuf, *RspLen, 500);
 800132a:	4808      	ldr	r0, [pc, #32]	; (800134c <Cmd_Process+0x2bc>)
				*RspLen += 1;										// +1 for CRC byte.
 800132c:	3201      	adds	r2, #1
 800132e:	602a      	str	r2, [r5, #0]
				HAL_UART_Transmit(&huart_MD, RspBuf, *RspLen, 500);
 8001330:	4631      	mov	r1, r6
 8001332:	b292      	uxth	r2, r2
 8001334:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001338:	f005 f9e8 	bl	800670c <HAL_UART_Transmit>
	return RET_OK;
 800133c:	2000      	movs	r0, #0
}
 800133e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return RET_NO_IMPL;
 8001342:	2006      	movs	r0, #6
 8001344:	e753      	b.n	80011ee <Cmd_Process+0x15e>
 8001346:	bf00      	nop
 8001348:	080089a4 	.word	0x080089a4
 800134c:	2000047c 	.word	0x2000047c

08001350 <Send_ErrorMsg>:
void Send_ErrorMsg(uint8_t stdRet)
{
	HAL_UART_Transmit(&huart_MD, (uint8_t *)Error_msg[stdRet], strlen(Error_msg[stdRet]), 100);
 8001350:	4b07      	ldr	r3, [pc, #28]	; (8001370 <Send_ErrorMsg+0x20>)
{
 8001352:	b510      	push	{r4, lr}
	HAL_UART_Transmit(&huart_MD, (uint8_t *)Error_msg[stdRet], strlen(Error_msg[stdRet]), 100);
 8001354:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8001358:	4620      	mov	r0, r4
 800135a:	f7fe ff5d 	bl	8000218 <strlen>
 800135e:	4621      	mov	r1, r4
 8001360:	b282      	uxth	r2, r0
 8001362:	2364      	movs	r3, #100	; 0x64
 8001364:	4803      	ldr	r0, [pc, #12]	; (8001374 <Send_ErrorMsg+0x24>)
}
 8001366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart_MD, (uint8_t *)Error_msg[stdRet], strlen(Error_msg[stdRet]), 100);
 800136a:	f005 b9cf 	b.w	800670c <HAL_UART_Transmit>
 800136e:	bf00      	nop
 8001370:	20000000 	.word	0x20000000
 8001374:	2000047c 	.word	0x2000047c

08001378 <Motor_Init>:
	Motor.zeroPosition -= Motor.distance * ((Motor.direction) ? 1 : -1);
}

/* Initialize/Reset Motor Parameters */
bool Motor_Init(void)
{
 8001378:	b508      	push	{r3, lr}
}

/* Stop Vertical Movement */
bool Motor_Stop(bool ready)
{
	MC_StopMotor1();
 800137a:	f000 fd2b 	bl	8001dd4 <MC_StopMotor1>
	HAL_Delay(1000);
 800137e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001382:	f002 faa9 	bl	80038d8 <HAL_Delay>
	Motor.distance = 0;
 8001386:	4b04      	ldr	r3, [pc, #16]	; (8001398 <Motor_Init+0x20>)
 8001388:	2200      	movs	r2, #0
	Motor.direction = 0;
 800138a:	2100      	movs	r1, #0
 800138c:	7219      	strb	r1, [r3, #8]
	Motor.distance = 0;
 800138e:	601a      	str	r2, [r3, #0]
	Motor.speed = 0;
 8001390:	605a      	str	r2, [r3, #4]
	Motor.zeroPosition = 0;
 8001392:	60da      	str	r2, [r3, #12]
}
 8001394:	2001      	movs	r0, #1
 8001396:	bd08      	pop	{r3, pc}
 8001398:	20000468 	.word	0x20000468

0800139c <Motor_SetDistance>:
	Motor.distance = distance;
 800139c:	4b02      	ldr	r3, [pc, #8]	; (80013a8 <Motor_SetDistance+0xc>)
}
 800139e:	2001      	movs	r0, #1
	Motor.distance = distance;
 80013a0:	ed83 0a00 	vstr	s0, [r3]
}
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	20000468 	.word	0x20000468

080013ac <Motor_GetDistance>:
	return Motor.distance;
 80013ac:	4b01      	ldr	r3, [pc, #4]	; (80013b4 <Motor_GetDistance+0x8>)
}
 80013ae:	ed93 0a00 	vldr	s0, [r3]
 80013b2:	4770      	bx	lr
 80013b4:	20000468 	.word	0x20000468

080013b8 <Motor_SetSpeed>:
	Motor.speed = speed;
 80013b8:	4b02      	ldr	r3, [pc, #8]	; (80013c4 <Motor_SetSpeed+0xc>)
}
 80013ba:	2001      	movs	r0, #1
	Motor.speed = speed;
 80013bc:	ed83 0a01 	vstr	s0, [r3, #4]
}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000468 	.word	0x20000468

080013c8 <Motor_GetSpeed>:
	return Motor.speed;
 80013c8:	4b01      	ldr	r3, [pc, #4]	; (80013d0 <Motor_GetSpeed+0x8>)
}
 80013ca:	ed93 0a01 	vldr	s0, [r3, #4]
 80013ce:	4770      	bx	lr
 80013d0:	20000468 	.word	0x20000468

080013d4 <Motor_SetDirection>:
	Motor.direction = dir;
 80013d4:	4b01      	ldr	r3, [pc, #4]	; (80013dc <Motor_SetDirection+0x8>)
 80013d6:	7218      	strb	r0, [r3, #8]
}
 80013d8:	2001      	movs	r0, #1
 80013da:	4770      	bx	lr
 80013dc:	20000468 	.word	0x20000468

080013e0 <Motor_GetDirection>:
	return Motor.direction;
 80013e0:	4b01      	ldr	r3, [pc, #4]	; (80013e8 <Motor_GetDirection+0x8>)
}
 80013e2:	7a18      	ldrb	r0, [r3, #8]
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	20000468 	.word	0x20000468

080013ec <Motor_SetZeroPos>:
	Motor.zeroPosition = dist;
 80013ec:	4b02      	ldr	r3, [pc, #8]	; (80013f8 <Motor_SetZeroPos+0xc>)
}
 80013ee:	2001      	movs	r0, #1
	Motor.zeroPosition = dist;
 80013f0:	ed83 0a03 	vstr	s0, [r3, #12]
}
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	20000468 	.word	0x20000468

080013fc <Motor_GetZeroPos>:
	return Motor.zeroPosition;
 80013fc:	4b01      	ldr	r3, [pc, #4]	; (8001404 <Motor_GetZeroPos+0x8>)
}
 80013fe:	ed93 0a03 	vldr	s0, [r3, #12]
 8001402:	4770      	bx	lr
 8001404:	20000468 	.word	0x20000468

08001408 <Motor_ResetParams>:
{
 8001408:	b508      	push	{r3, lr}
	MC_StopMotor1();
 800140a:	f000 fce3 	bl	8001dd4 <MC_StopMotor1>
	HAL_Delay(1000);
 800140e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001412:	f002 fa61 	bl	80038d8 <HAL_Delay>
	Motor.distance = 0;
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <Motor_ResetParams+0x20>)
 8001418:	2200      	movs	r2, #0
	Motor.direction = 0;
 800141a:	2100      	movs	r1, #0
 800141c:	7219      	strb	r1, [r3, #8]
	Motor.distance = 0;
 800141e:	601a      	str	r2, [r3, #0]
	Motor.speed = 0;
 8001420:	605a      	str	r2, [r3, #4]
	Motor.zeroPosition = 0;
 8001422:	60da      	str	r2, [r3, #12]
}
 8001424:	2001      	movs	r0, #1
 8001426:	bd08      	pop	{r3, pc}
 8001428:	20000468 	.word	0x20000468

0800142c <Motor_ResetDriveParams>:
	FOC_Init();
 800142c:	f001 b832 	b.w	8002494 <FOC_Init>

08001430 <Motor_Start>:
{
 8001430:	b508      	push	{r3, lr}
	MC_StartMotor1();
 8001432:	f000 fcc9 	bl	8001dc8 <MC_StartMotor1>
	HAL_Delay(1500);
 8001436:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800143a:	f002 fa4d 	bl	80038d8 <HAL_Delay>
	while(MC_GetAlignmentStatusMotor1() != TC_ALIGNMENT_COMPLETED){}
 800143e:	f000 fcdb 	bl	8001df8 <MC_GetAlignmentStatusMotor1>
 8001442:	2802      	cmp	r0, #2
 8001444:	d1fb      	bne.n	800143e <Motor_Start+0xe>
}
 8001446:	2001      	movs	r0, #1
 8001448:	bd08      	pop	{r3, pc}
 800144a:	bf00      	nop

0800144c <Motor_Stop>:
{
 800144c:	b510      	push	{r4, lr}
 800144e:	4604      	mov	r4, r0
	MC_StopMotor1();
 8001450:	f000 fcc0 	bl	8001dd4 <MC_StopMotor1>
	HAL_Delay(1000);
 8001454:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001458:	f002 fa3e 	bl	80038d8 <HAL_Delay>

	if(ready)
 800145c:	b90c      	cbnz	r4, 8001462 <Motor_Stop+0x16>
		Motor_Start();

	return true;
}
 800145e:	2001      	movs	r0, #1
 8001460:	bd10      	pop	{r4, pc}
	MC_StartMotor1();
 8001462:	f000 fcb1 	bl	8001dc8 <MC_StartMotor1>
	HAL_Delay(1500);
 8001466:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800146a:	f002 fa35 	bl	80038d8 <HAL_Delay>
	while(MC_GetAlignmentStatusMotor1() != TC_ALIGNMENT_COMPLETED){}
 800146e:	f000 fcc3 	bl	8001df8 <MC_GetAlignmentStatusMotor1>
 8001472:	2802      	cmp	r0, #2
 8001474:	d1fb      	bne.n	800146e <Motor_Stop+0x22>
}
 8001476:	2001      	movs	r0, #1
 8001478:	bd10      	pop	{r4, pc}
 800147a:	bf00      	nop
 800147c:	0000      	movs	r0, r0
	...

08001480 <Motor_Run>:

/* Start the Vertical Movement (post Motor_Start()) */
bool Motor_Run(bool updateZeroPos)
{
 8001480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	float rot = 0, set_rot = 0;
	float pos = 0, time = 0;

	rot = (Motor.distance) * (GEAR_RATIO / MM_PER_THREAD);
 8001484:	4c36      	ldr	r4, [pc, #216]	; (8001560 <Motor_Run+0xe0>)
 8001486:	eddf 7a37 	vldr	s15, [pc, #220]	; 8001564 <Motor_Run+0xe4>
{
 800148a:	ed2d 8b02 	vpush	{d8}
	rot = (Motor.distance) * (GEAR_RATIO / MM_PER_THREAD);
 800148e:	edd4 8a00 	vldr	s17, [r4]
	set_rot = (rot + 0.058) / 1.5001;
 8001492:	ee68 7aa7 	vmul.f32	s15, s17, s15
{
 8001496:	4605      	mov	r5, r0
	set_rot = (rot + 0.058) / 1.5001;
 8001498:	ee17 0a90 	vmov	r0, s15
 800149c:	f7ff f828 	bl	80004f0 <__aeabi_f2d>
 80014a0:	a329      	add	r3, pc, #164	; (adr r3, 8001548 <Motor_Run+0xc8>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7fe fec5 	bl	8000234 <__adddf3>
 80014aa:	a329      	add	r3, pc, #164	; (adr r3, 8001550 <Motor_Run+0xd0>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f876 	bl	80005a0 <__aeabi_dmul>
 80014b4:	f7ff fa86 	bl	80009c4 <__aeabi_d2f>
	pos = (set_rot * 2 * M_PI) * ((Motor.direction) ? 1 : -1);
 80014b8:	ee07 0a90 	vmov	s15, r0
 80014bc:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80014c0:	2600      	movs	r6, #0
 80014c2:	ee17 0a90 	vmov	r0, s15
 80014c6:	f7ff f813 	bl	80004f0 <__aeabi_f2d>
 80014ca:	7a23      	ldrb	r3, [r4, #8]
 80014cc:	4680      	mov	r8, r0
 80014ce:	4689      	mov	r9, r1
 80014d0:	b39b      	cbz	r3, 800153a <Motor_Run+0xba>
 80014d2:	4f25      	ldr	r7, [pc, #148]	; (8001568 <Motor_Run+0xe8>)
	time = 60.0 * (Motor.distance / Motor.speed);
 80014d4:	edd4 7a01 	vldr	s15, [r4, #4]
 80014d8:	eddf 0a24 	vldr	s1, [pc, #144]	; 800156c <Motor_Run+0xec>
 80014dc:	ee88 8aa7 	vdiv.f32	s16, s17, s15

	HAL_Delay(500);
 80014e0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	time = 60.0 * (Motor.distance / Motor.speed);
 80014e4:	ee28 8a20 	vmul.f32	s16, s16, s1
	HAL_Delay(500);
 80014e8:	f002 f9f6 	bl	80038d8 <HAL_Delay>
	pos = (set_rot * 2 * M_PI) * ((Motor.direction) ? 1 : -1);
 80014ec:	a31a      	add	r3, pc, #104	; (adr r3, 8001558 <Motor_Run+0xd8>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	4640      	mov	r0, r8
 80014f4:	4649      	mov	r1, r9
 80014f6:	f7ff f853 	bl	80005a0 <__aeabi_dmul>
 80014fa:	463b      	mov	r3, r7
 80014fc:	4632      	mov	r2, r6
 80014fe:	f7ff f84f 	bl	80005a0 <__aeabi_dmul>
 8001502:	f7ff fa5f 	bl	80009c4 <__aeabi_d2f>

	MC_ProgramPositionCommandMotor1(pos, time);
 8001506:	eef0 0a48 	vmov.f32	s1, s16
 800150a:	ee00 0a10 	vmov	s0, r0
 800150e:	f000 fc67 	bl	8001de0 <MC_ProgramPositionCommandMotor1>
	sendSpeed.prev_time_send = HAL_GetTick();
 8001512:	f002 f9db 	bl	80038cc <HAL_GetTick>
 8001516:	4b16      	ldr	r3, [pc, #88]	; (8001570 <Motor_Run+0xf0>)
 8001518:	6018      	str	r0, [r3, #0]

	if(updateZeroPos)
 800151a:	b14d      	cbz	r5, 8001530 <Motor_Run+0xb0>
	Motor.zeroPosition -= Motor.distance * ((Motor.direction) ? 1 : -1);
 800151c:	7a23      	ldrb	r3, [r4, #8]
 800151e:	edd4 7a03 	vldr	s15, [r4, #12]
 8001522:	ed94 7a00 	vldr	s14, [r4]
 8001526:	b153      	cbz	r3, 800153e <Motor_Run+0xbe>
 8001528:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800152c:	edc4 7a03 	vstr	s15, [r4, #12]
		Update_ZeroPos();

	return true;
}
 8001530:	ecbd 8b02 	vpop	{d8}
 8001534:	2001      	movs	r0, #1
 8001536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	pos = (set_rot * 2 * M_PI) * ((Motor.direction) ? 1 : -1);
 800153a:	4f0e      	ldr	r7, [pc, #56]	; (8001574 <Motor_Run+0xf4>)
 800153c:	e7ca      	b.n	80014d4 <Motor_Run+0x54>
 800153e:	eeb1 7a47 	vneg.f32	s14, s14
 8001542:	e7f1      	b.n	8001528 <Motor_Run+0xa8>
 8001544:	f3af 8000 	nop.w
 8001548:	0e560419 	.word	0x0e560419
 800154c:	3fadb22d 	.word	0x3fadb22d
 8001550:	21fe99c3 	.word	0x21fe99c3
 8001554:	3fe554f8 	.word	0x3fe554f8
 8001558:	54442d18 	.word	0x54442d18
 800155c:	400921fb 	.word	0x400921fb
 8001560:	20000468 	.word	0x20000468
 8001564:	3f972e5d 	.word	0x3f972e5d
 8001568:	3ff00000 	.word	0x3ff00000
 800156c:	42700000 	.word	0x42700000
 8001570:	20000478 	.word	0x20000478
 8001574:	bff00000 	.word	0xbff00000

08001578 <Motor_SetZero>:

bool Motor_SetZero(void)
{
	Motor.zeroPosition = 0;
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <Motor_SetZero+0xc>)
 800157a:	2200      	movs	r2, #0
	return true;
}
 800157c:	2001      	movs	r0, #1
	Motor.zeroPosition = 0;
 800157e:	60da      	str	r2, [r3, #12]
}
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	20000468 	.word	0x20000468

08001588 <Motor_RTZ>:

bool Motor_RTZ(void)
{
 8001588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	bool prevDir = 0;
	float prevDist = 0;
	float prevSpeed = 0;

	prevDir = Motor.direction;
 800158c:	4c40      	ldr	r4, [pc, #256]	; (8001690 <Motor_RTZ+0x108>)
	rot = (Motor.distance) * (GEAR_RATIO / MM_PER_THREAD);
 800158e:	eddf 7a41 	vldr	s15, [pc, #260]	; 8001694 <Motor_RTZ+0x10c>
	prevDist = Motor.distance;
	prevSpeed = Motor.speed;

	Motor.distance = fabs(Motor.zeroPosition);
	Motor.direction = (Motor.zeroPosition < 0) ? 0 : 1;
	Motor.speed = 1000.0;
 8001592:	4b41      	ldr	r3, [pc, #260]	; (8001698 <Motor_RTZ+0x110>)
	prevSpeed = Motor.speed;
 8001594:	6865      	ldr	r5, [r4, #4]
	Motor.speed = 1000.0;
 8001596:	6063      	str	r3, [r4, #4]
{
 8001598:	ed2d 8b02 	vpush	{d8}
	Motor.distance = fabs(Motor.zeroPosition);
 800159c:	edd4 8a03 	vldr	s17, [r4, #12]
	prevDist = Motor.distance;
 80015a0:	f8d4 a000 	ldr.w	sl, [r4]
	prevDir = Motor.direction;
 80015a4:	f894 b008 	ldrb.w	fp, [r4, #8]
	Motor.direction = (Motor.zeroPosition < 0) ? 0 : 1;
 80015a8:	eef5 8ac0 	vcmpe.f32	s17, #0.0
	Motor.distance = fabs(Motor.zeroPosition);
 80015ac:	eeb0 8ae8 	vabs.f32	s16, s17
	Motor.direction = (Motor.zeroPosition < 0) ? 0 : 1;
 80015b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	set_rot = (rot + 0.058) / 1.5001;
 80015b4:	ee68 7a27 	vmul.f32	s15, s16, s15
	Motor.direction = (Motor.zeroPosition < 0) ? 0 : 1;
 80015b8:	bfac      	ite	ge
 80015ba:	2301      	movge	r3, #1
 80015bc:	2300      	movlt	r3, #0
	set_rot = (rot + 0.058) / 1.5001;
 80015be:	ee17 0a90 	vmov	r0, s15
	Motor.distance = fabs(Motor.zeroPosition);
 80015c2:	ed84 8a00 	vstr	s16, [r4]
	Motor.direction = (Motor.zeroPosition < 0) ? 0 : 1;
 80015c6:	7223      	strb	r3, [r4, #8]
	set_rot = (rot + 0.058) / 1.5001;
 80015c8:	f7fe ff92 	bl	80004f0 <__aeabi_f2d>
 80015cc:	a32a      	add	r3, pc, #168	; (adr r3, 8001678 <Motor_RTZ+0xf0>)
 80015ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015d2:	f7fe fe2f 	bl	8000234 <__adddf3>
 80015d6:	a32a      	add	r3, pc, #168	; (adr r3, 8001680 <Motor_RTZ+0xf8>)
 80015d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015dc:	f7fe ffe0 	bl	80005a0 <__aeabi_dmul>
 80015e0:	f7ff f9f0 	bl	80009c4 <__aeabi_d2f>
	pos = (set_rot * 2 * M_PI) * ((Motor.direction) ? 1 : -1);
 80015e4:	ee07 0a90 	vmov	s15, r0
 80015e8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80015ec:	2600      	movs	r6, #0
 80015ee:	ee17 0a90 	vmov	r0, s15
 80015f2:	f7fe ff7d 	bl	80004f0 <__aeabi_f2d>
 80015f6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80015fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015fe:	4680      	mov	r8, r0
	HAL_Delay(500);
 8001600:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
	pos = (set_rot * 2 * M_PI) * ((Motor.direction) ? 1 : -1);
 8001604:	bfac      	ite	ge
 8001606:	4f25      	ldrge	r7, [pc, #148]	; (800169c <Motor_RTZ+0x114>)
 8001608:	4f25      	ldrlt	r7, [pc, #148]	; (80016a0 <Motor_RTZ+0x118>)
 800160a:	4689      	mov	r9, r1
	HAL_Delay(500);
 800160c:	f002 f964 	bl	80038d8 <HAL_Delay>
	time = 60.0 * (Motor.distance / Motor.speed);
 8001610:	eddf 0a24 	vldr	s1, [pc, #144]	; 80016a4 <Motor_RTZ+0x11c>
	pos = (set_rot * 2 * M_PI) * ((Motor.direction) ? 1 : -1);
 8001614:	a31c      	add	r3, pc, #112	; (adr r3, 8001688 <Motor_RTZ+0x100>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	4640      	mov	r0, r8
 800161c:	4649      	mov	r1, r9
	time = 60.0 * (Motor.distance / Motor.speed);
 800161e:	ee28 8a20 	vmul.f32	s16, s16, s1
	pos = (set_rot * 2 * M_PI) * ((Motor.direction) ? 1 : -1);
 8001622:	f7fe ffbd 	bl	80005a0 <__aeabi_dmul>
 8001626:	4632      	mov	r2, r6
 8001628:	463b      	mov	r3, r7
 800162a:	f7fe ffb9 	bl	80005a0 <__aeabi_dmul>
 800162e:	f7ff f9c9 	bl	80009c4 <__aeabi_d2f>
	MC_ProgramPositionCommandMotor1(pos, time);
 8001632:	eef0 0a48 	vmov.f32	s1, s16
 8001636:	ee00 0a10 	vmov	s0, r0
 800163a:	f000 fbd1 	bl	8001de0 <MC_ProgramPositionCommandMotor1>
	sendSpeed.prev_time_send = HAL_GetTick();
 800163e:	f002 f945 	bl	80038cc <HAL_GetTick>
 8001642:	4a19      	ldr	r2, [pc, #100]	; (80016a8 <Motor_RTZ+0x120>)
	Motor.zeroPosition -= Motor.distance * ((Motor.direction) ? 1 : -1);
 8001644:	7a23      	ldrb	r3, [r4, #8]
	sendSpeed.prev_time_send = HAL_GetTick();
 8001646:	6010      	str	r0, [r2, #0]
	Motor.zeroPosition -= Motor.distance * ((Motor.direction) ? 1 : -1);
 8001648:	edd4 7a03 	vldr	s15, [r4, #12]
 800164c:	ed94 7a00 	vldr	s14, [r4]
 8001650:	b90b      	cbnz	r3, 8001656 <Motor_RTZ+0xce>
 8001652:	eeb1 7a47 	vneg.f32	s14, s14
		Motor.distance = prevDist;
		Motor.speed = prevSpeed;
	}

	return true;
}
 8001656:	ecbd 8b02 	vpop	{d8}
	Motor.zeroPosition -= Motor.distance * ((Motor.direction) ? 1 : -1);
 800165a:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 800165e:	2001      	movs	r0, #1
		Motor.direction = prevDir;
 8001660:	f884 b008 	strb.w	fp, [r4, #8]
	Motor.zeroPosition -= Motor.distance * ((Motor.direction) ? 1 : -1);
 8001664:	edc4 7a03 	vstr	s15, [r4, #12]
		Motor.distance = prevDist;
 8001668:	f8c4 a000 	str.w	sl, [r4]
		Motor.speed = prevSpeed;
 800166c:	6065      	str	r5, [r4, #4]
}
 800166e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001672:	bf00      	nop
 8001674:	f3af 8000 	nop.w
 8001678:	0e560419 	.word	0x0e560419
 800167c:	3fadb22d 	.word	0x3fadb22d
 8001680:	21fe99c3 	.word	0x21fe99c3
 8001684:	3fe554f8 	.word	0x3fe554f8
 8001688:	54442d18 	.word	0x54442d18
 800168c:	400921fb 	.word	0x400921fb
 8001690:	20000468 	.word	0x20000468
 8001694:	3f972e5d 	.word	0x3f972e5d
 8001698:	447a0000 	.word	0x447a0000
 800169c:	3ff00000 	.word	0x3ff00000
 80016a0:	bff00000 	.word	0xbff00000
 80016a4:	3d75c290 	.word	0x3d75c290
 80016a8:	20000478 	.word	0x20000478

080016ac <Motor_GetRunTick>:

unsigned long Motor_GetRunTick(void)
{
	return sendSpeed.prev_time_send;
 80016ac:	4b01      	ldr	r3, [pc, #4]	; (80016b4 <Motor_GetRunTick+0x8>)
}
 80016ae:	6818      	ldr	r0, [r3, #0]
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	20000478 	.word	0x20000478

080016b8 <Motor_SetRunTick>:

void Motor_SetRunTick(unsigned long val)
{
	sendSpeed.prev_time_send = val;
 80016b8:	4b01      	ldr	r3, [pc, #4]	; (80016c0 <Motor_SetRunTick+0x8>)
 80016ba:	6018      	str	r0, [r3, #0]
}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000478 	.word	0x20000478

080016c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c4:	b510      	push	{r4, lr}
 80016c6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c8:	2238      	movs	r2, #56	; 0x38
 80016ca:	2100      	movs	r1, #0
 80016cc:	a806      	add	r0, sp, #24
 80016ce:	f007 f916 	bl	80088fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d2:	2300      	movs	r3, #0

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016d4:	4618      	mov	r0, r3
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d6:	e9cd 3301 	strd	r3, r3, [sp, #4]
 80016da:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80016de:	9305      	str	r3, [sp, #20]
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016e0:	f003 f9c0 	bl	8004a64 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016e4:	2302      	movs	r3, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016e6:	2101      	movs	r1, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016ec:	2403      	movs	r4, #3
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016ee:	9106      	str	r1, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016f0:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80016f2:	2106      	movs	r1, #6
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016f4:	2255      	movs	r2, #85	; 0x55
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016f6:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016f8:	e9cd 3312 	strd	r3, r3, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fc:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80016fe:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001700:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001704:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001708:	f003 fa32 	bl	8004b70 <HAL_RCC_OscConfig>
 800170c:	b108      	cbz	r0, 8001712 <SystemClock_Config+0x4e>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800170e:	b672      	cpsid	i
 8001710:	e7fe      	b.n	8001710 <SystemClock_Config+0x4c>
 8001712:	4603      	mov	r3, r0
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001714:	220f      	movs	r2, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001716:	a801      	add	r0, sp, #4
 8001718:	2104      	movs	r1, #4
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800171a:	e9cd 4302 	strd	r4, r3, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171e:	e9cd 3304 	strd	r3, r3, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001722:	9201      	str	r2, [sp, #4]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001724:	f003 fc72 	bl	800500c <HAL_RCC_ClockConfig>
 8001728:	b108      	cbz	r0, 800172e <SystemClock_Config+0x6a>
 800172a:	b672      	cpsid	i
 800172c:	e7fe      	b.n	800172c <SystemClock_Config+0x68>
    Error_Handler();
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800172e:	f003 fe3d 	bl	80053ac <HAL_RCC_EnableCSS>
}
 8001732:	b014      	add	sp, #80	; 0x50
 8001734:	bd10      	pop	{r4, pc}
 8001736:	bf00      	nop

08001738 <main>:
{
 8001738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800173c:	ed2d 8b04 	vpush	{d8-d9}
 8001740:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001744:	2700      	movs	r7, #0
  HAL_Init();
 8001746:	f002 f899 	bl	800387c <HAL_Init>
  SystemClock_Config();
 800174a:	f7ff ffbb 	bl	80016c4 <SystemClock_Config>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	4ba6      	ldr	r3, [pc, #664]	; (80019e8 <main+0x2b0>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001750:	9751      	str	r7, [sp, #324]	; 0x144
 8001752:	9750      	str	r7, [sp, #320]	; 0x140
 8001754:	9752      	str	r7, [sp, #328]	; 0x148
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001756:	6cda      	ldr	r2, [r3, #76]	; 0x4c

  /*Configure GPIO pin : Start_Stop_Pin */
  GPIO_InitStruct.Pin = Start_Stop_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001758:	48a4      	ldr	r0, [pc, #656]	; (80019ec <main+0x2b4>)
  hadc1.Instance = ADC1;
 800175a:	4ea5      	ldr	r6, [pc, #660]	; (80019f0 <main+0x2b8>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175c:	f042 0204 	orr.w	r2, r2, #4
 8001760:	64da      	str	r2, [r3, #76]	; 0x4c
 8001762:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001764:	f002 0204 	and.w	r2, r2, #4
 8001768:	9203      	str	r2, [sp, #12]
 800176a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800176c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800176e:	f042 0220 	orr.w	r2, r2, #32
 8001772:	64da      	str	r2, [r3, #76]	; 0x4c
 8001774:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001776:	f002 0220 	and.w	r2, r2, #32
 800177a:	9204      	str	r2, [sp, #16]
 800177c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001780:	f042 0201 	orr.w	r2, r2, #1
 8001784:	64da      	str	r2, [r3, #76]	; 0x4c
 8001786:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001788:	f002 0201 	and.w	r2, r2, #1
 800178c:	9205      	str	r2, [sp, #20]
 800178e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001790:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001792:	f042 0202 	orr.w	r2, r2, #2
 8001796:	64da      	str	r2, [r3, #76]	; 0x4c
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179a:	ac4e      	add	r4, sp, #312	; 0x138
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800179c:	f003 0302 	and.w	r3, r3, #2
 80017a0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 80017a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017a6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80017aa:	4621      	mov	r1, r4
  ADC_MultiModeTypeDef multimode = {0};
 80017ac:	ad0a      	add	r5, sp, #40	; 0x28
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017ae:	e9c4 2300 	strd	r2, r3, [r4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	f8dd c018 	ldr.w	ip, [sp, #24]
  ADC_ChannelConfTypeDef sConfig = {0};
 80017b6:	f04f 0920 	mov.w	r9, #32
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80017ba:	f003 f86d 	bl	8004898 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80017be:	4639      	mov	r1, r7
 80017c0:	223c      	movs	r2, #60	; 0x3c
 80017c2:	4620      	mov	r0, r4
  ADC_MultiModeTypeDef multimode = {0};
 80017c4:	e9c5 7700 	strd	r7, r7, [r5]
 80017c8:	60af      	str	r7, [r5, #8]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80017ca:	f007 f898 	bl	80088fe <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80017ce:	4639      	mov	r1, r7
 80017d0:	464a      	mov	r2, r9
 80017d2:	a80e      	add	r0, sp, #56	; 0x38
 80017d4:	f007 f893 	bl	80088fe <memset>
  hadc1.Instance = ADC1;
 80017d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017dc:	f04f 0804 	mov.w	r8, #4
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80017e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80017e4:	2201      	movs	r2, #1
  hadc1.Instance = ADC1;
 80017e6:	6033      	str	r3, [r6, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017e8:	4630      	mov	r0, r6
  hadc1.Init.NbrOfConversion = 2;
 80017ea:	2302      	movs	r3, #2
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80017ec:	e9c6 7701 	strd	r7, r7, [r6, #4]
  hadc1.Init.GainCompensation = 0;
 80017f0:	6137      	str	r7, [r6, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80017f2:	7737      	strb	r7, [r6, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80017f4:	7777      	strb	r7, [r6, #29]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80017f6:	f886 7024 	strb.w	r7, [r6, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017fa:	e9c6 770b 	strd	r7, r7, [r6, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017fe:	f886 7038 	strb.w	r7, [r6, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001802:	63f7      	str	r7, [r6, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001804:	f886 7040 	strb.w	r7, [r6, #64]	; 0x40
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001808:	60f1      	str	r1, [r6, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800180a:	6172      	str	r2, [r6, #20]
  hadc1.Init.NbrOfConversion = 2;
 800180c:	6233      	str	r3, [r6, #32]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800180e:	f8c6 8018 	str.w	r8, [r6, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001812:	f002 f873 	bl	80038fc <HAL_ADC_Init>
 8001816:	b108      	cbz	r0, 800181c <main+0xe4>
 8001818:	b672      	cpsid	i
 800181a:	e7fe      	b.n	800181a <main+0xe2>
 800181c:	4603      	mov	r3, r0
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800181e:	4629      	mov	r1, r5
 8001820:	4630      	mov	r0, r6
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001822:	602b      	str	r3, [r5, #0]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001824:	f002 fefa 	bl	800461c <HAL_ADCEx_MultiModeConfigChannel>
 8001828:	b108      	cbz	r0, 800182e <main+0xf6>
 800182a:	b672      	cpsid	i
 800182c:	e7fe      	b.n	800182c <main+0xf4>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 800182e:	4a71      	ldr	r2, [pc, #452]	; (80019f4 <main+0x2bc>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001830:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001834:	2309      	movs	r3, #9
 8001836:	e9c4 2300 	strd	r2, r3, [r4]
 800183a:	2201      	movs	r2, #1
 800183c:	237f      	movs	r3, #127	; 0x7f
  sConfigInjected.InjectedNbrOfConversion = 3;
 800183e:	2103      	movs	r1, #3
  sConfigInjected.InjectedChannel = ADC_CHANNEL_1;
 8001840:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8001844:	2204      	movs	r2, #4
 8001846:	2300      	movs	r3, #0
 8001848:	e9c4 2304 	strd	r2, r3, [r4, #16]
  sConfigInjected.AutoInjectedConv = DISABLE;
 800184c:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001850:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001854:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001858:	2280      	movs	r2, #128	; 0x80
 800185a:	2380      	movs	r3, #128	; 0x80
  sConfigInjected.InjectedNbrOfConversion = 3;
 800185c:	6221      	str	r1, [r4, #32]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800185e:	4630      	mov	r0, r6
 8001860:	4621      	mov	r1, r4
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_TRGO;
 8001862:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001866:	f002 fbd5 	bl	8004014 <HAL_ADCEx_InjectedConfigChannel>
 800186a:	b108      	cbz	r0, 8001870 <main+0x138>
 800186c:	b672      	cpsid	i
 800186e:	e7fe      	b.n	800186e <main+0x136>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8001870:	4b61      	ldr	r3, [pc, #388]	; (80019f8 <main+0x2c0>)
 8001872:	6023      	str	r3, [r4, #0]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001874:	4621      	mov	r1, r4
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001876:	f240 130f 	movw	r3, #271	; 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800187a:	4630      	mov	r0, r6
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800187c:	6063      	str	r3, [r4, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800187e:	f002 fbc9 	bl	8004014 <HAL_ADCEx_InjectedConfigChannel>
 8001882:	b108      	cbz	r0, 8001888 <main+0x150>
 8001884:	b672      	cpsid	i
 8001886:	e7fe      	b.n	8001886 <main+0x14e>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <main+0x2c4>)
 800188a:	6023      	str	r3, [r4, #0]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800188c:	4621      	mov	r1, r4
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 800188e:	f240 2315 	movw	r3, #533	; 0x215
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001892:	4630      	mov	r0, r6
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_3;
 8001894:	6063      	str	r3, [r4, #4]
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001896:	f002 fbbd 	bl	8004014 <HAL_ADCEx_InjectedConfigChannel>
 800189a:	b108      	cbz	r0, 80018a0 <main+0x168>
 800189c:	b672      	cpsid	i
 800189e:	e7fe      	b.n	800189e <main+0x166>
  sConfig.Channel = ADC_CHANNEL_2;
 80018a0:	4957      	ldr	r1, [pc, #348]	; (8001a00 <main+0x2c8>)
  sConfig.Offset = 0;
 80018a2:	9013      	str	r0, [sp, #76]	; 0x4c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018a4:	2206      	movs	r2, #6
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018a6:	237f      	movs	r3, #127	; 0x7f
  sConfig.Channel = ADC_CHANNEL_2;
 80018a8:	910e      	str	r1, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018aa:	4630      	mov	r0, r6
 80018ac:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80018ae:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80018b2:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018b6:	920f      	str	r2, [sp, #60]	; 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80018b8:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018ba:	f002 f94b 	bl	8003b54 <HAL_ADC_ConfigChannel>
 80018be:	b108      	cbz	r0, 80018c4 <main+0x18c>
 80018c0:	b672      	cpsid	i
 80018c2:	e7fe      	b.n	80018c2 <main+0x18a>
  sConfig.Channel = ADC_CHANNEL_8;
 80018c4:	4b4f      	ldr	r3, [pc, #316]	; (8001a04 <main+0x2cc>)
 80018c6:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018c8:	4630      	mov	r0, r6
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018ca:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018cc:	a90e      	add	r1, sp, #56	; 0x38
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80018ce:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d0:	f002 f940 	bl	8003b54 <HAL_ADC_ConfigChannel>
 80018d4:	b108      	cbz	r0, 80018da <main+0x1a2>
 80018d6:	b672      	cpsid	i
 80018d8:	e7fe      	b.n	80018d8 <main+0x1a0>
  hcordic.Instance = CORDIC;
 80018da:	484b      	ldr	r0, [pc, #300]	; (8001a08 <main+0x2d0>)
 80018dc:	4b4b      	ldr	r3, [pc, #300]	; (8001a0c <main+0x2d4>)
 80018de:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80018e0:	f002 ff4a 	bl	8004778 <HAL_CORDIC_Init>
 80018e4:	4607      	mov	r7, r0
 80018e6:	b108      	cbz	r0, 80018ec <main+0x1b4>
 80018e8:	b672      	cpsid	i
 80018ea:	e7fe      	b.n	80018ea <main+0x1b2>
  htim1.Instance = TIM1;
 80018ec:	f8df 8120 	ldr.w	r8, [pc, #288]	; 8001a10 <main+0x2d8>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80018f0:	6028      	str	r0, [r5, #0]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f2:	ae07      	add	r6, sp, #28
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018f4:	4601      	mov	r1, r0
 80018f6:	2234      	movs	r2, #52	; 0x34
 80018f8:	4620      	mov	r0, r4
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80018fa:	e9c5 7701 	strd	r7, r7, [r5, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fe:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
 8001902:	e9cd 7710 	strd	r7, r7, [sp, #64]	; 0x40
 8001906:	e9cd 7712 	strd	r7, r7, [sp, #72]	; 0x48
 800190a:	9714      	str	r7, [sp, #80]	; 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800190c:	e9c6 7700 	strd	r7, r7, [r6]
 8001910:	60b7      	str	r7, [r6, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001912:	f006 fff4 	bl	80088fe <memset>
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001916:	2305      	movs	r3, #5
  htim1.Instance = TIM1;
 8001918:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 8001a14 <main+0x2dc>
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800191c:	f8c8 3014 	str.w	r3, [r8, #20]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001920:	f640 3111 	movw	r1, #2833	; 0xb11
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001924:	f44f 7280 	mov.w	r2, #256	; 0x100
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001928:	4640      	mov	r0, r8
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 800192a:	f8c8 7004 	str.w	r7, [r8, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800192e:	f8c8 9008 	str.w	r9, [r8, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001932:	f8c8 7018 	str.w	r7, [r8, #24]
  htim1.Instance = TIM1;
 8001936:	f8c8 c000 	str.w	ip, [r8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800193a:	e9c8 1203 	strd	r1, r2, [r8, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800193e:	f003 fec5 	bl	80056cc <HAL_TIM_PWM_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	b108      	cbz	r0, 800194a <main+0x212>
 8001946:	b672      	cpsid	i
 8001948:	e7fe      	b.n	8001948 <main+0x210>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800194a:	2270      	movs	r2, #112	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800194c:	4640      	mov	r0, r8
 800194e:	4631      	mov	r1, r6
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001950:	e9c6 3301 	strd	r3, r3, [r6, #4]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001954:	6032      	str	r2, [r6, #0]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001956:	f004 faa7 	bl	8005ea8 <HAL_TIMEx_MasterConfigSynchronization>
 800195a:	b108      	cbz	r0, 8001960 <main+0x228>
 800195c:	b672      	cpsid	i
 800195e:	e7fe      	b.n	800195e <main+0x226>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8001960:	f04f 0901 	mov.w	r9, #1
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001964:	4649      	mov	r1, r9
 8001966:	462a      	mov	r2, r5
 8001968:	4829      	ldr	r0, [pc, #164]	; (8001a10 <main+0x2d8>)
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 800196a:	f8c5 9008 	str.w	r9, [r5, #8]
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 800196e:	e9c5 9900 	strd	r9, r9, [r5]
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001972:	f004 fb49 	bl	8006008 <HAL_TIMEx_ConfigBreakInput>
 8001976:	b108      	cbz	r0, 800197c <main+0x244>
 8001978:	b672      	cpsid	i
 800197a:	e7fe      	b.n	800197a <main+0x242>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800197c:	2160      	movs	r1, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800197e:	4602      	mov	r2, r0
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001980:	f44f 6cb1 	mov.w	ip, #1416	; 0x588
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 8001984:	2708      	movs	r7, #8
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001986:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001988:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800198c:	f44f 7300 	mov.w	r3, #512	; 0x200
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001990:	910e      	str	r1, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001992:	481f      	ldr	r0, [pc, #124]	; (8001a10 <main+0x2d8>)
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001994:	f8cd c03c 	str.w	ip, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001998:	a90e      	add	r1, sp, #56	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800199a:	9711      	str	r7, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 800199c:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800199e:	f004 f843 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 80019a2:	b108      	cbz	r0, 80019a8 <main+0x270>
 80019a4:	b672      	cpsid	i
 80019a6:	e7fe      	b.n	80019a6 <main+0x26e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019a8:	2204      	movs	r2, #4
 80019aa:	a90e      	add	r1, sp, #56	; 0x38
 80019ac:	4818      	ldr	r0, [pc, #96]	; (8001a10 <main+0x2d8>)
 80019ae:	f004 f83b 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 80019b2:	b108      	cbz	r0, 80019b8 <main+0x280>
 80019b4:	b672      	cpsid	i
 80019b6:	e7fe      	b.n	80019b6 <main+0x27e>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019b8:	463a      	mov	r2, r7
 80019ba:	a90e      	add	r1, sp, #56	; 0x38
 80019bc:	4814      	ldr	r0, [pc, #80]	; (8001a10 <main+0x2d8>)
 80019be:	f004 f833 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 80019c2:	b108      	cbz	r0, 80019c8 <main+0x290>
 80019c4:	b672      	cpsid	i
 80019c6:	e7fe      	b.n	80019c6 <main+0x28e>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80019c8:	2770      	movs	r7, #112	; 0x70
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80019ca:	f44f 6331 	mov.w	r3, #2832	; 0xb10
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019ce:	9011      	str	r0, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019d0:	9014      	str	r0, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019d2:	220c      	movs	r2, #12
 80019d4:	a90e      	add	r1, sp, #56	; 0x38
 80019d6:	480e      	ldr	r0, [pc, #56]	; (8001a10 <main+0x2d8>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80019d8:	970e      	str	r7, [sp, #56]	; 0x38
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80019da:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019dc:	f004 f824 	bl	8005a28 <HAL_TIM_PWM_ConfigChannel>
 80019e0:	b1d0      	cbz	r0, 8001a18 <main+0x2e0>
 80019e2:	b672      	cpsid	i
 80019e4:	e7fe      	b.n	80019e4 <main+0x2ac>
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	48000800 	.word	0x48000800
 80019f0:	20000510 	.word	0x20000510
 80019f4:	04300002 	.word	0x04300002
 80019f8:	1d500080 	.word	0x1d500080
 80019fc:	19200040 	.word	0x19200040
 8001a00:	08600004 	.word	0x08600004
 8001a04:	21800100 	.word	0x21800100
 8001a08:	2000057c 	.word	0x2000057c
 8001a0c:	40020c00 	.word	0x40020c00
 8001a10:	200005a4 	.word	0x200005a4
 8001a14:	40012c00 	.word	0x40012c00
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001a1c:	2348      	movs	r3, #72	; 0x48
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001a1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001a22:	f44f 6780 	mov.w	r7, #1024	; 0x400
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a26:	60a0      	str	r0, [r4, #8]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001a28:	e9c4 0007 	strd	r0, r0, [r4, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a2c:	e9c4 000b 	strd	r0, r0, [r4, #44]	; 0x2c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001a30:	6022      	str	r2, [r4, #0]
  sBreakDeadTimeConfig.BreakFilter = 3;
 8001a32:	f04f 0a03 	mov.w	sl, #3
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001a3a:	60e3      	str	r3, [r4, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001a3c:	6121      	str	r1, [r4, #16]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a42:	4621      	mov	r1, r4
 8001a44:	48a8      	ldr	r0, [pc, #672]	; (8001ce8 <main+0x5b0>)
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001a46:	6067      	str	r7, [r4, #4]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001a48:	6162      	str	r2, [r4, #20]
  sBreakDeadTimeConfig.BreakFilter = 3;
 8001a4a:	f8c4 a018 	str.w	sl, [r4, #24]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001a4e:	e9c4 3a09 	strd	r3, sl, [r4, #36]	; 0x24
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a52:	f004 fa87 	bl	8005f64 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a56:	4607      	mov	r7, r0
 8001a58:	b108      	cbz	r0, 8001a5e <main+0x326>
 8001a5a:	b672      	cpsid	i
 8001a5c:	e7fe      	b.n	8001a5c <main+0x324>
  htim2.Instance = TIM2;
 8001a5e:	f8df 82a4 	ldr.w	r8, [pc, #676]	; 8001d04 <main+0x5cc>
  HAL_TIM_MspPostInit(&htim1);
 8001a62:	48a1      	ldr	r0, [pc, #644]	; (8001ce8 <main+0x5b0>)
 8001a64:	f001 fe18 	bl	8003698 <HAL_TIM_MspPostInit>
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a68:	974f      	str	r7, [sp, #316]	; 0x13c
  htim2.Init.Period = M1_PULSE_NBR;
 8001a6a:	f644 631f 	movw	r3, #19999	; 0x4e1f
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a6e:	f8c4 9008 	str.w	r9, [r4, #8]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a72:	f8c4 9018 	str.w	r9, [r4, #24]
  htim2.Instance = TIM2;
 8001a76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8001a7a:	f04f 090c 	mov.w	r9, #12
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a7e:	4640      	mov	r0, r8
 8001a80:	4621      	mov	r1, r4
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a82:	f8c4 a000 	str.w	sl, [r4]
  htim2.Init.Period = M1_PULSE_NBR;
 8001a86:	f8c8 300c 	str.w	r3, [r8, #12]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a8a:	9751      	str	r7, [sp, #324]	; 0x144
 8001a8c:	9753      	str	r7, [sp, #332]	; 0x14c
 8001a8e:	9755      	str	r7, [sp, #340]	; 0x154
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	e9cd 770e 	strd	r7, r7, [sp, #56]	; 0x38
 8001a94:	9710      	str	r7, [sp, #64]	; 0x40
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a96:	e9c8 7701 	strd	r7, r7, [r8, #4]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9a:	f8c8 7010 	str.w	r7, [r8, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a9e:	f8c8 7018 	str.w	r7, [r8, #24]
  htim2.Instance = TIM2;
 8001aa2:	f8c8 2000 	str.w	r2, [r8]
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8001aa6:	f8c4 9010 	str.w	r9, [r4, #16]
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8001aaa:	f8c4 9020 	str.w	r9, [r4, #32]
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001aae:	f003 fecd 	bl	800584c <HAL_TIM_Encoder_Init>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b108      	cbz	r0, 8001aba <main+0x382>
 8001ab6:	b672      	cpsid	i
 8001ab8:	e7fe      	b.n	8001ab8 <main+0x380>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001aba:	4640      	mov	r0, r8
 8001abc:	a90e      	add	r1, sp, #56	; 0x38
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abe:	930e      	str	r3, [sp, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac0:	9310      	str	r3, [sp, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ac2:	f004 f9f1 	bl	8005ea8 <HAL_TIMEx_MasterConfigSynchronization>
 8001ac6:	b108      	cbz	r0, 8001acc <main+0x394>
 8001ac8:	b672      	cpsid	i
 8001aca:	e7fe      	b.n	8001aca <main+0x392>
	huart_MD.Instance = USART2;
 8001acc:	4f87      	ldr	r7, [pc, #540]	; (8001cec <main+0x5b4>)
 8001ace:	9001      	str	r0, [sp, #4]
  MX_MotorControl_Init();
 8001ad0:	f000 ff66 	bl	80029a0 <MX_MotorControl_Init>
	huart_MD.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad4:	9801      	ldr	r0, [sp, #4]
	huart_MD.Instance = USART2;
 8001ad6:	4a86      	ldr	r2, [pc, #536]	; (8001cf0 <main+0x5b8>)
	huart_MD.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad8:	62b8      	str	r0, [r7, #40]	; 0x28
	huart_MD.Init.StopBits = UART_STOPBITS_1;
 8001ada:	e9c7 0002 	strd	r0, r0, [r7, #8]
	huart_MD.Init.Mode = UART_MODE_TX_RX;
 8001ade:	e9c7 0904 	strd	r0, r9, [r7, #16]
	huart_MD.Init.BaudRate = 115200;
 8001ae2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
	huart_MD.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ae6:	e9c7 0006 	strd	r0, r0, [r7, #24]
	huart_MD.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001aea:	e9c7 0008 	strd	r0, r0, [r7, #32]
	if (HAL_UART_Init(&huart_MD) != HAL_OK)
 8001aee:	4638      	mov	r0, r7
	huart_MD.Init.BaudRate = 115200;
 8001af0:	e9c7 2300 	strd	r2, r3, [r7]
	if (HAL_UART_Init(&huart_MD) != HAL_OK)
 8001af4:	f004 fb48 	bl	8006188 <HAL_UART_Init>
 8001af8:	4601      	mov	r1, r0
 8001afa:	b108      	cbz	r0, 8001b00 <main+0x3c8>
 8001afc:	b672      	cpsid	i
 8001afe:	e7fe      	b.n	8001afe <main+0x3c6>
	if (HAL_UARTEx_SetTxFifoThreshold(&huart_MD, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b00:	4638      	mov	r0, r7
 8001b02:	f004 ff8b 	bl	8006a1c <HAL_UARTEx_SetTxFifoThreshold>
 8001b06:	b108      	cbz	r0, 8001b0c <main+0x3d4>
 8001b08:	b672      	cpsid	i
 8001b0a:	e7fe      	b.n	8001b0a <main+0x3d2>
	if (HAL_UARTEx_SetRxFifoThreshold(&huart_MD, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4877      	ldr	r0, [pc, #476]	; (8001cec <main+0x5b4>)
 8001b10:	f004 ffc2 	bl	8006a98 <HAL_UARTEx_SetRxFifoThreshold>
 8001b14:	b108      	cbz	r0, 8001b1a <main+0x3e2>
 8001b16:	b672      	cpsid	i
 8001b18:	e7fe      	b.n	8001b18 <main+0x3e0>
	if (HAL_UARTEx_DisableFifoMode(&huart_MD) != HAL_OK)
 8001b1a:	4874      	ldr	r0, [pc, #464]	; (8001cec <main+0x5b4>)
 8001b1c:	f004 ff60 	bl	80069e0 <HAL_UARTEx_DisableFifoMode>
 8001b20:	4607      	mov	r7, r0
 8001b22:	b108      	cbz	r0, 8001b28 <main+0x3f0>
 8001b24:	b672      	cpsid	i
 8001b26:	e7fe      	b.n	8001b26 <main+0x3ee>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8001b28:	2201      	movs	r2, #1
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	2018      	movs	r0, #24
 8001b2e:	f002 fe4f 	bl	80047d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001b32:	2018      	movs	r0, #24
 8001b34:	f002 fe82 	bl	800483c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001b38:	463a      	mov	r2, r7
 8001b3a:	4639      	mov	r1, r7
 8001b3c:	2019      	movs	r0, #25
 8001b3e:	f002 fe47 	bl	80047d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001b42:	2019      	movs	r0, #25
 8001b44:	f002 fe7a 	bl	800483c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001b48:	463a      	mov	r2, r7
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	2012      	movs	r0, #18
 8001b4e:	f002 fe3f 	bl	80047d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001b52:	2012      	movs	r0, #18
 8001b54:	f002 fe72 	bl	800483c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8001b58:	463a      	mov	r2, r7
 8001b5a:	2103      	movs	r1, #3
 8001b5c:	201c      	movs	r0, #28
 8001b5e:	f002 fe37 	bl	80047d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b62:	201c      	movs	r0, #28
 8001b64:	f002 fe6a 	bl	800483c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001b68:	463a      	mov	r2, r7
 8001b6a:	2103      	movs	r1, #3
 8001b6c:	2028      	movs	r0, #40	; 0x28
 8001b6e:	f002 fe2f 	bl	80047d0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b72:	2028      	movs	r0, #40	; 0x28
 8001b74:	f002 fe62 	bl	800483c <HAL_NVIC_EnableIRQ>
  	uint8_t CmdBuf[256] = {0};
 8001b78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b7c:	4639      	mov	r1, r7
 8001b7e:	a80e      	add	r0, sp, #56	; 0x38
 8001b80:	f006 febd 	bl	80088fe <memset>
    uint8_t RspBuf[256] = {0};
 8001b84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b88:	4639      	mov	r1, r7
 8001b8a:	4620      	mov	r0, r4
 8001b8c:	f006 feb7 	bl	80088fe <memset>
    HAL_UART_Transmit(&huart_MD, (uint8_t *)"Welcome to TCM Motor Drive", 28, UART_TICK_TIMEOUT);
 8001b90:	2364      	movs	r3, #100	; 0x64
 8001b92:	221c      	movs	r2, #28
 8001b94:	4957      	ldr	r1, [pc, #348]	; (8001cf4 <main+0x5bc>)
 8001b96:	4855      	ldr	r0, [pc, #340]	; (8001cec <main+0x5b4>)
    char mm_min_sendChar[15] = {0};
 8001b98:	60af      	str	r7, [r5, #8]
 8001b9a:	e9c5 7700 	strd	r7, r7, [r5]
 8001b9e:	f8c5 700b 	str.w	r7, [r5, #11]
    uint32_t RspLen = 0;
 8001ba2:	9702      	str	r7, [sp, #8]
    HAL_UART_Transmit(&huart_MD, (uint8_t *)"Welcome to TCM Motor Drive", 28, UART_TICK_TIMEOUT);
 8001ba4:	f004 fdb2 	bl	800670c <HAL_UART_Transmit>
 8001ba8:	f8df b15c 	ldr.w	fp, [pc, #348]	; 8001d08 <main+0x5d0>
 8001bac:	f8df a15c 	ldr.w	sl, [pc, #348]	; 8001d0c <main+0x5d4>
	  HAL_UART_Receive(&huart_MD, CmdBuf, 256, 100);
 8001bb0:	484e      	ldr	r0, [pc, #312]	; (8001cec <main+0x5b4>)
 8001bb2:	2364      	movs	r3, #100	; 0x64
 8001bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bb8:	a90e      	add	r1, sp, #56	; 0x38
 8001bba:	f004 fe1b 	bl	80067f4 <HAL_UART_Receive>
	  if(CmdBuf[0] != 0)
 8001bbe:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d17e      	bne.n	8001cc4 <main+0x58c>
	  userButton = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001bc6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001bca:	484b      	ldr	r0, [pc, #300]	; (8001cf8 <main+0x5c0>)
 8001bcc:	f002 ff44 	bl	8004a58 <HAL_GPIO_ReadPin>
	  if(userButton == GPIO_PIN_SET)
 8001bd0:	2801      	cmp	r0, #1
 8001bd2:	f000 809f 	beq.w	8001d14 <main+0x5dc>
	  if((HAL_GetTick() - Motor_GetRunTick() > UART_TICK_TIMEOUT) && (pMCI[M1]->pPosCtrl->PositionCtrlStatus == TC_MOVEMENT_ON_GOING))
 8001bd6:	f001 fe79 	bl	80038cc <HAL_GetTick>
 8001bda:	4607      	mov	r7, r0
 8001bdc:	f7ff fd66 	bl	80016ac <Motor_GetRunTick>
 8001be0:	1a38      	subs	r0, r7, r0
 8001be2:	2864      	cmp	r0, #100	; 0x64
 8001be4:	d9e4      	bls.n	8001bb0 <main+0x478>
 8001be6:	f8db 3000 	ldr.w	r3, [fp]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d1dd      	bne.n	8001bb0 <main+0x478>
		  Motor_SetRunTick(HAL_GetTick());
 8001bf4:	f001 fe6a 	bl	80038cc <HAL_GetTick>
 8001bf8:	f7ff fd5e 	bl	80016b8 <Motor_SetRunTick>
		  mm_min_send = (((float)(SpeednTorqCtrlM1.SPD->hAvrMecSpeedUnit))/6.0)*5.08;
 8001bfc:	f8da 3014 	ldr.w	r3, [sl, #20]
 8001c00:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
 8001c04:	ee07 0a90 	vmov	s15, r0
 8001c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0c:	ee17 0a90 	vmov	r0, s15
 8001c10:	f7fe fc6e 	bl	80004f0 <__aeabi_f2d>
 8001c14:	a332      	add	r3, pc, #200	; (adr r3, 8001ce0 <main+0x5a8>)
 8001c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c1a:	f7fe fcc1 	bl	80005a0 <__aeabi_dmul>
 8001c1e:	f7fe fed1 	bl	80009c4 <__aeabi_d2f>
 8001c22:	ee07 0a90 	vmov	s15, r0
	int ipart = (int)n;
 8001c26:	eebd 8ae7 	vcvt.s32.f32	s16, s15
	char fpart_char[5] = {0};
 8001c2a:	2300      	movs	r3, #0
    float fpart = abs(n - (float)ipart);
 8001c2c:	eeb8 7ac8 	vcvt.f32.s32	s14, s16
	char fpart_char[5] = {0};
 8001c30:	6033      	str	r3, [r6, #0]
    float fpart = abs(n - (float)ipart);
 8001c32:	ee77 7ac7 	vsub.f32	s15, s15, s14
	char fpart_char[5] = {0};
 8001c36:	7133      	strb	r3, [r6, #4]
    float fpart = abs(n - (float)ipart);
 8001c38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c3c:	ee17 0a90 	vmov	r0, s15
 8001c40:	2800      	cmp	r0, #0
 8001c42:	bfb8      	it	lt
 8001c44:	4240      	neglt	r0, r0
    fpart = fpart * pow(10, afterpoint);
 8001c46:	ee07 0a90 	vmov	s15, r0
 8001c4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c4e:	ee17 0a90 	vmov	r0, s15
 8001c52:	f7fe fc4d 	bl	80004f0 <__aeabi_f2d>
 8001c56:	4b29      	ldr	r3, [pc, #164]	; (8001cfc <main+0x5c4>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f7fe fca1 	bl	80005a0 <__aeabi_dmul>
    itoa(ipart, res, 10);
 8001c5e:	220a      	movs	r2, #10
    fpart = fpart * pow(10, afterpoint);
 8001c60:	4680      	mov	r8, r0
 8001c62:	4689      	mov	r9, r1
    itoa(ipart, res, 10);
 8001c64:	ee18 0a10 	vmov	r0, s16
 8001c68:	4629      	mov	r1, r5
 8001c6a:	f006 fe3b 	bl	80088e4 <itoa>
    fpart = fpart * pow(10, afterpoint);
 8001c6e:	4649      	mov	r1, r9
 8001c70:	4640      	mov	r0, r8
 8001c72:	f7fe fea7 	bl	80009c4 <__aeabi_d2f>
    itoa(fpart, fpart_char, 10);
 8001c76:	ee07 0a90 	vmov	s15, r0
 8001c7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c7e:	4631      	mov	r1, r6
 8001c80:	ee17 0a90 	vmov	r0, s15
 8001c84:	220a      	movs	r2, #10
 8001c86:	f006 fe2d 	bl	80088e4 <itoa>
    strcat(fpart_char, "\r\n");
 8001c8a:	4630      	mov	r0, r6
 8001c8c:	f7fe fac4 	bl	8000218 <strlen>
 8001c90:	4b1b      	ldr	r3, [pc, #108]	; (8001d00 <main+0x5c8>)
 8001c92:	1831      	adds	r1, r6, r0
 8001c94:	881a      	ldrh	r2, [r3, #0]
 8001c96:	789b      	ldrb	r3, [r3, #2]
 8001c98:	5232      	strh	r2, [r6, r0]
 8001c9a:	4607      	mov	r7, r0
 8001c9c:	708b      	strb	r3, [r1, #2]
    strcat(res, ".");
 8001c9e:	4628      	mov	r0, r5
 8001ca0:	f7fe faba 	bl	8000218 <strlen>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	3001      	adds	r0, #1
    strcat(res, fpart_char);
 8001ca8:	1cfa      	adds	r2, r7, #3
 8001caa:	4631      	mov	r1, r6
    strcat(res, ".");
 8001cac:	272e      	movs	r7, #46	; 0x2e
    strcat(res, fpart_char);
 8001cae:	4428      	add	r0, r5
    strcat(res, ".");
 8001cb0:	54ef      	strb	r7, [r5, r3]
    strcat(res, fpart_char);
 8001cb2:	f006 fe19 	bl	80088e8 <memcpy>
		  HAL_UART_Transmit(&huart_MD, (uint8_t*)mm_min_sendChar, 10, 50);
 8001cb6:	2332      	movs	r3, #50	; 0x32
 8001cb8:	220a      	movs	r2, #10
 8001cba:	4629      	mov	r1, r5
 8001cbc:	480b      	ldr	r0, [pc, #44]	; (8001cec <main+0x5b4>)
 8001cbe:	f004 fd25 	bl	800670c <HAL_UART_Transmit>
 8001cc2:	e775      	b.n	8001bb0 <main+0x478>
		  stdRet = Cmd_Process(CmdBuf, RspBuf, &RspLen);
 8001cc4:	aa02      	add	r2, sp, #8
 8001cc6:	4621      	mov	r1, r4
 8001cc8:	a80e      	add	r0, sp, #56	; 0x38
 8001cca:	f7ff f9e1 	bl	8001090 <Cmd_Process>
		  CmdBuf[0] = 0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		  if(RET_OK != stdRet)
 8001cd4:	2800      	cmp	r0, #0
 8001cd6:	f43f af76 	beq.w	8001bc6 <main+0x48e>
			  Send_ErrorMsg(stdRet);		// Change to Send_ErrorCode(stdRet) afterwords.
 8001cda:	f7ff fb39 	bl	8001350 <Send_ErrorMsg>
 8001cde:	e772      	b.n	8001bc6 <main+0x48e>
 8001ce0:	b17e4b18 	.word	0xb17e4b18
 8001ce4:	3feb17e4 	.word	0x3feb17e4
 8001ce8:	200005a4 	.word	0x200005a4
 8001cec:	2000047c 	.word	0x2000047c
 8001cf0:	40004400 	.word	0x40004400
 8001cf4:	08008abc 	.word	0x08008abc
 8001cf8:	48000800 	.word	0x48000800
 8001cfc:	40590000 	.word	0x40590000
 8001d00:	08008ab8 	.word	0x08008ab8
 8001d04:	200005f0 	.word	0x200005f0
 8001d08:	20000670 	.word	0x20000670
 8001d0c:	20000250 	.word	0x20000250
 8001d10:	43fa0000 	.word	0x43fa0000
		  prevDist = Motor_GetDistance();
 8001d14:	f7ff fb4a 	bl	80013ac <Motor_GetDistance>
 8001d18:	eeb0 9a40 	vmov.f32	s18, s0
		  Motor_SetDistance(500);
 8001d1c:	ed1f 0a04 	vldr	s0, [pc, #-16]	; 8001d10 <main+0x5d8>
			  userButton = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001d20:	f8df 909c 	ldr.w	r9, [pc, #156]	; 8001dc0 <main+0x688>
		  Motor_SetDistance(500);
 8001d24:	f7ff fb3a 	bl	800139c <Motor_SetDistance>
		  Motor_Run(false);
 8001d28:	2000      	movs	r0, #0
 8001d2a:	f7ff fba9 	bl	8001480 <Motor_Run>
		  prev_time = HAL_GetTick();
 8001d2e:	f001 fdcd 	bl	80038cc <HAL_GetTick>
 8001d32:	4680      	mov	r8, r0
			  userButton = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8001d34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d38:	4648      	mov	r0, r9
 8001d3a:	f002 fe8d 	bl	8004a58 <HAL_GPIO_ReadPin>
			  if(userButton == GPIO_PIN_RESET)
 8001d3e:	2800      	cmp	r0, #0
 8001d40:	d1f8      	bne.n	8001d34 <main+0x5fc>
 8001d42:	4607      	mov	r7, r0
				  pres_time = HAL_GetTick();
 8001d44:	f001 fdc2 	bl	80038cc <HAL_GetTick>
 8001d48:	4681      	mov	r9, r0
				  jogDist = Motor_GetSpeed() * jogTime * ((Motor_GetDirection()) ? 1 : -1);
 8001d4a:	f7ff fb3d 	bl	80013c8 <Motor_GetSpeed>
				  jogTime = (pres_time - prev_time) / (1000.0 * 60.0);		// Minutes		// Should be done by calculating the mechanical angle later
 8001d4e:	eba9 0008 	sub.w	r0, r9, r8
				  jogDist = Motor_GetSpeed() * jogTime * ((Motor_GetDirection()) ? 1 : -1);
 8001d52:	eef0 8a40 	vmov.f32	s17, s0
				  jogTime = (pres_time - prev_time) / (1000.0 * 60.0);		// Minutes		// Should be done by calculating the mechanical angle later
 8001d56:	f7fe fba9 	bl	80004ac <__aeabi_ui2d>
 8001d5a:	a317      	add	r3, pc, #92	; (adr r3, 8001db8 <main+0x680>)
 8001d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d60:	f7fe fc1e 	bl	80005a0 <__aeabi_dmul>
 8001d64:	f7fe fe2e 	bl	80009c4 <__aeabi_d2f>
				  jogDist = Motor_GetSpeed() * jogTime * ((Motor_GetDirection()) ? 1 : -1);
 8001d68:	ee07 0a90 	vmov	s15, r0
 8001d6c:	ee67 8aa8 	vmul.f32	s17, s15, s17
 8001d70:	f7ff fb36 	bl	80013e0 <Motor_GetDirection>
 8001d74:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8001d7e:	bf08      	it	eq
 8001d80:	eeb0 8a67 	vmoveq.f32	s16, s15
				  Motor_SetZeroPos(Motor_GetZeroPos() - jogDist);
 8001d84:	f7ff fb3a 	bl	80013fc <Motor_GetZeroPos>
 8001d88:	eea8 0ac8 	vfms.f32	s0, s17, s16
 8001d8c:	f7ff fb2e 	bl	80013ec <Motor_SetZeroPos>
				  HAL_Delay(500);
 8001d90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d94:	f001 fda0 	bl	80038d8 <HAL_Delay>
				  Motor_Stop(false);
 8001d98:	4638      	mov	r0, r7
 8001d9a:	f7ff fb57 	bl	800144c <Motor_Stop>
				  Motor_ResetDriveParams();//MX_MotorControl_Init();
 8001d9e:	f7ff fb45 	bl	800142c <Motor_ResetDriveParams>
		  Motor_SetDistance(prevDist);
 8001da2:	eeb0 0a49 	vmov.f32	s0, s18
 8001da6:	f7ff faf9 	bl	800139c <Motor_SetDistance>
		  HAL_Delay(500);
 8001daa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dae:	f001 fd93 	bl	80038d8 <HAL_Delay>
		  Motor_Start();
 8001db2:	f7ff fb3d 	bl	8001430 <Motor_Start>
 8001db6:	e70e      	b.n	8001bd6 <main+0x49e>
 8001db8:	9cbd821e 	.word	0x9cbd821e
 8001dbc:	3ef179ec 	.word	0x3ef179ec
 8001dc0:	48000800 	.word	0x48000800

08001dc4 <Error_Handler>:
 8001dc4:	b672      	cpsid	i
 8001dc6:	e7fe      	b.n	8001dc6 <Error_Handler+0x2>

08001dc8 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8001dc8:	4b01      	ldr	r3, [pc, #4]	; (8001dd0 <MC_StartMotor1+0x8>)
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	f000 b8b8 	b.w	8001f40 <MCI_StartMotor>
 8001dd0:	20000670 	.word	0x20000670

08001dd4 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8001dd4:	4b01      	ldr	r3, [pc, #4]	; (8001ddc <MC_StopMotor1+0x8>)
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	f000 b8ca 	b.w	8001f70 <MCI_StopMotor>
 8001ddc:	20000670 	.word	0x20000670

08001de0 <MC_ProgramPositionCommandMotor1>:
  * @param  fDuration Duration of the movement expressed in seconds.
  *         It is possible to set 0 to perform an instantaneous angular change (follow mode).
  */
__weak void MC_ProgramPositionCommandMotor1(float_t fTargetPosition, float_t fDuration)
{
  MCI_ExecPositionCommand(pMCI[M1], fTargetPosition, fDuration);
 8001de0:	4b01      	ldr	r3, [pc, #4]	; (8001de8 <MC_ProgramPositionCommandMotor1+0x8>)
 8001de2:	6818      	ldr	r0, [r3, #0]
 8001de4:	f000 b820 	b.w	8001e28 <MCI_ExecPositionCommand>
 8001de8:	20000670 	.word	0x20000670

08001dec <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 8001dec:	4b01      	ldr	r3, [pc, #4]	; (8001df4 <MC_GetSTMStateMotor1+0x8>)
 8001dee:	6818      	ldr	r0, [r3, #0]
 8001df0:	f000 b89a 	b.w	8001f28 <MCI_GetSTMState>
 8001df4:	20000670 	.word	0x20000670

08001df8 <MC_GetAlignmentStatusMotor1>:
/**
 * @brief returns the alignment state of Motor 1.
 *   */
__weak AlignStatus_t MC_GetAlignmentStatusMotor1(void)
{
  return (MCI_GetAlignmentStatus(pMCI[M1]));
 8001df8:	4b01      	ldr	r3, [pc, #4]	; (8001e00 <MC_GetAlignmentStatusMotor1+0x8>)
 8001dfa:	6818      	ldr	r0, [r3, #0]
 8001dfc:	f000 b898 	b.w	8001f30 <MCI_GetAlignmentStatus>
 8001e00:	20000670 	.word	0x20000670

08001e04 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop

08001e08 <MC_APP_PostMediumFrequencyHook_M1>:
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop

08001e0c <MCI_ExecSpeedRamp>:
  * function.
  *
  * @sa MCI_ExecSpeedRamp
  */
__weak void MCI_ExecSpeedRamp(MCI_Handle_t *pHandle, int16_t hFinalSpeed, uint16_t hDurationms)
{
 8001e0c:	b410      	push	{r4}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001e0e:	2301      	movs	r3, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 8001e10:	2403      	movs	r4, #3
 8001e12:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
    pHandle->hFinalSpeed = hFinalSpeed;
 8001e16:	8241      	strh	r1, [r0, #18]
    pHandle->hDurationms = hDurationms;
 8001e18:	8402      	strh	r2, [r0, #32]
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001e1a:	7403      	strb	r3, [r0, #16]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001e1c:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001e20:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop

08001e28 <MCI_ExecPositionCommand>:
  *
  * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
  * function.
  */
__weak void MCI_ExecPositionCommand(MCI_Handle_t *pHandle, float_t FinalPosition, float_t Duration)
{
 8001e28:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    pHandle->pFOCVars->bDriveInput = INTERNAL;
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001e2a:	e9d0 3200 	ldrd	r3, r2, [r0]
{
 8001e2e:	ed2d 8b02 	vpush	{d8}
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001e32:	2100      	movs	r1, #0
{
 8001e34:	b082      	sub	sp, #8
 8001e36:	4604      	mov	r4, r0
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001e38:	f882 1024 	strb.w	r1, [r2, #36]	; 0x24
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001e3c:	6958      	ldr	r0, [r3, #20]
{
 8001e3e:	eeb0 8a60 	vmov.f32	s16, s1
 8001e42:	eef0 8a40 	vmov.f32	s17, s0
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001e46:	f006 f9b3 	bl	80081b0 <SPD_GetMecAngle>
    if (Duration > 0)
 8001e4a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001e4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001e52:	9001      	str	r0, [sp, #4]
    if (Duration > 0)
 8001e54:	dd15      	ble.n	8001e82 <MCI_ExecPositionCommand+0x5a>
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001e56:	ee07 0a90 	vmov	s15, r0
 8001e5a:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8001e90 <MCI_ExecPositionCommand+0x68>
    {
      TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition/* - currentPositionRad*/, Duration);
 8001e5e:	68e0      	ldr	r0, [r4, #12]
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition/* - currentPositionRad*/, Duration);
 8001e64:	eeb0 1a48 	vmov.f32	s2, s16
 8001e68:	eef0 0a68 	vmov.f32	s1, s17
 8001e6c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001e70:	f006 faa4 	bl	80083bc <TC_MoveCommand>
    else
    {
      TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
    }

    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8001e74:	2304      	movs	r3, #4
 8001e76:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001e7a:	b002      	add	sp, #8
 8001e7c:	ecbd 8b02 	vpop	{d8}
 8001e80:	bd10      	pop	{r4, pc}
      TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
 8001e82:	eeb0 0a68 	vmov.f32	s0, s17
 8001e86:	68e0      	ldr	r0, [r4, #12]
 8001e88:	f006 faf6 	bl	8008478 <TC_FollowCommand>
 8001e8c:	e7f2      	b.n	8001e74 <MCI_ExecPositionCommand+0x4c>
 8001e8e:	bf00      	nop
 8001e90:	38c90fdb 	.word	0x38c90fdb

08001e94 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001e94:	8c83      	ldrh	r3, [r0, #36]	; 0x24
{
 8001e96:	b410      	push	{r4}
    pHandle->PastFaults |= hSetErrors;
 8001e98:	8cc4      	ldrh	r4, [r0, #38]	; 0x26
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001e9a:	430b      	orrs	r3, r1
 8001e9c:	ea23 0202 	bic.w	r2, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8001ea0:	4321      	orrs	r1, r4
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001ea2:	8482      	strh	r2, [r0, #36]	; 0x24
    pHandle->PastFaults |= hSetErrors;
 8001ea4:	84c1      	strh	r1, [r0, #38]	; 0x26
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001ea6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001eaa:	4770      	bx	lr

08001eac <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001eac:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d000      	beq.n	8001eb6 <MCI_ExecBufferedCommands+0xa>
 8001eb4:	4770      	bx	lr
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001eb6:	7c02      	ldrb	r2, [r0, #16]
 8001eb8:	2a02      	cmp	r2, #2
{
 8001eba:	b510      	push	{r4, lr}
 8001ebc:	4604      	mov	r4, r0
      switch (pHandle->lastCommand)
 8001ebe:	d022      	beq.n	8001f06 <MCI_ExecBufferedCommands+0x5a>
 8001ec0:	2a03      	cmp	r2, #3
 8001ec2:	d005      	beq.n	8001ed0 <MCI_ExecBufferedCommands+0x24>
 8001ec4:	2a01      	cmp	r2, #1
 8001ec6:	d00d      	beq.n	8001ee4 <MCI_ExecBufferedCommands+0x38>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001ece:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001ed0:	6842      	ldr	r2, [r0, #4]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001ed2:	f8d0 1016 	ldr.w	r1, [r0, #22]
 8001ed6:	6111      	str	r1, [r2, #16]
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001ed8:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8001edc:	2302      	movs	r3, #2
 8001ede:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
}
 8001ee2:	bd10      	pop	{r4, pc}
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001ee4:	e9d0 0300 	ldrd	r0, r3, [r0]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001eee:	2103      	movs	r1, #3
 8001ef0:	f006 f9b2 	bl	8008258 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001ef4:	8c22      	ldrh	r2, [r4, #32]
 8001ef6:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001efa:	6820      	ldr	r0, [r4, #0]
 8001efc:	f006 f9b0 	bl	8008260 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001f00:	2800      	cmp	r0, #0
 8001f02:	d0e1      	beq.n	8001ec8 <MCI_ExecBufferedCommands+0x1c>
 8001f04:	e7ea      	b.n	8001edc <MCI_ExecBufferedCommands+0x30>
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001f06:	e9d0 0300 	ldrd	r0, r3, [r0]
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001f10:	2104      	movs	r1, #4
 8001f12:	f006 f9a1 	bl	8008258 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001f16:	8c22      	ldrh	r2, [r4, #32]
 8001f18:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8001f1c:	6820      	ldr	r0, [r4, #0]
 8001f1e:	f006 f99f 	bl	8008260 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 8001f22:	2800      	cmp	r0, #0
 8001f24:	d0d0      	beq.n	8001ec8 <MCI_ExecBufferedCommands+0x1c>
 8001f26:	e7d9      	b.n	8001edc <MCI_ExecBufferedCommands+0x30>

08001f28 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8001f28:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop

08001f30 <MCI_GetAlignmentStatus>:
__weak AlignStatus_t MCI_GetAlignmentStatus(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? TC_ALIGNMENT_ERROR : TC_GetAlignmentStatus(pHandle->pPosCtrl));
#else
  return ((TC_GetAlignmentStatus(pHandle->pPosCtrl)));
 8001f30:	68c0      	ldr	r0, [r0, #12]
 8001f32:	f006 bc41 	b.w	80087b8 <TC_GetAlignmentStatus>
 8001f36:	bf00      	nop

08001f38 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 8001f38:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 8001f3a:	4770      	bx	lr

08001f3c <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 8001f3c:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8001f3e:	4770      	bx	lr

08001f40 <MCI_StartMotor>:
{
 8001f40:	b510      	push	{r4, lr}
 8001f42:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001f44:	f7ff fff0 	bl	8001f28 <MCI_GetSTMState>
 8001f48:	b108      	cbz	r0, 8001f4e <MCI_StartMotor+0xe>
  bool retVal = false;
 8001f4a:	2000      	movs	r0, #0
}
 8001f4c:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001f4e:	4620      	mov	r0, r4
 8001f50:	f7ff fff2 	bl	8001f38 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001f54:	2800      	cmp	r0, #0
 8001f56:	d1f8      	bne.n	8001f4a <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001f58:	4620      	mov	r0, r4
 8001f5a:	f7ff ffef 	bl	8001f3c <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001f5e:	2800      	cmp	r0, #0
 8001f60:	d1f3      	bne.n	8001f4a <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8001f62:	2001      	movs	r0, #1
 8001f64:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001f68:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
}
 8001f6c:	bd10      	pop	{r4, pc}
 8001f6e:	bf00      	nop

08001f70 <MCI_StopMotor>:
{
 8001f70:	b538      	push	{r3, r4, r5, lr}
 8001f72:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8001f74:	f7ff ffd8 	bl	8001f28 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8001f78:	b150      	cbz	r0, 8001f90 <MCI_StopMotor+0x20>
 8001f7a:	f1b0 040c 	subs.w	r4, r0, #12
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001f7e:	4628      	mov	r0, r5
    if ((IDLE == State) || (ICLWAIT == State))
 8001f80:	bf18      	it	ne
 8001f82:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001f84:	f7ff ffd8 	bl	8001f38 <MCI_GetOccurredFaults>
 8001f88:	b140      	cbz	r0, 8001f9c <MCI_StopMotor+0x2c>
  bool retVal = false;
 8001f8a:	2400      	movs	r4, #0
}
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	bd38      	pop	{r3, r4, r5, pc}
      status = false;
 8001f90:	4604      	mov	r4, r0
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001f92:	4628      	mov	r0, r5
 8001f94:	f7ff ffd0 	bl	8001f38 <MCI_GetOccurredFaults>
 8001f98:	2800      	cmp	r0, #0
 8001f9a:	d1f6      	bne.n	8001f8a <MCI_StopMotor+0x1a>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001f9c:	4628      	mov	r0, r5
 8001f9e:	f7ff ffcd 	bl	8001f3c <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001fa2:	2800      	cmp	r0, #0
 8001fa4:	d1f1      	bne.n	8001f8a <MCI_StopMotor+0x1a>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001fa6:	2c00      	cmp	r4, #0
 8001fa8:	d0ef      	beq.n	8001f8a <MCI_StopMotor+0x1a>
      pHandle->DirectCommand = MCI_STOP;
 8001faa:	2305      	movs	r3, #5
 8001fac:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
}
 8001fb0:	4620      	mov	r0, r4
 8001fb2:	bd38      	pop	{r3, r4, r5, pc}

08001fb4 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001fb4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001fb6:	8c80      	ldrh	r0, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8001fb8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001fbc:	4770      	bx	lr
 8001fbe:	bf00      	nop

08001fc0 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001fc0:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001fc4:	b202      	sxth	r2, r0
 8001fc6:	f3c0 430f 	ubfx	r3, r0, #16, #16
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 8001fca:	fb12 f001 	smulbb	r0, r2, r1
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001fce:	fb13 f301 	smulbb	r3, r3, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001fd2:	4240      	negs	r0, r0
 8001fd4:	eba0 0043 	sub.w	r0, r0, r3, lsl #1
 8001fd8:	13c0      	asrs	r0, r0, #15
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8001fda:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
{
 8001fde:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 8001fe0:	da04      	bge.n	8001fec <MCM_Clarke+0x2c>
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8001fe2:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8001fe6:	da0c      	bge.n	8002002 <MCM_Clarke+0x42>

  Output.beta = hbeta_tmp;

  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <MCM_Clarke+0x48>)
 8001fea:	e001      	b.n	8001ff0 <MCM_Clarke+0x30>
    hbeta_tmp = INT16_MAX;
 8001fec:	f647 73ff 	movw	r3, #32767	; 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 8001ff0:	b292      	uxth	r2, r2
 8001ff2:	2000      	movs	r0, #0
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	f362 000f 	bfi	r0, r2, #0, #16
 8001ffa:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001ffe:	b004      	add	sp, #16
 8002000:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8002002:	b203      	sxth	r3, r0
  if (((int16_t )-32768) == Output.beta)
 8002004:	d1f4      	bne.n	8001ff0 <MCM_Clarke+0x30>
 8002006:	e7ef      	b.n	8001fe8 <MCM_Clarke+0x28>
 8002008:	ffff8001 	.word	0xffff8001

0800200c <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A�Conversion�should�not�be�performed�between�a�
   * pointer�to�object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MCM_Trig_Functions+0x28>)
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed�between�a
   * pointer�to�object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 800200e:	f100 40ff 	add.w	r0, r0, #2139095040	; 0x7f800000
 8002012:	f500 00fe 	add.w	r0, r0, #8323072	; 0x7f0000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8002016:	f04f 1260 	mov.w	r2, #6291552	; 0x600060
 800201a:	601a      	str	r2, [r3, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 800201c:	6058      	str	r0, [r3, #4]
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 800201e:	689b      	ldr	r3, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed between�a
   * pointer�to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
 8002020:	2000      	movs	r0, #0
 8002022:	b29a      	uxth	r2, r3
 8002024:	f362 000f 	bfi	r0, r2, #0, #16
 8002028:	0c1b      	lsrs	r3, r3, #16
{
 800202a:	b082      	sub	sp, #8
  return (CosSin.Components); //cstat !UNION-type-punning
 800202c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8002030:	b002      	add	sp, #8
 8002032:	4770      	bx	lr
 8002034:	40020c00 	.word	0x40020c00

08002038 <MCM_Park>:
{
 8002038:	b530      	push	{r4, r5, lr}
 800203a:	b085      	sub	sp, #20
 800203c:	b204      	sxth	r4, r0
 800203e:	9001      	str	r0, [sp, #4]
 8002040:	1405      	asrs	r5, r0, #16
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8002042:	4608      	mov	r0, r1
 8002044:	f7ff ffe2 	bl	800200c <MCM_Trig_Functions>
 8002048:	b201      	sxth	r1, r0
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 800204a:	fb04 f301 	mul.w	r3, r4, r1
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 800204e:	1400      	asrs	r0, r0, #16
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002050:	fb05 3310 	mls	r3, r5, r0, r3
 8002054:	13db      	asrs	r3, r3, #15
  if (wqd_tmp > INT16_MAX)
 8002056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800205a:	da04      	bge.n	8002066 <MCM_Park+0x2e>
  else if (wqd_tmp < (-32768))
 800205c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8002060:	da1e      	bge.n	80020a0 <MCM_Park+0x68>
    Output.q = -32767;
 8002062:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <MCM_Park+0x70>)
 8002064:	e001      	b.n	800206a <MCM_Park+0x32>
    hqd_tmp = INT16_MAX;
 8002066:	f647 72ff 	movw	r2, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 800206a:	fb01 f105 	mul.w	r1, r1, r5
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800206e:	fb04 1000 	mla	r0, r4, r0, r1
 8002072:	13c0      	asrs	r0, r0, #15
  if (wqd_tmp > INT16_MAX)
 8002074:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002078:	da04      	bge.n	8002084 <MCM_Park+0x4c>
  else if (wqd_tmp < (-32768))
 800207a:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 800207e:	da0c      	bge.n	800209a <MCM_Park+0x62>
    Output.d = -32767;
 8002080:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <MCM_Park+0x70>)
 8002082:	e001      	b.n	8002088 <MCM_Park+0x50>
    hqd_tmp = INT16_MAX;
 8002084:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 8002088:	b292      	uxth	r2, r2
 800208a:	2000      	movs	r0, #0
 800208c:	b29b      	uxth	r3, r3
 800208e:	f362 000f 	bfi	r0, r2, #0, #16
 8002092:	f363 401f 	bfi	r0, r3, #16, #16
}
 8002096:	b005      	add	sp, #20
 8002098:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 800209a:	b203      	sxth	r3, r0
  if (((int16_t)-32768) == Output.d)
 800209c:	d1f4      	bne.n	8002088 <MCM_Park+0x50>
 800209e:	e7ef      	b.n	8002080 <MCM_Park+0x48>
    hqd_tmp = ((int16_t)wqd_tmp);
 80020a0:	b21a      	sxth	r2, r3
  if (((int16_t)-32768) == Output.q)
 80020a2:	d1e2      	bne.n	800206a <MCM_Park+0x32>
 80020a4:	e7dd      	b.n	8002062 <MCM_Park+0x2a>
 80020a6:	bf00      	nop
 80020a8:	ffff8001 	.word	0xffff8001

080020ac <MCM_Rev_Park>:
{
 80020ac:	b530      	push	{r4, r5, lr}
 80020ae:	b085      	sub	sp, #20
 80020b0:	b204      	sxth	r4, r0
 80020b2:	1405      	asrs	r5, r0, #16
 80020b4:	9001      	str	r0, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80020b6:	4608      	mov	r0, r1
 80020b8:	f7ff ffa8 	bl	800200c <MCM_Trig_Functions>
 80020bc:	1403      	asrs	r3, r0, #16
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80020be:	fb05 f203 	mul.w	r2, r5, r3
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80020c2:	b200      	sxth	r0, r0
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 80020c4:	fb04 2200 	mla	r2, r4, r0, r2
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 80020c8:	fb00 f005 	mul.w	r0, r0, r5
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 80020cc:	fb04 0313 	mls	r3, r4, r3, r0
  return (Output);
 80020d0:	f3c2 32cf 	ubfx	r2, r2, #15, #16
 80020d4:	2000      	movs	r0, #0
 80020d6:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80020da:	f362 000f 	bfi	r0, r2, #0, #16
 80020de:	f363 401f 	bfi	r0, r3, #16, #16
}
 80020e2:	b005      	add	sp, #20
 80020e4:	bd30      	pop	{r4, r5, pc}
 80020e6:	bf00      	nop

080020e8 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 80020e8:	2800      	cmp	r0, #0
 80020ea:	dd09      	ble.n	8002100 <MCM_Sqrt+0x18>
 80020ec:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* Disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 80020ee:	4b05      	ldr	r3, [pc, #20]	; (8002104 <MCM_Sqrt+0x1c>)
 80020f0:	f240 1269 	movw	r2, #361	; 0x169
 80020f4:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 80020f6:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80020f8:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80020fa:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 80020fc:	b662      	cpsie	i
 80020fe:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8002100:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8002102:	4770      	bx	lr
 8002104:	40020c00 	.word	0x40020c00

08002108 <MCboot>:
{
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 8002108:	b1f8      	cbz	r0, 800214a <MCboot+0x42>
{
 800210a:	b538      	push	{r3, r4, r5, lr}
    /* Nothing to do */
  }
  else
  {

    bMCBootCompleted = (uint8_t )0;
 800210c:	4d0f      	ldr	r5, [pc, #60]	; (800214c <MCboot+0x44>)
 800210e:	2300      	movs	r3, #0
 8002110:	702b      	strb	r3, [r5, #0]
 8002112:	4604      	mov	r4, r0

    /*************************************************/
    /*    FOC initialization         */
    /*************************************************/
    FOC_Init();
 8002114:	f000 f9be 	bl	8002494 <FOC_Init>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002118:	480d      	ldr	r0, [pc, #52]	; (8002150 <MCboot+0x48>)
 800211a:	f004 ff23 	bl	8006f64 <PID_HandleInit>

    /****************************************************/
    /*   Virtual speed sensor component initialization  */
    /****************************************************/
    VSS_Init(&VirtualSpeedSensorM1);
 800211e:	480d      	ldr	r0, [pc, #52]	; (8002154 <MCboot+0x4c>)
 8002120:	f006 fb66 	bl	80087f0 <VSS_Init>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 8002124:	480c      	ldr	r0, [pc, #48]	; (8002158 <MCboot+0x50>)
 8002126:	f000 fe73 	bl	8002e10 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 800212a:	480c      	ldr	r0, [pc, #48]	; (800215c <MCboot+0x54>)
 800212c:	f005 ffd8 	bl	80080e0 <RVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 8002130:	480b      	ldr	r0, [pc, #44]	; (8002160 <MCboot+0x58>)
 8002132:	f000 fe6d 	bl	8002e10 <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 8002136:	480b      	ldr	r0, [pc, #44]	; (8002164 <MCboot+0x5c>)
 8002138:	f004 feea 	bl	8006f10 <NTC_Init>

    pMCIList[M1] = &Mci[M1];
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <MCboot+0x60>)
 800213e:	6023      	str	r3, [r4, #0]

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 8002140:	f7ff fe60 	bl	8001e04 <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 8002144:	2301      	movs	r3, #1
 8002146:	702b      	strb	r3, [r5, #0]
  }
}
 8002148:	bd38      	pop	{r3, r4, r5, pc}
 800214a:	4770      	bx	lr
 800214c:	2000040c 	.word	0x2000040c
 8002150:	200000bc 	.word	0x200000bc
 8002154:	2000038c 	.word	0x2000038c
 8002158:	2000037c 	.word	0x2000037c
 800215c:	20000298 	.word	0x20000298
 8002160:	20000350 	.word	0x20000350
 8002164:	20000360 	.word	0x20000360
 8002168:	20000038 	.word	0x20000038

0800216c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 800216c:	4b01      	ldr	r3, [pc, #4]	; (8002174 <TSK_SetChargeBootCapDelayM1+0x8>)
 800216e:	8018      	strh	r0, [r3, #0]
}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	2000040e 	.word	0x2000040e

08002178 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8002178:	4b03      	ldr	r3, [pc, #12]	; (8002188 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800217a:	8818      	ldrh	r0, [r3, #0]
 800217c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800217e:	fab0 f080 	clz	r0, r0
 8002182:	0940      	lsrs	r0, r0, #5
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	2000040e 	.word	0x2000040e

0800218c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 800218c:	4b01      	ldr	r3, [pc, #4]	; (8002194 <TSK_SetStopPermanencyTimeM1+0x8>)
 800218e:	8018      	strh	r0, [r3, #0]
}
 8002190:	4770      	bx	lr
 8002192:	bf00      	nop
 8002194:	20000412 	.word	0x20000412

08002198 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8002198:	4b03      	ldr	r3, [pc, #12]	; (80021a8 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800219a:	8818      	ldrh	r0, [r3, #0]
 800219c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 800219e:	fab0 f080 	clz	r0, r0
 80021a2:	0940      	lsrs	r0, r0, #5
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000412 	.word	0x20000412

080021ac <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80021ac:	b508      	push	{r3, lr}
  uint8_t bMotorNbr;
  bMotorNbr = 0;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  FOC_HighFrequencyTask(bMotorNbr);
 80021ae:	2000      	movs	r0, #0
 80021b0:	f000 fb82 	bl	80028b8 <FOC_HighFrequencyTask>

  /* USER CODE END HighFrequencyTask 1 */

  return (bMotorNbr);

}
 80021b4:	2000      	movs	r0, #0
 80021b6:	bd08      	pop	{r3, pc}

080021b8 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80021b8:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 80021ba:	4604      	mov	r4, r0
 80021bc:	b320      	cbz	r0, 8002208 <TSK_SafetyTask_PWMOFF+0x50>
  {
    /* Nothing to do */
  }

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80021be:	4e20      	ldr	r6, [pc, #128]	; (8002240 <TSK_SafetyTask_PWMOFF+0x88>)
 80021c0:	6830      	ldr	r0, [r6, #0]
 80021c2:	f000 fe09 	bl	8002dd8 <PWMC_IsFaultOccurred>
 80021c6:	4601      	mov	r1, r0
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 80021c8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80021cc:	4d1d      	ldr	r5, [pc, #116]	; (8002244 <TSK_SafetyTask_PWMOFF+0x8c>)
 80021ce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80021d2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80021d6:	43ca      	mvns	r2, r1
 80021d8:	4628      	mov	r0, r5
 80021da:	b292      	uxth	r2, r2
 80021dc:	f7ff fe5a 	bl	8001e94 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 80021e0:	4628      	mov	r0, r5
 80021e2:	f7ff fee7 	bl	8001fb4 <MCI_GetFaultState>
 80021e6:	b170      	cbz	r0, 8002206 <TSK_SafetyTask_PWMOFF+0x4e>
  {
    /* Reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 80021e8:	4b17      	ldr	r3, [pc, #92]	; (8002248 <TSK_SafetyTask_PWMOFF+0x90>)
 80021ea:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80021ee:	b10b      	cbz	r3, 80021f4 <TSK_SafetyTask_PWMOFF+0x3c>
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 80021f0:	2200      	movs	r2, #0
 80021f2:	73da      	strb	r2, [r3, #15]
    }
    else
    {
      /* Nothing to do */
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80021f4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80021f8:	f000 fd96 	bl	8002d28 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 80021fc:	4620      	mov	r0, r4
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80021fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    FOC_Clear(bMotor);
 8002202:	f000 b909 	b.w	8002418 <FOC_Clear>
}
 8002206:	bd70      	pop	{r4, r5, r6, pc}
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8002208:	4810      	ldr	r0, [pc, #64]	; (800224c <TSK_SafetyTask_PWMOFF+0x94>)
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 800220a:	4e0d      	ldr	r6, [pc, #52]	; (8002240 <TSK_SafetyTask_PWMOFF+0x88>)
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 800220c:	f000 fed8 	bl	8002fc0 <RCM_ExecRegularConv>
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8002210:	4601      	mov	r1, r0
 8002212:	480f      	ldr	r0, [pc, #60]	; (8002250 <TSK_SafetyTask_PWMOFF+0x98>)
 8002214:	f004 fe8e 	bl	8006f34 <NTC_CalcAvTemp>
 8002218:	4605      	mov	r5, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 800221a:	6830      	ldr	r0, [r6, #0]
 800221c:	f000 fddc 	bl	8002dd8 <PWMC_IsFaultOccurred>
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8002220:	f005 050e 	and.w	r5, r5, #14
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8002224:	4305      	orrs	r5, r0
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8002226:	480b      	ldr	r0, [pc, #44]	; (8002254 <TSK_SafetyTask_PWMOFF+0x9c>)
 8002228:	f000 feca 	bl	8002fc0 <RCM_ExecRegularConv>
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 800222c:	4601      	mov	r1, r0
 800222e:	480a      	ldr	r0, [pc, #40]	; (8002258 <TSK_SafetyTask_PWMOFF+0xa0>)
 8002230:	f005 ff8a 	bl	8008148 <RVBS_CalcAvVbus>
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8002234:	b2ad      	uxth	r5, r5
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8002236:	f000 010e 	and.w	r1, r0, #14
 800223a:	4329      	orrs	r1, r5
 800223c:	e7c4      	b.n	80021c8 <TSK_SafetyTask_PWMOFF+0x10>
 800223e:	bf00      	nop
 8002240:	20000668 	.word	0x20000668
 8002244:	20000038 	.word	0x20000038
 8002248:	2000066c 	.word	0x2000066c
 800224c:	20000350 	.word	0x20000350
 8002250:	20000360 	.word	0x20000360
 8002254:	2000037c 	.word	0x2000037c
 8002258:	20000298 	.word	0x20000298

0800225c <TSK_SafetyTask>:
{
 800225c:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <TSK_SafetyTask+0x1c>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b01      	cmp	r3, #1
 8002264:	d000      	beq.n	8002268 <TSK_SafetyTask+0xc>
}
 8002266:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002268:	2000      	movs	r0, #0
 800226a:	f7ff ffa5 	bl	80021b8 <TSK_SafetyTask_PWMOFF>
}
 800226e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8002272:	f000 bf67 	b.w	8003144 <RCM_ExecUserConv>
 8002276:	bf00      	nop
 8002278:	2000040c 	.word	0x2000040c

0800227c <MC_RunMotorControlTasks>:
{
 800227c:	b538      	push	{r3, r4, r5, lr}
  if (0U == bMCBootCompleted)
 800227e:	4b10      	ldr	r3, [pc, #64]	; (80022c0 <MC_RunMotorControlTasks+0x44>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	b1b3      	cbz	r3, 80022b2 <MC_RunMotorControlTasks+0x36>
    if(hMFTaskCounterM1 > 0u)
 8002284:	4d0f      	ldr	r5, [pc, #60]	; (80022c4 <MC_RunMotorControlTasks+0x48>)
 8002286:	882c      	ldrh	r4, [r5, #0]
 8002288:	b1a4      	cbz	r4, 80022b4 <MC_RunMotorControlTasks+0x38>
      hMFTaskCounterM1--;
 800228a:	3c01      	subs	r4, #1
 800228c:	802c      	strh	r4, [r5, #0]
    if(hBootCapDelayCounterM1 > 0U)
 800228e:	4a0e      	ldr	r2, [pc, #56]	; (80022c8 <MC_RunMotorControlTasks+0x4c>)
 8002290:	8813      	ldrh	r3, [r2, #0]
 8002292:	b29b      	uxth	r3, r3
 8002294:	b11b      	cbz	r3, 800229e <MC_RunMotorControlTasks+0x22>
      hBootCapDelayCounterM1--;
 8002296:	8813      	ldrh	r3, [r2, #0]
 8002298:	3b01      	subs	r3, #1
 800229a:	b29b      	uxth	r3, r3
 800229c:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 800229e:	4a0b      	ldr	r2, [pc, #44]	; (80022cc <MC_RunMotorControlTasks+0x50>)
 80022a0:	8813      	ldrh	r3, [r2, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	b11b      	cbz	r3, 80022ae <MC_RunMotorControlTasks+0x32>
      hStopPermanencyCounterM1--;
 80022a6:	8813      	ldrh	r3, [r2, #0]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	8013      	strh	r3, [r2, #0]
    TSK_SafetyTask();
 80022ae:	f7ff ffd5 	bl	800225c <TSK_SafetyTask>
}
 80022b2:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 80022b4:	f000 f99a 	bl	80025ec <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 80022b8:	f7ff fda6 	bl	8001e08 <MC_APP_PostMediumFrequencyHook_M1>
      hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 80022bc:	802c      	strh	r4, [r5, #0]
 80022be:	e7e6      	b.n	800228e <MC_RunMotorControlTasks+0x12>
 80022c0:	2000040c 	.word	0x2000040c
 80022c4:	20000410 	.word	0x20000410
 80022c8:	2000040e 	.word	0x2000040e
 80022cc:	20000412 	.word	0x20000412

080022d0 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80022d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   FOC_Clear(M1);
 80022d2:	2000      	movs	r0, #0
 80022d4:	f000 f8a0 	bl	8002418 <FOC_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80022d8:	2200      	movs	r2, #0
 80022da:	2180      	movs	r1, #128	; 0x80
 80022dc:	4802      	ldr	r0, [pc, #8]	; (80022e8 <TSK_HardwareFaultTask+0x18>)

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80022de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80022e2:	f7ff bdd7 	b.w	8001e94 <MCI_FaultProcessing>
 80022e6:	bf00      	nop
 80022e8:	20000038 	.word	0x20000038

080022ec <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 80022ec:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 80022ee:	f7ff fd7d 	bl	8001dec <MC_GetSTMStateMotor1>
 80022f2:	b118      	cbz	r0, 80022fc <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80022f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 80022f8:	f7ff bd6c 	b.w	8001dd4 <MC_StopMotor1>
}
 80022fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8002300:	f7ff bd62 	b.w	8001dc8 <MC_StartMotor1>

08002304 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8002304:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002306:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800230a:	f44f 32c0 	mov.w	r2, #98304	; 0x18000
  WRITE_REG(GPIOx->LCKR, PinMask);
 800230e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002312:	61da      	str	r2, [r3, #28]
 8002314:	b08e      	sub	sp, #56	; 0x38
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002316:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002318:	61da      	str	r2, [r3, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 800231a:	69d9      	ldr	r1, [r3, #28]
 800231c:	910d      	str	r1, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800231e:	4a36      	ldr	r2, [pc, #216]	; (80023f8 <mc_lock_pins+0xf4>)
  (void) temp;
 8002320:	980d      	ldr	r0, [sp, #52]	; 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002322:	4936      	ldr	r1, [pc, #216]	; (80023fc <mc_lock_pins+0xf8>)
 8002324:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002326:	2008      	movs	r0, #8
 8002328:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800232a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800232c:	69d1      	ldr	r1, [r2, #28]
 800232e:	910c      	str	r1, [sp, #48]	; 0x30
  (void) temp;
 8002330:	980c      	ldr	r0, [sp, #48]	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002332:	4933      	ldr	r1, [pc, #204]	; (8002400 <mc_lock_pins+0xfc>)
 8002334:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002336:	f44f 7080 	mov.w	r0, #256	; 0x100
 800233a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800233c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800233e:	69d9      	ldr	r1, [r3, #28]
 8002340:	910b      	str	r1, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002342:	f44f 7000 	mov.w	r0, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002346:	f44f 3181 	mov.w	r1, #66048	; 0x10200
  (void) temp;
 800234a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800234c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800234e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002350:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002352:	69d9      	ldr	r1, [r3, #28]
 8002354:	910a      	str	r1, [sp, #40]	; 0x28
  (void) temp;
 8002356:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002358:	492a      	ldr	r1, [pc, #168]	; (8002404 <mc_lock_pins+0x100>)
 800235a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800235c:	2040      	movs	r0, #64	; 0x40
 800235e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002360:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002362:	69d9      	ldr	r1, [r3, #28]
 8002364:	9109      	str	r1, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002366:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002368:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  (void) temp;
 800236c:	9809      	ldr	r0, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800236e:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002370:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002372:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002374:	69d0      	ldr	r0, [r2, #28]
 8002376:	9008      	str	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002378:	f44f 6580 	mov.w	r5, #1024	; 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800237c:	f44f 3082 	mov.w	r0, #66560	; 0x10400
  (void) temp;
 8002380:	9e08      	ldr	r6, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002382:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002384:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002386:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002388:	69d8      	ldr	r0, [r3, #28]
 800238a:	9007      	str	r0, [sp, #28]
  (void) temp;
 800238c:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800238e:	481e      	ldr	r0, [pc, #120]	; (8002408 <mc_lock_pins+0x104>)
 8002390:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002392:	2502      	movs	r5, #2
 8002394:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002396:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002398:	69d2      	ldr	r2, [r2, #28]
 800239a:	9206      	str	r2, [sp, #24]
  (void) temp;
 800239c:	9e06      	ldr	r6, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800239e:	4a1b      	ldr	r2, [pc, #108]	; (800240c <mc_lock_pins+0x108>)
 80023a0:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023a2:	2680      	movs	r6, #128	; 0x80
 80023a4:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023a6:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023a8:	69de      	ldr	r6, [r3, #28]
 80023aa:	9605      	str	r6, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023ac:	4a18      	ldr	r2, [pc, #96]	; (8002410 <mc_lock_pins+0x10c>)
  (void) temp;
 80023ae:	9f05      	ldr	r7, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023b0:	4e18      	ldr	r6, [pc, #96]	; (8002414 <mc_lock_pins+0x110>)
 80023b2:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023b4:	2704      	movs	r7, #4
 80023b6:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023b8:	61d6      	str	r6, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023ba:	69d6      	ldr	r6, [r2, #28]
 80023bc:	9604      	str	r6, [sp, #16]
  (void) temp;
 80023be:	9e04      	ldr	r6, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023c0:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023c2:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023c4:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023c6:	69d6      	ldr	r6, [r2, #28]
 80023c8:	9603      	str	r6, [sp, #12]
  (void) temp;
 80023ca:	9e03      	ldr	r6, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023cc:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023ce:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023d0:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023d2:	69d2      	ldr	r2, [r2, #28]
 80023d4:	9202      	str	r2, [sp, #8]
  (void) temp;
 80023d6:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023d8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023da:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023dc:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023de:	69da      	ldr	r2, [r3, #28]
 80023e0:	9201      	str	r2, [sp, #4]
  (void) temp;
 80023e2:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023e4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023e6:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023e8:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023ea:	69db      	ldr	r3, [r3, #28]
 80023ec:	9300      	str	r3, [sp, #0]
  (void) temp;
 80023ee:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
}
 80023f0:	b00e      	add	sp, #56	; 0x38
 80023f2:	bcf0      	pop	{r4, r5, r6, r7}
 80023f4:	4770      	bx	lr
 80023f6:	bf00      	nop
 80023f8:	48000400 	.word	0x48000400
 80023fc:	00010008 	.word	0x00010008
 8002400:	00010100 	.word	0x00010100
 8002404:	00010040 	.word	0x00010040
 8002408:	00010002 	.word	0x00010002
 800240c:	00010080 	.word	0x00010080
 8002410:	48000800 	.word	0x48000800
 8002414:	00010004 	.word	0x00010004

08002418 <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8002418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800241a:	eb00 03c0 	add.w	r3, r0, r0, lsl #3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 800241e:	4a18      	ldr	r2, [pc, #96]	; (8002480 <FOC_Clear+0x68>)
 8002420:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	2400      	movs	r4, #0
 8002428:	189f      	adds	r7, r3, r2
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  FOCVars[bMotor].Iqd = NULL_qd;
 800242a:	f103 060c 	add.w	r6, r3, #12
  FOCVars[bMotor].Iab = NULL_ab;
 800242e:	509c      	str	r4, [r3, r2]
{
 8002430:	4605      	mov	r5, r0
    FOCVars[bMotor].Iqdref = NULL_qd;
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
 8002432:	f103 0116 	add.w	r1, r3, #22
  FOCVars[bMotor].hTeref = (int16_t)0;
 8002436:	2326      	movs	r3, #38	; 0x26
  FOCVars[bMotor].Iab = NULL_ab;
 8002438:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].hTeref = (int16_t)0;
 800243a:	fb03 2305 	mla	r3, r3, r5, r2
  FOCVars[bMotor].Iqd = NULL_qd;
 800243e:	50b4      	str	r4, [r6, r2]
 8002440:	18b7      	adds	r7, r6, r2
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002442:	4810      	ldr	r0, [pc, #64]	; (8002484 <FOC_Clear+0x6c>)
  FOCVars[bMotor].Iqd = NULL_qd;
 8002444:	607c      	str	r4, [r7, #4]
  FOCVars[bMotor].Vqd = NULL_qd;
 8002446:	188e      	adds	r6, r1, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
 8002448:	83dc      	strh	r4, [r3, #30]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 800244a:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
  FOCVars[bMotor].Vqd = NULL_qd;
 800244e:	508c      	str	r4, [r1, r2]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002450:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 8002452:	6074      	str	r4, [r6, #4]
  FOCVars[bMotor].hElAngle = (int16_t)0;
 8002454:	841c      	strh	r4, [r3, #32]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002456:	f004 fd8d 	bl	8006f74 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 800245a:	4b0b      	ldr	r3, [pc, #44]	; (8002488 <FOC_Clear+0x70>)
 800245c:	4621      	mov	r1, r4
 800245e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002462:	f004 fd87 	bl	8006f74 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8002466:	4b09      	ldr	r3, [pc, #36]	; (800248c <FOC_Clear+0x74>)
 8002468:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800246c:	f005 feec 	bl	8008248 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002470:	4b07      	ldr	r3, [pc, #28]	; (8002490 <FOC_Clear+0x78>)
 8002472:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8002476:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800247a:	f000 bc55 	b.w	8002d28 <PWMC_SwitchOffPWM>
 800247e:	bf00      	nop
 8002480:	2000063c 	.word	0x2000063c
 8002484:	2000028c 	.word	0x2000028c
 8002488:	20000288 	.word	0x20000288
 800248c:	20000294 	.word	0x20000294
 8002490:	20000668 	.word	0x20000668

08002494 <FOC_Init>:
{
 8002494:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002498:	4b2e      	ldr	r3, [pc, #184]	; (8002554 <FOC_Init+0xc0>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 800249a:	4f2f      	ldr	r7, [pc, #188]	; (8002558 <FOC_Init+0xc4>)
    ENC_Init (&ENCODER_M1);
 800249c:	4e2f      	ldr	r6, [pc, #188]	; (800255c <FOC_Init+0xc8>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800249e:	4830      	ldr	r0, [pc, #192]	; (8002560 <FOC_Init+0xcc>)
 80024a0:	6018      	str	r0, [r3, #0]
{
 80024a2:	b083      	sub	sp, #12
    R3_1_Init(&PWM_Handle_M1);
 80024a4:	f005 f860 	bl	8007568 <R3_1_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80024a8:	4d2e      	ldr	r5, [pc, #184]	; (8002564 <FOC_Init+0xd0>)
 80024aa:	f8df 90ec 	ldr.w	r9, [pc, #236]	; 8002598 <FOC_Init+0x104>
    PID_HandleInit(&PID_PosParamsM1);
 80024ae:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 800259c <FOC_Init+0x108>
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 80024b2:	4c2d      	ldr	r4, [pc, #180]	; (8002568 <FOC_Init+0xd4>)
    startTimers();
 80024b4:	f000 fa92 	bl	80029dc <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80024b8:	4638      	mov	r0, r7
 80024ba:	f004 fd53 	bl	8006f64 <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 80024be:	4630      	mov	r0, r6
 80024c0:	f004 fbaa 	bl	8006c18 <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80024c4:	6829      	ldr	r1, [r5, #0]
 80024c6:	4a29      	ldr	r2, [pc, #164]	; (800256c <FOC_Init+0xd8>)
 80024c8:	4633      	mov	r3, r6
 80024ca:	4648      	mov	r0, r9
 80024cc:	f004 fb56 	bl	8006b7c <EAC_Init>
    pEAC[M1] = &EncAlignCtrlM1;
 80024d0:	4b27      	ldr	r3, [pc, #156]	; (8002570 <FOC_Init+0xdc>)
    PID_HandleInit(&PID_PosParamsM1);
 80024d2:	4640      	mov	r0, r8
    pEAC[M1] = &EncAlignCtrlM1;
 80024d4:	f8c3 9000 	str.w	r9, [r3]
    PID_HandleInit(&PID_PosParamsM1);
 80024d8:	f004 fd44 	bl	8006f64 <PID_HandleInit>
    TC_Init(&PosCtrlM1, &PID_PosParamsM1, &SpeednTorqCtrlM1, &ENCODER_M1);
 80024dc:	4633      	mov	r3, r6
 80024de:	4641      	mov	r1, r8
 80024e0:	4a24      	ldr	r2, [pc, #144]	; (8002574 <FOC_Init+0xe0>)
 80024e2:	4825      	ldr	r0, [pc, #148]	; (8002578 <FOC_Init+0xe4>)
 80024e4:	f005 ff46 	bl	8008374 <TC_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80024e8:	4632      	mov	r2, r6
 80024ea:	4639      	mov	r1, r7
 80024ec:	6828      	ldr	r0, [r5, #0]
 80024ee:	f005 fe95 	bl	800821c <STC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 80024f2:	4822      	ldr	r0, [pc, #136]	; (800257c <FOC_Init+0xe8>)
 80024f4:	f004 fd36 	bl	8006f64 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 80024f8:	4821      	ldr	r0, [pc, #132]	; (8002580 <FOC_Init+0xec>)
 80024fa:	f004 fd33 	bl	8006f64 <PID_HandleInit>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80024fe:	4a21      	ldr	r2, [pc, #132]	; (8002584 <FOC_Init+0xf0>)
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002500:	4b21      	ldr	r3, [pc, #132]	; (8002588 <FOC_Init+0xf4>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	4821      	ldr	r0, [pc, #132]	; (800258c <FOC_Init+0xf8>)
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002506:	4922      	ldr	r1, [pc, #136]	; (8002590 <FOC_Init+0xfc>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002508:	e9c2 4002 	strd	r4, r0, [r2, #8]
    REMNG_Init(pREMNG[M1]);
 800250c:	4618      	mov	r0, r3
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 800250e:	600b      	str	r3, [r1, #0]
    REMNG_Init(pREMNG[M1]);
 8002510:	f005 fe46 	bl	80081a0 <REMNG_Init>
    FOC_Clear(M1);
 8002514:	2000      	movs	r0, #0
 8002516:	f7ff ff7f 	bl	8002418 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 800251a:	2301      	movs	r3, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800251c:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 800251e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002522:	f005 ff13 	bl	800834c <STC_GetDefaultIqdref>
 8002526:	f3c0 420f 	ubfx	r2, r0, #16, #16
 800252a:	4603      	mov	r3, r0
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800252c:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800252e:	8262      	strh	r2, [r4, #18]
 8002530:	8223      	strh	r3, [r4, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002532:	f005 ff0b 	bl	800834c <STC_GetDefaultIqdref>
 8002536:	f3c0 430f 	ubfx	r3, r0, #16, #16
    MCI_ExecSpeedRamp(&Mci[M1],
 800253a:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800253c:	82a3      	strh	r3, [r4, #20]
    MCI_ExecSpeedRamp(&Mci[M1],
 800253e:	f005 ff01 	bl	8008344 <STC_GetMecSpeedRefUnitDefault>
 8002542:	4601      	mov	r1, r0
 8002544:	4813      	ldr	r0, [pc, #76]	; (8002594 <FOC_Init+0x100>)
 8002546:	2200      	movs	r2, #0
}
 8002548:	b003      	add	sp, #12
 800254a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    MCI_ExecSpeedRamp(&Mci[M1],
 800254e:	f7ff bc5d 	b.w	8001e0c <MCI_ExecSpeedRamp>
 8002552:	bf00      	nop
 8002554:	20000668 	.word	0x20000668
 8002558:	200000bc 	.word	0x200000bc
 800255c:	200002b4 	.word	0x200002b4
 8002560:	20000124 	.word	0x20000124
 8002564:	20000294 	.word	0x20000294
 8002568:	2000063c 	.word	0x2000063c
 800256c:	2000038c 	.word	0x2000038c
 8002570:	2000066c 	.word	0x2000066c
 8002574:	20000250 	.word	0x20000250
 8002578:	200001c8 	.word	0x200001c8
 800257c:	20000090 	.word	0x20000090
 8002580:	20000064 	.word	0x20000064
 8002584:	20000284 	.word	0x20000284
 8002588:	20000238 	.word	0x20000238
 800258c:	20000298 	.word	0x20000298
 8002590:	20000664 	.word	0x20000664
 8002594:	20000038 	.word	0x20000038
 8002598:	20000334 	.word	0x20000334
 800259c:	200000e8 	.word	0x200000e8

080025a0 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop

080025a4 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80025a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80025a8:	b672      	cpsid	i

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference latching */
  /* to avoid MF task writing them while HF task reading them */
  __disable_irq();
  IqdTmp = FOCVars[bMotor].Iqdref;
 80025aa:	4e0e      	ldr	r6, [pc, #56]	; (80025e4 <FOC_CalcCurrRef+0x40>)
 80025ac:	2326      	movs	r3, #38	; 0x26
 80025ae:	2410      	movs	r4, #16
 80025b0:	fb13 4400 	smlabb	r4, r3, r0, r4
 80025b4:	19a7      	adds	r7, r4, r6
 80025b6:	5fa2      	ldrsh	r2, [r4, r6]
 80025b8:	f9b7 8002 	ldrsh.w	r8, [r7, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 80025bc:	b662      	cpsie	i
  __enable_irq();

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80025be:	fb03 6500 	mla	r5, r3, r0, r6
 80025c2:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
 80025c6:	b933      	cbnz	r3, 80025d6 <FOC_CalcCurrRef+0x32>
  {
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80025c8:	4b07      	ldr	r3, [pc, #28]	; (80025e8 <FOC_CalcCurrRef+0x44>)
 80025ca:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80025ce:	f005 fe8d 	bl	80082ec <STC_CalcTorqueReference>
 80025d2:	4602      	mov	r2, r0
 80025d4:	83e8      	strh	r0, [r5, #30]
  __ASM volatile ("cpsid i" : : : "memory");
 80025d6:	b672      	cpsid	i
  }

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference restoring */
  __disable_irq();
  FOCVars[bMotor].Iqdref = IqdTmp;
 80025d8:	53a2      	strh	r2, [r4, r6]
 80025da:	f8a7 8002 	strh.w	r8, [r7, #2]
  __ASM volatile ("cpsie i" : : : "memory");
 80025de:	b662      	cpsie	i
  /* Exit critical section */
  __enable_irq();
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80025e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80025e4:	2000063c 	.word	0x2000063c
 80025e8:	20000294 	.word	0x20000294

080025ec <TSK_MediumFrequencyTaskM1>:
{
 80025ec:	b570      	push	{r4, r5, r6, lr}
 80025ee:	b082      	sub	sp, #8
  int16_t wAux = 0;
 80025f0:	a902      	add	r1, sp, #8
 80025f2:	2300      	movs	r3, #0
 80025f4:	f821 3d02 	strh.w	r3, [r1, #-2]!
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 80025f8:	48a6      	ldr	r0, [pc, #664]	; (8002894 <TSK_MediumFrequencyTaskM1+0x2a8>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80025fa:	4ca7      	ldr	r4, [pc, #668]	; (8002898 <TSK_MediumFrequencyTaskM1+0x2ac>)
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 80025fc:	f004 fb74 	bl	8006ce8 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8002600:	4ba6      	ldr	r3, [pc, #664]	; (800289c <TSK_MediumFrequencyTaskM1+0x2b0>)
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	f004 fd1c 	bl	8007040 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002608:	4620      	mov	r0, r4
 800260a:	f7ff fc97 	bl	8001f3c <MCI_GetCurrentFaults>
 800260e:	b120      	cbz	r0, 800261a <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 8002610:	230a      	movs	r3, #10
 8002612:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
 8002616:	b002      	add	sp, #8
 8002618:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 800261a:	4620      	mov	r0, r4
 800261c:	f7ff fc8c 	bl	8001f38 <MCI_GetOccurredFaults>
 8002620:	bb80      	cbnz	r0, 8002684 <TSK_MediumFrequencyTaskM1+0x98>
      switch (Mci[M1].State)
 8002622:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8002626:	2b14      	cmp	r3, #20
 8002628:	d8f5      	bhi.n	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
 800262a:	a201      	add	r2, pc, #4	; (adr r2, 8002630 <TSK_MediumFrequencyTaskM1+0x44>)
 800262c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002630:	080027f5 	.word	0x080027f5
 8002634:	08002617 	.word	0x08002617
 8002638:	080027a5 	.word	0x080027a5
 800263c:	08002617 	.word	0x08002617
 8002640:	08002617 	.word	0x08002617
 8002644:	08002617 	.word	0x08002617
 8002648:	08002787 	.word	0x08002787
 800264c:	08002617 	.word	0x08002617
 8002650:	0800277b 	.word	0x0800277b
 8002654:	08002617 	.word	0x08002617
 8002658:	08002685 	.word	0x08002685
 800265c:	08002765 	.word	0x08002765
 8002660:	08002617 	.word	0x08002617
 8002664:	08002617 	.word	0x08002617
 8002668:	08002617 	.word	0x08002617
 800266c:	08002617 	.word	0x08002617
 8002670:	08002711 	.word	0x08002711
 8002674:	080026d9 	.word	0x080026d9
 8002678:	08002617 	.word	0x08002617
 800267c:	08002617 	.word	0x08002617
 8002680:	0800268f 	.word	0x0800268f
      Mci[M1].State = FAULT_OVER;
 8002684:	230b      	movs	r3, #11
 8002686:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
}
 800268a:	b002      	add	sp, #8
 800268c:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 800268e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002692:	2b05      	cmp	r3, #5
 8002694:	f000 80c0 	beq.w	8002818 <TSK_MediumFrequencyTaskM1+0x22c>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 8002698:	f7ff fd7e 	bl	8002198 <TSK_StopPermanencyTimeHasElapsedM1>
 800269c:	2800      	cmp	r0, #0
 800269e:	d0ba      	beq.n	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
              ENC_Clear(&ENCODER_M1);
 80026a0:	487c      	ldr	r0, [pc, #496]	; (8002894 <TSK_MediumFrequencyTaskM1+0x2a8>)
 80026a2:	f004 faf5 	bl	8006c90 <ENC_Clear>
              R3_1_SwitchOnPWM(pwmcHandle[M1]);
 80026a6:	4b7e      	ldr	r3, [pc, #504]	; (80028a0 <TSK_MediumFrequencyTaskM1+0x2b4>)
 80026a8:	6818      	ldr	r0, [r3, #0]
 80026aa:	f004 fe1d 	bl	80072e8 <R3_1_SwitchOnPWM>
              TC_EncAlignmentCommand(pPosCtrl[M1]);
 80026ae:	4b7d      	ldr	r3, [pc, #500]	; (80028a4 <TSK_MediumFrequencyTaskM1+0x2b8>)
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	f005 fff5 	bl	80086a0 <TC_EncAlignmentCommand>
              FOC_InitAdditionalMethods(M1);
 80026b6:	2000      	movs	r0, #0
 80026b8:	f7ff ff72 	bl	80025a0 <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 80026bc:	4b7a      	ldr	r3, [pc, #488]	; (80028a8 <TSK_MediumFrequencyTaskM1+0x2bc>)
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	f005 fe50 	bl	8008364 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 80026c4:	4874      	ldr	r0, [pc, #464]	; (8002898 <TSK_MediumFrequencyTaskM1+0x2ac>)
 80026c6:	f7ff fbf1 	bl	8001eac <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 80026ca:	2000      	movs	r0, #0
 80026cc:	f7ff ff6a 	bl	80025a4 <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 80026d0:	2306      	movs	r3, #6
 80026d2:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 80026d6:	e79e      	b.n	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80026d8:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80026dc:	4d70      	ldr	r5, [pc, #448]	; (80028a0 <TSK_MediumFrequencyTaskM1+0x2b4>)
 80026de:	2b05      	cmp	r3, #5
 80026e0:	6828      	ldr	r0, [r5, #0]
 80026e2:	f000 809b 	beq.w	800281c <TSK_MediumFrequencyTaskM1+0x230>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 80026e6:	2101      	movs	r1, #1
 80026e8:	f000 fb22 	bl	8002d30 <PWMC_CurrentReadingCalibr>
 80026ec:	2800      	cmp	r0, #0
 80026ee:	d092      	beq.n	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 80026f0:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80026f4:	2b03      	cmp	r3, #3
 80026f6:	f000 80ac 	beq.w	8002852 <TSK_MediumFrequencyTaskM1+0x266>
                R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80026fa:	6828      	ldr	r0, [r5, #0]
 80026fc:	2100      	movs	r1, #0
 80026fe:	f004 fee7 	bl	80074d0 <R3_1_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8002702:	2014      	movs	r0, #20
 8002704:	f7ff fd32 	bl	800216c <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 8002708:	2310      	movs	r3, #16
 800270a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 800270e:	e782      	b.n	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002710:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002714:	2b05      	cmp	r3, #5
 8002716:	d07f      	beq.n	8002818 <TSK_MediumFrequencyTaskM1+0x22c>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8002718:	f7ff fd2e 	bl	8002178 <TSK_ChargeBootCapDelayHasElapsedM1>
 800271c:	2800      	cmp	r0, #0
 800271e:	f43f af7a 	beq.w	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8002722:	4e5f      	ldr	r6, [pc, #380]	; (80028a0 <TSK_MediumFrequencyTaskM1+0x2b4>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002724:	4d60      	ldr	r5, [pc, #384]	; (80028a8 <TSK_MediumFrequencyTaskM1+0x2bc>)
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8002726:	6830      	ldr	r0, [r6, #0]
 8002728:	f004 fe28 	bl	800737c <R3_1_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 800272c:	4b5f      	ldr	r3, [pc, #380]	; (80028ac <TSK_MediumFrequencyTaskM1+0x2c0>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800272e:	4960      	ldr	r1, [pc, #384]	; (80028b0 <TSK_MediumFrequencyTaskM1+0x2c4>)
 8002730:	6828      	ldr	r0, [r5, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002738:	f005 fd84 	bl	8008244 <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 800273c:	4855      	ldr	r0, [pc, #340]	; (8002894 <TSK_MediumFrequencyTaskM1+0x2a8>)
 800273e:	f004 faa7 	bl	8006c90 <ENC_Clear>
              FOC_Clear( M1 );
 8002742:	2000      	movs	r0, #0
 8002744:	f7ff fe68 	bl	8002418 <FOC_Clear>
              if (EAC_IsAligned(&EncAlignCtrlM1) == false)
 8002748:	485a      	ldr	r0, [pc, #360]	; (80028b4 <TSK_MediumFrequencyTaskM1+0x2c8>)
 800274a:	7b83      	ldrb	r3, [r0, #14]
 800274c:	2b00      	cmp	r3, #0
 800274e:	f040 8089 	bne.w	8002864 <TSK_MediumFrequencyTaskM1+0x278>
                EAC_StartAlignment(&EncAlignCtrlM1);
 8002752:	f004 fa1d 	bl	8006b90 <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 8002756:	2302      	movs	r3, #2
 8002758:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 800275c:	6830      	ldr	r0, [r6, #0]
 800275e:	f000 fae5 	bl	8002d2c <PWMC_SwitchOnPWM>
 8002762:	e758      	b.n	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8002764:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 8002768:	2b02      	cmp	r3, #2
 800276a:	f47f af54 	bne.w	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 800276e:	2300      	movs	r3, #0
 8002770:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
            Mci[M1].State = IDLE;
 8002774:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8002778:	e74d      	b.n	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 800277a:	f7ff fd0d 	bl	8002198 <TSK_StopPermanencyTimeHasElapsedM1>
 800277e:	2800      	cmp	r0, #0
 8002780:	f43f af49 	beq.w	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
 8002784:	e7f3      	b.n	800276e <TSK_MediumFrequencyTaskM1+0x182>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002786:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 800278a:	2b05      	cmp	r3, #5
 800278c:	d044      	beq.n	8002818 <TSK_MediumFrequencyTaskM1+0x22c>
            TC_PositionRegulation(pPosCtrl[M1]);
 800278e:	4b45      	ldr	r3, [pc, #276]	; (80028a4 <TSK_MediumFrequencyTaskM1+0x2b8>)
 8002790:	6818      	ldr	r0, [r3, #0]
 8002792:	f005 feb7 	bl	8008504 <TC_PositionRegulation>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8002796:	4840      	ldr	r0, [pc, #256]	; (8002898 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8002798:	f7ff fb88 	bl	8001eac <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 800279c:	2000      	movs	r0, #0
 800279e:	f7ff ff01 	bl	80025a4 <FOC_CalcCurrRef>
 80027a2:	e738      	b.n	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80027a4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80027a8:	2b05      	cmp	r3, #5
 80027aa:	d035      	beq.n	8002818 <TSK_MediumFrequencyTaskM1+0x22c>
            bool isAligned = EAC_IsAligned(&EncAlignCtrlM1);
 80027ac:	4841      	ldr	r0, [pc, #260]	; (80028b4 <TSK_MediumFrequencyTaskM1+0x2c8>)
 80027ae:	7b85      	ldrb	r5, [r0, #14]
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 80027b0:	f004 fa1a 	bl	8006be8 <EAC_Exec>
 80027b4:	4606      	mov	r6, r0
            if ((isAligned == false)  && (EACDone == false))
 80027b6:	b90d      	cbnz	r5, 80027bc <TSK_MediumFrequencyTaskM1+0x1d0>
 80027b8:	2800      	cmp	r0, #0
 80027ba:	d042      	beq.n	8002842 <TSK_MediumFrequencyTaskM1+0x256>
              R3_1_SwitchOffPWM( pwmcHandle[M1] );
 80027bc:	4d38      	ldr	r5, [pc, #224]	; (80028a0 <TSK_MediumFrequencyTaskM1+0x2b4>)
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 80027be:	4e3a      	ldr	r6, [pc, #232]	; (80028a8 <TSK_MediumFrequencyTaskM1+0x2bc>)
              R3_1_SwitchOffPWM( pwmcHandle[M1] );
 80027c0:	6828      	ldr	r0, [r5, #0]
 80027c2:	f004 fddb 	bl	800737c <R3_1_SwitchOffPWM>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 80027c6:	6830      	ldr	r0, [r6, #0]
 80027c8:	2103      	movs	r1, #3
 80027ca:	f005 fd45 	bl	8008258 <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 80027ce:	4931      	ldr	r1, [pc, #196]	; (8002894 <TSK_MediumFrequencyTaskM1+0x2a8>)
 80027d0:	6830      	ldr	r0, [r6, #0]
 80027d2:	f005 fd37 	bl	8008244 <STC_SetSpeedSensor>
              FOC_Clear(M1);
 80027d6:	2000      	movs	r0, #0
 80027d8:	f7ff fe1e 	bl	8002418 <FOC_Clear>
              R3_1_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80027dc:	6828      	ldr	r0, [r5, #0]
 80027de:	2100      	movs	r1, #0
 80027e0:	f004 fe76 	bl	80074d0 <R3_1_TurnOnLowSides>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 80027e4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80027e8:	f7ff fcd0 	bl	800218c <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 80027ec:	2314      	movs	r3, #20
 80027ee:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 80027f2:	e710      	b.n	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 80027f4:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80027f8:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	f47f af0a 	bne.w	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8002802:	4d27      	ldr	r5, [pc, #156]	; (80028a0 <TSK_MediumFrequencyTaskM1+0x2b4>)
 8002804:	6828      	ldr	r0, [r5, #0]
 8002806:	f890 107f 	ldrb.w	r1, [r0, #127]	; 0x7f
 800280a:	b9a1      	cbnz	r1, 8002836 <TSK_MediumFrequencyTaskM1+0x24a>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 800280c:	f000 fa90 	bl	8002d30 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8002810:	2311      	movs	r3, #17
 8002812:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8002816:	e6fe      	b.n	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
    R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8002818:	4b21      	ldr	r3, [pc, #132]	; (80028a0 <TSK_MediumFrequencyTaskM1+0x2b4>)
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	f004 fdae 	bl	800737c <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 8002820:	2000      	movs	r0, #0
 8002822:	f7ff fdf9 	bl	8002418 <FOC_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8002826:	f44f 7048 	mov.w	r0, #800	; 0x320
 800282a:	f7ff fcaf 	bl	800218c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 800282e:	2308      	movs	r3, #8
 8002830:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8002834:	e6ef      	b.n	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8002836:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 800283a:	4619      	mov	r1, r3
 800283c:	f000 fa78 	bl	8002d30 <PWMC_CurrentReadingCalibr>
 8002840:	e75b      	b.n	80026fa <TSK_MediumFrequencyTaskM1+0x10e>
              IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 8002842:	4b19      	ldr	r3, [pc, #100]	; (80028a8 <TSK_MediumFrequencyTaskM1+0x2bc>)
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	f005 fd51 	bl	80082ec <STC_CalcTorqueReference>
              FOCVars[M1].Iqdref = IqdRef;
 800284a:	4b18      	ldr	r3, [pc, #96]	; (80028ac <TSK_MediumFrequencyTaskM1+0x2c0>)
 800284c:	8258      	strh	r0, [r3, #18]
 800284e:	821e      	strh	r6, [r3, #16]
            {
 8002850:	e6e1      	b.n	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
                FOC_Clear(M1);
 8002852:	2000      	movs	r0, #0
 8002854:	f7ff fde0 	bl	8002418 <FOC_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002858:	2300      	movs	r3, #0
 800285a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
                Mci[M1].State = IDLE;
 800285e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8002862:	e6d8      	b.n	8002616 <TSK_MediumFrequencyTaskM1+0x2a>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8002864:	2103      	movs	r1, #3
 8002866:	6828      	ldr	r0, [r5, #0]
 8002868:	f005 fcf6 	bl	8008258 <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 800286c:	4909      	ldr	r1, [pc, #36]	; (8002894 <TSK_MediumFrequencyTaskM1+0x2a8>)
 800286e:	6828      	ldr	r0, [r5, #0]
 8002870:	f005 fce8 	bl	8008244 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8002874:	2000      	movs	r0, #0
 8002876:	f7ff fe93 	bl	80025a0 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 800287a:	2000      	movs	r0, #0
 800287c:	f7ff fe92 	bl	80025a4 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8002880:	6828      	ldr	r0, [r5, #0]
 8002882:	f005 fd6f 	bl	8008364 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8002886:	4804      	ldr	r0, [pc, #16]	; (8002898 <TSK_MediumFrequencyTaskM1+0x2ac>)
 8002888:	f7ff fb10 	bl	8001eac <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 800288c:	2306      	movs	r3, #6
 800288e:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
 8002892:	e763      	b.n	800275c <TSK_MediumFrequencyTaskM1+0x170>
 8002894:	200002b4 	.word	0x200002b4
 8002898:	20000038 	.word	0x20000038
 800289c:	20000284 	.word	0x20000284
 80028a0:	20000668 	.word	0x20000668
 80028a4:	20000290 	.word	0x20000290
 80028a8:	20000294 	.word	0x20000294
 80028ac:	2000063c 	.word	0x2000063c
 80028b0:	2000038c 	.word	0x2000038c
 80028b4:	20000334 	.word	0x20000334

080028b8 <FOC_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
{
 80028b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80028bc:	4607      	mov	r7, r0
 80028be:	b087      	sub	sp, #28
  uint16_t hFOCreturn;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 80028c0:	482f      	ldr	r0, [pc, #188]	; (8002980 <FOC_HighFrequencyTask+0xc8>)
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80028c2:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 800299c <FOC_HighFrequencyTask+0xe4>
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80028c6:	4c2f      	ldr	r4, [pc, #188]	; (8002984 <FOC_HighFrequencyTask+0xcc>)
  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 80028c8:	f004 f9f4 	bl	8006cb4 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80028cc:	4b2e      	ldr	r3, [pc, #184]	; (8002988 <FOC_HighFrequencyTask+0xd0>)
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 80028ce:	f8d8 0000 	ldr.w	r0, [r8]
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 80028d2:	681a      	ldr	r2, [r3, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 80028d4:	6803      	ldr	r3, [r0, #0]
  hElAngle = SPD_GetElAngle(speedHandle);
 80028d6:	6952      	ldr	r2, [r2, #20]
 80028d8:	a903      	add	r1, sp, #12
 80028da:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 80028de:	4798      	blx	r3
  RCM_ReadOngoingConv();
 80028e0:	f000 fd6e 	bl	80033c0 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 80028e4:	f000 fd2a 	bl	800333c <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 80028e8:	9803      	ldr	r0, [sp, #12]
 80028ea:	f7ff fb69 	bl	8001fc0 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80028ee:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 80028f0:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80028f2:	f7ff fba1 	bl	8002038 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80028f6:	4b25      	ldr	r3, [pc, #148]	; (800298c <FOC_HighFrequencyTask+0xd4>)
 80028f8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 80028fc:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 80028fe:	b200      	sxth	r0, r0
 8002900:	1a09      	subs	r1, r1, r0
 8002902:	6818      	ldr	r0, [r3, #0]
 8002904:	f004 fb38 	bl	8006f78 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002908:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 800290c:	4b20      	ldr	r3, [pc, #128]	; (8002990 <FOC_HighFrequencyTask+0xd8>)
 800290e:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002912:	4605      	mov	r5, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002914:	1a89      	subs	r1, r1, r2
 8002916:	6818      	ldr	r0, [r3, #0]
 8002918:	f004 fb2e 	bl	8006f78 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 800291c:	f8ad 5008 	strh.w	r5, [sp, #8]
 8002920:	f8ad 000a 	strh.w	r0, [sp, #10]
 8002924:	9902      	ldr	r1, [sp, #8]
 8002926:	481b      	ldr	r0, [pc, #108]	; (8002994 <FOC_HighFrequencyTask+0xdc>)
 8002928:	f004 f8f4 	bl	8006b14 <Circle_Limitation>
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800292c:	4631      	mov	r1, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 800292e:	fa0f f980 	sxth.w	r9, r0
 8002932:	1405      	asrs	r5, r0, #16
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002934:	f7ff fbba 	bl	80020ac <MCM_Rev_Park>
 8002938:	4603      	mov	r3, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800293a:	4601      	mov	r1, r0
 800293c:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002940:	9305      	str	r3, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002942:	f000 f8b3 	bl	8002aac <PWMC_SetPhaseVoltage>
 8002946:	4601      	mov	r1, r0

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8002948:	9803      	ldr	r0, [sp, #12]
 800294a:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 800294c:	9804      	ldr	r0, [sp, #16]
 800294e:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8002950:	9801      	ldr	r0, [sp, #4]
 8002952:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_DURATION)
 8002954:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8002956:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].hElAngle = hElAngle;
 8002958:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Vqd = Vqd;
 800295a:	f8a4 9016 	strh.w	r9, [r4, #22]
 800295e:	8325      	strh	r5, [r4, #24]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002960:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_DURATION)
 8002964:	d003      	beq.n	800296e <FOC_HighFrequencyTask+0xb6>
}
 8002966:	4638      	mov	r0, r7
 8002968:	b007      	add	sp, #28
 800296a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 800296e:	2200      	movs	r2, #0
 8002970:	4809      	ldr	r0, [pc, #36]	; (8002998 <FOC_HighFrequencyTask+0xe0>)
 8002972:	f7ff fa8f 	bl	8001e94 <MCI_FaultProcessing>
}
 8002976:	4638      	mov	r0, r7
 8002978:	b007      	add	sp, #28
 800297a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800297e:	bf00      	nop
 8002980:	200002b4 	.word	0x200002b4
 8002984:	2000063c 	.word	0x2000063c
 8002988:	20000294 	.word	0x20000294
 800298c:	2000028c 	.word	0x2000028c
 8002990:	20000288 	.word	0x20000288
 8002994:	20000034 	.word	0x20000034
 8002998:	20000038 	.word	0x20000038
 800299c:	20000668 	.word	0x20000668

080029a0 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80029a0:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 80029a2:	f002 fcd9 	bl	8005358 <HAL_RCC_GetHCLKFreq>
 80029a6:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <MX_MotorControl_Init+0x30>)
 80029a8:	fba3 3000 	umull	r3, r0, r3, r0
 80029ac:	09c0      	lsrs	r0, r0, #7
 80029ae:	f001 ff53 	bl	8004858 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 80029b2:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <MX_MotorControl_Init+0x34>)
 80029b4:	2200      	movs	r2, #0
 80029b6:	6819      	ldr	r1, [r3, #0]
 80029b8:	f04f 30ff 	mov.w	r0, #4294967295
 80029bc:	f001 ff08 	bl	80047d0 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 80029c0:	4805      	ldr	r0, [pc, #20]	; (80029d8 <MX_MotorControl_Init+0x38>)
 80029c2:	f7ff fba1 	bl	8002108 <MCboot>
  mc_lock_pins();
}
 80029c6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 80029ca:	f7ff bc9b 	b.w	8002304 <mc_lock_pins>
 80029ce:	bf00      	nop
 80029d0:	10624dd3 	.word	0x10624dd3
 80029d4:	200003e0 	.word	0x200003e0
 80029d8:	20000670 	.word	0x20000670

080029dc <startTimers>:
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 80029dc:	4a21      	ldr	r2, [pc, #132]	; (8002a64 <startTimers+0x88>)
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 80029de:	4922      	ldr	r1, [pc, #136]	; (8002a68 <startTimers+0x8c>)
 80029e0:	6893      	ldr	r3, [r2, #8]
 80029e2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80029e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ea:	f043 0310 	orr.w	r3, r3, #16
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 80029ee:	b430      	push	{r4, r5}
 80029f0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 80029f2:	6893      	ldr	r3, [r2, #8]
 80029f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029f8:	f023 0307 	bic.w	r3, r3, #7
 80029fc:	f043 0306 	orr.w	r3, r3, #6
 8002a00:	6093      	str	r3, [r2, #8]
 8002a02:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8002a04:	07db      	lsls	r3, r3, #31
 8002a06:	b082      	sub	sp, #8
 8002a08:	d415      	bmi.n	8002a36 <startTimers+0x5a>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002a0a:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8002a0c:	f043 0301 	orr.w	r3, r3, #1
 8002a10:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002a12:	6d8b      	ldr	r3, [r1, #88]	; 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002a14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002a1e:	9b01      	ldr	r3, [sp, #4]
 8002a20:	6953      	ldr	r3, [r2, #20]
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6153      	str	r3, [r2, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002a28:	6d8b      	ldr	r3, [r1, #88]	; 0x58
 8002a2a:	f023 0301 	bic.w	r3, r3, #1
 8002a2e:	658b      	str	r3, [r1, #88]	; 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8002a30:	b002      	add	sp, #8
 8002a32:	bc30      	pop	{r4, r5}
 8002a34:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8002a36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002a3a:	4c0c      	ldr	r4, [pc, #48]	; (8002a6c <startTimers+0x90>)
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	6859      	ldr	r1, [r3, #4]
 8002a40:	4d0b      	ldr	r5, [pc, #44]	; (8002a70 <startTimers+0x94>)
 8002a42:	4021      	ands	r1, r4
 8002a44:	f041 0120 	orr.w	r1, r1, #32
 8002a48:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002a4a:	6958      	ldr	r0, [r3, #20]
 8002a4c:	f040 0001 	orr.w	r0, r0, #1
 8002a50:	6158      	str	r0, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002a52:	6859      	ldr	r1, [r3, #4]
 8002a54:	402a      	ands	r2, r5
 8002a56:	4021      	ands	r1, r4
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	605a      	str	r2, [r3, #4]
}
 8002a5c:	b002      	add	sp, #8
 8002a5e:	bc30      	pop	{r4, r5}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	fdffff8f 	.word	0xfdffff8f
 8002a70:	02000070 	.word	0x02000070

08002a74 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8002a74:	3201      	adds	r2, #1
{
 8002a76:	b470      	push	{r4, r5, r6}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8002a78:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002a7a:	f06f 0602 	mvn.w	r6, #2
 8002a7e:	0154      	lsls	r4, r2, #5
 8002a80:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8002a82:	2500      	movs	r5, #0
    while (*cnt < NB_CONVERSIONS)
 8002a84:	e002      	b.n	8002a8c <waitForPolarizationEnd+0x18>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002a86:	6902      	ldr	r2, [r0, #16]
 8002a88:	0792      	lsls	r2, r2, #30
 8002a8a:	d404      	bmi.n	8002a96 <waitForPolarizationEnd+0x22>
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	2a0f      	cmp	r2, #15
 8002a90:	d9f9      	bls.n	8002a86 <waitForPolarizationEnd+0x12>
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 8002a92:	bc70      	pop	{r4, r5, r6}
 8002a94:	4770      	bx	lr
        hCalibrationPeriodCounter++;
 8002a96:	3501      	adds	r5, #1
 8002a98:	b2ad      	uxth	r5, r5
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8002a9a:	42ac      	cmp	r4, r5
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002a9c:	6106      	str	r6, [r0, #16]
 8002a9e:	d8f5      	bhi.n	8002a8c <waitForPolarizationEnd+0x18>
          if (*cnt < NB_CONVERSIONS)
 8002aa0:	781a      	ldrb	r2, [r3, #0]
 8002aa2:	2a0f      	cmp	r2, #15
 8002aa4:	d8f2      	bhi.n	8002a8c <waitForPolarizationEnd+0x18>
            *SWerror = 1u;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	800b      	strh	r3, [r1, #0]
            break;
 8002aaa:	e7f2      	b.n	8002a92 <waitForPolarizationEnd+0x1e>

08002aac <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002aac:	b4f0      	push	{r4, r5, r6, r7}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002aae:	f8b0 6070 	ldrh.w	r6, [r0, #112]	; 0x70
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002ab2:	f8b0 504e 	ldrh.w	r5, [r0, #78]	; 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002ab6:	140a      	asrs	r2, r1, #16
{
 8002ab8:	b082      	sub	sp, #8
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002aba:	fb06 f202 	mul.w	r2, r6, r2
 8002abe:	ebc2 72c2 	rsb	r2, r2, r2, lsl #31
{
 8002ac2:	9101      	str	r1, [sp, #4]
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002ac4:	b209      	sxth	r1, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002ac6:	0054      	lsls	r4, r2, #1
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002ac8:	fb05 f101 	mul.w	r1, r5, r1

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
    wZ = (wUBeta - wUAlpha) / 2;
 8002acc:	1a65      	subs	r5, r4, r1
    wY = (wUBeta + wUAlpha) / 2;
 8002ace:	4421      	add	r1, r4
 8002ad0:	eb01 72d1 	add.w	r2, r1, r1, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8002ad4:	eb05 73d5 	add.w	r3, r5, r5, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8002ad8:	1052      	asrs	r2, r2, #1
 8002ada:	ea4f 0696 	mov.w	r6, r6, lsr #2
    wZ = (wUBeta - wUAlpha) / 2;
 8002ade:	ea4f 0363 	mov.w	r3, r3, asr #1
    if (wY < 0)
 8002ae2:	d461      	bmi.n	8002ba8 <PWMC_SetPhaseVoltage+0xfc>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	db35      	blt.n	8002b54 <PWMC_SetPhaseVoltage+0xa8>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002ae8:	1ad2      	subs	r2, r2, r3
 8002aea:	bf44      	itt	mi
 8002aec:	f502 327f 	addmi.w	r2, r2, #261120	; 0x3fc00
 8002af0:	f202 32ff 	addwmi	r2, r2, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002af4:	2d00      	cmp	r5, #0
 8002af6:	bfbc      	itt	lt
 8002af8:	f505 357f 	addlt.w	r5, r5, #261120	; 0x3fc00
 8002afc:	f205 35ff 	addwlt	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8002b00:	2900      	cmp	r1, #0
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002b02:	eb06 43a2 	add.w	r3, r6, r2, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002b06:	bfb8      	it	lt
 8002b08:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 8002b0c:	f890 6085 	ldrb.w	r6, [r0, #133]	; 0x85
        pHandle->Sector = SECTOR_2;
 8002b10:	f04f 0401 	mov.w	r4, #1
        wTimePhC = wTimePhA - (wY / 131072);
 8002b14:	bfb8      	it	lt
 8002b16:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_2;
 8002b1a:	f880 407a 	strb.w	r4, [r0, #122]	; 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 8002b1e:	eb03 45a5 	add.w	r5, r3, r5, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002b22:	eba3 41a1 	sub.w	r1, r3, r1, asr #18
        if(true == pHandle->SingleShuntTopology)
 8002b26:	2e00      	cmp	r6, #0
 8002b28:	d064      	beq.n	8002bf4 <PWMC_SetPhaseVoltage+0x148>
        {
          pHandle->lowDuty = 2U;
 8002b2a:	2402      	movs	r4, #2
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
 8002b2c:	2201      	movs	r2, #1
          pHandle->lowDuty = 2U;
 8002b2e:	6584      	str	r4, [r0, #88]	; 0x58
          pHandle->highDuty = 1U;
 8002b30:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
            pHandle->highDuty = (uint16_t)wTimePhC;
        }
        }
    }

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002b34:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8002b38:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002b3c:	6943      	ldr	r3, [r0, #20]
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002b3e:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002b42:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002b46:	f8a0 5052 	strh.w	r5, [r0, #82]	; 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002b4a:	f8a0 1054 	strh.w	r1, [r0, #84]	; 0x54
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002b4e:	b002      	add	sp, #8
 8002b50:	bcf0      	pop	{r4, r5, r6, r7}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002b52:	4718      	bx	r3
        if ( wX <= 0 )
 8002b54:	2c00      	cmp	r4, #0
 8002b56:	dd79      	ble.n	8002c4c <PWMC_SetPhaseVoltage+0x1a0>
          wTimePhB = wTimePhA + (wZ / 131072);
 8002b58:	2d00      	cmp	r5, #0
 8002b5a:	bfb8      	it	lt
 8002b5c:	f505 357f 	addlt.w	r5, r5, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_1;
 8002b60:	f04f 0100 	mov.w	r1, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002b64:	eba4 0203 	sub.w	r2, r4, r3
          wTimePhB = wTimePhA + (wZ / 131072);
 8002b68:	bfb8      	it	lt
 8002b6a:	f205 35ff 	addwlt	r5, r5, #1023	; 0x3ff
          pHandle->Sector = SECTOR_1;
 8002b6e:	f880 107a 	strb.w	r1, [r0, #122]	; 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 8002b72:	1e21      	subs	r1, r4, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002b74:	eb06 43a2 	add.w	r3, r6, r2, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002b78:	bfb8      	it	lt
 8002b7a:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002b7e:	f890 207d 	ldrb.w	r2, [r0, #125]	; 0x7d
          wTimePhB = wTimePhA + (wZ / 131072);
 8002b82:	eb03 45a5 	add.w	r5, r3, r5, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002b86:	bfb8      	it	lt
 8002b88:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8002b8c:	eba5 4161 	sub.w	r1, r5, r1, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002b90:	b922      	cbnz	r2, 8002b9c <PWMC_SetPhaseVoltage+0xf0>
 8002b92:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
 8002b96:	2a00      	cmp	r2, #0
 8002b98:	f000 80bb 	beq.w	8002d12 <PWMC_SetPhaseVoltage+0x266>
            pHandle->lowDuty = 2U;
 8002b9c:	4a60      	ldr	r2, [pc, #384]	; (8002d20 <PWMC_SetPhaseVoltage+0x274>)
 8002b9e:	6582      	str	r2, [r0, #88]	; 0x58
            pHandle->highDuty = 0U;
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8002ba6:	e7c5      	b.n	8002b34 <PWMC_SetPhaseVoltage+0x88>
      if (wZ < 0)
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	f890 7085 	ldrb.w	r7, [r0, #133]	; 0x85
 8002bae:	db70      	blt.n	8002c92 <PWMC_SetPhaseVoltage+0x1e6>
        if (wX <= 0)
 8002bb0:	2c00      	cmp	r4, #0
 8002bb2:	dd26      	ble.n	8002c02 <PWMC_SetPhaseVoltage+0x156>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002bb4:	1b12      	subs	r2, r2, r4
 8002bb6:	bf44      	itt	mi
 8002bb8:	f502 327f 	addmi.w	r2, r2, #261120	; 0x3fc00
 8002bbc:	f202 32ff 	addwmi	r2, r2, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002bc0:	2900      	cmp	r1, #0
          pHandle->Sector = SECTOR_3;
 8002bc2:	f04f 0302 	mov.w	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 8002bc6:	bfb8      	it	lt
 8002bc8:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 8002bcc:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
          wTimePhC = wTimePhA - (wY / 131072);
 8002bd0:	bfb8      	it	lt
 8002bd2:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002bd6:	eb06 43a2 	add.w	r3, r6, r2, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 8002bda:	eba3 41a1 	sub.w	r1, r3, r1, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002bde:	eb01 4564 	add.w	r5, r1, r4, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002be2:	2f00      	cmp	r7, #0
 8002be4:	d079      	beq.n	8002cda <PWMC_SetPhaseVoltage+0x22e>
            pHandle->lowDuty = 0U;
 8002be6:	f44f 3400 	mov.w	r4, #131072	; 0x20000
            pHandle->highDuty = 1U;
 8002bea:	2201      	movs	r2, #1
            pHandle->lowDuty = 0U;
 8002bec:	6584      	str	r4, [r0, #88]	; 0x58
            pHandle->highDuty = 1U;
 8002bee:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8002bf2:	e79f      	b.n	8002b34 <PWMC_SetPhaseVoltage+0x88>
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8002bf4:	f8a0 5058 	strh.w	r5, [r0, #88]	; 0x58
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002bf8:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
        pHandle->highDuty = (uint16_t)wTimePhC;
 8002bfc:	f8a0 105c 	strh.w	r1, [r0, #92]	; 0x5c
 8002c00:	e798      	b.n	8002b34 <PWMC_SetPhaseVoltage+0x88>
          pHandle->Sector = SECTOR_4;
 8002c02:	2203      	movs	r2, #3
 8002c04:	f880 207a 	strb.w	r2, [r0, #122]	; 0x7a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002c08:	1ae2      	subs	r2, r4, r3
 8002c0a:	bf44      	itt	mi
 8002c0c:	f502 327f 	addmi.w	r2, r2, #261120	; 0x3fc00
 8002c10:	f202 32ff 	addwmi	r2, r2, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002c14:	2d00      	cmp	r5, #0
 8002c16:	bfbc      	itt	lt
 8002c18:	f505 357f 	addlt.w	r5, r5, #261120	; 0x3fc00
 8002c1c:	f205 35ff 	addwlt	r5, r5, #1023	; 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 8002c20:	1e21      	subs	r1, r4, #0
 8002c22:	bfb8      	it	lt
 8002c24:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002c28:	eb06 43a2 	add.w	r3, r6, r2, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 8002c2c:	eb03 45a5 	add.w	r5, r3, r5, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002c30:	bfb8      	it	lt
 8002c32:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8002c36:	eba5 4161 	sub.w	r1, r5, r1, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002c3a:	2f00      	cmp	r7, #0
 8002c3c:	d062      	beq.n	8002d04 <PWMC_SetPhaseVoltage+0x258>
            pHandle->lowDuty = 0U;
 8002c3e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
            pHandle->highDuty = 2U;
 8002c42:	2202      	movs	r2, #2
            pHandle->lowDuty = 0U;
 8002c44:	6584      	str	r4, [r0, #88]	; 0x58
            pHandle->highDuty = 2U;
 8002c46:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8002c4a:	e773      	b.n	8002b34 <PWMC_SetPhaseVoltage+0x88>
          wTimePhC = wTimePhA - (wY / 131072);
 8002c4c:	2900      	cmp	r1, #0
 8002c4e:	bfb8      	it	lt
 8002c50:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_6;
 8002c54:	f04f 0505 	mov.w	r5, #5
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002c58:	eba2 0204 	sub.w	r2, r2, r4
          wTimePhC = wTimePhA - (wY / 131072);
 8002c5c:	bfb8      	it	lt
 8002c5e:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_6;
 8002c62:	f880 507a 	strb.w	r5, [r0, #122]	; 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 8002c66:	1e25      	subs	r5, r4, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002c68:	eb06 43a2 	add.w	r3, r6, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002c6c:	bfb8      	it	lt
 8002c6e:	f505 35ff 	addlt.w	r5, r5, #130560	; 0x1fe00
          if(true == pHandle->SingleShuntTopology)
 8002c72:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
          wTimePhC = wTimePhA - (wY / 131072);
 8002c76:	eba3 41a1 	sub.w	r1, r3, r1, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002c7a:	bfb8      	it	lt
 8002c7c:	f205 15ff 	addwlt	r5, r5, #511	; 0x1ff
 8002c80:	eb01 4565 	add.w	r5, r1, r5, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002c84:	b3ba      	cbz	r2, 8002cf6 <PWMC_SetPhaseVoltage+0x24a>
            pHandle->lowDuty = 1U;
 8002c86:	4a27      	ldr	r2, [pc, #156]	; (8002d24 <PWMC_SetPhaseVoltage+0x278>)
 8002c88:	6582      	str	r2, [r0, #88]	; 0x58
            pHandle->highDuty = 0U;
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8002c90:	e750      	b.n	8002b34 <PWMC_SetPhaseVoltage+0x88>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002c92:	1ad2      	subs	r2, r2, r3
 8002c94:	bf44      	itt	mi
 8002c96:	f502 327f 	addmi.w	r2, r2, #261120	; 0x3fc00
 8002c9a:	f202 32ff 	addwmi	r2, r2, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002c9e:	2d00      	cmp	r5, #0
 8002ca0:	bfbc      	itt	lt
 8002ca2:	f505 357f 	addlt.w	r5, r5, #261120	; 0x3fc00
 8002ca6:	f205 35ff 	addwlt	r5, r5, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002caa:	2900      	cmp	r1, #0
 8002cac:	bfb8      	it	lt
 8002cae:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002cb2:	eb06 43a2 	add.w	r3, r6, r2, asr #18
        pHandle->Sector = SECTOR_5;
 8002cb6:	f04f 0404 	mov.w	r4, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002cba:	bfb8      	it	lt
 8002cbc:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        pHandle->Sector = SECTOR_5;
 8002cc0:	f880 407a 	strb.w	r4, [r0, #122]	; 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 8002cc4:	eb03 45a5 	add.w	r5, r3, r5, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002cc8:	eba3 41a1 	sub.w	r1, r3, r1, asr #18
        if(true == pHandle->SingleShuntTopology)
 8002ccc:	b167      	cbz	r7, 8002ce8 <PWMC_SetPhaseVoltage+0x23c>
          pHandle->lowDuty = 1U;
 8002cce:	2401      	movs	r4, #1
          pHandle->highDuty = 2U;
 8002cd0:	2202      	movs	r2, #2
          pHandle->lowDuty = 1U;
 8002cd2:	6584      	str	r4, [r0, #88]	; 0x58
          pHandle->highDuty = 2U;
 8002cd4:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
 8002cd8:	e72c      	b.n	8002b34 <PWMC_SetPhaseVoltage+0x88>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8002cda:	f8a0 5058 	strh.w	r5, [r0, #88]	; 0x58
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002cde:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002ce2:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002ce6:	e725      	b.n	8002b34 <PWMC_SetPhaseVoltage+0x88>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002ce8:	f8a0 1058 	strh.w	r1, [r0, #88]	; 0x58
          pHandle->midDuty = (uint16_t)wTimePhA;
 8002cec:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
          pHandle->highDuty = (uint16_t)wTimePhB;
 8002cf0:	f8a0 505c 	strh.w	r5, [r0, #92]	; 0x5c
 8002cf4:	e71e      	b.n	8002b34 <PWMC_SetPhaseVoltage+0x88>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002cf6:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
            pHandle->midDuty = (uint16_t)wTimePhC;
 8002cfa:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
            pHandle->highDuty = (uint16_t)wTimePhB;
 8002cfe:	f8a0 505c 	strh.w	r5, [r0, #92]	; 0x5c
 8002d02:	e717      	b.n	8002b34 <PWMC_SetPhaseVoltage+0x88>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002d04:	f8a0 1058 	strh.w	r1, [r0, #88]	; 0x58
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002d08:	f8a0 505a 	strh.w	r5, [r0, #90]	; 0x5a
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002d0c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8002d10:	e710      	b.n	8002b34 <PWMC_SetPhaseVoltage+0x88>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002d12:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
            pHandle->midDuty = (uint16_t)wTimePhB;
 8002d16:	f8a0 505a 	strh.w	r5, [r0, #90]	; 0x5a
            pHandle->highDuty = (uint16_t)wTimePhC;
 8002d1a:	f8a0 105c 	strh.w	r1, [r0, #92]	; 0x5c
 8002d1e:	e709      	b.n	8002b34 <PWMC_SetPhaseVoltage+0x88>
 8002d20:	00010002 	.word	0x00010002
 8002d24:	00020001 	.word	0x00020001

08002d28 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002d28:	6843      	ldr	r3, [r0, #4]
 8002d2a:	4718      	bx	r3

08002d2c <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8002d2c:	6883      	ldr	r3, [r0, #8]
 8002d2e:	4718      	bx	r3

08002d30 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002d30:	b510      	push	{r4, lr}
 8002d32:	4604      	mov	r4, r0
 8002d34:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8002d36:	b1a1      	cbz	r1, 8002d62 <PWMC_CurrentReadingCalibr+0x32>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8002d38:	2901      	cmp	r1, #1
 8002d3a:	d002      	beq.n	8002d42 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8002d3c:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8002d3e:	b002      	add	sp, #8
 8002d40:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8002d42:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8002d46:	b1a3      	cbz	r3, 8002d72 <PWMC_CurrentReadingCalibr+0x42>
        pHandle->OffCalibrWaitTimeCounter--;
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29b      	uxth	r3, r3
 8002d4c:	9101      	str	r1, [sp, #4]
 8002d4e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1f2      	bne.n	8002d3c <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 8002d56:	68c3      	ldr	r3, [r0, #12]
 8002d58:	4798      	blx	r3
          retVal = true;
 8002d5a:	9901      	ldr	r1, [sp, #4]
 8002d5c:	4608      	mov	r0, r1
}
 8002d5e:	b002      	add	sp, #8
 8002d60:	bd10      	pop	{r4, pc}
      PWMC_SwitchOffPWM(pHandle);
 8002d62:	f7ff ffe1 	bl	8002d28 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8002d66:	4620      	mov	r0, r4
 8002d68:	68e3      	ldr	r3, [r4, #12]
 8002d6a:	4798      	blx	r3
      retVal = true;
 8002d6c:	2001      	movs	r0, #1
}
 8002d6e:	b002      	add	sp, #8
 8002d70:	bd10      	pop	{r4, pc}
        retVal = true;
 8002d72:	4608      	mov	r0, r1
}
 8002d74:	b002      	add	sp, #8
 8002d76:	bd10      	pop	{r4, pc}

08002d78 <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 8002d78:	f890 3083 	ldrb.w	r3, [r0, #131]	; 0x83
 8002d7c:	b91b      	cbnz	r3, 8002d86 <PWMC_OCP_Handler+0xe>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 8002d7e:	f890 307b 	ldrb.w	r3, [r0, #123]	; 0x7b
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d004      	beq.n	8002d90 <PWMC_OCP_Handler+0x18>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8002d8c:	3078      	adds	r0, #120	; 0x78
 8002d8e:	4770      	bx	lr
{
 8002d90:	b430      	push	{r4, r5}
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8002d92:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 8002d96:	6c43      	ldr	r3, [r0, #68]	; 0x44
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 8002d98:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8002d9c:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8002da0:	6295      	str	r5, [r2, #40]	; 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 8002da2:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 8002da6:	628c      	str	r4, [r1, #40]	; 0x28
 8002da8:	629a      	str	r2, [r3, #40]	; 0x28
    pHandle->OverCurrentFlag = true;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f880 3080 	strb.w	r3, [r0, #128]	; 0x80
}
 8002db0:	bc30      	pop	{r4, r5}
 8002db2:	3078      	adds	r0, #120	; 0x78
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop

08002db8 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002db8:	6c4a      	ldr	r2, [r1, #68]	; 0x44
{
 8002dba:	4603      	mov	r3, r0
 8002dbc:	b410      	push	{r4}
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002dbe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    pHandle->OverVoltageFlag = true;
 8002dc2:	2401      	movs	r4, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002dc4:	644a      	str	r2, [r1, #68]	; 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8002dc6:	3078      	adds	r0, #120	; 0x78
    pHandle->OverVoltageFlag = true;
 8002dc8:	f883 4081 	strb.w	r4, [r3, #129]	; 0x81
    pHandle->BrakeActionLock = true;
 8002dcc:	f883 4083 	strb.w	r4, [r3, #131]	; 0x83
}
 8002dd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop

08002dd8 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 8002dd8:	4602      	mov	r2, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 8002dda:	f890 0081 	ldrb.w	r0, [r0, #129]	; 0x81
 8002dde:	b1a8      	cbz	r0, 8002e0c <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8002de0:	2300      	movs	r3, #0
 8002de2:	f882 3081 	strb.w	r3, [r2, #129]	; 0x81
 8002de6:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 8002de8:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8002dea:	f892 3080 	ldrb.w	r3, [r2, #128]	; 0x80
 8002dee:	b11b      	cbz	r3, 8002df8 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8002df0:	2300      	movs	r3, #0
    retVal |= MC_OVER_CURR;
 8002df2:	4608      	mov	r0, r1
    pHandle->OverCurrentFlag = false;
 8002df4:	f882 3080 	strb.w	r3, [r2, #128]	; 0x80
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8002df8:	f892 3082 	ldrb.w	r3, [r2, #130]	; 0x82
 8002dfc:	b12b      	cbz	r3, 8002e0a <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 8002dfe:	f440 6380 	orr.w	r3, r0, #1024	; 0x400
    pHandle->driverProtectionFlag = false;
 8002e02:	2100      	movs	r1, #0
    retVal |= MC_DP_FAULT;
 8002e04:	b298      	uxth	r0, r3
    pHandle->driverProtectionFlag = false;
 8002e06:	f882 1082 	strb.w	r1, [r2, #130]	; 0x82
  {
    /* Nothing to do */
  }

  return (retVal);
}
 8002e0a:	4770      	bx	lr
 8002e0c:	2140      	movs	r1, #64	; 0x40
 8002e0e:	e7ec      	b.n	8002dea <PWMC_IsFaultOccurred+0x12>

08002e10 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002e10:	4967      	ldr	r1, [pc, #412]	; (8002fb0 <RCM_RegisterRegConv+0x1a0>)
 8002e12:	680a      	ldr	r2, [r1, #0]
{
 8002e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002e18:	2a00      	cmp	r2, #0
 8002e1a:	f000 8085 	beq.w	8002f28 <RCM_RegisterRegConv+0x118>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002e1e:	7904      	ldrb	r4, [r0, #4]
 8002e20:	7913      	ldrb	r3, [r2, #4]
 8002e22:	429c      	cmp	r4, r3
 8002e24:	d01f      	beq.n	8002e66 <RCM_RegisterRegConv+0x56>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002e26:	684b      	ldr	r3, [r1, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8092 	beq.w	8002f52 <RCM_RegisterRegConv+0x142>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002e2e:	791d      	ldrb	r5, [r3, #4]
 8002e30:	42a5      	cmp	r5, r4
  uint8_t handle = 255U;
 8002e32:	f04f 02ff 	mov.w	r2, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002e36:	d07e      	beq.n	8002f36 <RCM_RegisterRegConv+0x126>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002e38:	688d      	ldr	r5, [r1, #8]
 8002e3a:	2d00      	cmp	r5, #0
 8002e3c:	f000 80aa 	beq.w	8002f94 <RCM_RegisterRegConv+0x184>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002e40:	792b      	ldrb	r3, [r5, #4]
 8002e42:	42a3      	cmp	r3, r4
 8002e44:	d07e      	beq.n	8002f44 <RCM_RegisterRegConv+0x134>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002e46:	68cb      	ldr	r3, [r1, #12]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 809e 	beq.w	8002f8a <RCM_RegisterRegConv+0x17a>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002e4e:	791d      	ldrb	r5, [r3, #4]
 8002e50:	42a5      	cmp	r5, r4
 8002e52:	f000 808a 	beq.w	8002f6a <RCM_RegisterRegConv+0x15a>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8002e56:	2a03      	cmp	r2, #3
 8002e58:	bf88      	it	hi
 8002e5a:	22ff      	movhi	r2, #255	; 0xff
 8002e5c:	f240 809f 	bls.w	8002f9e <RCM_RegisterRegConv+0x18e>
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 8002e60:	7302      	strb	r2, [r0, #12]
}
 8002e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002e66:	6812      	ldr	r2, [r2, #0]
 8002e68:	6803      	ldr	r3, [r0, #0]
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d1db      	bne.n	8002e26 <RCM_RegisterRegConv+0x16>
    uint8_t i = 0;
 8002e6e:	2200      	movs	r2, #0
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8002e70:	4d50      	ldr	r5, [pc, #320]	; (8002fb4 <RCM_RegisterRegConv+0x1a4>)
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e72:	689c      	ldr	r4, [r3, #8]
      RCM_handle_array [handle] = regConv;
 8002e74:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8002e78:	2100      	movs	r1, #0
 8002e7a:	f845 1032 	str.w	r1, [r5, r2, lsl #3]
 8002e7e:	07e5      	lsls	r5, r4, #31
 8002e80:	d422      	bmi.n	8002ec8 <RCM_RegisterRegConv+0xb8>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002e82:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002e84:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002e86:	f021 0104 	bic.w	r1, r1, #4
 8002e8a:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002e8c:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8002e8e:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8002e90:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8002e92:	f021 0120 	bic.w	r1, r1, #32
 8002e96:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8002e98:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002e9a:	6899      	ldr	r1, [r3, #8]
 8002e9c:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 8002ea0:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002ea4:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002ea8:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002eaa:	6899      	ldr	r1, [r3, #8]
 8002eac:	2900      	cmp	r1, #0
 8002eae:	dbfc      	blt.n	8002eaa <RCM_RegisterRegConv+0x9a>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002eb0:	6819      	ldr	r1, [r3, #0]
 8002eb2:	07cc      	lsls	r4, r1, #31
 8002eb4:	d408      	bmi.n	8002ec8 <RCM_RegisterRegConv+0xb8>
  MODIFY_REG(ADCx->CR,
 8002eb6:	4c40      	ldr	r4, [pc, #256]	; (8002fb8 <RCM_RegisterRegConv+0x1a8>)
 8002eb8:	6899      	ldr	r1, [r3, #8]
 8002eba:	4021      	ands	r1, r4
 8002ebc:	f041 0101 	orr.w	r1, r1, #1
 8002ec0:	6099      	str	r1, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8002ec2:	6819      	ldr	r1, [r3, #0]
 8002ec4:	07c9      	lsls	r1, r1, #31
 8002ec6:	d5f7      	bpl.n	8002eb8 <RCM_RegisterRegConv+0xa8>
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002ec8:	6b19      	ldr	r1, [r3, #48]	; 0x30
      RCM_NoInj_array[handle].enable = false;
 8002eca:	4f3c      	ldr	r7, [pc, #240]	; (8002fbc <RCM_RegisterRegConv+0x1ac>)
 8002ecc:	f021 010f 	bic.w	r1, r1, #15
 8002ed0:	6319      	str	r1, [r3, #48]	; 0x30
 8002ed2:	eb02 0442 	add.w	r4, r2, r2, lsl #1
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8002ed6:	7905      	ldrb	r5, [r0, #4]
      RCM_NoInj_array[handle].enable = false;
 8002ed8:	0064      	lsls	r4, r4, #1
 8002eda:	193e      	adds	r6, r7, r4
 8002edc:	2101      	movs	r1, #1
 8002ede:	f04f 0800 	mov.w	r8, #0
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8002ee2:	2d09      	cmp	r5, #9
 8002ee4:	ea4f 6e85 	mov.w	lr, r5, lsl #26
 8002ee8:	fa01 f105 	lsl.w	r1, r1, r5
 8002eec:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
      RCM_NoInj_array[handle].enable = false;
 8002ef0:	f807 8004 	strb.w	r8, [r7, r4]
      RCM_NoInj_array[handle].next = handle;
 8002ef4:	7172      	strb	r2, [r6, #5]
      RCM_NoInj_array[handle].prev = handle;
 8002ef6:	7132      	strb	r2, [r6, #4]
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8002ef8:	d83e      	bhi.n	8002f78 <RCM_RegisterRegConv+0x168>
 8002efa:	ea4e 5c0c 	orr.w	ip, lr, ip, lsl #20
 8002efe:	ea4c 0101 	orr.w	r1, ip, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002f02:	0dcd      	lsrs	r5, r1, #23
 8002f04:	3314      	adds	r3, #20
 8002f06:	f005 0504 	and.w	r5, r5, #4
  MODIFY_REG(*preg,
 8002f0a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8002f0e:	58ec      	ldr	r4, [r5, r3]
 8002f10:	6886      	ldr	r6, [r0, #8]
 8002f12:	2707      	movs	r7, #7
 8002f14:	408f      	lsls	r7, r1
 8002f16:	ea24 0407 	bic.w	r4, r4, r7
 8002f1a:	fa06 f101 	lsl.w	r1, r6, r1
 8002f1e:	4321      	orrs	r1, r4
 8002f20:	50e9      	str	r1, [r5, r3]
  regConv->convHandle = handle;
 8002f22:	7302      	strb	r2, [r0, #12]
}
 8002f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002f28:	684b      	ldr	r3, [r1, #4]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d039      	beq.n	8002fa2 <RCM_RegisterRegConv+0x192>
 8002f2e:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002f30:	791d      	ldrb	r5, [r3, #4]
 8002f32:	42a5      	cmp	r5, r4
 8002f34:	d180      	bne.n	8002e38 <RCM_RegisterRegConv+0x28>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002f36:	681d      	ldr	r5, [r3, #0]
 8002f38:	6803      	ldr	r3, [r0, #0]
 8002f3a:	42ab      	cmp	r3, r5
 8002f3c:	f47f af7c 	bne.w	8002e38 <RCM_RegisterRegConv+0x28>
 8002f40:	2201      	movs	r2, #1
 8002f42:	e795      	b.n	8002e70 <RCM_RegisterRegConv+0x60>
 8002f44:	682d      	ldr	r5, [r5, #0]
 8002f46:	6803      	ldr	r3, [r0, #0]
 8002f48:	429d      	cmp	r5, r3
 8002f4a:	f47f af7c 	bne.w	8002e46 <RCM_RegisterRegConv+0x36>
      i++;
 8002f4e:	2202      	movs	r2, #2
 8002f50:	e78e      	b.n	8002e70 <RCM_RegisterRegConv+0x60>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002f52:	688d      	ldr	r5, [r1, #8]
      i++;
 8002f54:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002f56:	2d00      	cmp	r5, #0
 8002f58:	f47f af72 	bne.w	8002e40 <RCM_RegisterRegConv+0x30>
 8002f5c:	68cb      	ldr	r3, [r1, #12]
 8002f5e:	b1f3      	cbz	r3, 8002f9e <RCM_RegisterRegConv+0x18e>
 8002f60:	7904      	ldrb	r4, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002f62:	791d      	ldrb	r5, [r3, #4]
 8002f64:	42a5      	cmp	r5, r4
 8002f66:	f47f af76 	bne.w	8002e56 <RCM_RegisterRegConv+0x46>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002f6a:	681c      	ldr	r4, [r3, #0]
 8002f6c:	6803      	ldr	r3, [r0, #0]
 8002f6e:	429c      	cmp	r4, r3
 8002f70:	f47f af71 	bne.w	8002e56 <RCM_RegisterRegConv+0x46>
      i++;
 8002f74:	2203      	movs	r2, #3
 8002f76:	e77b      	b.n	8002e70 <RCM_RegisterRegConv+0x60>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8002f78:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002f7c:	ea41 010e 	orr.w	r1, r1, lr
 8002f80:	f1ac 0c1e 	sub.w	ip, ip, #30
 8002f84:	ea41 510c 	orr.w	r1, r1, ip, lsl #20
 8002f88:	e7bb      	b.n	8002f02 <RCM_RegisterRegConv+0xf2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002f8a:	2a04      	cmp	r2, #4
 8002f8c:	f67f af63 	bls.w	8002e56 <RCM_RegisterRegConv+0x46>
 8002f90:	6803      	ldr	r3, [r0, #0]
 8002f92:	e7ef      	b.n	8002f74 <RCM_RegisterRegConv+0x164>
 8002f94:	2a04      	cmp	r2, #4
 8002f96:	bf8c      	ite	hi
 8002f98:	2202      	movhi	r2, #2
 8002f9a:	2200      	movls	r2, #0
 8002f9c:	e7de      	b.n	8002f5c <RCM_RegisterRegConv+0x14c>
 8002f9e:	6803      	ldr	r3, [r0, #0]
 8002fa0:	e766      	b.n	8002e70 <RCM_RegisterRegConv+0x60>
 8002fa2:	688d      	ldr	r5, [r1, #8]
 8002fa4:	b115      	cbz	r5, 8002fac <RCM_RegisterRegConv+0x19c>
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	7904      	ldrb	r4, [r0, #4]
 8002faa:	e749      	b.n	8002e40 <RCM_RegisterRegConv+0x30>
 8002fac:	462a      	mov	r2, r5
 8002fae:	e7d5      	b.n	8002f5c <RCM_RegisterRegConv+0x14c>
 8002fb0:	20000458 	.word	0x20000458
 8002fb4:	20000414 	.word	0x20000414
 8002fb8:	7fffffc0 	.word	0x7fffffc0
 8002fbc:	20000434 	.word	0x20000434

08002fc0 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8002fc0:	b4f0      	push	{r4, r5, r6, r7}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8002fc2:	7b02      	ldrb	r2, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8002fc4:	4b5b      	ldr	r3, [pc, #364]	; (8003134 <RCM_ExecRegularConv+0x174>)
 8002fc6:	0054      	lsls	r4, r2, #1
 8002fc8:	18a1      	adds	r1, r4, r2
 8002fca:	f813 1011 	ldrb.w	r1, [r3, r1, lsl #1]
 8002fce:	2900      	cmp	r1, #0
 8002fd0:	d139      	bne.n	8003046 <RCM_ExecRegularConv+0x86>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8002fd2:	7818      	ldrb	r0, [r3, #0]
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d17a      	bne.n	80030ce <RCM_ExecRegularConv+0x10e>
 8002fd8:	7998      	ldrb	r0, [r3, #6]
  uint8_t LastEnable = RCM_MAX_CONV;
 8002fda:	2104      	movs	r1, #4
      if (true == RCM_NoInj_array [i].enable)
 8002fdc:	2800      	cmp	r0, #0
 8002fde:	d07c      	beq.n	80030da <RCM_ExecRegularConv+0x11a>
      {
        if (RCM_NoInj_array[i].next > handle)
 8002fe0:	7ade      	ldrb	r6, [r3, #11]
 8002fe2:	4296      	cmp	r6, r2
 8002fe4:	f200 8099 	bhi.w	800311a <RCM_ExecRegularConv+0x15a>
      if (true == RCM_NoInj_array [i].enable)
 8002fe8:	7b19      	ldrb	r1, [r3, #12]
 8002fea:	2900      	cmp	r1, #0
 8002fec:	f000 8098 	beq.w	8003120 <RCM_ExecRegularConv+0x160>
        if (RCM_NoInj_array[i].next > handle)
 8002ff0:	7c5e      	ldrb	r6, [r3, #17]
 8002ff2:	42b2      	cmp	r2, r6
 8002ff4:	d305      	bcc.n	8003002 <RCM_ExecRegularConv+0x42>
      if (true == RCM_NoInj_array [i].enable)
 8002ff6:	7c99      	ldrb	r1, [r3, #18]
 8002ff8:	2900      	cmp	r1, #0
 8002ffa:	f040 8095 	bne.w	8003128 <RCM_ExecRegularConv+0x168>
      }
      else
      {
        /* Nothing to do */
      }
      i++;
 8002ffe:	2102      	movs	r1, #2
 8003000:	e072      	b.n	80030e8 <RCM_ExecRegularConv+0x128>
 8003002:	2102      	movs	r1, #2
      if (true == RCM_NoInj_array [i].enable)
 8003004:	4608      	mov	r0, r1
          RCM_NoInj_array[i].next = handle;
 8003006:	eb00 0540 	add.w	r5, r0, r0, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 800300a:	18a0      	adds	r0, r4, r2
 800300c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 8003010:	eb06 0746 	add.w	r7, r6, r6, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8003014:	7146      	strb	r6, [r0, #5]
 8003016:	4e48      	ldr	r6, [pc, #288]	; (8003138 <RCM_ExecRegularConv+0x178>)
          RCM_NoInj_array[handle].prev = i;
 8003018:	7101      	strb	r1, [r0, #4]
          RCM_NoInj_array[i].next = handle;
 800301a:	eb03 0545 	add.w	r5, r3, r5, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 800301e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 8003022:	7831      	ldrb	r1, [r6, #0]
          RCM_NoInj_array[i].next = handle;
 8003024:	716a      	strb	r2, [r5, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8003026:	713a      	strb	r2, [r7, #4]
      {
        /* Nothing to do we are parsing the array, nothing inserted yet */
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
 8003028:	18a0      	adds	r0, r4, r2
 800302a:	0040      	lsls	r0, r0, #1
 800302c:	181d      	adds	r5, r3, r0
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800302e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8003032:	eb03 0141 	add.w	r1, r3, r1, lsl #1
    RCM_NoInj_array[handle].status = notvalid;
 8003036:	2700      	movs	r7, #0
 8003038:	706f      	strb	r7, [r5, #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800303a:	7849      	ldrb	r1, [r1, #1]
    RCM_NoInj_array[handle].enable = true;
 800303c:	2501      	movs	r5, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800303e:	42a9      	cmp	r1, r5
    RCM_NoInj_array[handle].enable = true;
 8003040:	541d      	strb	r5, [r3, r0]
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8003042:	bf18      	it	ne
 8003044:	7032      	strbne	r2, [r6, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8003046:	493d      	ldr	r1, [pc, #244]	; (800313c <RCM_ExecRegularConv+0x17c>)
 8003048:	f891 10a0 	ldrb.w	r1, [r1, #160]	; 0xa0
 800304c:	2900      	cmp	r1, #0
 800304e:	d134      	bne.n	80030ba <RCM_ExecRegularConv+0xfa>
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003050:	493b      	ldr	r1, [pc, #236]	; (8003140 <RCM_ExecRegularConv+0x180>)
 8003052:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003056:	790d      	ldrb	r5, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003058:	6808      	ldr	r0, [r1, #0]
 800305a:	2d09      	cmp	r5, #9
 800305c:	f04f 0101 	mov.w	r1, #1
 8003060:	ea4f 6785 	mov.w	r7, r5, lsl #26
 8003064:	fa01 f105 	lsl.w	r1, r1, r5
 8003068:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800306c:	d92b      	bls.n	80030c6 <RCM_ExecRegularConv+0x106>
 800306e:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8003072:	4339      	orrs	r1, r7
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003074:	3e1e      	subs	r6, #30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003076:	ea41 5106 	orr.w	r1, r1, r6, lsl #20
  MODIFY_REG(*preg,
 800307a:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800307c:	0d09      	lsrs	r1, r1, #20
 800307e:	f401 61f8 	and.w	r1, r1, #1984	; 0x7c0
 8003082:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 8003086:	4329      	orrs	r1, r5
 8003088:	6301      	str	r1, [r0, #48]	; 0x30
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 800308a:	6c01      	ldr	r1, [r0, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 800308c:	6881      	ldr	r1, [r0, #8]
 800308e:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003092:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003096:	f041 0104 	orr.w	r1, r1, #4
 800309a:	6081      	str	r1, [r0, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800309c:	6801      	ldr	r1, [r0, #0]
 800309e:	0749      	lsls	r1, r1, #29
 80030a0:	d5fc      	bpl.n	800309c <RCM_ExecRegularConv+0xdc>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 80030a2:	18a1      	adds	r1, r4, r2
 80030a4:	6c00      	ldr	r0, [r0, #64]	; 0x40
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 80030a6:	4d24      	ldr	r5, [pc, #144]	; (8003138 <RCM_ExecRegularConv+0x178>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 80030a8:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 80030ac:	f020 000f 	bic.w	r0, r0, #15
 80030b0:	8048      	strh	r0, [r1, #2]
    RCM_NoInj_array[handle].status = valid;
 80030b2:	2002      	movs	r0, #2
 80030b4:	7048      	strb	r0, [r1, #1]
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 80030b6:	7949      	ldrb	r1, [r1, #5]
 80030b8:	7029      	strb	r1, [r5, #0]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 80030ba:	4422      	add	r2, r4
 80030bc:	eb03 0342 	add.w	r3, r3, r2, lsl #1
  return (retVal);
}
 80030c0:	bcf0      	pop	{r4, r5, r6, r7}
 80030c2:	8858      	ldrh	r0, [r3, #2]
 80030c4:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80030c6:	ea47 5606 	orr.w	r6, r7, r6, lsl #20
 80030ca:	4331      	orrs	r1, r6
 80030cc:	e7d5      	b.n	800307a <RCM_ExecRegularConv+0xba>
        if (RCM_NoInj_array[i].next > handle)
 80030ce:	795e      	ldrb	r6, [r3, #5]
 80030d0:	42b2      	cmp	r2, r6
 80030d2:	d397      	bcc.n	8003004 <RCM_ExecRegularConv+0x44>
      if (true == RCM_NoInj_array [i].enable)
 80030d4:	7998      	ldrb	r0, [r3, #6]
 80030d6:	2800      	cmp	r0, #0
 80030d8:	d182      	bne.n	8002fe0 <RCM_ExecRegularConv+0x20>
 80030da:	7b18      	ldrb	r0, [r3, #12]
 80030dc:	2800      	cmp	r0, #0
 80030de:	d187      	bne.n	8002ff0 <RCM_ExecRegularConv+0x30>
 80030e0:	7c98      	ldrb	r0, [r3, #18]
 80030e2:	bb08      	cbnz	r0, 8003128 <RCM_ExecRegularConv+0x168>
       if (LastEnable != RCM_MAX_CONV )
 80030e4:	2904      	cmp	r1, #4
 80030e6:	d014      	beq.n	8003112 <RCM_ExecRegularConv+0x152>
         formerNext = RCM_NoInj_array[LastEnable].next;
 80030e8:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 80030ec:	eb03 0545 	add.w	r5, r3, r5, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 80030f0:	18a0      	adds	r0, r4, r2
         formerNext = RCM_NoInj_array[LastEnable].next;
 80030f2:	f895 c005 	ldrb.w	ip, [r5, #5]
 80030f6:	4e10      	ldr	r6, [pc, #64]	; (8003138 <RCM_ExecRegularConv+0x178>)
         RCM_NoInj_array[formerNext].prev = handle;
 80030f8:	eb0c 074c 	add.w	r7, ip, ip, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 80030fc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
         RCM_NoInj_array[formerNext].prev = handle;
 8003100:	eb03 0747 	add.w	r7, r3, r7, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8003104:	7101      	strb	r1, [r0, #4]
         RCM_NoInj_array[handle].next = formerNext;
 8003106:	f880 c005 	strb.w	ip, [r0, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 800310a:	713a      	strb	r2, [r7, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 800310c:	716a      	strb	r2, [r5, #5]
 800310e:	7831      	ldrb	r1, [r6, #0]
 8003110:	e78a      	b.n	8003028 <RCM_ExecRegularConv+0x68>
         RCM_currentHandle = handle;
 8003112:	4e09      	ldr	r6, [pc, #36]	; (8003138 <RCM_ExecRegularConv+0x178>)
 8003114:	4611      	mov	r1, r2
 8003116:	7032      	strb	r2, [r6, #0]
 8003118:	e786      	b.n	8003028 <RCM_ExecRegularConv+0x68>
      i++;
 800311a:	2101      	movs	r1, #1
      if (true == RCM_NoInj_array [i].enable)
 800311c:	4608      	mov	r0, r1
 800311e:	e772      	b.n	8003006 <RCM_ExecRegularConv+0x46>
 8003120:	7c99      	ldrb	r1, [r3, #18]
 8003122:	b909      	cbnz	r1, 8003128 <RCM_ExecRegularConv+0x168>
      i++;
 8003124:	2101      	movs	r1, #1
 8003126:	e7df      	b.n	80030e8 <RCM_ExecRegularConv+0x128>
        if (RCM_NoInj_array[i].next > handle)
 8003128:	7dde      	ldrb	r6, [r3, #23]
 800312a:	4296      	cmp	r6, r2
      i++;
 800312c:	f04f 0103 	mov.w	r1, #3
        if (RCM_NoInj_array[i].next > handle)
 8003130:	d9da      	bls.n	80030e8 <RCM_ExecRegularConv+0x128>
 8003132:	e767      	b.n	8003004 <RCM_ExecRegularConv+0x44>
 8003134:	20000434 	.word	0x20000434
 8003138:	20000454 	.word	0x20000454
 800313c:	20000124 	.word	0x20000124
 8003140:	20000458 	.word	0x20000458

08003144 <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8003144:	4b75      	ldr	r3, [pc, #468]	; (800331c <RCM_ExecUserConv+0x1d8>)
 8003146:	6818      	ldr	r0, [r3, #0]
 8003148:	b138      	cbz	r0, 800315a <RCM_ExecUserConv+0x16>
{
 800314a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 800314e:	4c74      	ldr	r4, [pc, #464]	; (8003320 <RCM_ExecUserConv+0x1dc>)
 8003150:	7823      	ldrb	r3, [r4, #0]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d002      	beq.n	800315c <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 8003156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800315a:	4770      	bx	lr
    handle = RCM_UserConvHandle->convHandle;
 800315c:	7b03      	ldrb	r3, [r0, #12]
  if (false == RCM_NoInj_array [handle].enable)
 800315e:	4a71      	ldr	r2, [pc, #452]	; (8003324 <RCM_ExecUserConv+0x1e0>)
 8003160:	0059      	lsls	r1, r3, #1
 8003162:	18cd      	adds	r5, r1, r3
 8003164:	f812 5015 	ldrb.w	r5, [r2, r5, lsl #1]
 8003168:	2d00      	cmp	r5, #0
 800316a:	d13f      	bne.n	80031ec <RCM_ExecUserConv+0xa8>
      if (true == RCM_NoInj_array [i].enable)
 800316c:	7816      	ldrb	r6, [r2, #0]
 800316e:	2e00      	cmp	r6, #0
 8003170:	f040 809b 	bne.w	80032aa <RCM_ExecUserConv+0x166>
  uint8_t LastEnable = RCM_MAX_CONV;
 8003174:	2504      	movs	r5, #4
      if (true == RCM_NoInj_array [i].enable)
 8003176:	7996      	ldrb	r6, [r2, #6]
 8003178:	2e00      	cmp	r6, #0
 800317a:	f000 80af 	beq.w	80032dc <RCM_ExecUserConv+0x198>
        if (RCM_NoInj_array[i].next > handle)
 800317e:	7ad7      	ldrb	r7, [r2, #11]
 8003180:	42bb      	cmp	r3, r7
 8003182:	f0c0 80bd 	bcc.w	8003300 <RCM_ExecUserConv+0x1bc>
      if (true == RCM_NoInj_array [i].enable)
 8003186:	7b15      	ldrb	r5, [r2, #12]
 8003188:	2d00      	cmp	r5, #0
 800318a:	f040 80bc 	bne.w	8003306 <RCM_ExecUserConv+0x1c2>
 800318e:	7c95      	ldrb	r5, [r2, #18]
 8003190:	2d00      	cmp	r5, #0
 8003192:	f040 80a7 	bne.w	80032e4 <RCM_ExecUserConv+0x1a0>
      i++;
 8003196:	2501      	movs	r5, #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 8003198:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 800319c:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 80031a0:	18ce      	adds	r6, r1, r3
         formerNext = RCM_NoInj_array[LastEnable].next;
 80031a2:	f89c 8005 	ldrb.w	r8, [ip, #5]
 80031a6:	4f60      	ldr	r7, [pc, #384]	; (8003328 <RCM_ExecUserConv+0x1e4>)
         RCM_NoInj_array[handle].next = formerNext;
 80031a8:	eb02 0646 	add.w	r6, r2, r6, lsl #1
         RCM_NoInj_array[formerNext].prev = handle;
 80031ac:	eb08 0e48 	add.w	lr, r8, r8, lsl #1
 80031b0:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 80031b4:	7135      	strb	r5, [r6, #4]
 80031b6:	783d      	ldrb	r5, [r7, #0]
         RCM_NoInj_array[handle].next = formerNext;
 80031b8:	f886 8005 	strb.w	r8, [r6, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 80031bc:	f88e 3004 	strb.w	r3, [lr, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 80031c0:	f88c 3005 	strb.w	r3, [ip, #5]
    RCM_NoInj_array[handle].enable = true;
 80031c4:	18ce      	adds	r6, r1, r3
 80031c6:	0076      	lsls	r6, r6, #1
 80031c8:	eb02 0c06 	add.w	ip, r2, r6
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80031cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80031d0:	eb02 0545 	add.w	r5, r2, r5, lsl #1
    RCM_NoInj_array[handle].status = notvalid;
 80031d4:	f04f 0e00 	mov.w	lr, #0
 80031d8:	f88c e001 	strb.w	lr, [ip, #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80031dc:	786d      	ldrb	r5, [r5, #1]
    RCM_NoInj_array[handle].enable = true;
 80031de:	f04f 0c01 	mov.w	ip, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 80031e2:	4565      	cmp	r5, ip
    RCM_NoInj_array[handle].enable = true;
 80031e4:	f802 c006 	strb.w	ip, [r2, r6]
      RCM_currentHandle = handle;
 80031e8:	bf18      	it	ne
 80031ea:	703b      	strbne	r3, [r7, #0]
  if (false == PWM_Handle_M1.ADCRegularLocked)
 80031ec:	4d4f      	ldr	r5, [pc, #316]	; (800332c <RCM_ExecUserConv+0x1e8>)
 80031ee:	f895 50a0 	ldrb.w	r5, [r5, #160]	; 0xa0
 80031f2:	2d00      	cmp	r5, #0
 80031f4:	d13c      	bne.n	8003270 <RCM_ExecUserConv+0x12c>
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80031f6:	4d4e      	ldr	r5, [pc, #312]	; (8003330 <RCM_ExecUserConv+0x1ec>)
 80031f8:	f855 5023 	ldr.w	r5, [r5, r3, lsl #2]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80031fc:	792f      	ldrb	r7, [r5, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80031fe:	682e      	ldr	r6, [r5, #0]
 8003200:	2f09      	cmp	r7, #9
 8003202:	f04f 0501 	mov.w	r5, #1
 8003206:	ea4f 6e87 	mov.w	lr, r7, lsl #26
 800320a:	fa05 f507 	lsl.w	r5, r5, r7
 800320e:	eb07 0c47 	add.w	ip, r7, r7, lsl #1
 8003212:	d945      	bls.n	80032a0 <RCM_ExecUserConv+0x15c>
 8003214:	f045 7500 	orr.w	r5, r5, #33554432	; 0x2000000
 8003218:	ea45 050e 	orr.w	r5, r5, lr
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800321c:	f1ac 0c1e 	sub.w	ip, ip, #30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003220:	ea45 550c 	orr.w	r5, r5, ip, lsl #20
  MODIFY_REG(*preg,
 8003224:	6b37      	ldr	r7, [r6, #48]	; 0x30
 8003226:	0d2d      	lsrs	r5, r5, #20
 8003228:	f405 65f8 	and.w	r5, r5, #1984	; 0x7c0
 800322c:	f427 67f8 	bic.w	r7, r7, #1984	; 0x7c0
 8003230:	433d      	orrs	r5, r7
 8003232:	6335      	str	r5, [r6, #48]	; 0x30
 8003234:	6c35      	ldr	r5, [r6, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 8003236:	68b5      	ldr	r5, [r6, #8]
 8003238:	f025 4500 	bic.w	r5, r5, #2147483648	; 0x80000000
 800323c:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8003240:	f045 0504 	orr.w	r5, r5, #4
 8003244:	60b5      	str	r5, [r6, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8003246:	6835      	ldr	r5, [r6, #0]
 8003248:	076d      	lsls	r5, r5, #29
 800324a:	d5fc      	bpl.n	8003246 <RCM_ExecUserConv+0x102>
 800324c:	6c35      	ldr	r5, [r6, #64]	; 0x40
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 800324e:	4e39      	ldr	r6, [pc, #228]	; (8003334 <RCM_ExecUserConv+0x1f0>)
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8003250:	4419      	add	r1, r3
 8003252:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8003256:	f025 010f 	bic.w	r1, r5, #15
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 800325a:	4d33      	ldr	r5, [pc, #204]	; (8003328 <RCM_ExecUserConv+0x1e4>)
 800325c:	7957      	ldrb	r7, [r2, #5]
 800325e:	702f      	strb	r7, [r5, #0]
 8003260:	b289      	uxth	r1, r1
    RCM_NoInj_array[handle].status = valid;
 8003262:	2502      	movs	r5, #2
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8003264:	8051      	strh	r1, [r2, #2]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003266:	8031      	strh	r1, [r6, #0]
    RCM_NoInj_array[handle].status = valid;
 8003268:	7055      	strb	r5, [r2, #1]
        RCM_UserConvState = RCM_USERCONV_EOC;
 800326a:	2202      	movs	r2, #2
 800326c:	7022      	strb	r2, [r4, #0]
 800326e:	e008      	b.n	8003282 <RCM_ExecUserConv+0x13e>
 8003270:	4419      	add	r1, r3
 8003272:	eb02 0241 	add.w	r2, r2, r1, lsl #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003276:	4e2f      	ldr	r6, [pc, #188]	; (8003334 <RCM_ExecUserConv+0x1f0>)
 8003278:	7855      	ldrb	r5, [r2, #1]
  retVal = RCM_NoInj_array[handle].value;
 800327a:	8851      	ldrh	r1, [r2, #2]
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 800327c:	8031      	strh	r1, [r6, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 800327e:	2d00      	cmp	r5, #0
 8003280:	d1f3      	bne.n	800326a <RCM_ExecUserConv+0x126>
      if (RCM_CB_array[handle].cb != NULL)
 8003282:	4a2d      	ldr	r2, [pc, #180]	; (8003338 <RCM_ExecUserConv+0x1f4>)
 8003284:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8003288:	2d00      	cmp	r5, #0
 800328a:	f43f af64 	beq.w	8003156 <RCM_ExecUserConv+0x12>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800328e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8003292:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8003294:	2300      	movs	r3, #0
 8003296:	7023      	strb	r3, [r4, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003298:	462b      	mov	r3, r5
}
 800329a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800329e:	4718      	bx	r3
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80032a0:	ea4e 5c0c 	orr.w	ip, lr, ip, lsl #20
 80032a4:	ea4c 0505 	orr.w	r5, ip, r5
 80032a8:	e7bc      	b.n	8003224 <RCM_ExecUserConv+0xe0>
        if (RCM_NoInj_array[i].next > handle)
 80032aa:	7957      	ldrb	r7, [r2, #5]
 80032ac:	42bb      	cmp	r3, r7
 80032ae:	f4bf af62 	bcs.w	8003176 <RCM_ExecUserConv+0x32>
      if (true == RCM_NoInj_array [i].enable)
 80032b2:	462e      	mov	r6, r5
          RCM_NoInj_array[i].next = handle;
 80032b4:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 80032b8:	18ce      	adds	r6, r1, r3
 80032ba:	eb02 0646 	add.w	r6, r2, r6, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 80032be:	eb07 0e47 	add.w	lr, r7, r7, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 80032c2:	7177      	strb	r7, [r6, #5]
          RCM_NoInj_array[i].next = handle;
 80032c4:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
          RCM_NoInj_array[formerNext].prev = handle;
 80032c8:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 80032cc:	4f16      	ldr	r7, [pc, #88]	; (8003328 <RCM_ExecUserConv+0x1e4>)
          RCM_NoInj_array[handle].prev = i;
 80032ce:	7135      	strb	r5, [r6, #4]
          RCM_NoInj_array[i].next = handle;
 80032d0:	f88c 3005 	strb.w	r3, [ip, #5]
 80032d4:	783d      	ldrb	r5, [r7, #0]
          RCM_NoInj_array[formerNext].prev = handle;
 80032d6:	f88e 3004 	strb.w	r3, [lr, #4]
 80032da:	e773      	b.n	80031c4 <RCM_ExecUserConv+0x80>
      if (true == RCM_NoInj_array [i].enable)
 80032dc:	7b16      	ldrb	r6, [r2, #12]
 80032de:	b996      	cbnz	r6, 8003306 <RCM_ExecUserConv+0x1c2>
 80032e0:	7c96      	ldrb	r6, [r2, #18]
 80032e2:	b136      	cbz	r6, 80032f2 <RCM_ExecUserConv+0x1ae>
        if (RCM_NoInj_array[i].next > handle)
 80032e4:	7dd7      	ldrb	r7, [r2, #23]
 80032e6:	42bb      	cmp	r3, r7
      i++;
 80032e8:	f04f 0503 	mov.w	r5, #3
        if (RCM_NoInj_array[i].next > handle)
 80032ec:	f4bf af54 	bcs.w	8003198 <RCM_ExecUserConv+0x54>
 80032f0:	e7df      	b.n	80032b2 <RCM_ExecUserConv+0x16e>
       if (LastEnable != RCM_MAX_CONV )
 80032f2:	2d04      	cmp	r5, #4
 80032f4:	f47f af50 	bne.w	8003198 <RCM_ExecUserConv+0x54>
         RCM_currentHandle = handle;
 80032f8:	4f0b      	ldr	r7, [pc, #44]	; (8003328 <RCM_ExecUserConv+0x1e4>)
 80032fa:	461d      	mov	r5, r3
 80032fc:	703b      	strb	r3, [r7, #0]
 80032fe:	e761      	b.n	80031c4 <RCM_ExecUserConv+0x80>
      i++;
 8003300:	2501      	movs	r5, #1
      if (true == RCM_NoInj_array [i].enable)
 8003302:	462e      	mov	r6, r5
 8003304:	e7d6      	b.n	80032b4 <RCM_ExecUserConv+0x170>
        if (RCM_NoInj_array[i].next > handle)
 8003306:	7c57      	ldrb	r7, [r2, #17]
 8003308:	42bb      	cmp	r3, r7
 800330a:	d304      	bcc.n	8003316 <RCM_ExecUserConv+0x1d2>
      if (true == RCM_NoInj_array [i].enable)
 800330c:	7c95      	ldrb	r5, [r2, #18]
 800330e:	2d00      	cmp	r5, #0
 8003310:	d1e8      	bne.n	80032e4 <RCM_ExecUserConv+0x1a0>
      i++;
 8003312:	2502      	movs	r5, #2
 8003314:	e740      	b.n	8003198 <RCM_ExecUserConv+0x54>
 8003316:	2502      	movs	r5, #2
 8003318:	e7cb      	b.n	80032b2 <RCM_ExecUserConv+0x16e>
 800331a:	bf00      	nop
 800331c:	2000044c 	.word	0x2000044c
 8003320:	20000450 	.word	0x20000450
 8003324:	20000434 	.word	0x20000434
 8003328:	20000454 	.word	0x20000454
 800332c:	20000124 	.word	0x20000124
 8003330:	20000458 	.word	0x20000458
 8003334:	20000452 	.word	0x20000452
 8003338:	20000414 	.word	0x20000414

0800333c <RCM_ExecNextConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
 800333c:	b4f0      	push	{r4, r5, r6, r7}
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 800333e:	4b1d      	ldr	r3, [pc, #116]	; (80033b4 <RCM_ExecNextConv+0x78>)
 8003340:	481d      	ldr	r0, [pc, #116]	; (80033b8 <RCM_ExecNextConv+0x7c>)
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	0054      	lsls	r4, r2, #1
 8003346:	18a3      	adds	r3, r4, r2
 8003348:	f810 3013 	ldrb.w	r3, [r0, r3, lsl #1]
 800334c:	b35b      	cbz	r3, 80033a6 <RCM_ExecNextConv+0x6a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 800334e:	4b1b      	ldr	r3, [pc, #108]	; (80033bc <RCM_ExecNextConv+0x80>)
 8003350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003354:	6819      	ldr	r1, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003356:	2504      	movs	r5, #4
 8003358:	600d      	str	r5, [r1, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800335a:	791d      	ldrb	r5, [r3, #4]
 800335c:	2301      	movs	r3, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 800335e:	2d09      	cmp	r5, #9
 8003360:	ea4f 6785 	mov.w	r7, r5, lsl #26
 8003364:	fa03 f305 	lsl.w	r3, r3, r5
 8003368:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 800336c:	d91d      	bls.n	80033aa <RCM_ExecNextConv+0x6e>
 800336e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003372:	433b      	orrs	r3, r7
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8003374:	3e1e      	subs	r6, #30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8003376:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
  MODIFY_REG(*preg,
 800337a:	6b0d      	ldr	r5, [r1, #48]	; 0x30
 800337c:	0d1b      	lsrs	r3, r3, #20
 800337e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003382:	f425 65f8 	bic.w	r5, r5, #1984	; 0x7c0
 8003386:	432b      	orrs	r3, r5
 8003388:	630b      	str	r3, [r1, #48]	; 0x30
 800338a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 800338c:	688b      	ldr	r3, [r1, #8]

    (void)LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 800338e:	4422      	add	r2, r4
 8003390:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003394:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8003398:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800339c:	2201      	movs	r2, #1
 800339e:	f043 0304 	orr.w	r3, r3, #4
 80033a2:	7042      	strb	r2, [r0, #1]
 80033a4:	608b      	str	r3, [r1, #8]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 80033a6:	bcf0      	pop	{r4, r5, r6, r7}
 80033a8:	4770      	bx	lr
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 80033aa:	ea47 5606 	orr.w	r6, r7, r6, lsl #20
 80033ae:	4333      	orrs	r3, r6
 80033b0:	e7e3      	b.n	800337a <RCM_ExecNextConv+0x3e>
 80033b2:	bf00      	nop
 80033b4:	20000454 	.word	0x20000454
 80033b8:	20000434 	.word	0x20000434
 80033bc:	20000458 	.word	0x20000458

080033c0 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 80033c0:	b470      	push	{r4, r5, r6}
  uint32_t result;
  RCM_status_t status;

  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 80033c2:	4c10      	ldr	r4, [pc, #64]	; (8003404 <RCM_ReadOngoingConv+0x44>)
 80033c4:	4a10      	ldr	r2, [pc, #64]	; (8003408 <RCM_ReadOngoingConv+0x48>)
 80033c6:	7821      	ldrb	r1, [r4, #0]
 80033c8:	0048      	lsls	r0, r1, #1
 80033ca:	1843      	adds	r3, r0, r1
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	18d5      	adds	r5, r2, r3
 80033d0:	5cd3      	ldrb	r3, [r2, r3]
 80033d2:	b1ab      	cbz	r3, 8003400 <RCM_ReadOngoingConv+0x40>
  {
    status = RCM_NoInj_array[RCM_currentHandle].status;
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80033d4:	4b0d      	ldr	r3, [pc, #52]	; (800340c <RCM_ReadOngoingConv+0x4c>)
 80033d6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80033da:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80033dc:	681e      	ldr	r6, [r3, #0]
 80033de:	0776      	lsls	r6, r6, #29
 80033e0:	d509      	bpl.n	80033f6 <RCM_ReadOngoingConv+0x36>
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 80033e2:	786e      	ldrb	r6, [r5, #1]
 80033e4:	f016 0ffd 	tst.w	r6, #253	; 0xfd
 80033e8:	d005      	beq.n	80033f6 <RCM_ReadOngoingConv+0x36>
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    else
    {
      /* Reading of ADC Converted Value */
      RCM_NoInj_array[RCM_currentHandle].value
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 80033ec:	2602      	movs	r6, #2
 80033ee:	f023 030f 	bic.w	r3, r3, #15
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
 80033f2:	806b      	strh	r3, [r5, #2]
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 80033f4:	706e      	strb	r6, [r5, #1]
      /* Restore back DMA configuration */
    }

    /* Prepare next conversion */
    RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 80033f6:	4401      	add	r1, r0
 80033f8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 80033fc:	7953      	ldrb	r3, [r2, #5]
 80033fe:	7023      	strb	r3, [r4, #0]
    }
    else
    {
      /* Nothing to do */
    }
}
 8003400:	bc70      	pop	{r4, r5, r6}
 8003402:	4770      	bx	lr
 8003404:	20000454 	.word	0x20000454
 8003408:	20000434 	.word	0x20000434
 800340c:	20000458 	.word	0x20000458

08003410 <TIM2_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE(ENCODER_M1.TIMx) != 0U)
 8003410:	4806      	ldr	r0, [pc, #24]	; (800342c <TIM2_IRQHandler+0x1c>)
 8003412:	6a03      	ldr	r3, [r0, #32]
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003414:	68da      	ldr	r2, [r3, #12]
 8003416:	07d1      	lsls	r1, r2, #31
 8003418:	d502      	bpl.n	8003420 <TIM2_IRQHandler+0x10>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	07d2      	lsls	r2, r2, #31
 800341e:	d400      	bmi.n	8003422 <TIM2_IRQHandler+0x12>
  }

  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8003420:	4770      	bx	lr
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003422:	f06f 0201 	mvn.w	r2, #1
 8003426:	611a      	str	r2, [r3, #16]
      (void)ENC_IRQHandler(&ENCODER_M1);
 8003428:	f003 bd52 	b.w	8006ed0 <ENC_IRQHandler>
 800342c:	200002b4 	.word	0x200002b4

08003430 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8003430:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 8003432:	f7fe ff4d 	bl	80022d0 <TSK_HardwareFaultTask>
 8003436:	e7fe      	b.n	8003436 <HardFault_Handler+0x6>

08003438 <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 8003438:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 800343a:	4c0a      	ldr	r4, [pc, #40]	; (8003464 <SysTick_Handler+0x2c>)
 800343c:	7823      	ldrb	r3, [r4, #0]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d009      	beq.n	8003456 <SysTick_Handler+0x1e>
 8003442:	3301      	adds	r3, #1
 8003444:	b2db      	uxtb	r3, r3
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 8003446:	7023      	strb	r3, [r4, #0]
  /* NO DMA interrupt */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */

    MC_RunMotorControlTasks();
 8003448:	f7fe ff18 	bl	800227c <MC_RunMotorControlTasks>

    TC_IncTick(&PosCtrlM1);
 800344c:	4806      	ldr	r0, [pc, #24]	; (8003468 <SysTick_Handler+0x30>)

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 800344e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TC_IncTick(&PosCtrlM1);
 8003452:	f005 b9b5 	b.w	80087c0 <TC_IncTick>
    HAL_IncTick();
 8003456:	f000 fa2d 	bl	80038b4 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800345a:	f001 fa19 	bl	8004890 <HAL_SYSTICK_IRQHandler>
 800345e:	2301      	movs	r3, #1
 8003460:	e7f1      	b.n	8003446 <SysTick_Handler+0xe>
 8003462:	bf00      	nop
 8003464:	200003d4 	.word	0x200003d4
 8003468:	200001c8 	.word	0x200001c8

0800346c <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <EXTI15_10_IRQHandler+0x14>)
 800346e:	695a      	ldr	r2, [r3, #20]

  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13))
 8003470:	0492      	lsls	r2, r2, #18
 8003472:	d400      	bmi.n	8003476 <EXTI15_10_IRQHandler+0xa>
  else
  {
    /* Nothing to do */
  }

}
 8003474:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003476:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800347a:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb();
 800347c:	f7fe bf36 	b.w	80022ec <UI_HandleStartStopButton_cb>
 8003480:	40010400 	.word	0x40010400

08003484 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003484:	4b0e      	ldr	r3, [pc, #56]	; (80034c0 <HAL_MspInit+0x3c>)
{
 8003486:	b500      	push	{lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003488:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800348a:	f042 0201 	orr.w	r2, r2, #1
 800348e:	661a      	str	r2, [r3, #96]	; 0x60
 8003490:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003492:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003494:	f002 0201 	and.w	r2, r2, #1
 8003498:	9200      	str	r2, [sp, #0]
 800349a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800349c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800349e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034a2:	659a      	str	r2, [r3, #88]	; 0x58
 80034a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034aa:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80034ac:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ae:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80034b0:	f001 f97c 	bl	80047ac <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034b4:	b003      	add	sp, #12
 80034b6:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 80034ba:	f001 bb51 	b.w	8004b60 <HAL_PWREx_DisableUCPDDeadBattery>
 80034be:	bf00      	nop
 80034c0:	40021000 	.word	0x40021000

080034c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034c4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c6:	2300      	movs	r3, #0
{
 80034c8:	b09f      	sub	sp, #124	; 0x7c
 80034ca:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034cc:	4619      	mov	r1, r3
 80034ce:	a809      	add	r0, sp, #36	; 0x24
 80034d0:	2254      	movs	r2, #84	; 0x54
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034d2:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80034d6:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80034da:	9308      	str	r3, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80034dc:	f005 fa0f 	bl	80088fe <memset>
  if(hadc->Instance==ADC1)
 80034e0:	6823      	ldr	r3, [r4, #0]
 80034e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80034e6:	d001      	beq.n	80034ec <HAL_ADC_MspInit+0x28>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80034e8:	b01f      	add	sp, #124	; 0x7c
 80034ea:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80034ec:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80034f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034f4:	a809      	add	r0, sp, #36	; 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80034f6:	9209      	str	r2, [sp, #36]	; 0x24
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80034f8:	931a      	str	r3, [sp, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80034fa:	f001 ff5f 	bl	80053bc <HAL_RCCEx_PeriphCLKConfig>
 80034fe:	2800      	cmp	r0, #0
 8003500:	d12f      	bne.n	8003562 <HAL_ADC_MspInit+0x9e>
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003502:	4b19      	ldr	r3, [pc, #100]	; (8003568 <HAL_ADC_MspInit+0xa4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003504:	4819      	ldr	r0, [pc, #100]	; (800356c <HAL_ADC_MspInit+0xa8>)
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003506:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800350c:	64da      	str	r2, [r3, #76]	; 0x4c
 800350e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003510:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003514:	9201      	str	r2, [sp, #4]
 8003516:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800351a:	f042 0204 	orr.w	r2, r2, #4
 800351e:	64da      	str	r2, [r3, #76]	; 0x4c
 8003520:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003522:	f002 0204 	and.w	r2, r2, #4
 8003526:	9202      	str	r2, [sp, #8]
 8003528:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800352a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800352c:	f042 0201 	orr.w	r2, r2, #1
 8003530:	64da      	str	r2, [r3, #76]	; 0x4c
 8003532:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800353a:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 800353c:	2307      	movs	r3, #7
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800353e:	2500      	movs	r5, #0
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003540:	a904      	add	r1, sp, #16
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003542:	9a03      	ldr	r2, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003544:	9506      	str	r5, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003546:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800354a:	f001 f9a5 	bl	8004898 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354e:	a904      	add	r1, sp, #16
 8003550:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003554:	e9cd 4404 	strd	r4, r4, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003558:	9506      	str	r5, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800355a:	f001 f99d 	bl	8004898 <HAL_GPIO_Init>
}
 800355e:	b01f      	add	sp, #124	; 0x7c
 8003560:	bd30      	pop	{r4, r5, pc}
      Error_Handler();
 8003562:	f7fe fc2f 	bl	8001dc4 <Error_Handler>
 8003566:	e7cc      	b.n	8003502 <HAL_ADC_MspInit+0x3e>
 8003568:	40021000 	.word	0x40021000
 800356c:	48000800 	.word	0x48000800

08003570 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8003570:	6802      	ldr	r2, [r0, #0]
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <HAL_CORDIC_MspInit+0x2c>)
 8003574:	429a      	cmp	r2, r3
 8003576:	d000      	beq.n	800357a <HAL_CORDIC_MspInit+0xa>
 8003578:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800357a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	; 0x448
 800357e:	f042 0208 	orr.w	r2, r2, #8
 8003582:	f8c3 2448 	str.w	r2, [r3, #1096]	; 0x448
 8003586:	f503 6380 	add.w	r3, r3, #1024	; 0x400
{
 800358a:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800358c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800358e:	f003 0308 	and.w	r3, r3, #8
 8003592:	9301      	str	r3, [sp, #4]
 8003594:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8003596:	b002      	add	sp, #8
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	40020c00 	.word	0x40020c00

080035a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80035a0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_pwm->Instance==TIM1)
 80035a2:	6801      	ldr	r1, [r0, #0]
 80035a4:	4a18      	ldr	r2, [pc, #96]	; (8003608 <HAL_TIM_PWM_MspInit+0x68>)
{
 80035a6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a8:	2300      	movs	r3, #0
  if(htim_pwm->Instance==TIM1)
 80035aa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ac:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80035b0:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80035b4:	9307      	str	r3, [sp, #28]
  if(htim_pwm->Instance==TIM1)
 80035b6:	d001      	beq.n	80035bc <HAL_TIM_PWM_MspInit+0x1c>

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 80035b8:	b008      	add	sp, #32
 80035ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80035c0:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80035c4:	a903      	add	r1, sp, #12
    __HAL_RCC_TIM1_CLK_ENABLE();
 80035c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035cc:	661a      	str	r2, [r3, #96]	; 0x60
 80035ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80035d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80035d4:	9201      	str	r2, [sp, #4]
 80035d6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035d8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	64da      	str	r2, [r3, #76]	; 0x4c
 80035e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035e8:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80035ea:	2306      	movs	r3, #6
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80035ec:	2540      	movs	r5, #64	; 0x40
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035ee:	2412      	movs	r4, #18
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80035f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035f4:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035f6:	9205      	str	r2, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035f8:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80035fc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80035fe:	f001 f94b 	bl	8004898 <HAL_GPIO_Init>
}
 8003602:	b008      	add	sp, #32
 8003604:	bd70      	pop	{r4, r5, r6, pc}
 8003606:	bf00      	nop
 8003608:	40012c00 	.word	0x40012c00

0800360c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800360c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM2)
 800360e:	6803      	ldr	r3, [r0, #0]
{
 8003610:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003612:	2400      	movs	r4, #0
  if(htim_encoder->Instance==TIM2)
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003618:	e9cd 4403 	strd	r4, r4, [sp, #12]
 800361c:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8003620:	9407      	str	r4, [sp, #28]
  if(htim_encoder->Instance==TIM2)
 8003622:	d001      	beq.n	8003628 <HAL_TIM_Encoder_MspInit+0x1c>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8003624:	b008      	add	sp, #32
 8003626:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003628:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362c:	2602      	movs	r6, #2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800362e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003630:	f042 0201 	orr.w	r2, r2, #1
 8003634:	659a      	str	r2, [r3, #88]	; 0x58
 8003636:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003638:	f002 0201 	and.w	r2, r2, #1
 800363c:	9200      	str	r2, [sp, #0]
 800363e:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003640:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003642:	f042 0201 	orr.w	r2, r2, #1
 8003646:	64da      	str	r2, [r3, #76]	; 0x4c
 8003648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800364a:	f002 0201 	and.w	r2, r2, #1
 800364e:	9201      	str	r2, [sp, #4]
 8003650:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003652:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003654:	f042 0202 	orr.w	r2, r2, #2
 8003658:	64da      	str	r2, [r3, #76]	; 0x4c
 800365a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365c:	f003 0302 	and.w	r3, r3, #2
 8003660:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003662:	2501      	movs	r5, #1
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin;
 8003664:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(M1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8003668:	a903      	add	r1, sp, #12
 800366a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366e:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003670:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003672:	e9cd 3603 	strd	r3, r6, [sp, #12]
    HAL_GPIO_Init(M1_ENCODER_A_GPIO_Port, &GPIO_InitStruct);
 8003676:	f001 f90f 	bl	8004898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_ENCODER_B_Pin;
 800367a:	2308      	movs	r3, #8
    HAL_GPIO_Init(M1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 800367c:	a903      	add	r1, sp, #12
 800367e:	4805      	ldr	r0, [pc, #20]	; (8003694 <HAL_TIM_Encoder_MspInit+0x88>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003680:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003682:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003684:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Pin = M1_ENCODER_B_Pin;
 8003688:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_ENCODER_B_GPIO_Port, &GPIO_InitStruct);
 800368a:	f001 f905 	bl	8004898 <HAL_GPIO_Init>
}
 800368e:	b008      	add	sp, #32
 8003690:	bd70      	pop	{r4, r5, r6, pc}
 8003692:	bf00      	nop
 8003694:	48000400 	.word	0x48000400

08003698 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003698:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800369a:	6801      	ldr	r1, [r0, #0]
 800369c:	4a23      	ldr	r2, [pc, #140]	; (800372c <HAL_TIM_MspPostInit+0x94>)
{
 800369e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a0:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80036a2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036a4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 80036a8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80036ac:	9307      	str	r3, [sp, #28]
  if(htim->Instance==TIM1)
 80036ae:	d001      	beq.n	80036b4 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80036b0:	b008      	add	sp, #32
 80036b2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80036b8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036bc:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036c0:	f042 0201 	orr.w	r2, r2, #1
 80036c4:	64da      	str	r2, [r3, #76]	; 0x4c
 80036c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036c8:	f002 0201 	and.w	r2, r2, #1
 80036cc:	9201      	str	r2, [sp, #4]
 80036ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036d0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036d2:	f042 0202 	orr.w	r2, r2, #2
 80036d6:	64da      	str	r2, [r3, #76]	; 0x4c
 80036d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036da:	f003 0302 	and.w	r3, r3, #2
 80036de:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80036e0:	2506      	movs	r5, #6
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80036e2:	2380      	movs	r3, #128	; 0x80
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036e4:	2601      	movs	r6, #1
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80036e6:	a903      	add	r1, sp, #12
 80036e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ec:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80036ee:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f0:	e9cd 3403 	strd	r3, r4, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036f4:	e9cd 6405 	strd	r6, r4, [sp, #20]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80036f8:	f001 f8ce 	bl	8004898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 80036fc:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036fe:	a903      	add	r1, sp, #12
 8003700:	480b      	ldr	r0, [pc, #44]	; (8003730 <HAL_TIM_MspPostInit+0x98>)
    GPIO_InitStruct.Pin = M1_PWM_VL_Pin|M1_PWM_WL_Pin;
 8003702:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003704:	e9cd 4604 	strd	r4, r6, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003708:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800370c:	f001 f8c4 	bl	8004898 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003710:	f44f 63e0 	mov.w	r3, #1792	; 0x700
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003714:	a903      	add	r1, sp, #12
 8003716:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800371a:	9507      	str	r5, [sp, #28]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800371c:	e9cd 4404 	strd	r4, r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003720:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003722:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003724:	f001 f8b8 	bl	8004898 <HAL_GPIO_Init>
}
 8003728:	b008      	add	sp, #32
 800372a:	bd70      	pop	{r4, r5, r6, pc}
 800372c:	40012c00 	.word	0x40012c00
 8003730:	48000400 	.word	0x48000400

08003734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003734:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003736:	2300      	movs	r3, #0
{
 8003738:	b09c      	sub	sp, #112	; 0x70
 800373a:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800373c:	4619      	mov	r1, r3
 800373e:	2254      	movs	r2, #84	; 0x54
 8003740:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003742:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003746:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800374a:	9306      	str	r3, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800374c:	f005 f8d7 	bl	80088fe <memset>
  if(huart->Instance==USART2)
 8003750:	6822      	ldr	r2, [r4, #0]
 8003752:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <HAL_UART_MspInit+0x80>)
 8003754:	429a      	cmp	r2, r3
 8003756:	d001      	beq.n	800375c <HAL_UART_MspInit+0x28>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8003758:	b01c      	add	sp, #112	; 0x70
 800375a:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800375c:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800375e:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003760:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003762:	f001 fe2b 	bl	80053bc <HAL_RCCEx_PeriphCLKConfig>
 8003766:	bb10      	cbnz	r0, 80037ae <HAL_UART_MspInit+0x7a>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003768:	4b13      	ldr	r3, [pc, #76]	; (80037b8 <HAL_UART_MspInit+0x84>)
 800376a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800376c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003770:	659a      	str	r2, [r3, #88]	; 0x58
 8003772:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003774:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003778:	9200      	str	r2, [sp, #0]
 800377a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800377c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	64da      	str	r2, [r3, #76]	; 0x4c
 8003784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800378c:	2207      	movs	r2, #7
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378e:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003790:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003792:	250c      	movs	r5, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003794:	2402      	movs	r4, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003796:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800379a:	9e01      	ldr	r6, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800379c:	9206      	str	r2, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379e:	e9cd 5402 	strd	r5, r4, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037a2:	e9cd 3304 	strd	r3, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a6:	f001 f877 	bl	8004898 <HAL_GPIO_Init>
}
 80037aa:	b01c      	add	sp, #112	; 0x70
 80037ac:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80037ae:	f7fe fb09 	bl	8001dc4 <Error_Handler>
 80037b2:	e7d9      	b.n	8003768 <HAL_UART_MspInit+0x34>
 80037b4:	40004400 	.word	0x40004400
 80037b8:	40021000 	.word	0x40021000

080037bc <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80037bc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80037c0:	2240      	movs	r2, #64	; 0x40
 80037c2:	601a      	str	r2, [r3, #0]

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC1);

  /* Highfrequency task */
  (void)TSK_HighFrequencyTask();
 80037c4:	f7fe bcf2 	b.w	80021ac <TSK_HighFrequencyTask>

080037c8 <TIM1_UP_TIM16_IRQHandler>:
 80037c8:	4b03      	ldr	r3, [pc, #12]	; (80037d8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80037ca:	4804      	ldr	r0, [pc, #16]	; (80037dc <TIM1_UP_TIM16_IRQHandler+0x14>)
 80037cc:	f06f 0201 	mvn.w	r2, #1
 80037d0:	611a      	str	r2, [r3, #16]
 80037d2:	f004 baad 	b.w	8007d30 <R3_1_TIMx_UP_IRQHandler>
 80037d6:	bf00      	nop
 80037d8:	40012c00 	.word	0x40012c00
 80037dc:	20000124 	.word	0x20000124

080037e0 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 80037e0:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80037e2:	4b0c      	ldr	r3, [pc, #48]	; (8003814 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80037e4:	691a      	ldr	r2, [r3, #16]
 80037e6:	0612      	lsls	r2, r2, #24
 80037e8:	d40d      	bmi.n	8003806 <TIM1_BRK_TIM15_IRQHandler+0x26>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80037ea:	490a      	ldr	r1, [pc, #40]	; (8003814 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80037ec:	690b      	ldr	r3, [r1, #16]
 80037ee:	05db      	lsls	r3, r3, #23
 80037f0:	d505      	bpl.n	80037fe <TIM1_BRK_TIM15_IRQHandler+0x1e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80037f2:	f46f 7380 	mvn.w	r3, #256	; 0x100
 80037f6:	610b      	str	r3, [r1, #16]
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 80037f8:	4807      	ldr	r0, [pc, #28]	; (8003818 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80037fa:	f7ff fadd 	bl	8002db8 <PWMC_OVP_Handler>
  MC_RunMotorControlTasks();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80037fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_RunMotorControlTasks();
 8003802:	f7fe bd3b 	b.w	800227c <MC_RunMotorControlTasks>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003806:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800380a:	611a      	str	r2, [r3, #16]
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 800380c:	4802      	ldr	r0, [pc, #8]	; (8003818 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 800380e:	f7ff fab3 	bl	8002d78 <PWMC_OCP_Handler>
 8003812:	e7ea      	b.n	80037ea <TIM1_BRK_TIM15_IRQHandler+0xa>
 8003814:	40012c00 	.word	0x40012c00
 8003818:	20000124 	.word	0x20000124

0800381c <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800381c:	4a03      	ldr	r2, [pc, #12]	; (800382c <SystemInit+0x10>)
 800381e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003822:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003826:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800382a:	4770      	bx	lr
 800382c:	e000ed00 	.word	0xe000ed00

08003830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003830:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8003832:	4b0f      	ldr	r3, [pc, #60]	; (8003870 <HAL_InitTick+0x40>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	b90b      	cbnz	r3, 800383c <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8003838:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 800383a:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800383c:	490d      	ldr	r1, [pc, #52]	; (8003874 <HAL_InitTick+0x44>)
 800383e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003842:	4605      	mov	r5, r0
 8003844:	fbb2 f3f3 	udiv	r3, r2, r3
 8003848:	6808      	ldr	r0, [r1, #0]
 800384a:	fbb0 f0f3 	udiv	r0, r0, r3
 800384e:	f001 f803 	bl	8004858 <HAL_SYSTICK_Config>
 8003852:	4604      	mov	r4, r0
 8003854:	2800      	cmp	r0, #0
 8003856:	d1ef      	bne.n	8003838 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003858:	2d0f      	cmp	r5, #15
 800385a:	d8ed      	bhi.n	8003838 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800385c:	4602      	mov	r2, r0
 800385e:	4629      	mov	r1, r5
 8003860:	f04f 30ff 	mov.w	r0, #4294967295
 8003864:	f000 ffb4 	bl	80047d0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003868:	4b03      	ldr	r3, [pc, #12]	; (8003878 <HAL_InitTick+0x48>)
 800386a:	4620      	mov	r0, r4
 800386c:	601d      	str	r5, [r3, #0]
}
 800386e:	bd38      	pop	{r3, r4, r5, pc}
 8003870:	200003dc 	.word	0x200003dc
 8003874:	200003d8 	.word	0x200003d8
 8003878:	200003e0 	.word	0x200003e0

0800387c <HAL_Init>:
{
 800387c:	b500      	push	{lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800387e:	4a0c      	ldr	r2, [pc, #48]	; (80038b0 <HAL_Init+0x34>)
 8003880:	6813      	ldr	r3, [r2, #0]
 8003882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 8003886:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003888:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800388a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800388c:	f000 ff8e 	bl	80047ac <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003890:	2004      	movs	r0, #4
 8003892:	f7ff ffcd 	bl	8003830 <HAL_InitTick>
 8003896:	b118      	cbz	r0, 80038a0 <HAL_Init+0x24>
    status = HAL_ERROR;
 8003898:	2001      	movs	r0, #1
}
 800389a:	b003      	add	sp, #12
 800389c:	f85d fb04 	ldr.w	pc, [sp], #4
 80038a0:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 80038a2:	f7ff fdef 	bl	8003484 <HAL_MspInit>
 80038a6:	9801      	ldr	r0, [sp, #4]
}
 80038a8:	b003      	add	sp, #12
 80038aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80038ae:	bf00      	nop
 80038b0:	40022000 	.word	0x40022000

080038b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80038b4:	4a03      	ldr	r2, [pc, #12]	; (80038c4 <HAL_IncTick+0x10>)
 80038b6:	4904      	ldr	r1, [pc, #16]	; (80038c8 <HAL_IncTick+0x14>)
 80038b8:	6813      	ldr	r3, [r2, #0]
 80038ba:	6809      	ldr	r1, [r1, #0]
 80038bc:	440b      	add	r3, r1
 80038be:	6013      	str	r3, [r2, #0]
}
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000674 	.word	0x20000674
 80038c8:	200003dc 	.word	0x200003dc

080038cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80038cc:	4b01      	ldr	r3, [pc, #4]	; (80038d4 <HAL_GetTick+0x8>)
 80038ce:	6818      	ldr	r0, [r3, #0]
}
 80038d0:	4770      	bx	lr
 80038d2:	bf00      	nop
 80038d4:	20000674 	.word	0x20000674

080038d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038d8:	b538      	push	{r3, r4, r5, lr}
 80038da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80038dc:	f7ff fff6 	bl	80038cc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038e0:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80038e2:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80038e4:	d002      	beq.n	80038ec <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80038e6:	4b04      	ldr	r3, [pc, #16]	; (80038f8 <HAL_Delay+0x20>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80038ec:	f7ff ffee 	bl	80038cc <HAL_GetTick>
 80038f0:	1b40      	subs	r0, r0, r5
 80038f2:	42a0      	cmp	r0, r4
 80038f4:	d3fa      	bcc.n	80038ec <HAL_Delay+0x14>
  {
  }
}
 80038f6:	bd38      	pop	{r3, r4, r5, pc}
 80038f8:	200003dc 	.word	0x200003dc

080038fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038fc:	b570      	push	{r4, r5, r6, lr}
 80038fe:	b082      	sub	sp, #8
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003900:	2300      	movs	r3, #0
 8003902:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003904:	2800      	cmp	r0, #0
 8003906:	f000 80da 	beq.w	8003abe <HAL_ADC_Init+0x1c2>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800390a:	6dc5      	ldr	r5, [r0, #92]	; 0x5c
 800390c:	4604      	mov	r4, r0
 800390e:	2d00      	cmp	r5, #0
 8003910:	f000 80ca 	beq.w	8003aa8 <HAL_ADC_Init+0x1ac>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003914:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003916:	6893      	ldr	r3, [r2, #8]
 8003918:	009e      	lsls	r6, r3, #2
 800391a:	d505      	bpl.n	8003928 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800391c:	6893      	ldr	r3, [r2, #8]
 800391e:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003922:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003926:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003928:	6893      	ldr	r3, [r2, #8]
 800392a:	00dd      	lsls	r5, r3, #3
 800392c:	d419      	bmi.n	8003962 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800392e:	4b81      	ldr	r3, [pc, #516]	; (8003b34 <HAL_ADC_Init+0x238>)
 8003930:	4881      	ldr	r0, [pc, #516]	; (8003b38 <HAL_ADC_Init+0x23c>)
 8003932:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003934:	6891      	ldr	r1, [r2, #8]
 8003936:	099b      	lsrs	r3, r3, #6
 8003938:	fba0 0303 	umull	r0, r3, r0, r3
 800393c:	099b      	lsrs	r3, r3, #6
 800393e:	f021 4110 	bic.w	r1, r1, #2415919104	; 0x90000000
 8003942:	3301      	adds	r3, #1
 8003944:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 800394e:	6091      	str	r1, [r2, #8]
 8003950:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003952:	9b01      	ldr	r3, [sp, #4]
 8003954:	b12b      	cbz	r3, 8003962 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8003956:	9b01      	ldr	r3, [sp, #4]
 8003958:	3b01      	subs	r3, #1
 800395a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800395c:	9b01      	ldr	r3, [sp, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f9      	bne.n	8003956 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003962:	6893      	ldr	r3, [r2, #8]
 8003964:	00d8      	lsls	r0, r3, #3
 8003966:	f100 8090 	bmi.w	8003a8a <HAL_ADC_Init+0x18e>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800396c:	f043 0310 	orr.w	r3, r3, #16
 8003970:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003972:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	6623      	str	r3, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800397a:	6893      	ldr	r3, [r2, #8]
 800397c:	f013 0f04 	tst.w	r3, #4

    tmp_hal_status = HAL_ERROR;
 8003980:	f04f 0001 	mov.w	r0, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003984:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003986:	f040 8088 	bne.w	8003a9a <HAL_ADC_Init+0x19e>
 800398a:	06d9      	lsls	r1, r3, #27
 800398c:	f100 8085 	bmi.w	8003a9a <HAL_ADC_Init+0x19e>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003990:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003992:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003996:	f043 0302 	orr.w	r3, r3, #2
 800399a:	65e3      	str	r3, [r4, #92]	; 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800399c:	6893      	ldr	r3, [r2, #8]
 800399e:	07db      	lsls	r3, r3, #31
 80039a0:	d419      	bmi.n	80039d6 <HAL_ADC_Init+0xda>
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80039a2:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 80039a6:	4b65      	ldr	r3, [pc, #404]	; (8003b3c <HAL_ADC_Init+0x240>)
 80039a8:	f000 80bc 	beq.w	8003b24 <HAL_ADC_Init+0x228>
 80039ac:	429a      	cmp	r2, r3
 80039ae:	f000 809e 	beq.w	8003aee <HAL_ADC_Init+0x1f2>
 80039b2:	4d63      	ldr	r5, [pc, #396]	; (8003b40 <HAL_ADC_Init+0x244>)
 80039b4:	4963      	ldr	r1, [pc, #396]	; (8003b44 <HAL_ADC_Init+0x248>)
 80039b6:	68ad      	ldr	r5, [r5, #8]
 80039b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	6889      	ldr	r1, [r1, #8]
 80039c0:	432b      	orrs	r3, r5
 80039c2:	430b      	orrs	r3, r1
 80039c4:	07de      	lsls	r6, r3, #31
 80039c6:	d406      	bmi.n	80039d6 <HAL_ADC_Init+0xda>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80039c8:	495f      	ldr	r1, [pc, #380]	; (8003b48 <HAL_ADC_Init+0x24c>)
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80039ca:	688b      	ldr	r3, [r1, #8]
 80039cc:	6865      	ldr	r5, [r4, #4]
 80039ce:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80039d2:	432b      	orrs	r3, r5
 80039d4:	608b      	str	r3, [r1, #8]
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 80039d6:	e9d4 1502 	ldrd	r1, r5, [r4, #8]
 80039da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80039dc:	432b      	orrs	r3, r5
 80039de:	430b      	orrs	r3, r1
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039e0:	7f65      	ldrb	r5, [r4, #29]
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80039e2:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
                 hadc->Init.DataAlign                                                   |
 80039e6:	ea43 3345 	orr.w	r3, r3, r5, lsl #13

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039ea:	2901      	cmp	r1, #1
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80039ec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80039f0:	d103      	bne.n	80039fa <HAL_ADC_Init+0xfe>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80039f2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80039f4:	3901      	subs	r1, #1
 80039f6:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80039fa:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80039fc:	b121      	cbz	r1, 8003a08 <HAL_ADC_Init+0x10c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 80039fe:	6b25      	ldr	r5, [r4, #48]	; 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a00:	f401 7178 	and.w	r1, r1, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003a04:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003a06:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003a08:	68d6      	ldr	r6, [r2, #12]
 8003a0a:	4950      	ldr	r1, [pc, #320]	; (8003b4c <HAL_ADC_Init+0x250>)

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a0c:	6b65      	ldr	r5, [r4, #52]	; 0x34
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003a0e:	4031      	ands	r1, r6
 8003a10:	430b      	orrs	r3, r1
 8003a12:	60d3      	str	r3, [r2, #12]
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003a14:	6913      	ldr	r3, [r2, #16]
 8003a16:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8003a1a:	432b      	orrs	r3, r5
 8003a1c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003a1e:	6893      	ldr	r3, [r2, #8]
 8003a20:	071d      	lsls	r5, r3, #28
 8003a22:	d423      	bmi.n	8003a6c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003a24:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a26:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003a2a:	7f26      	ldrb	r6, [r4, #28]

      if (hadc->Init.GainCompensation != 0UL)
 8003a2c:	6925      	ldr	r5, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003a2e:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003a32:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003a34:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003a38:	ea43 3386 	orr.w	r3, r3, r6, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	60d3      	str	r3, [r2, #12]
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a40:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003a42:	2d00      	cmp	r5, #0
 8003a44:	d146      	bne.n	8003ad4 <HAL_ADC_Init+0x1d8>
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a4a:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003a4c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003a50:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003a54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003a58:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a5c:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8003a60:	2b01      	cmp	r3, #1
 8003a62:	d04e      	beq.n	8003b02 <HAL_ADC_Init+0x206>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a64:	6913      	ldr	r3, [r2, #16]
 8003a66:	f023 0301 	bic.w	r3, r3, #1
 8003a6a:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a6c:	6963      	ldr	r3, [r4, #20]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d028      	beq.n	8003ac4 <HAL_ADC_Init+0x1c8>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003a72:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003a74:	f023 030f 	bic.w	r3, r3, #15
 8003a78:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003a7a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003a7c:	f023 0303 	bic.w	r3, r3, #3
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	65e3      	str	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003a86:	b002      	add	sp, #8
 8003a88:	bd70      	pop	{r4, r5, r6, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003a8a:	6893      	ldr	r3, [r2, #8]
 8003a8c:	f013 0f04 	tst.w	r3, #4
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003a90:	f04f 0000 	mov.w	r0, #0
  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a94:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003a96:	f43f af78 	beq.w	800398a <HAL_ADC_Init+0x8e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a9a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8003a9c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a9e:	f043 0310 	orr.w	r3, r3, #16
 8003aa2:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8003aa4:	b002      	add	sp, #8
 8003aa6:	bd70      	pop	{r4, r5, r6, pc}
    HAL_ADC_MspInit(hadc);
 8003aa8:	f7ff fd0c 	bl	80034c4 <HAL_ADC_MspInit>
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003aac:	6822      	ldr	r2, [r4, #0]
    ADC_CLEAR_ERRORCODE(hadc);
 8003aae:	6625      	str	r5, [r4, #96]	; 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ab0:	6893      	ldr	r3, [r2, #8]
    hadc->Lock = HAL_UNLOCKED;
 8003ab2:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
 8003ab6:	009e      	lsls	r6, r3, #2
 8003ab8:	f57f af36 	bpl.w	8003928 <HAL_ADC_Init+0x2c>
 8003abc:	e72e      	b.n	800391c <HAL_ADC_Init+0x20>
    return HAL_ERROR;
 8003abe:	2001      	movs	r0, #1
}
 8003ac0:	b002      	add	sp, #8
 8003ac2:	bd70      	pop	{r4, r5, r6, pc}
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003ac4:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003ac6:	6a23      	ldr	r3, [r4, #32]
 8003ac8:	f021 010f 	bic.w	r1, r1, #15
 8003acc:	3b01      	subs	r3, #1
 8003ace:	430b      	orrs	r3, r1
 8003ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad2:	e7d2      	b.n	8003a7a <HAL_ADC_Init+0x17e>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003ad4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ad8:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003ada:	f8d2 30c0 	ldr.w	r3, [r2, #192]	; 0xc0
 8003ade:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003ae2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ae6:	432b      	orrs	r3, r5
 8003ae8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8003aec:	e7b6      	b.n	8003a5c <HAL_ADC_Init+0x160>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003aee:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003af2:	6899      	ldr	r1, [r3, #8]
 8003af4:	6893      	ldr	r3, [r2, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003af6:	430b      	orrs	r3, r1
 8003af8:	07d9      	lsls	r1, r3, #31
 8003afa:	f53f af6c 	bmi.w	80039d6 <HAL_ADC_Init+0xda>
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003afe:	4914      	ldr	r1, [pc, #80]	; (8003b50 <HAL_ADC_Init+0x254>)
 8003b00:	e763      	b.n	80039ca <HAL_ADC_Init+0xce>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003b02:	e9d4 3111 	ldrd	r3, r1, [r4, #68]	; 0x44
 8003b06:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
 8003b08:	6d25      	ldr	r5, [r4, #80]	; 0x50
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	6911      	ldr	r1, [r2, #16]
 8003b0e:	f043 0301 	orr.w	r3, r3, #1
 8003b12:	4333      	orrs	r3, r6
 8003b14:	f421 61ff 	bic.w	r1, r1, #2040	; 0x7f8
 8003b18:	432b      	orrs	r3, r5
 8003b1a:	f021 0104 	bic.w	r1, r1, #4
 8003b1e:	430b      	orrs	r3, r1
 8003b20:	6113      	str	r3, [r2, #16]
 8003b22:	e7a3      	b.n	8003a6c <HAL_ADC_Init+0x170>
 8003b24:	6891      	ldr	r1, [r2, #8]
 8003b26:	689b      	ldr	r3, [r3, #8]
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003b28:	430b      	orrs	r3, r1
 8003b2a:	07db      	lsls	r3, r3, #31
 8003b2c:	f53f af53 	bmi.w	80039d6 <HAL_ADC_Init+0xda>
 8003b30:	e7e5      	b.n	8003afe <HAL_ADC_Init+0x202>
 8003b32:	bf00      	nop
 8003b34:	200003d8 	.word	0x200003d8
 8003b38:	053e2d63 	.word	0x053e2d63
 8003b3c:	50000100 	.word	0x50000100
 8003b40:	50000400 	.word	0x50000400
 8003b44:	50000600 	.word	0x50000600
 8003b48:	50000700 	.word	0x50000700
 8003b4c:	fff04007 	.word	0xfff04007
 8003b50:	50000300 	.word	0x50000300

08003b54 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b58:	4603      	mov	r3, r0
 8003b5a:	b082      	sub	sp, #8
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003b5c:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
  __IO uint32_t wait_loop_index = 0UL;
 8003b60:	2000      	movs	r0, #0
  __HAL_LOCK(hadc);
 8003b62:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003b64:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003b66:	f000 811f 	beq.w	8003da8 <HAL_ADC_ConfigChannel+0x254>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b6a:	681a      	ldr	r2, [r3, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b6c:	6894      	ldr	r4, [r2, #8]
  __HAL_LOCK(hadc);
 8003b6e:	2001      	movs	r0, #1
 8003b70:	0767      	lsls	r7, r4, #29
 8003b72:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
 8003b76:	d462      	bmi.n	8003c3e <HAL_ADC_ConfigChannel+0xea>
  MODIFY_REG(*preg,
 8003b78:	e9d1 0400 	ldrd	r0, r4, [r1]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003b7c:	09a6      	lsrs	r6, r4, #6
 8003b7e:	f006 060c 	and.w	r6, r6, #12
 8003b82:	f102 0530 	add.w	r5, r2, #48	; 0x30
  MODIFY_REG(*preg,
 8003b86:	f004 041f 	and.w	r4, r4, #31
 8003b8a:	5977      	ldr	r7, [r6, r5]
 8003b8c:	f04f 0c1f 	mov.w	ip, #31
 8003b90:	fa0c fc04 	lsl.w	ip, ip, r4
 8003b94:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003b98:	ea27 070c 	bic.w	r7, r7, ip
 8003b9c:	40a0      	lsls	r0, r4
 8003b9e:	4338      	orrs	r0, r7
 8003ba0:	5170      	str	r0, [r6, r5]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ba2:	6890      	ldr	r0, [r2, #8]
 8003ba4:	0746      	lsls	r6, r0, #29
 8003ba6:	d554      	bpl.n	8003c52 <HAL_ADC_ConfigChannel+0xfe>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003ba8:	6890      	ldr	r0, [r2, #8]
 8003baa:	680c      	ldr	r4, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003bac:	6890      	ldr	r0, [r2, #8]
 8003bae:	07c5      	lsls	r5, r0, #31
 8003bb0:	d413      	bmi.n	8003bda <HAL_ADC_ConfigChannel+0x86>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003bb2:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003bb4:	48aa      	ldr	r0, [pc, #680]	; (8003e60 <HAL_ADC_ConfigChannel+0x30c>)
 8003bb6:	f8d2 50b0 	ldr.w	r5, [r2, #176]	; 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003bba:	f8df c2d4 	ldr.w	ip, [pc, #724]	; 8003e90 <HAL_ADC_ConfigChannel+0x33c>
 8003bbe:	f006 0718 	and.w	r7, r6, #24
 8003bc2:	40f8      	lsrs	r0, r7
 8003bc4:	f3c4 0712 	ubfx	r7, r4, #0, #19
 8003bc8:	4020      	ands	r0, r4
 8003bca:	ea25 0507 	bic.w	r5, r5, r7
 8003bce:	4328      	orrs	r0, r5
 8003bd0:	4566      	cmp	r6, ip
 8003bd2:	f8c2 00b0 	str.w	r0, [r2, #176]	; 0xb0
 8003bd6:	f000 8096 	beq.w	8003d06 <HAL_ADC_ConfigChannel+0x1b2>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003bda:	49a2      	ldr	r1, [pc, #648]	; (8003e64 <HAL_ADC_ConfigChannel+0x310>)
 8003bdc:	420c      	tst	r4, r1
 8003bde:	d02c      	beq.n	8003c3a <HAL_ADC_ConfigChannel+0xe6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003be0:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003be4:	f000 80de 	beq.w	8003da4 <HAL_ADC_ConfigChannel+0x250>
 8003be8:	4d9f      	ldr	r5, [pc, #636]	; (8003e68 <HAL_ADC_ConfigChannel+0x314>)
 8003bea:	49a0      	ldr	r1, [pc, #640]	; (8003e6c <HAL_ADC_ConfigChannel+0x318>)
 8003bec:	48a0      	ldr	r0, [pc, #640]	; (8003e70 <HAL_ADC_ConfigChannel+0x31c>)
 8003bee:	42aa      	cmp	r2, r5
 8003bf0:	bf08      	it	eq
 8003bf2:	4601      	moveq	r1, r0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003bf4:	4d9f      	ldr	r5, [pc, #636]	; (8003e74 <HAL_ADC_ConfigChannel+0x320>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003bf6:	6888      	ldr	r0, [r1, #8]
 8003bf8:	42ac      	cmp	r4, r5
 8003bfa:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
 8003bfe:	f000 80d7 	beq.w	8003db0 <HAL_ADC_ConfigChannel+0x25c>
 8003c02:	4d9d      	ldr	r5, [pc, #628]	; (8003e78 <HAL_ADC_ConfigChannel+0x324>)
 8003c04:	42ac      	cmp	r4, r5
 8003c06:	f000 80d3 	beq.w	8003db0 <HAL_ADC_ConfigChannel+0x25c>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c0a:	4d9c      	ldr	r5, [pc, #624]	; (8003e7c <HAL_ADC_ConfigChannel+0x328>)
 8003c0c:	42ac      	cmp	r4, r5
 8003c0e:	f040 80f8 	bne.w	8003e02 <HAL_ADC_ConfigChannel+0x2ae>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c12:	01c4      	lsls	r4, r0, #7
 8003c14:	d411      	bmi.n	8003c3a <HAL_ADC_ConfigChannel+0xe6>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c16:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003c1a:	f000 81eb 	beq.w	8003ff4 <HAL_ADC_ConfigChannel+0x4a0>
 8003c1e:	4d92      	ldr	r5, [pc, #584]	; (8003e68 <HAL_ADC_ConfigChannel+0x314>)
 8003c20:	4892      	ldr	r0, [pc, #584]	; (8003e6c <HAL_ADC_ConfigChannel+0x318>)
 8003c22:	4c93      	ldr	r4, [pc, #588]	; (8003e70 <HAL_ADC_ConfigChannel+0x31c>)
 8003c24:	42aa      	cmp	r2, r5
 8003c26:	bf14      	ite	ne
 8003c28:	4602      	movne	r2, r0
 8003c2a:	4622      	moveq	r2, r4
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003c2c:	6890      	ldr	r0, [r2, #8]
 8003c2e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8003c32:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
 8003c36:	4301      	orrs	r1, r0
 8003c38:	6091      	str	r1, [r2, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c3a:	2000      	movs	r0, #0
 8003c3c:	e003      	b.n	8003c46 <HAL_ADC_ConfigChannel+0xf2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c3e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c40:	f042 0220 	orr.w	r2, r2, #32
 8003c44:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c46:	2200      	movs	r2, #0
 8003c48:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003c4c:	b002      	add	sp, #8
 8003c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003c52:	6895      	ldr	r5, [r2, #8]
 8003c54:	680c      	ldr	r4, [r1, #0]
 8003c56:	f015 0508 	ands.w	r5, r5, #8
 8003c5a:	d1a7      	bne.n	8003bac <HAL_ADC_ConfigChannel+0x58>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c5c:	688e      	ldr	r6, [r1, #8]
 8003c5e:	f3c4 5e04 	ubfx	lr, r4, #20, #5
 8003c62:	2007      	movs	r0, #7
 8003c64:	0de4      	lsrs	r4, r4, #23
 8003c66:	fa00 f00e 	lsl.w	r0, r0, lr
 8003c6a:	f1b6 4f00 	cmp.w	r6, #2147483648	; 0x80000000
 8003c6e:	f004 0404 	and.w	r4, r4, #4
 8003c72:	ea6f 0000 	mvn.w	r0, r0
 8003c76:	f102 0c14 	add.w	ip, r2, #20
 8003c7a:	f000 8157 	beq.w	8003f2c <HAL_ADC_ConfigChannel+0x3d8>
  MODIFY_REG(*preg,
 8003c7e:	f854 700c 	ldr.w	r7, [r4, ip]
 8003c82:	fa06 f60e 	lsl.w	r6, r6, lr
 8003c86:	4038      	ands	r0, r7
 8003c88:	4306      	orrs	r6, r0
 8003c8a:	f844 600c 	str.w	r6, [r4, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003c8e:	6950      	ldr	r0, [r2, #20]
 8003c90:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003c94:	6150      	str	r0, [r2, #20]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c96:	f8d1 c010 	ldr.w	ip, [r1, #16]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003c9a:	68d7      	ldr	r7, [r2, #12]
 8003c9c:	680c      	ldr	r4, [r1, #0]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003c9e:	f1bc 0f04 	cmp.w	ip, #4
 8003ca2:	f102 0060 	add.w	r0, r2, #96	; 0x60
 8003ca6:	f000 80f7 	beq.w	8003e98 <HAL_ADC_ConfigChannel+0x344>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003caa:	694e      	ldr	r6, [r1, #20]
  MODIFY_REG(*preg,
 8003cac:	f850 802c 	ldr.w	r8, [r0, ip, lsl #2]
 8003cb0:	f8df e1e0 	ldr.w	lr, [pc, #480]	; 8003e94 <HAL_ADC_ConfigChannel+0x340>
 8003cb4:	f3c7 07c1 	ubfx	r7, r7, #3, #2
 8003cb8:	007f      	lsls	r7, r7, #1
 8003cba:	f004 44f8 	and.w	r4, r4, #2080374784	; 0x7c000000
 8003cbe:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8003cc2:	40be      	lsls	r6, r7
 8003cc4:	4326      	orrs	r6, r4
 8003cc6:	ea08 0e0e 	and.w	lr, r8, lr
 8003cca:	ea46 060e 	orr.w	r6, r6, lr
 8003cce:	f840 602c 	str.w	r6, [r0, ip, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003cd2:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8003cd4:	698e      	ldr	r6, [r1, #24]
 8003cd6:	f850 4027 	ldr.w	r4, [r0, r7, lsl #2]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003cda:	f891 c01c 	ldrb.w	ip, [r1, #28]
 8003cde:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8003ce2:	4334      	orrs	r4, r6
 8003ce4:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
 8003ce8:	690e      	ldr	r6, [r1, #16]
  MODIFY_REG(*preg,
 8003cea:	f850 4026 	ldr.w	r4, [r0, r6, lsl #2]
 8003cee:	f1bc 0f01 	cmp.w	ip, #1
 8003cf2:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
 8003cf6:	bf08      	it	eq
 8003cf8:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8003cfc:	4325      	orrs	r5, r4
 8003cfe:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
 8003d02:	680c      	ldr	r4, [r1, #0]
 8003d04:	e752      	b.n	8003bac <HAL_ADC_ConfigChannel+0x58>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d06:	2f00      	cmp	r7, #0
 8003d08:	f000 8097 	beq.w	8003e3a <HAL_ADC_ConfigChannel+0x2e6>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d0c:	fa94 f0a4 	rbit	r0, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d10:	2800      	cmp	r0, #0
 8003d12:	f000 813d 	beq.w	8003f90 <HAL_ADC_ConfigChannel+0x43c>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003d16:	fab0 f080 	clz	r0, r0
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d1a:	3001      	adds	r0, #1
 8003d1c:	f000 001f 	and.w	r0, r0, #31
 8003d20:	2809      	cmp	r0, #9
 8003d22:	f240 8135 	bls.w	8003f90 <HAL_ADC_ConfigChannel+0x43c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d26:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8003d2a:	2800      	cmp	r0, #0
 8003d2c:	f000 8150 	beq.w	8003fd0 <HAL_ADC_ConfigChannel+0x47c>
  return __builtin_clz(value);
 8003d30:	fab0 f080 	clz	r0, r0
 8003d34:	3001      	adds	r0, #1
 8003d36:	0680      	lsls	r0, r0, #26
 8003d38:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d3c:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8003d40:	2d00      	cmp	r5, #0
 8003d42:	f000 8152 	beq.w	8003fea <HAL_ADC_ConfigChannel+0x496>
  return __builtin_clz(value);
 8003d46:	fab5 f585 	clz	r5, r5
 8003d4a:	3501      	adds	r5, #1
 8003d4c:	f005 051f 	and.w	r5, r5, #31
 8003d50:	2601      	movs	r6, #1
 8003d52:	fa06 f505 	lsl.w	r5, r6, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003d56:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d58:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8003d5c:	2c00      	cmp	r4, #0
 8003d5e:	f000 8142 	beq.w	8003fe6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8003d62:	fab4 f484 	clz	r4, r4
 8003d66:	3401      	adds	r4, #1
 8003d68:	f004 041f 	and.w	r4, r4, #31
 8003d6c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003d70:	3c1e      	subs	r4, #30
 8003d72:	0524      	lsls	r4, r4, #20
 8003d74:	f044 7400 	orr.w	r4, r4, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d78:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003d7a:	0dc7      	lsrs	r7, r0, #23
 8003d7c:	f007 0704 	and.w	r7, r7, #4
 8003d80:	f102 0514 	add.w	r5, r2, #20
  MODIFY_REG(*preg,
 8003d84:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8003d88:	597c      	ldr	r4, [r7, r5]
 8003d8a:	688e      	ldr	r6, [r1, #8]
 8003d8c:	f04f 0c07 	mov.w	ip, #7
 8003d90:	fa0c fc00 	lsl.w	ip, ip, r0
 8003d94:	ea24 040c 	bic.w	r4, r4, ip
 8003d98:	fa06 f000 	lsl.w	r0, r6, r0
 8003d9c:	4320      	orrs	r0, r4
 8003d9e:	5178      	str	r0, [r7, r5]
 8003da0:	680c      	ldr	r4, [r1, #0]
 8003da2:	e71a      	b.n	8003bda <HAL_ADC_ConfigChannel+0x86>
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003da4:	4932      	ldr	r1, [pc, #200]	; (8003e70 <HAL_ADC_ConfigChannel+0x31c>)
 8003da6:	e725      	b.n	8003bf4 <HAL_ADC_ConfigChannel+0xa0>
  __HAL_LOCK(hadc);
 8003da8:	2002      	movs	r0, #2
}
 8003daa:	b002      	add	sp, #8
 8003dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003db0:	0200      	lsls	r0, r0, #8
 8003db2:	f53f af42 	bmi.w	8003c3a <HAL_ADC_ConfigChannel+0xe6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003db6:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003dba:	d04f      	beq.n	8003e5c <HAL_ADC_ConfigChannel+0x308>
 8003dbc:	4830      	ldr	r0, [pc, #192]	; (8003e80 <HAL_ADC_ConfigChannel+0x32c>)
 8003dbe:	4282      	cmp	r2, r0
 8003dc0:	f47f af3b 	bne.w	8003c3a <HAL_ADC_ConfigChannel+0xe6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dc4:	4c29      	ldr	r4, [pc, #164]	; (8003e6c <HAL_ADC_ConfigChannel+0x318>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003dc6:	4a2f      	ldr	r2, [pc, #188]	; (8003e84 <HAL_ADC_ConfigChannel+0x330>)
 8003dc8:	4d2f      	ldr	r5, [pc, #188]	; (8003e88 <HAL_ADC_ConfigChannel+0x334>)
 8003dca:	6812      	ldr	r2, [r2, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003dcc:	68a0      	ldr	r0, [r4, #8]
 8003dce:	0992      	lsrs	r2, r2, #6
 8003dd0:	fba5 5202 	umull	r5, r2, r5, r2
 8003dd4:	0992      	lsrs	r2, r2, #6
 8003dd6:	3201      	adds	r2, #1
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003dd8:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8003ddc:	f020 70e0 	bic.w	r0, r0, #29360128	; 0x1c00000
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003de0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003de4:	0092      	lsls	r2, r2, #2
 8003de6:	4301      	orrs	r1, r0
 8003de8:	60a1      	str	r1, [r4, #8]
 8003dea:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003dec:	9a01      	ldr	r2, [sp, #4]
 8003dee:	2a00      	cmp	r2, #0
 8003df0:	f43f af23 	beq.w	8003c3a <HAL_ADC_ConfigChannel+0xe6>
            wait_loop_index--;
 8003df4:	9a01      	ldr	r2, [sp, #4]
 8003df6:	3a01      	subs	r2, #1
 8003df8:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003dfa:	9a01      	ldr	r2, [sp, #4]
 8003dfc:	2a00      	cmp	r2, #0
 8003dfe:	d1f9      	bne.n	8003df4 <HAL_ADC_ConfigChannel+0x2a0>
 8003e00:	e71b      	b.n	8003c3a <HAL_ADC_ConfigChannel+0xe6>
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e02:	4d22      	ldr	r5, [pc, #136]	; (8003e8c <HAL_ADC_ConfigChannel+0x338>)
 8003e04:	42ac      	cmp	r4, r5
 8003e06:	f47f af18 	bne.w	8003c3a <HAL_ADC_ConfigChannel+0xe6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e0a:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
 8003e0e:	f47f af14 	bne.w	8003c3a <HAL_ADC_ConfigChannel+0xe6>
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e12:	4c15      	ldr	r4, [pc, #84]	; (8003e68 <HAL_ADC_ConfigChannel+0x314>)
 8003e14:	42a2      	cmp	r2, r4
 8003e16:	f43f af10 	beq.w	8003c3a <HAL_ADC_ConfigChannel+0xe6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e1a:	4d15      	ldr	r5, [pc, #84]	; (8003e70 <HAL_ADC_ConfigChannel+0x31c>)
 8003e1c:	f504 64c0 	add.w	r4, r4, #1536	; 0x600
 8003e20:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8003e24:	bf14      	ite	ne
 8003e26:	4622      	movne	r2, r4
 8003e28:	462a      	moveq	r2, r5
 8003e2a:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
 8003e2e:	6894      	ldr	r4, [r2, #8]
 8003e30:	f024 74e0 	bic.w	r4, r4, #29360128	; 0x1c00000
 8003e34:	4321      	orrs	r1, r4
 8003e36:	6091      	str	r1, [r2, #8]
 8003e38:	e705      	b.n	8003c46 <HAL_ADC_ConfigChannel+0xf2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e3a:	0ea4      	lsrs	r4, r4, #26
 8003e3c:	3401      	adds	r4, #1
 8003e3e:	f004 051f 	and.w	r5, r4, #31
 8003e42:	06a0      	lsls	r0, r4, #26
 8003e44:	2401      	movs	r4, #1
 8003e46:	40ac      	lsls	r4, r5
 8003e48:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e4c:	2d09      	cmp	r5, #9
 8003e4e:	ea40 0004 	orr.w	r0, r0, r4
 8003e52:	eb05 0445 	add.w	r4, r5, r5, lsl #1
 8003e56:	d88b      	bhi.n	8003d70 <HAL_ADC_ConfigChannel+0x21c>
 8003e58:	0524      	lsls	r4, r4, #20
 8003e5a:	e78d      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x224>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e5c:	4c04      	ldr	r4, [pc, #16]	; (8003e70 <HAL_ADC_ConfigChannel+0x31c>)
 8003e5e:	e7b2      	b.n	8003dc6 <HAL_ADC_ConfigChannel+0x272>
 8003e60:	0007ffff 	.word	0x0007ffff
 8003e64:	80080000 	.word	0x80080000
 8003e68:	50000100 	.word	0x50000100
 8003e6c:	50000700 	.word	0x50000700
 8003e70:	50000300 	.word	0x50000300
 8003e74:	c3210000 	.word	0xc3210000
 8003e78:	90c00010 	.word	0x90c00010
 8003e7c:	c7520000 	.word	0xc7520000
 8003e80:	50000600 	.word	0x50000600
 8003e84:	200003d8 	.word	0x200003d8
 8003e88:	053e2d63 	.word	0x053e2d63
 8003e8c:	cb840000 	.word	0xcb840000
 8003e90:	407f0000 	.word	0x407f0000
 8003e94:	03fff000 	.word	0x03fff000
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e98:	6e15      	ldr	r5, [r2, #96]	; 0x60
 8003e9a:	6e15      	ldr	r5, [r2, #96]	; 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e9c:	f3c4 0712 	ubfx	r7, r4, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003ea0:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ea4:	2f00      	cmp	r7, #0
 8003ea6:	d14b      	bne.n	8003f40 <HAL_ADC_ConfigChannel+0x3ec>
 8003ea8:	f3c4 6684 	ubfx	r6, r4, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003eac:	42b5      	cmp	r5, r6
 8003eae:	d106      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x36a>
  MODIFY_REG(*preg,
 8003eb0:	6e14      	ldr	r4, [r2, #96]	; 0x60
 8003eb2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003eb6:	6614      	str	r4, [r2, #96]	; 0x60
 8003eb8:	680c      	ldr	r4, [r1, #0]
 8003eba:	f3c4 0712 	ubfx	r7, r4, #0, #19
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ebe:	6845      	ldr	r5, [r0, #4]
 8003ec0:	6846      	ldr	r6, [r0, #4]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ec2:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ec6:	2f00      	cmp	r7, #0
 8003ec8:	d141      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x3fa>
 8003eca:	f3c4 6584 	ubfx	r5, r4, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003ece:	42ae      	cmp	r6, r5
 8003ed0:	f040 8092 	bne.w	8003ff8 <HAL_ADC_ConfigChannel+0x4a4>
  MODIFY_REG(*preg,
 8003ed4:	6844      	ldr	r4, [r0, #4]
 8003ed6:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003eda:	6044      	str	r4, [r0, #4]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003edc:	680c      	ldr	r4, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003ede:	6885      	ldr	r5, [r0, #8]
 8003ee0:	6886      	ldr	r6, [r0, #8]
 8003ee2:	f3c4 0512 	ubfx	r5, r4, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ee6:	f3c6 6684 	ubfx	r6, r6, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003eea:	2d00      	cmp	r5, #0
 8003eec:	d13a      	bne.n	8003f64 <HAL_ADC_ConfigChannel+0x410>
 8003eee:	f3c4 6584 	ubfx	r5, r4, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ef2:	42ae      	cmp	r6, r5
 8003ef4:	f100 070c 	add.w	r7, r0, #12
 8003ef8:	f040 8083 	bne.w	8004002 <HAL_ADC_ConfigChannel+0x4ae>
  MODIFY_REG(*preg,
 8003efc:	6884      	ldr	r4, [r0, #8]
 8003efe:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003f02:	6084      	str	r4, [r0, #8]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f04:	680c      	ldr	r4, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f06:	6838      	ldr	r0, [r7, #0]
 8003f08:	6838      	ldr	r0, [r7, #0]
 8003f0a:	f3c4 0512 	ubfx	r5, r4, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f0e:	f3c0 6084 	ubfx	r0, r0, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f12:	2d00      	cmp	r5, #0
 8003f14:	d134      	bne.n	8003f80 <HAL_ADC_ConfigChannel+0x42c>
 8003f16:	f3c4 6584 	ubfx	r5, r4, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f1a:	4285      	cmp	r5, r0
 8003f1c:	f47f ae46 	bne.w	8003bac <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(*preg,
 8003f20:	6838      	ldr	r0, [r7, #0]
 8003f22:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8003f26:	6038      	str	r0, [r7, #0]
 8003f28:	680c      	ldr	r4, [r1, #0]
 8003f2a:	e63f      	b.n	8003bac <HAL_ADC_ConfigChannel+0x58>
  MODIFY_REG(*preg,
 8003f2c:	f854 600c 	ldr.w	r6, [r4, ip]
 8003f30:	4030      	ands	r0, r6
 8003f32:	f844 000c 	str.w	r0, [r4, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003f36:	6950      	ldr	r0, [r2, #20]
 8003f38:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8003f3c:	6150      	str	r0, [r2, #20]
 8003f3e:	e6aa      	b.n	8003c96 <HAL_ADC_ConfigChannel+0x142>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f40:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8003f44:	2e00      	cmp	r6, #0
 8003f46:	d0ba      	beq.n	8003ebe <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003f48:	fab6 f686 	clz	r6, r6
 8003f4c:	e7ae      	b.n	8003eac <HAL_ADC_ConfigChannel+0x358>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f4e:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8003f52:	b11d      	cbz	r5, 8003f5c <HAL_ADC_ConfigChannel+0x408>
  return __builtin_clz(value);
 8003f54:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f58:	42ae      	cmp	r6, r5
 8003f5a:	d0bb      	beq.n	8003ed4 <HAL_ADC_ConfigChannel+0x380>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f5c:	6885      	ldr	r5, [r0, #8]
 8003f5e:	6886      	ldr	r6, [r0, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f60:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f64:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8003f68:	2d00      	cmp	r5, #0
 8003f6a:	d040      	beq.n	8003fee <HAL_ADC_ConfigChannel+0x49a>
  return __builtin_clz(value);
 8003f6c:	fab5 f585 	clz	r5, r5
 8003f70:	42ae      	cmp	r6, r5
 8003f72:	f100 070c 	add.w	r7, r0, #12
 8003f76:	d0c1      	beq.n	8003efc <HAL_ADC_ConfigChannel+0x3a8>
 8003f78:	6838      	ldr	r0, [r7, #0]
 8003f7a:	6838      	ldr	r0, [r7, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f7c:	f3c0 6084 	ubfx	r0, r0, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f80:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8003f84:	2d00      	cmp	r5, #0
 8003f86:	f43f ae11 	beq.w	8003bac <HAL_ADC_ConfigChannel+0x58>
  return __builtin_clz(value);
 8003f8a:	fab5 f585 	clz	r5, r5
 8003f8e:	e7c4      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x3c6>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f90:	fa94 f0a4 	rbit	r0, r4
  if (value == 0U)
 8003f94:	b320      	cbz	r0, 8003fe0 <HAL_ADC_ConfigChannel+0x48c>
  return __builtin_clz(value);
 8003f96:	fab0 f080 	clz	r0, r0
 8003f9a:	3001      	adds	r0, #1
 8003f9c:	0680      	lsls	r0, r0, #26
 8003f9e:	f000 40f8 	and.w	r0, r0, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fa2:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8003fa6:	b1cd      	cbz	r5, 8003fdc <HAL_ADC_ConfigChannel+0x488>
  return __builtin_clz(value);
 8003fa8:	fab5 f585 	clz	r5, r5
 8003fac:	3501      	adds	r5, #1
 8003fae:	f005 051f 	and.w	r5, r5, #31
 8003fb2:	2601      	movs	r6, #1
 8003fb4:	fa06 f505 	lsl.w	r5, r6, r5
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003fb8:	4328      	orrs	r0, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fba:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8003fbe:	b154      	cbz	r4, 8003fd6 <HAL_ADC_ConfigChannel+0x482>
  return __builtin_clz(value);
 8003fc0:	fab4 f484 	clz	r4, r4
 8003fc4:	3401      	adds	r4, #1
 8003fc6:	f004 041f 	and.w	r4, r4, #31
 8003fca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8003fce:	e743      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x304>
  if (value == 0U)
 8003fd0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003fd4:	e6b2      	b.n	8003d3c <HAL_ADC_ConfigChannel+0x1e8>
 8003fd6:	f44f 1440 	mov.w	r4, #3145728	; 0x300000
 8003fda:	e6cd      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x224>
 8003fdc:	2502      	movs	r5, #2
 8003fde:	e7eb      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x464>
 8003fe0:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8003fe4:	e7dd      	b.n	8003fa2 <HAL_ADC_ConfigChannel+0x44e>
 8003fe6:	4c09      	ldr	r4, [pc, #36]	; (800400c <HAL_ADC_ConfigChannel+0x4b8>)
 8003fe8:	e6c6      	b.n	8003d78 <HAL_ADC_ConfigChannel+0x224>
 8003fea:	2502      	movs	r5, #2
 8003fec:	e6b3      	b.n	8003d56 <HAL_ADC_ConfigChannel+0x202>
 8003fee:	f100 070c 	add.w	r7, r0, #12
 8003ff2:	e7c1      	b.n	8003f78 <HAL_ADC_ConfigChannel+0x424>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003ff4:	4a06      	ldr	r2, [pc, #24]	; (8004010 <HAL_ADC_ConfigChannel+0x4bc>)
 8003ff6:	e619      	b.n	8003c2c <HAL_ADC_ConfigChannel+0xd8>
 8003ff8:	6886      	ldr	r6, [r0, #8]
 8003ffa:	6886      	ldr	r6, [r0, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ffc:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004000:	e777      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x39e>
 8004002:	68c6      	ldr	r6, [r0, #12]
 8004004:	68c0      	ldr	r0, [r0, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004006:	f3c0 6084 	ubfx	r0, r0, #26, #5
 800400a:	e786      	b.n	8003f1a <HAL_ADC_ConfigChannel+0x3c6>
 800400c:	fe500000 	.word	0xfe500000
 8004010:	50000300 	.word	0x50000300

08004014 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004018:	f890 3058 	ldrb.w	r3, [r0, #88]	; 0x58
{
 800401c:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0;
 800401e:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8004020:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8004022:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8004024:	f000 8176 	beq.w	8004314 <HAL_ADCEx_InjectedConfigChannel+0x300>
  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004028:	6943      	ldr	r3, [r0, #20]
  __HAL_LOCK(hadc);
 800402a:	2201      	movs	r2, #1
 800402c:	4604      	mov	r4, r0
 800402e:	f880 2058 	strb.w	r2, [r0, #88]	; 0x58
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 8085 	beq.w	8004142 <HAL_ADCEx_InjectedConfigChannel+0x12e>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8004038:	6a0b      	ldr	r3, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800403a:	4293      	cmp	r3, r2
 800403c:	f000 8081 	beq.w	8004142 <HAL_ADCEx_InjectedConfigChannel+0x12e>
    /* 1. Start new context and set parameters related to all injected        */
    /*    channels: injected sequence length and trigger.                     */

    /* if hadc->InjectionConfig.ChannelCount is equal to 0, this is the first */
    /*   call of the context under setting                                    */
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004040:	6e80      	ldr	r0, [r0, #104]	; 0x68
 8004042:	2800      	cmp	r0, #0
 8004044:	f040 813f 	bne.w	80042c6 <HAL_ADCEx_InjectedConfigChannel+0x2b2>
      /* Enable external trigger if trigger selection is different of         */
      /* software start.                                                      */
      /* Note: This configuration keeps the hardware feature of parameter     */
      /*       ExternalTrigInjecConvEdge "trigger edge none" equivalent to    */
      /*       software start.                                                */
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004048:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800404a:	3b01      	subs	r3, #1
 800404c:	2800      	cmp	r0, #0
 800404e:	f000 8260 	beq.w	8004512 <HAL_ADCEx_InjectedConfigChannel+0x4fe>
      {
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004052:	f000 007c 	and.w	r0, r0, #124	; 0x7c
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8004056:	6aca      	ldr	r2, [r1, #44]	; 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004058:	4318      	orrs	r0, r3
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800405a:	4310      	orrs	r0, r2
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 800405c:	e9d1 2500 	ldrd	r2, r5, [r1]

    /* Decrease channel count  */
    hadc->InjectionConfig.ChannelCount--;
 8004060:	66a3      	str	r3, [r4, #104]	; 0x68
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8004062:	f005 051f 	and.w	r5, r5, #31
 8004066:	f3c2 6384 	ubfx	r3, r2, #26, #5
 800406a:	40ab      	lsls	r3, r5

    /* 3. tmp_jsqr_context_queue_being_built is fully built for this HAL_ADCEx_InjectedConfigChannel()
          call, aggregate the setting to those already built during the previous
          HAL_ADCEx_InjectedConfigChannel() calls (for the same context of course)  */
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800406c:	4318      	orrs	r0, r3
 800406e:	6823      	ldr	r3, [r4, #0]
 8004070:	6660      	str	r0, [r4, #100]	; 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004072:	6898      	ldr	r0, [r3, #8]
 8004074:	0700      	lsls	r0, r0, #28
 8004076:	d410      	bmi.n	800409a <HAL_ADCEx_InjectedConfigChannel+0x86>
 8004078:	f891 0026 	ldrb.w	r0, [r1, #38]	; 0x26
  /*  - Injected discontinuous mode: can be enabled only if auto-injected     */
  /*    mode is disabled.                                                     */
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800407c:	f891 5025 	ldrb.w	r5, [r1, #37]	; 0x25
 8004080:	0540      	lsls	r0, r0, #21
 8004082:	2d00      	cmp	r5, #0
 8004084:	f040 8114 	bne.w	80042b0 <HAL_ADCEx_InjectedConfigChannel+0x29c>
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8004088:	68dd      	ldr	r5, [r3, #12]
 800408a:	f891 6024 	ldrb.w	r6, [r1, #36]	; 0x24
 800408e:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8004092:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 8004096:	4328      	orrs	r0, r5
 8004098:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800409a:	6898      	ldr	r0, [r3, #8]
 800409c:	f010 0004 	ands.w	r0, r0, #4
 80040a0:	d068      	beq.n	8004174 <HAL_ADCEx_InjectedConfigChannel+0x160>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040a2:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040a4:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80040a6:	689d      	ldr	r5, [r3, #8]
 80040a8:	07ef      	lsls	r7, r5, #31
 80040aa:	d414      	bmi.n	80040d6 <HAL_ADCEx_InjectedConfigChannel+0xc2>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80040ac:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80040ae:	4dc9      	ldr	r5, [pc, #804]	; (80043d4 <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
 80040b0:	f8d3 60b0 	ldr.w	r6, [r3, #176]	; 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040b4:	f8df e34c 	ldr.w	lr, [pc, #844]	; 8004404 <HAL_ADCEx_InjectedConfigChannel+0x3f0>
 80040b8:	f007 0c18 	and.w	ip, r7, #24
 80040bc:	fa25 f50c 	lsr.w	r5, r5, ip
 80040c0:	f3c2 0c12 	ubfx	ip, r2, #0, #19
 80040c4:	4015      	ands	r5, r2
 80040c6:	ea26 060c 	bic.w	r6, r6, ip
 80040ca:	4335      	orrs	r5, r6
 80040cc:	4577      	cmp	r7, lr
 80040ce:	f8c3 50b0 	str.w	r5, [r3, #176]	; 0xb0
 80040d2:	f000 8123 	beq.w	800431c <HAL_ADCEx_InjectedConfigChannel+0x308>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 80040d6:	49c0      	ldr	r1, [pc, #768]	; (80043d8 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
 80040d8:	420a      	tst	r2, r1
 80040da:	d02c      	beq.n	8004136 <HAL_ADCEx_InjectedConfigChannel+0x122>
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80040dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040e0:	f000 8194 	beq.w	800440c <HAL_ADCEx_InjectedConfigChannel+0x3f8>
 80040e4:	4ebd      	ldr	r6, [pc, #756]	; (80043dc <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 80040e6:	49be      	ldr	r1, [pc, #760]	; (80043e0 <HAL_ADCEx_InjectedConfigChannel+0x3cc>)
 80040e8:	4dbe      	ldr	r5, [pc, #760]	; (80043e4 <HAL_ADCEx_InjectedConfigChannel+0x3d0>)
 80040ea:	42b3      	cmp	r3, r6
 80040ec:	bf08      	it	eq
 80040ee:	4629      	moveq	r1, r5

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 80040f0:	4ebd      	ldr	r6, [pc, #756]	; (80043e8 <HAL_ADCEx_InjectedConfigChannel+0x3d4>)
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80040f2:	6889      	ldr	r1, [r1, #8]
 80040f4:	42b2      	cmp	r2, r6
 80040f6:	f001 75e0 	and.w	r5, r1, #29360128	; 0x1c00000
 80040fa:	f000 80af 	beq.w	800425c <HAL_ADCEx_InjectedConfigChannel+0x248>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80040fe:	4ebb      	ldr	r6, [pc, #748]	; (80043ec <HAL_ADCEx_InjectedConfigChannel+0x3d8>)
 8004100:	42b2      	cmp	r2, r6
 8004102:	f000 80ab 	beq.w	800425c <HAL_ADCEx_InjectedConfigChannel+0x248>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8004106:	4eba      	ldr	r6, [pc, #744]	; (80043f0 <HAL_ADCEx_InjectedConfigChannel+0x3dc>)
 8004108:	42b2      	cmp	r2, r6
 800410a:	f040 8181 	bne.w	8004410 <HAL_ADCEx_InjectedConfigChannel+0x3fc>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800410e:	01ce      	lsls	r6, r1, #7
 8004110:	d411      	bmi.n	8004136 <HAL_ADCEx_InjectedConfigChannel+0x122>
    {
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004112:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004116:	f000 826d 	beq.w	80045f4 <HAL_ADCEx_InjectedConfigChannel+0x5e0>
 800411a:	4eb0      	ldr	r6, [pc, #704]	; (80043dc <HAL_ADCEx_InjectedConfigChannel+0x3c8>)
 800411c:	4ab0      	ldr	r2, [pc, #704]	; (80043e0 <HAL_ADCEx_InjectedConfigChannel+0x3cc>)
 800411e:	49b1      	ldr	r1, [pc, #708]	; (80043e4 <HAL_ADCEx_InjectedConfigChannel+0x3d0>)
 8004120:	42b3      	cmp	r3, r6
 8004122:	bf14      	ite	ne
 8004124:	4613      	movne	r3, r2
 8004126:	460b      	moveq	r3, r1
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004128:	689a      	ldr	r2, [r3, #8]
 800412a:	f045 7580 	orr.w	r5, r5, #16777216	; 0x1000000
 800412e:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004132:	4315      	orrs	r5, r2
 8004134:	609d      	str	r5, [r3, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004136:	2300      	movs	r3, #0
 8004138:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800413c:	b003      	add	sp, #12
 800413e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004142:	e9d1 2000 	ldrd	r2, r0, [r1]
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8004146:	2809      	cmp	r0, #9
 8004148:	6823      	ldr	r3, [r4, #0]
 800414a:	d192      	bne.n	8004072 <HAL_ADCEx_InjectedConfigChannel+0x5e>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800414c:	6a88      	ldr	r0, [r1, #40]	; 0x28
 800414e:	0c55      	lsrs	r5, r2, #17
 8004150:	f405 5578 	and.w	r5, r5, #15872	; 0x3e00
 8004154:	b120      	cbz	r0, 8004160 <HAL_ADCEx_InjectedConfigChannel+0x14c>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8004156:	6ace      	ldr	r6, [r1, #44]	; 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8004158:	f000 007c 	and.w	r0, r0, #124	; 0x7c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800415c:	4330      	orrs	r0, r6
 800415e:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8004160:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004162:	4ea4      	ldr	r6, [pc, #656]	; (80043f4 <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 8004164:	4030      	ands	r0, r6
 8004166:	4328      	orrs	r0, r5
 8004168:	64d8      	str	r0, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800416a:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 800416c:	6665      	str	r5, [r4, #100]	; 0x64
 800416e:	0700      	lsls	r0, r0, #28
 8004170:	d493      	bmi.n	800409a <HAL_ADCEx_InjectedConfigChannel+0x86>
 8004172:	e781      	b.n	8004078 <HAL_ADCEx_InjectedConfigChannel+0x64>
 8004174:	689d      	ldr	r5, [r3, #8]
 8004176:	f015 0508 	ands.w	r5, r5, #8
 800417a:	d194      	bne.n	80040a6 <HAL_ADCEx_InjectedConfigChannel+0x92>
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800417c:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 800417e:	f891 0025 	ldrb.w	r0, [r1, #37]	; 0x25
 8004182:	2e00      	cmp	r6, #0
 8004184:	f040 80b9 	bne.w	80042fa <HAL_ADCEx_InjectedConfigChannel+0x2e6>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004188:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800418a:	68d8      	ldr	r0, [r3, #12]
 800418c:	bf0c      	ite	eq
 800418e:	f040 7000 	orreq.w	r0, r0, #33554432	; 0x2000000
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004192:	f020 7000 	bicne.w	r0, r0, #33554432	; 0x2000000
 8004196:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004198:	2000      	movs	r0, #0
    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 800419a:	f891 6030 	ldrb.w	r6, [r1, #48]	; 0x30
 800419e:	2e01      	cmp	r6, #1
 80041a0:	f000 81ab 	beq.w	80044fa <HAL_ADCEx_InjectedConfigChannel+0x4e6>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80041a4:	691e      	ldr	r6, [r3, #16]
 80041a6:	f026 0602 	bic.w	r6, r6, #2
 80041aa:	611e      	str	r6, [r3, #16]
 80041ac:	f3c2 5804 	ubfx	r8, r2, #20, #5
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80041b0:	688f      	ldr	r7, [r1, #8]
 80041b2:	0dd2      	lsrs	r2, r2, #23
 80041b4:	2607      	movs	r6, #7
 80041b6:	f002 0e04 	and.w	lr, r2, #4
 80041ba:	f103 0c14 	add.w	ip, r3, #20
 80041be:	fa06 f608 	lsl.w	r6, r6, r8
 80041c2:	f1b7 4f00 	cmp.w	r7, #2147483648	; 0x80000000
 80041c6:	ea6f 0606 	mvn.w	r6, r6
  MODIFY_REG(*preg,
 80041ca:	f85e 200c 	ldr.w	r2, [lr, ip]
 80041ce:	f000 818c 	beq.w	80044ea <HAL_ADCEx_InjectedConfigChannel+0x4d6>
 80041d2:	4016      	ands	r6, r2
 80041d4:	fa07 f708 	lsl.w	r7, r7, r8
 80041d8:	4337      	orrs	r7, r6
 80041da:	f84e 700c 	str.w	r7, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80041de:	695a      	ldr	r2, [r3, #20]
 80041e0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80041e4:	615a      	str	r2, [r3, #20]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80041e6:	f8d1 e010 	ldr.w	lr, [r1, #16]
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80041ea:	68df      	ldr	r7, [r3, #12]
 80041ec:	680a      	ldr	r2, [r1, #0]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 80041ee:	f1be 0f04 	cmp.w	lr, #4
 80041f2:	f103 0660 	add.w	r6, r3, #96	; 0x60
 80041f6:	f000 8126 	beq.w	8004446 <HAL_ADCEx_InjectedConfigChannel+0x432>
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 80041fa:	f3c7 0cc1 	ubfx	ip, r7, #3, #2
 80041fe:	694f      	ldr	r7, [r1, #20]
  MODIFY_REG(*preg,
 8004200:	f856 902e 	ldr.w	r9, [r6, lr, lsl #2]
 8004204:	f8df 8200 	ldr.w	r8, [pc, #512]	; 8004408 <HAL_ADCEx_InjectedConfigChannel+0x3f4>
 8004208:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800420c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8004210:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004214:	fa07 f70c 	lsl.w	r7, r7, ip
 8004218:	4317      	orrs	r7, r2
 800421a:	ea09 0808 	and.w	r8, r9, r8
 800421e:	ea47 0708 	orr.w	r7, r7, r8
 8004222:	f846 702e 	str.w	r7, [r6, lr, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004226:	f8d1 c010 	ldr.w	ip, [r1, #16]
  MODIFY_REG(*preg,
 800422a:	698f      	ldr	r7, [r1, #24]
 800422c:	f856 202c 	ldr.w	r2, [r6, ip, lsl #2]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004230:	f891 e01c 	ldrb.w	lr, [r1, #28]
 8004234:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004238:	433a      	orrs	r2, r7
 800423a:	f846 202c 	str.w	r2, [r6, ip, lsl #2]
 800423e:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004240:	f856 2027 	ldr.w	r2, [r6, r7, lsl #2]
 8004244:	f1be 0f01 	cmp.w	lr, #1
 8004248:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 800424c:	bf08      	it	eq
 800424e:	f04f 7500 	moveq.w	r5, #33554432	; 0x2000000
 8004252:	4315      	orrs	r5, r2
 8004254:	f846 5027 	str.w	r5, [r6, r7, lsl #2]
 8004258:	680a      	ldr	r2, [r1, #0]
 800425a:	e724      	b.n	80040a6 <HAL_ADCEx_InjectedConfigChannel+0x92>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800425c:	020a      	lsls	r2, r1, #8
 800425e:	f53f af6a 	bmi.w	8004136 <HAL_ADCEx_InjectedConfigChannel+0x122>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004262:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004266:	f000 81b1 	beq.w	80045cc <HAL_ADCEx_InjectedConfigChannel+0x5b8>
 800426a:	4a63      	ldr	r2, [pc, #396]	; (80043f8 <HAL_ADCEx_InjectedConfigChannel+0x3e4>)
 800426c:	4293      	cmp	r3, r2
 800426e:	f47f af62 	bne.w	8004136 <HAL_ADCEx_InjectedConfigChannel+0x122>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004272:	495b      	ldr	r1, [pc, #364]	; (80043e0 <HAL_ADCEx_InjectedConfigChannel+0x3cc>)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004274:	4b61      	ldr	r3, [pc, #388]	; (80043fc <HAL_ADCEx_InjectedConfigChannel+0x3e8>)
 8004276:	4e62      	ldr	r6, [pc, #392]	; (8004400 <HAL_ADCEx_InjectedConfigChannel+0x3ec>)
 8004278:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800427a:	688a      	ldr	r2, [r1, #8]
 800427c:	099b      	lsrs	r3, r3, #6
 800427e:	fba6 6303 	umull	r6, r3, r6, r3
 8004282:	099b      	lsrs	r3, r3, #6
 8004284:	eb03 0343 	add.w	r3, r3, r3, lsl #1
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004288:	f445 0500 	orr.w	r5, r5, #8388608	; 0x800000
 800428c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	3318      	adds	r3, #24
 8004294:	4315      	orrs	r5, r2
 8004296:	608d      	str	r5, [r1, #8]
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8004298:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 800429a:	9b01      	ldr	r3, [sp, #4]
 800429c:	2b00      	cmp	r3, #0
 800429e:	f43f af4a 	beq.w	8004136 <HAL_ADCEx_InjectedConfigChannel+0x122>
          wait_loop_index--;
 80042a2:	9b01      	ldr	r3, [sp, #4]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80042a8:	9b01      	ldr	r3, [sp, #4]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1f9      	bne.n	80042a2 <HAL_ADCEx_InjectedConfigChannel+0x28e>
 80042ae:	e742      	b.n	8004136 <HAL_ADCEx_InjectedConfigChannel+0x122>
      MODIFY_REG(hadc->Instance->CFGR,
 80042b0:	68dd      	ldr	r5, [r3, #12]
 80042b2:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 80042b6:	4328      	orrs	r0, r5
 80042b8:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80042ba:	6898      	ldr	r0, [r3, #8]
 80042bc:	f010 0004 	ands.w	r0, r0, #4
 80042c0:	f47f aeef 	bne.w	80040a2 <HAL_ADCEx_InjectedConfigChannel+0x8e>
 80042c4:	e756      	b.n	8004174 <HAL_ADCEx_InjectedConfigChannel+0x160>
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80042c6:	e9d1 2600 	ldrd	r2, r6, [r1]
 80042ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042cc:	f3c2 6584 	ubfx	r5, r2, #26, #5
 80042d0:	f006 061f 	and.w	r6, r6, #31
 80042d4:	40b5      	lsls	r5, r6
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80042d6:	431d      	orrs	r5, r3
 80042d8:	3801      	subs	r0, #1
 80042da:	e9c4 5019 	strd	r5, r0, [r4, #100]	; 0x64
 80042de:	6823      	ldr	r3, [r4, #0]
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80042e0:	2800      	cmp	r0, #0
 80042e2:	f47f aec6 	bne.w	8004072 <HAL_ADCEx_InjectedConfigChannel+0x5e>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80042e6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80042e8:	4e42      	ldr	r6, [pc, #264]	; (80043f4 <HAL_ADCEx_InjectedConfigChannel+0x3e0>)
 80042ea:	4030      	ands	r0, r6
 80042ec:	4305      	orrs	r5, r0
 80042ee:	64dd      	str	r5, [r3, #76]	; 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042f0:	6898      	ldr	r0, [r3, #8]
 80042f2:	0700      	lsls	r0, r0, #28
 80042f4:	f53f aed1 	bmi.w	800409a <HAL_ADCEx_InjectedConfigChannel+0x86>
 80042f8:	e6be      	b.n	8004078 <HAL_ADCEx_InjectedConfigChannel+0x64>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 80042fa:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80042fc:	2e00      	cmp	r6, #0
 80042fe:	f43f af43 	beq.w	8004188 <HAL_ADCEx_InjectedConfigChannel+0x174>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004302:	2801      	cmp	r0, #1
 8004304:	f000 813a 	beq.w	800457c <HAL_ADCEx_InjectedConfigChannel+0x568>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004308:	68d8      	ldr	r0, [r3, #12]
 800430a:	f020 7000 	bic.w	r0, r0, #33554432	; 0x2000000
 800430e:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004310:	4628      	mov	r0, r5
 8004312:	e742      	b.n	800419a <HAL_ADCEx_InjectedConfigChannel+0x186>
  __HAL_LOCK(hadc);
 8004314:	2002      	movs	r0, #2
}
 8004316:	b003      	add	sp, #12
 8004318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800431c:	f1bc 0f00 	cmp.w	ip, #0
 8004320:	d12b      	bne.n	800437a <HAL_ADCEx_InjectedConfigChannel+0x366>
 8004322:	0e92      	lsrs	r2, r2, #26
 8004324:	3201      	adds	r2, #1
 8004326:	f002 061f 	and.w	r6, r2, #31
 800432a:	2501      	movs	r5, #1
 800432c:	0692      	lsls	r2, r2, #26
 800432e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8004332:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004334:	2e09      	cmp	r6, #9
 8004336:	ea45 0502 	orr.w	r5, r5, r2
 800433a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 800433e:	d946      	bls.n	80043ce <HAL_ADCEx_InjectedConfigChannel+0x3ba>
 8004340:	3a1e      	subs	r2, #30
 8004342:	0512      	lsls	r2, r2, #20
 8004344:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8004348:	432a      	orrs	r2, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800434a:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 800434e:	f00c 0c04 	and.w	ip, ip, #4
 8004352:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8004356:	f3c2 5204 	ubfx	r2, r2, #20, #5
 800435a:	f85c 5007 	ldr.w	r5, [ip, r7]
 800435e:	688e      	ldr	r6, [r1, #8]
 8004360:	f04f 0e07 	mov.w	lr, #7
 8004364:	fa0e fe02 	lsl.w	lr, lr, r2
 8004368:	ea25 050e 	bic.w	r5, r5, lr
 800436c:	fa06 f202 	lsl.w	r2, r6, r2
 8004370:	432a      	orrs	r2, r5
 8004372:	f84c 2007 	str.w	r2, [ip, r7]
 8004376:	680a      	ldr	r2, [r1, #0]
 8004378:	e6ad      	b.n	80040d6 <HAL_ADCEx_InjectedConfigChannel+0xc2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437a:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800437e:	2d00      	cmp	r5, #0
 8004380:	f040 80c9 	bne.w	8004516 <HAL_ADCEx_InjectedConfigChannel+0x502>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004384:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 8004388:	2d00      	cmp	r5, #0
 800438a:	f000 8130 	beq.w	80045ee <HAL_ADCEx_InjectedConfigChannel+0x5da>
  return __builtin_clz(value);
 800438e:	fab5 f585 	clz	r5, r5
 8004392:	3501      	adds	r5, #1
 8004394:	06ad      	lsls	r5, r5, #26
 8004396:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800439e:	2e00      	cmp	r6, #0
 80043a0:	f000 8123 	beq.w	80045ea <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 80043a4:	fab6 f686 	clz	r6, r6
 80043a8:	3601      	adds	r6, #1
 80043aa:	f006 061f 	and.w	r6, r6, #31
 80043ae:	2701      	movs	r7, #1
 80043b0:	fa07 f606 	lsl.w	r6, r7, r6
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80043b4:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b6:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 80043ba:	2a00      	cmp	r2, #0
 80043bc:	f000 8112 	beq.w	80045e4 <HAL_ADCEx_InjectedConfigChannel+0x5d0>
  return __builtin_clz(value);
 80043c0:	fab2 f282 	clz	r2, r2
 80043c4:	3201      	adds	r2, #1
 80043c6:	f002 021f 	and.w	r2, r2, #31
 80043ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80043ce:	0512      	lsls	r2, r2, #20
 80043d0:	e7ba      	b.n	8004348 <HAL_ADCEx_InjectedConfigChannel+0x334>
 80043d2:	bf00      	nop
 80043d4:	0007ffff 	.word	0x0007ffff
 80043d8:	80080000 	.word	0x80080000
 80043dc:	50000100 	.word	0x50000100
 80043e0:	50000700 	.word	0x50000700
 80043e4:	50000300 	.word	0x50000300
 80043e8:	c3210000 	.word	0xc3210000
 80043ec:	90c00010 	.word	0x90c00010
 80043f0:	c7520000 	.word	0xc7520000
 80043f4:	04104000 	.word	0x04104000
 80043f8:	50000600 	.word	0x50000600
 80043fc:	200003d8 	.word	0x200003d8
 8004400:	053e2d63 	.word	0x053e2d63
 8004404:	407f0000 	.word	0x407f0000
 8004408:	03fff000 	.word	0x03fff000
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800440c:	497f      	ldr	r1, [pc, #508]	; (800460c <HAL_ADCEx_InjectedConfigChannel+0x5f8>)
 800440e:	e66f      	b.n	80040f0 <HAL_ADCEx_InjectedConfigChannel+0xdc>
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004410:	4e7f      	ldr	r6, [pc, #508]	; (8004610 <HAL_ADCEx_InjectedConfigChannel+0x5fc>)
 8004412:	42b2      	cmp	r2, r6
 8004414:	f47f ae8f 	bne.w	8004136 <HAL_ADCEx_InjectedConfigChannel+0x122>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004418:	0249      	lsls	r1, r1, #9
 800441a:	f53f ae8c 	bmi.w	8004136 <HAL_ADCEx_InjectedConfigChannel+0x122>
      if (ADC_VREFINT_INSTANCE(hadc))
 800441e:	4a7d      	ldr	r2, [pc, #500]	; (8004614 <HAL_ADCEx_InjectedConfigChannel+0x600>)
 8004420:	4293      	cmp	r3, r2
 8004422:	f43f ae88 	beq.w	8004136 <HAL_ADCEx_InjectedConfigChannel+0x122>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004426:	4979      	ldr	r1, [pc, #484]	; (800460c <HAL_ADCEx_InjectedConfigChannel+0x5f8>)
 8004428:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
 800442c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004430:	bf14      	ite	ne
 8004432:	4613      	movne	r3, r2
 8004434:	460b      	moveq	r3, r1
 8004436:	f445 0580 	orr.w	r5, r5, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800443a:	689a      	ldr	r2, [r3, #8]
 800443c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8004440:	4315      	orrs	r5, r2
 8004442:	609d      	str	r5, [r3, #8]
 8004444:	e677      	b.n	8004136 <HAL_ADCEx_InjectedConfigChannel+0x122>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004446:	6e1d      	ldr	r5, [r3, #96]	; 0x60
 8004448:	6e1d      	ldr	r5, [r3, #96]	; 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800444a:	f3c2 0c12 	ubfx	ip, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800444e:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004452:	f1bc 0f00 	cmp.w	ip, #0
 8004456:	f040 8089 	bne.w	800456c <HAL_ADCEx_InjectedConfigChannel+0x558>
 800445a:	f3c2 6784 	ubfx	r7, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800445e:	42bd      	cmp	r5, r7
 8004460:	d106      	bne.n	8004470 <HAL_ADCEx_InjectedConfigChannel+0x45c>
  MODIFY_REG(*preg,
 8004462:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004464:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004468:	661a      	str	r2, [r3, #96]	; 0x60
 800446a:	680a      	ldr	r2, [r1, #0]
 800446c:	f3c2 0c12 	ubfx	ip, r2, #0, #19
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004470:	6875      	ldr	r5, [r6, #4]
 8004472:	6877      	ldr	r7, [r6, #4]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004474:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004478:	f1bc 0f00 	cmp.w	ip, #0
 800447c:	f040 8083 	bne.w	8004586 <HAL_ADCEx_InjectedConfigChannel+0x572>
 8004480:	f3c2 6584 	ubfx	r5, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004484:	42af      	cmp	r7, r5
 8004486:	f040 80b7 	bne.w	80045f8 <HAL_ADCEx_InjectedConfigChannel+0x5e4>
  MODIFY_REG(*preg,
 800448a:	6872      	ldr	r2, [r6, #4]
 800448c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004490:	6072      	str	r2, [r6, #4]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004492:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004494:	68b5      	ldr	r5, [r6, #8]
 8004496:	68b7      	ldr	r7, [r6, #8]
 8004498:	f3c2 0512 	ubfx	r5, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800449c:	f3c7 6784 	ubfx	r7, r7, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80044a0:	2d00      	cmp	r5, #0
 80044a2:	d17c      	bne.n	800459e <HAL_ADCEx_InjectedConfigChannel+0x58a>
 80044a4:	f3c2 6584 	ubfx	r5, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80044a8:	42af      	cmp	r7, r5
 80044aa:	f106 0c0c 	add.w	ip, r6, #12
 80044ae:	f040 80a8 	bne.w	8004602 <HAL_ADCEx_InjectedConfigChannel+0x5ee>
  MODIFY_REG(*preg,
 80044b2:	68b2      	ldr	r2, [r6, #8]
 80044b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044b8:	60b2      	str	r2, [r6, #8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80044ba:	680a      	ldr	r2, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80044bc:	f8dc 5000 	ldr.w	r5, [ip]
 80044c0:	f8dc 6000 	ldr.w	r6, [ip]
 80044c4:	f3c2 0512 	ubfx	r5, r2, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044c8:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80044cc:	2d00      	cmp	r5, #0
 80044ce:	d175      	bne.n	80045bc <HAL_ADCEx_InjectedConfigChannel+0x5a8>
 80044d0:	f3c2 6584 	ubfx	r5, r2, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80044d4:	42b5      	cmp	r5, r6
 80044d6:	f47f ade6 	bne.w	80040a6 <HAL_ADCEx_InjectedConfigChannel+0x92>
  MODIFY_REG(*preg,
 80044da:	f8dc 2000 	ldr.w	r2, [ip]
 80044de:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80044e2:	f8cc 2000 	str.w	r2, [ip]
 80044e6:	680a      	ldr	r2, [r1, #0]
 80044e8:	e5dd      	b.n	80040a6 <HAL_ADCEx_InjectedConfigChannel+0x92>
  MODIFY_REG(*preg,
 80044ea:	4016      	ands	r6, r2
 80044ec:	f84e 600c 	str.w	r6, [lr, ip]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80044f6:	615a      	str	r2, [r3, #20]
 80044f8:	e675      	b.n	80041e6 <HAL_ADCEx_InjectedConfigChannel+0x1d2>
      MODIFY_REG(hadc->Instance->CFGR2,
 80044fa:	6b8f      	ldr	r7, [r1, #56]	; 0x38
 80044fc:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80044fe:	f8d3 c010 	ldr.w	ip, [r3, #16]
 8004502:	433e      	orrs	r6, r7
 8004504:	f046 0602 	orr.w	r6, r6, #2
 8004508:	f42c 77ff 	bic.w	r7, ip, #510	; 0x1fe
 800450c:	433e      	orrs	r6, r7
 800450e:	611e      	str	r6, [r3, #16]
 8004510:	e64c      	b.n	80041ac <HAL_ADCEx_InjectedConfigChannel+0x198>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8004512:	4618      	mov	r0, r3
 8004514:	e5a2      	b.n	800405c <HAL_ADCEx_InjectedConfigChannel+0x48>
 8004516:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800451a:	3501      	adds	r5, #1
 800451c:	f005 051f 	and.w	r5, r5, #31
 8004520:	2d09      	cmp	r5, #9
 8004522:	f67f af2f 	bls.w	8004384 <HAL_ADCEx_InjectedConfigChannel+0x370>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004526:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800452a:	2d00      	cmp	r5, #0
 800452c:	d057      	beq.n	80045de <HAL_ADCEx_InjectedConfigChannel+0x5ca>
  return __builtin_clz(value);
 800452e:	fab5 f585 	clz	r5, r5
 8004532:	3501      	adds	r5, #1
 8004534:	06ad      	lsls	r5, r5, #26
 8004536:	f005 45f8 	and.w	r5, r5, #2080374784	; 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800453a:	fa92 f6a2 	rbit	r6, r2
  if (value == 0U)
 800453e:	2e00      	cmp	r6, #0
 8004540:	d04b      	beq.n	80045da <HAL_ADCEx_InjectedConfigChannel+0x5c6>
  return __builtin_clz(value);
 8004542:	fab6 f686 	clz	r6, r6
 8004546:	3601      	adds	r6, #1
 8004548:	f006 061f 	and.w	r6, r6, #31
 800454c:	2701      	movs	r7, #1
 800454e:	fa07 f606 	lsl.w	r6, r7, r6
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004552:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004554:	fa92 f2a2 	rbit	r2, r2
  if (value == 0U)
 8004558:	2a00      	cmp	r2, #0
 800455a:	d03c      	beq.n	80045d6 <HAL_ADCEx_InjectedConfigChannel+0x5c2>
  return __builtin_clz(value);
 800455c:	fab2 f282 	clz	r2, r2
 8004560:	3201      	adds	r2, #1
 8004562:	f002 021f 	and.w	r2, r2, #31
 8004566:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800456a:	e6e9      	b.n	8004340 <HAL_ADCEx_InjectedConfigChannel+0x32c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456c:	fa92 f7a2 	rbit	r7, r2
  if (value == 0U)
 8004570:	2f00      	cmp	r7, #0
 8004572:	f43f af7d 	beq.w	8004470 <HAL_ADCEx_InjectedConfigChannel+0x45c>
  return __builtin_clz(value);
 8004576:	fab7 f787 	clz	r7, r7
 800457a:	e770      	b.n	800445e <HAL_ADCEx_InjectedConfigChannel+0x44a>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800457c:	6de6      	ldr	r6, [r4, #92]	; 0x5c
 800457e:	f046 0620 	orr.w	r6, r6, #32
 8004582:	65e6      	str	r6, [r4, #92]	; 0x5c
 8004584:	e609      	b.n	800419a <HAL_ADCEx_InjectedConfigChannel+0x186>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004586:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 800458a:	b125      	cbz	r5, 8004596 <HAL_ADCEx_InjectedConfigChannel+0x582>
  return __builtin_clz(value);
 800458c:	fab5 f585 	clz	r5, r5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004590:	42af      	cmp	r7, r5
 8004592:	f43f af7a 	beq.w	800448a <HAL_ADCEx_InjectedConfigChannel+0x476>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004596:	68b5      	ldr	r5, [r6, #8]
 8004598:	68b7      	ldr	r7, [r6, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800459a:	f3c7 6784 	ubfx	r7, r7, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80045a2:	b1ad      	cbz	r5, 80045d0 <HAL_ADCEx_InjectedConfigChannel+0x5bc>
  return __builtin_clz(value);
 80045a4:	fab5 f585 	clz	r5, r5
 80045a8:	42af      	cmp	r7, r5
 80045aa:	f106 0c0c 	add.w	ip, r6, #12
 80045ae:	d080      	beq.n	80044b2 <HAL_ADCEx_InjectedConfigChannel+0x49e>
 80045b0:	f8dc 5000 	ldr.w	r5, [ip]
 80045b4:	f8dc 6000 	ldr.w	r6, [ip]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045b8:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045bc:	fa92 f5a2 	rbit	r5, r2
  if (value == 0U)
 80045c0:	2d00      	cmp	r5, #0
 80045c2:	f43f ad70 	beq.w	80040a6 <HAL_ADCEx_InjectedConfigChannel+0x92>
  return __builtin_clz(value);
 80045c6:	fab5 f585 	clz	r5, r5
 80045ca:	e783      	b.n	80044d4 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045cc:	490f      	ldr	r1, [pc, #60]	; (800460c <HAL_ADCEx_InjectedConfigChannel+0x5f8>)
 80045ce:	e651      	b.n	8004274 <HAL_ADCEx_InjectedConfigChannel+0x260>
 80045d0:	f106 0c0c 	add.w	ip, r6, #12
 80045d4:	e7ec      	b.n	80045b0 <HAL_ADCEx_InjectedConfigChannel+0x59c>
  if (value == 0U)
 80045d6:	4a10      	ldr	r2, [pc, #64]	; (8004618 <HAL_ADCEx_InjectedConfigChannel+0x604>)
 80045d8:	e6b6      	b.n	8004348 <HAL_ADCEx_InjectedConfigChannel+0x334>
 80045da:	2602      	movs	r6, #2
 80045dc:	e7b9      	b.n	8004552 <HAL_ADCEx_InjectedConfigChannel+0x53e>
 80045de:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80045e2:	e7aa      	b.n	800453a <HAL_ADCEx_InjectedConfigChannel+0x526>
 80045e4:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 80045e8:	e6ae      	b.n	8004348 <HAL_ADCEx_InjectedConfigChannel+0x334>
 80045ea:	2602      	movs	r6, #2
 80045ec:	e6e2      	b.n	80043b4 <HAL_ADCEx_InjectedConfigChannel+0x3a0>
 80045ee:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
 80045f2:	e6d2      	b.n	800439a <HAL_ADCEx_InjectedConfigChannel+0x386>
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80045f4:	4b05      	ldr	r3, [pc, #20]	; (800460c <HAL_ADCEx_InjectedConfigChannel+0x5f8>)
 80045f6:	e597      	b.n	8004128 <HAL_ADCEx_InjectedConfigChannel+0x114>
 80045f8:	68b7      	ldr	r7, [r6, #8]
 80045fa:	68b7      	ldr	r7, [r6, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045fc:	f3c7 6784 	ubfx	r7, r7, #26, #5
 8004600:	e752      	b.n	80044a8 <HAL_ADCEx_InjectedConfigChannel+0x494>
 8004602:	68f7      	ldr	r7, [r6, #12]
 8004604:	68f6      	ldr	r6, [r6, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004606:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800460a:	e763      	b.n	80044d4 <HAL_ADCEx_InjectedConfigChannel+0x4c0>
 800460c:	50000300 	.word	0x50000300
 8004610:	cb840000 	.word	0xcb840000
 8004614:	50000100 	.word	0x50000100
 8004618:	fe500000 	.word	0xfe500000

0800461c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800461c:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8004620:	2a01      	cmp	r2, #1
 8004622:	d058      	beq.n	80046d6 <HAL_ADCEx_MultiModeConfigChannel+0xba>
{
 8004624:	b4f0      	push	{r4, r5, r6, r7}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004626:	6802      	ldr	r2, [r0, #0]
{
 8004628:	b09c      	sub	sp, #112	; 0x70
 800462a:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800462c:	2400      	movs	r4, #0
  __HAL_LOCK(hadc);
 800462e:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004630:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8004634:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_LOCK(hadc);
 8004636:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800463a:	9419      	str	r4, [sp, #100]	; 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800463c:	d00b      	beq.n	8004656 <HAL_ADCEx_MultiModeConfigChannel+0x3a>
 800463e:	4d48      	ldr	r5, [pc, #288]	; (8004760 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004640:	42aa      	cmp	r2, r5
 8004642:	d046      	beq.n	80046d2 <HAL_ADCEx_MultiModeConfigChannel+0xb6>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004644:	6dda      	ldr	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004646:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800464a:	f042 0220 	orr.w	r2, r2, #32
 800464e:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8004650:	b01c      	add	sp, #112	; 0x70
 8004652:	bcf0      	pop	{r4, r5, r6, r7}
 8004654:	4770      	bx	lr
 8004656:	4843      	ldr	r0, [pc, #268]	; (8004764 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004658:	6880      	ldr	r0, [r0, #8]
 800465a:	0740      	lsls	r0, r0, #29
 800465c:	d50b      	bpl.n	8004676 <HAL_ADCEx_MultiModeConfigChannel+0x5a>
 800465e:	6892      	ldr	r2, [r2, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004660:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004662:	f042 0220 	orr.w	r2, r2, #32
 8004666:	65da      	str	r2, [r3, #92]	; 0x5c
    tmp_hal_status = HAL_ERROR;
 8004668:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 800466a:	2200      	movs	r2, #0
 800466c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
}
 8004670:	b01c      	add	sp, #112	; 0x70
 8004672:	bcf0      	pop	{r4, r5, r6, r7}
 8004674:	4770      	bx	lr
 8004676:	6890      	ldr	r0, [r2, #8]
 8004678:	0744      	lsls	r4, r0, #29
 800467a:	d4f1      	bmi.n	8004660 <HAL_ADCEx_MultiModeConfigChannel+0x44>
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800467c:	f1b2 4fa0 	cmp.w	r2, #1342177280	; 0x50000000
 8004680:	6808      	ldr	r0, [r1, #0]
 8004682:	d02a      	beq.n	80046da <HAL_ADCEx_MultiModeConfigChannel+0xbe>
 8004684:	4c37      	ldr	r4, [pc, #220]	; (8004764 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 8004686:	42a2      	cmp	r2, r4
 8004688:	d027      	beq.n	80046da <HAL_ADCEx_MultiModeConfigChannel+0xbe>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800468a:	2800      	cmp	r0, #0
 800468c:	d057      	beq.n	800473e <HAL_ADCEx_MultiModeConfigChannel+0x122>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800468e:	4c36      	ldr	r4, [pc, #216]	; (8004768 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004690:	684e      	ldr	r6, [r1, #4]
 8004692:	68a2      	ldr	r2, [r4, #8]
 8004694:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004698:	4f34      	ldr	r7, [pc, #208]	; (800476c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800469a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800469e:	4332      	orrs	r2, r6
 80046a0:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 80046a4:	4e2e      	ldr	r6, [pc, #184]	; (8004760 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 80046a6:	60a2      	str	r2, [r4, #8]
 80046a8:	4d31      	ldr	r5, [pc, #196]	; (8004770 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80046aa:	68b6      	ldr	r6, [r6, #8]
 80046ac:	68ba      	ldr	r2, [r7, #8]
 80046ae:	68ad      	ldr	r5, [r5, #8]
 80046b0:	4332      	orrs	r2, r6
 80046b2:	432a      	orrs	r2, r5
 80046b4:	43d2      	mvns	r2, r2
 80046b6:	f002 0201 	and.w	r2, r2, #1
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046ba:	b142      	cbz	r2, 80046ce <HAL_ADCEx_MultiModeConfigChannel+0xb2>
        MODIFY_REG(tmpADC_Common->CCR,
 80046bc:	68a5      	ldr	r5, [r4, #8]
 80046be:	688a      	ldr	r2, [r1, #8]
 80046c0:	f425 6171 	bic.w	r1, r5, #3856	; 0xf10
 80046c4:	4310      	orrs	r0, r2
 80046c6:	f021 010f 	bic.w	r1, r1, #15
 80046ca:	4308      	orrs	r0, r1
 80046cc:	60a0      	str	r0, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046ce:	2000      	movs	r0, #0
 80046d0:	e7cb      	b.n	800466a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80046d2:	4826      	ldr	r0, [pc, #152]	; (800476c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80046d4:	e7c0      	b.n	8004658 <HAL_ADCEx_MultiModeConfigChannel+0x3c>
  __HAL_LOCK(hadc);
 80046d6:	2002      	movs	r0, #2
}
 80046d8:	4770      	bx	lr
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80046da:	b9c8      	cbnz	r0, 8004710 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80046dc:	4925      	ldr	r1, [pc, #148]	; (8004774 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80046de:	688a      	ldr	r2, [r1, #8]
 80046e0:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80046e4:	608a      	str	r2, [r1, #8]
 80046e6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 80046ea:	4a1e      	ldr	r2, [pc, #120]	; (8004764 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 80046ec:	6888      	ldr	r0, [r1, #8]
 80046ee:	6892      	ldr	r2, [r2, #8]
 80046f0:	4302      	orrs	r2, r0
 80046f2:	43d2      	mvns	r2, r2
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80046f4:	f501 7140 	add.w	r1, r1, #768	; 0x300
 80046f8:	f002 0201 	and.w	r2, r2, #1
 80046fc:	2a00      	cmp	r2, #0
 80046fe:	d0e6      	beq.n	80046ce <HAL_ADCEx_MultiModeConfigChannel+0xb2>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004700:	688a      	ldr	r2, [r1, #8]
 8004702:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8004706:	f022 020f 	bic.w	r2, r2, #15
 800470a:	608a      	str	r2, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800470c:	2000      	movs	r0, #0
 800470e:	e7ac      	b.n	800466a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004710:	4c18      	ldr	r4, [pc, #96]	; (8004774 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8004712:	684e      	ldr	r6, [r1, #4]
 8004714:	68a2      	ldr	r2, [r4, #8]
 8004716:	f893 5038 	ldrb.w	r5, [r3, #56]	; 0x38
 800471a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800471e:	4332      	orrs	r2, r6
 8004720:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8004724:	60a2      	str	r2, [r4, #8]
 8004726:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
 800472a:	4a0e      	ldr	r2, [pc, #56]	; (8004764 <HAL_ADCEx_MultiModeConfigChannel+0x148>)
 800472c:	68a5      	ldr	r5, [r4, #8]
 800472e:	6892      	ldr	r2, [r2, #8]
 8004730:	432a      	orrs	r2, r5
 8004732:	43d2      	mvns	r2, r2
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004734:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004738:	f002 0201 	and.w	r2, r2, #1
 800473c:	e7bd      	b.n	80046ba <HAL_ADCEx_MultiModeConfigChannel+0x9e>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800473e:	490a      	ldr	r1, [pc, #40]	; (8004768 <HAL_ADCEx_MultiModeConfigChannel+0x14c>)
 8004740:	4c07      	ldr	r4, [pc, #28]	; (8004760 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004742:	688a      	ldr	r2, [r1, #8]
 8004744:	4d09      	ldr	r5, [pc, #36]	; (800476c <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8004746:	480a      	ldr	r0, [pc, #40]	; (8004770 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8004748:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800474c:	608a      	str	r2, [r1, #8]
 800474e:	68a4      	ldr	r4, [r4, #8]
 8004750:	68aa      	ldr	r2, [r5, #8]
 8004752:	6880      	ldr	r0, [r0, #8]
 8004754:	4322      	orrs	r2, r4
 8004756:	4302      	orrs	r2, r0
 8004758:	43d2      	mvns	r2, r2
 800475a:	f002 0201 	and.w	r2, r2, #1
 800475e:	e7cd      	b.n	80046fc <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8004760:	50000400 	.word	0x50000400
 8004764:	50000100 	.word	0x50000100
 8004768:	50000700 	.word	0x50000700
 800476c:	50000500 	.word	0x50000500
 8004770:	50000600 	.word	0x50000600
 8004774:	50000300 	.word	0x50000300

08004778 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004778:	b1b0      	cbz	r0, 80047a8 <HAL_CORDIC_Init+0x30>

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 800477a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{
 800477e:	b510      	push	{r4, lr}
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004780:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004784:	4604      	mov	r4, r0
 8004786:	b153      	cbz	r3, 800479e <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8004788:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 800478a:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 800478c:	6260      	str	r0, [r4, #36]	; 0x24
  hcordic->pOutBuff = NULL;
 800478e:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToGet = 0U;
 8004792:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8004796:	6160      	str	r0, [r4, #20]
  hcordic->State = HAL_CORDIC_STATE_READY;
 8004798:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21

  /* Return function status */
  return HAL_OK;
}
 800479c:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800479e:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 80047a2:	f7fe fee5 	bl	8003570 <HAL_CORDIC_MspInit>
 80047a6:	e7ef      	b.n	8004788 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 80047a8:	2001      	movs	r0, #1
}
 80047aa:	4770      	bx	lr

080047ac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80047ac:	4a07      	ldr	r2, [pc, #28]	; (80047cc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80047ae:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80047b0:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 80047b4:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80047b6:	0200      	lsls	r0, r0, #8
 80047b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80047bc:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80047c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80047c4:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80047c6:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80047c8:	4770      	bx	lr
 80047ca:	bf00      	nop
 80047cc:	e000ed00 	.word	0xe000ed00

080047d0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80047d0:	4b18      	ldr	r3, [pc, #96]	; (8004834 <HAL_NVIC_SetPriority+0x64>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047d8:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047da:	f1c3 0507 	rsb	r5, r3, #7
 80047de:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047e0:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047e4:	bf28      	it	cs
 80047e6:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047e8:	2c06      	cmp	r4, #6
 80047ea:	d919      	bls.n	8004820 <HAL_NVIC_SetPriority+0x50>
 80047ec:	3b03      	subs	r3, #3
 80047ee:	f04f 34ff 	mov.w	r4, #4294967295
 80047f2:	409c      	lsls	r4, r3
 80047f4:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80047f8:	f04f 32ff 	mov.w	r2, #4294967295
 80047fc:	40aa      	lsls	r2, r5
 80047fe:	ea21 0102 	bic.w	r1, r1, r2
 8004802:	fa01 f203 	lsl.w	r2, r1, r3
 8004806:	4322      	orrs	r2, r4
 8004808:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800480a:	2800      	cmp	r0, #0
 800480c:	b2d2      	uxtb	r2, r2
 800480e:	db0a      	blt.n	8004826 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004810:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004814:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004818:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800481c:	bc30      	pop	{r4, r5}
 800481e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004820:	2400      	movs	r4, #0
 8004822:	4623      	mov	r3, r4
 8004824:	e7e8      	b.n	80047f8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004826:	4b04      	ldr	r3, [pc, #16]	; (8004838 <HAL_NVIC_SetPriority+0x68>)
 8004828:	f000 000f 	and.w	r0, r0, #15
 800482c:	4403      	add	r3, r0
 800482e:	761a      	strb	r2, [r3, #24]
 8004830:	bc30      	pop	{r4, r5}
 8004832:	4770      	bx	lr
 8004834:	e000ed00 	.word	0xe000ed00
 8004838:	e000ecfc 	.word	0xe000ecfc

0800483c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800483c:	2800      	cmp	r0, #0
 800483e:	db07      	blt.n	8004850 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004840:	4a04      	ldr	r2, [pc, #16]	; (8004854 <HAL_NVIC_EnableIRQ+0x18>)
 8004842:	f000 011f 	and.w	r1, r0, #31
 8004846:	2301      	movs	r3, #1
 8004848:	0940      	lsrs	r0, r0, #5
 800484a:	408b      	lsls	r3, r1
 800484c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	e000e100 	.word	0xe000e100

08004858 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004858:	3801      	subs	r0, #1
 800485a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800485e:	d20e      	bcs.n	800487e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004860:	4b08      	ldr	r3, [pc, #32]	; (8004884 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004862:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004864:	4c08      	ldr	r4, [pc, #32]	; (8004888 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004866:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004868:	20f0      	movs	r0, #240	; 0xf0
 800486a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800486e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004870:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004872:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004874:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004876:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8004878:	f85d 4b04 	ldr.w	r4, [sp], #4
 800487c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800487e:	2001      	movs	r0, #1
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	e000e010 	.word	0xe000e010
 8004888:	e000ed00 	.word	0xe000ed00

0800488c <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop

08004890 <HAL_SYSTICK_IRQHandler>:
{
 8004890:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004892:	f7ff fffb 	bl	800488c <HAL_SYSTICK_Callback>
}
 8004896:	bd08      	pop	{r3, pc}

08004898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800489c:	4688      	mov	r8, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800489e:	6809      	ldr	r1, [r1, #0]
{
 80048a0:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0U)
 80048a2:	2900      	cmp	r1, #0
 80048a4:	d079      	beq.n	800499a <HAL_GPIO_Init+0x102>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048a6:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 8004a54 <HAL_GPIO_Init+0x1bc>
  uint32_t position = 0x00U;
 80048aa:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80048ac:	f04f 0a01 	mov.w	sl, #1
 80048b0:	fa0a fc05 	lsl.w	ip, sl, r5
    if (iocurrent != 0x00u)
 80048b4:	ea1c 0901 	ands.w	r9, ip, r1
 80048b8:	d06b      	beq.n	8004992 <HAL_GPIO_Init+0xfa>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048ba:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80048be:	006e      	lsls	r6, r5, #1
 80048c0:	f002 0303 	and.w	r3, r2, #3
 80048c4:	2403      	movs	r4, #3
 80048c6:	1e5f      	subs	r7, r3, #1
 80048c8:	40b4      	lsls	r4, r6
 80048ca:	43e4      	mvns	r4, r4
 80048cc:	2f01      	cmp	r7, #1
 80048ce:	9400      	str	r4, [sp, #0]
 80048d0:	d966      	bls.n	80049a0 <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048d2:	2b03      	cmp	r3, #3
 80048d4:	d177      	bne.n	80049c6 <HAL_GPIO_Init+0x12e>
      temp = GPIOx->MODER;
 80048d6:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048d8:	40b3      	lsls	r3, r6
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80048da:	403c      	ands	r4, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048dc:	4323      	orrs	r3, r4
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048de:	f412 3f40 	tst.w	r2, #196608	; 0x30000
      GPIOx->MODER = temp;
 80048e2:	6003      	str	r3, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80048e4:	d055      	beq.n	8004992 <HAL_GPIO_Init+0xfa>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048e6:	4c55      	ldr	r4, [pc, #340]	; (8004a3c <HAL_GPIO_Init+0x1a4>)
 80048e8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80048ea:	f043 0301 	orr.w	r3, r3, #1
 80048ee:	6623      	str	r3, [r4, #96]	; 0x60
 80048f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80048f2:	f025 0603 	bic.w	r6, r5, #3
 80048f6:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	f506 3680 	add.w	r6, r6, #65536	; 0x10000
 8004902:	9303      	str	r3, [sp, #12]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004904:	f005 0403 	and.w	r4, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004908:	9b03      	ldr	r3, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800490a:	68b7      	ldr	r7, [r6, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800490c:	00a4      	lsls	r4, r4, #2
 800490e:	230f      	movs	r3, #15
 8004910:	40a3      	lsls	r3, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004912:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004916:	ea27 0303 	bic.w	r3, r7, r3
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800491a:	d013      	beq.n	8004944 <HAL_GPIO_Init+0xac>
 800491c:	4f48      	ldr	r7, [pc, #288]	; (8004a40 <HAL_GPIO_Init+0x1a8>)
 800491e:	42b8      	cmp	r0, r7
 8004920:	d07e      	beq.n	8004a20 <HAL_GPIO_Init+0x188>
 8004922:	4f48      	ldr	r7, [pc, #288]	; (8004a44 <HAL_GPIO_Init+0x1ac>)
 8004924:	42b8      	cmp	r0, r7
 8004926:	d076      	beq.n	8004a16 <HAL_GPIO_Init+0x17e>
 8004928:	4f47      	ldr	r7, [pc, #284]	; (8004a48 <HAL_GPIO_Init+0x1b0>)
 800492a:	42b8      	cmp	r0, r7
 800492c:	d07c      	beq.n	8004a28 <HAL_GPIO_Init+0x190>
 800492e:	4f47      	ldr	r7, [pc, #284]	; (8004a4c <HAL_GPIO_Init+0x1b4>)
 8004930:	42b8      	cmp	r0, r7
 8004932:	d07e      	beq.n	8004a32 <HAL_GPIO_Init+0x19a>
 8004934:	4f46      	ldr	r7, [pc, #280]	; (8004a50 <HAL_GPIO_Init+0x1b8>)
 8004936:	42b8      	cmp	r0, r7
 8004938:	bf0c      	ite	eq
 800493a:	2705      	moveq	r7, #5
 800493c:	2706      	movne	r7, #6
 800493e:	fa07 f404 	lsl.w	r4, r7, r4
 8004942:	4323      	orrs	r3, r4
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004944:	60b3      	str	r3, [r6, #8]
        temp = EXTI->RTSR1;
 8004946:	f8db 3008 	ldr.w	r3, [fp, #8]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800494a:	02d4      	lsls	r4, r2, #11
        temp &= ~(iocurrent);
 800494c:	ea6f 0609 	mvn.w	r6, r9
 8004950:	bf54      	ite	pl
 8004952:	4033      	andpl	r3, r6
        {
          temp |= iocurrent;
 8004954:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->RTSR1 = temp;
 8004958:	f8cb 3008 	str.w	r3, [fp, #8]

        temp = EXTI->FTSR1;
 800495c:	f8db 400c 	ldr.w	r4, [fp, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004960:	0293      	lsls	r3, r2, #10
        temp &= ~(iocurrent);
 8004962:	bf54      	ite	pl
 8004964:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004966:	ea49 0404 	orrmi.w	r4, r9, r4
        }
        EXTI->FTSR1 = temp;
 800496a:	f8cb 400c 	str.w	r4, [fp, #12]

        temp = EXTI->EMR1;
 800496e:	f8db 4004 	ldr.w	r4, [fp, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004972:	0397      	lsls	r7, r2, #14
        temp &= ~(iocurrent);
 8004974:	bf54      	ite	pl
 8004976:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8004978:	ea49 0404 	orrmi.w	r4, r9, r4
        }
        EXTI->EMR1 = temp;
 800497c:	f8cb 4004 	str.w	r4, [fp, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004980:	f8db 3000 	ldr.w	r3, [fp]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004984:	03d2      	lsls	r2, r2, #15
        temp &= ~(iocurrent);
 8004986:	bf54      	ite	pl
 8004988:	4033      	andpl	r3, r6
        {
          temp |= iocurrent;
 800498a:	ea49 0303 	orrmi.w	r3, r9, r3
        }
        EXTI->IMR1 = temp;
 800498e:	f8cb 3000 	str.w	r3, [fp]
      }
    }

    position++;
 8004992:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004994:	fa31 f305 	lsrs.w	r3, r1, r5
 8004998:	d18a      	bne.n	80048b0 <HAL_GPIO_Init+0x18>
  }
}
 800499a:	b005      	add	sp, #20
 800499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 80049a0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049a2:	ea07 0e04 	and.w	lr, r7, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80049a6:	f8d8 700c 	ldr.w	r7, [r8, #12]
 80049aa:	40b7      	lsls	r7, r6
 80049ac:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80049b0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80049b2:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049b6:	f3c2 1700 	ubfx	r7, r2, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80049ba:	ea2e 0c0c 	bic.w	ip, lr, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80049be:	40af      	lsls	r7, r5
 80049c0:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 80049c4:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80049c6:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80049c8:	ea07 0c04 	and.w	ip, r7, r4
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80049cc:	f8d8 7008 	ldr.w	r7, [r8, #8]
 80049d0:	40b7      	lsls	r7, r6
 80049d2:	ea47 070c 	orr.w	r7, r7, ip
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049d6:	2b02      	cmp	r3, #2
        GPIOx->PUPDR = temp;
 80049d8:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049da:	f47f af7c 	bne.w	80048d6 <HAL_GPIO_Init+0x3e>
        temp = GPIOx->AFR[position >> 3U];
 80049de:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 80049e2:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049e6:	f005 0c07 	and.w	ip, r5, #7
        temp = GPIOx->AFR[position >> 3U];
 80049ea:	f8de 4020 	ldr.w	r4, [lr, #32]
 80049ee:	9401      	str	r4, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80049f0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80049f4:	240f      	movs	r4, #15
 80049f6:	fa04 f70c 	lsl.w	r7, r4, ip
 80049fa:	9c01      	ldr	r4, [sp, #4]
 80049fc:	ea24 0707 	bic.w	r7, r4, r7
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a00:	f8d8 4010 	ldr.w	r4, [r8, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a04:	9701      	str	r7, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a06:	fa04 f70c 	lsl.w	r7, r4, ip
 8004a0a:	9c01      	ldr	r4, [sp, #4]
 8004a0c:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3U] = temp;
 8004a0e:	f8ce 7020 	str.w	r7, [lr, #32]
 8004a12:	9c00      	ldr	r4, [sp, #0]
 8004a14:	e75f      	b.n	80048d6 <HAL_GPIO_Init+0x3e>
 8004a16:	2702      	movs	r7, #2
 8004a18:	fa07 f404 	lsl.w	r4, r7, r4
 8004a1c:	4323      	orrs	r3, r4
 8004a1e:	e791      	b.n	8004944 <HAL_GPIO_Init+0xac>
 8004a20:	fa0a f404 	lsl.w	r4, sl, r4
 8004a24:	4323      	orrs	r3, r4
 8004a26:	e78d      	b.n	8004944 <HAL_GPIO_Init+0xac>
 8004a28:	2703      	movs	r7, #3
 8004a2a:	fa07 f404 	lsl.w	r4, r7, r4
 8004a2e:	4323      	orrs	r3, r4
 8004a30:	e788      	b.n	8004944 <HAL_GPIO_Init+0xac>
 8004a32:	2704      	movs	r7, #4
 8004a34:	fa07 f404 	lsl.w	r4, r7, r4
 8004a38:	4323      	orrs	r3, r4
 8004a3a:	e783      	b.n	8004944 <HAL_GPIO_Init+0xac>
 8004a3c:	40021000 	.word	0x40021000
 8004a40:	48000400 	.word	0x48000400
 8004a44:	48000800 	.word	0x48000800
 8004a48:	48000c00 	.word	0x48000c00
 8004a4c:	48001000 	.word	0x48001000
 8004a50:	48001400 	.word	0x48001400
 8004a54:	40010400 	.word	0x40010400

08004a58 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004a58:	6903      	ldr	r3, [r0, #16]
 8004a5a:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8004a5c:	bf14      	ite	ne
 8004a5e:	2001      	movne	r0, #1
 8004a60:	2000      	moveq	r0, #0
 8004a62:	4770      	bx	lr

08004a64 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a64:	4a3b      	ldr	r2, [pc, #236]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0xf0>)
{
 8004a66:	b410      	push	{r4}
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a68:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004a6a:	b968      	cbnz	r0, 8004a88 <HAL_PWREx_ControlVoltageScaling+0x24>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004a6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a74:	d014      	beq.n	8004aa0 <HAL_PWREx_ControlVoltageScaling+0x3c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a76:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
}
 8004a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004a7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a82:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8004a86:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a88:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8004a8c:	d02f      	beq.n	8004aee <HAL_PWREx_ControlVoltageScaling+0x8a>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004a8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a96:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004a98:	2000      	movs	r0, #0
}
 8004a9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a9e:	4770      	bx	lr
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004aa0:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004aa4:	4b2c      	ldr	r3, [pc, #176]	; (8004b58 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004aa6:	482d      	ldr	r0, [pc, #180]	; (8004b5c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004aa8:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8004aac:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ab0:	6811      	ldr	r1, [r2, #0]
 8004ab2:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004ab6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004aba:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004abc:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004abe:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ac0:	2332      	movs	r3, #50	; 0x32
 8004ac2:	fb03 f304 	mul.w	r3, r3, r4
 8004ac6:	fba0 0303 	umull	r0, r3, r0, r3
 8004aca:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004acc:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ace:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ad2:	d506      	bpl.n	8004ae2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004ad4:	e000      	b.n	8004ad8 <HAL_PWREx_ControlVoltageScaling+0x74>
 8004ad6:	b123      	cbz	r3, 8004ae2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004ad8:	6951      	ldr	r1, [r2, #20]
 8004ada:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004adc:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ae0:	d4f9      	bmi.n	8004ad6 <HAL_PWREx_ControlVoltageScaling+0x72>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004ae2:	4b1c      	ldr	r3, [pc, #112]	; (8004b54 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004ae4:	695b      	ldr	r3, [r3, #20]
 8004ae6:	055c      	lsls	r4, r3, #21
 8004ae8:	d5d6      	bpl.n	8004a98 <HAL_PWREx_ControlVoltageScaling+0x34>
        return HAL_TIMEOUT;
 8004aea:	2003      	movs	r0, #3
 8004aec:	e7d5      	b.n	8004a9a <HAL_PWREx_ControlVoltageScaling+0x36>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004aee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004af2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af6:	d009      	beq.n	8004b0c <HAL_PWREx_ControlVoltageScaling+0xa8>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004af8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
}
 8004afc:	f85d 4b04 	ldr.w	r4, [sp], #4
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
  return HAL_OK;
 8004b04:	2000      	movs	r0, #0
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b06:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
}
 8004b0a:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b0c:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b10:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8004b12:	4812      	ldr	r0, [pc, #72]	; (8004b5c <HAL_PWREx_ControlVoltageScaling+0xf8>)
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b14:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8004b18:	f8c2 1080 	str.w	r1, [r2, #128]	; 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b1c:	6811      	ldr	r1, [r2, #0]
 8004b1e:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8004b22:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8004b26:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b28:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b2a:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b2c:	2332      	movs	r3, #50	; 0x32
 8004b2e:	fb03 f304 	mul.w	r3, r3, r4
 8004b32:	fba0 0303 	umull	r0, r3, r0, r3
 8004b36:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b38:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b3a:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b3e:	d5d0      	bpl.n	8004ae2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004b40:	e001      	b.n	8004b46 <HAL_PWREx_ControlVoltageScaling+0xe2>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d0cd      	beq.n	8004ae2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004b46:	6951      	ldr	r1, [r2, #20]
 8004b48:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8004b4a:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b4e:	d5c8      	bpl.n	8004ae2 <HAL_PWREx_ControlVoltageScaling+0x7e>
 8004b50:	e7f7      	b.n	8004b42 <HAL_PWREx_ControlVoltageScaling+0xde>
 8004b52:	bf00      	nop
 8004b54:	40007000 	.word	0x40007000
 8004b58:	200003d8 	.word	0x200003d8
 8004b5c:	431bde83 	.word	0x431bde83

08004b60 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004b60:	4a02      	ldr	r2, [pc, #8]	; (8004b6c <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8004b62:	6893      	ldr	r3, [r2, #8]
 8004b64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b68:	6093      	str	r3, [r2, #8]
}
 8004b6a:	4770      	bx	lr
 8004b6c:	40007000 	.word	0x40007000

08004b70 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b70:	2800      	cmp	r0, #0
 8004b72:	f000 8166 	beq.w	8004e42 <HAL_RCC_OscConfig+0x2d2>
{
 8004b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b7a:	6803      	ldr	r3, [r0, #0]
 8004b7c:	07d9      	lsls	r1, r3, #31
{
 8004b7e:	b082      	sub	sp, #8
 8004b80:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b82:	d52d      	bpl.n	8004be0 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b84:	49b2      	ldr	r1, [pc, #712]	; (8004e50 <HAL_RCC_OscConfig+0x2e0>)
 8004b86:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b88:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b8a:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004b8e:	2a0c      	cmp	r2, #12
 8004b90:	f000 80ef 	beq.w	8004d72 <HAL_RCC_OscConfig+0x202>
 8004b94:	2a08      	cmp	r2, #8
 8004b96:	f000 80f1 	beq.w	8004d7c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b9a:	6863      	ldr	r3, [r4, #4]
 8004b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ba0:	f000 8128 	beq.w	8004df4 <HAL_RCC_OscConfig+0x284>
 8004ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ba8:	f000 81dd 	beq.w	8004f66 <HAL_RCC_OscConfig+0x3f6>
 8004bac:	4da8      	ldr	r5, [pc, #672]	; (8004e50 <HAL_RCC_OscConfig+0x2e0>)
 8004bae:	682a      	ldr	r2, [r5, #0]
 8004bb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004bb4:	602a      	str	r2, [r5, #0]
 8004bb6:	682a      	ldr	r2, [r5, #0]
 8004bb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004bbc:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f040 811d 	bne.w	8004dfe <HAL_RCC_OscConfig+0x28e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bc4:	f7fe fe82 	bl	80038cc <HAL_GetTick>
 8004bc8:	4606      	mov	r6, r0

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bca:	e005      	b.n	8004bd8 <HAL_RCC_OscConfig+0x68>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bcc:	f7fe fe7e 	bl	80038cc <HAL_GetTick>
 8004bd0:	1b80      	subs	r0, r0, r6
 8004bd2:	2864      	cmp	r0, #100	; 0x64
 8004bd4:	f200 8131 	bhi.w	8004e3a <HAL_RCC_OscConfig+0x2ca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004bd8:	682b      	ldr	r3, [r5, #0]
 8004bda:	039f      	lsls	r7, r3, #14
 8004bdc:	d4f6      	bmi.n	8004bcc <HAL_RCC_OscConfig+0x5c>
 8004bde:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004be0:	079e      	lsls	r6, r3, #30
 8004be2:	f100 809f 	bmi.w	8004d24 <HAL_RCC_OscConfig+0x1b4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004be6:	071a      	lsls	r2, r3, #28
 8004be8:	d519      	bpl.n	8004c1e <HAL_RCC_OscConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bea:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bec:	4d98      	ldr	r5, [pc, #608]	; (8004e50 <HAL_RCC_OscConfig+0x2e0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 80d1 	beq.w	8004d96 <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_LSI_ENABLE();
 8004bf4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004bf8:	f043 0301 	orr.w	r3, r3, #1
 8004bfc:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c00:	f7fe fe64 	bl	80038cc <HAL_GetTick>
 8004c04:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c06:	e005      	b.n	8004c14 <HAL_RCC_OscConfig+0xa4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c08:	f7fe fe60 	bl	80038cc <HAL_GetTick>
 8004c0c:	1b80      	subs	r0, r0, r6
 8004c0e:	2802      	cmp	r0, #2
 8004c10:	f200 8113 	bhi.w	8004e3a <HAL_RCC_OscConfig+0x2ca>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004c14:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004c18:	079b      	lsls	r3, r3, #30
 8004c1a:	d5f5      	bpl.n	8004c08 <HAL_RCC_OscConfig+0x98>
 8004c1c:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c1e:	075e      	lsls	r6, r3, #29
 8004c20:	d53f      	bpl.n	8004ca2 <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c22:	4b8b      	ldr	r3, [pc, #556]	; (8004e50 <HAL_RCC_OscConfig+0x2e0>)
 8004c24:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c26:	00d5      	lsls	r5, r2, #3
 8004c28:	f100 8164 	bmi.w	8004ef4 <HAL_RCC_OscConfig+0x384>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c2c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004c2e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004c32:	659a      	str	r2, [r3, #88]	; 0x58
 8004c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c3a:	9301      	str	r3, [sp, #4]
 8004c3c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004c3e:	2601      	movs	r6, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c40:	4d84      	ldr	r5, [pc, #528]	; (8004e54 <HAL_RCC_OscConfig+0x2e4>)
 8004c42:	682a      	ldr	r2, [r5, #0]
 8004c44:	05d0      	lsls	r0, r2, #23
 8004c46:	f140 80e8 	bpl.w	8004e1a <HAL_RCC_OscConfig+0x2aa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c4a:	68a3      	ldr	r3, [r4, #8]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	f000 8153 	beq.w	8004ef8 <HAL_RCC_OscConfig+0x388>
 8004c52:	2b05      	cmp	r3, #5
 8004c54:	f000 81c8 	beq.w	8004fe8 <HAL_RCC_OscConfig+0x478>
 8004c58:	4d7d      	ldr	r5, [pc, #500]	; (8004e50 <HAL_RCC_OscConfig+0x2e0>)
 8004c5a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8004c5e:	f022 0201 	bic.w	r2, r2, #1
 8004c62:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
 8004c66:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
 8004c6a:	f022 0204 	bic.w	r2, r2, #4
 8004c6e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f040 8147 	bne.w	8004f06 <HAL_RCC_OscConfig+0x396>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c78:	f7fe fe28 	bl	80038cc <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c7c:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004c80:	4680      	mov	r8, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c82:	e006      	b.n	8004c92 <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c84:	f7fe fe22 	bl	80038cc <HAL_GetTick>
 8004c88:	eba0 0008 	sub.w	r0, r0, r8
 8004c8c:	42b8      	cmp	r0, r7
 8004c8e:	f200 80d4 	bhi.w	8004e3a <HAL_RCC_OscConfig+0x2ca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c92:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004c96:	079b      	lsls	r3, r3, #30
 8004c98:	d4f4      	bmi.n	8004c84 <HAL_RCC_OscConfig+0x114>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c9a:	2e00      	cmp	r6, #0
 8004c9c:	f040 815d 	bne.w	8004f5a <HAL_RCC_OscConfig+0x3ea>
 8004ca0:	6823      	ldr	r3, [r4, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ca2:	069d      	lsls	r5, r3, #26
 8004ca4:	d518      	bpl.n	8004cd8 <HAL_RCC_OscConfig+0x168>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ca6:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ca8:	4d69      	ldr	r5, [pc, #420]	; (8004e50 <HAL_RCC_OscConfig+0x2e0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	f000 8140 	beq.w	8004f30 <HAL_RCC_OscConfig+0x3c0>
      __HAL_RCC_HSI48_ENABLE();
 8004cb0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbc:	f7fe fe06 	bl	80038cc <HAL_GetTick>
 8004cc0:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cc2:	e005      	b.n	8004cd0 <HAL_RCC_OscConfig+0x160>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004cc4:	f7fe fe02 	bl	80038cc <HAL_GetTick>
 8004cc8:	1b80      	subs	r0, r0, r6
 8004cca:	2802      	cmp	r0, #2
 8004ccc:	f200 80b5 	bhi.w	8004e3a <HAL_RCC_OscConfig+0x2ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004cd0:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004cd4:	0798      	lsls	r0, r3, #30
 8004cd6:	d5f5      	bpl.n	8004cc4 <HAL_RCC_OscConfig+0x154>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004cd8:	69e0      	ldr	r0, [r4, #28]
 8004cda:	2800      	cmp	r0, #0
 8004cdc:	f000 80f7 	beq.w	8004ece <HAL_RCC_OscConfig+0x35e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ce0:	4d5b      	ldr	r5, [pc, #364]	; (8004e50 <HAL_RCC_OscConfig+0x2e0>)
 8004ce2:	68aa      	ldr	r2, [r5, #8]
 8004ce4:	f002 020c 	and.w	r2, r2, #12
 8004ce8:	2a0c      	cmp	r2, #12
 8004cea:	f000 8149 	beq.w	8004f80 <HAL_RCC_OscConfig+0x410>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cee:	682a      	ldr	r2, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cf0:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004cf2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004cf6:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004cf8:	f000 80a5 	beq.w	8004e46 <HAL_RCC_OscConfig+0x2d6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfc:	f7fe fde6 	bl	80038cc <HAL_GetTick>

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d00:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8004d02:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d04:	e005      	b.n	8004d12 <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d06:	f7fe fde1 	bl	80038cc <HAL_GetTick>
 8004d0a:	1b40      	subs	r0, r0, r5
 8004d0c:	2802      	cmp	r0, #2
 8004d0e:	f200 8094 	bhi.w	8004e3a <HAL_RCC_OscConfig+0x2ca>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d12:	6820      	ldr	r0, [r4, #0]
 8004d14:	f010 7000 	ands.w	r0, r0, #33554432	; 0x2000000
 8004d18:	d1f5      	bne.n	8004d06 <HAL_RCC_OscConfig+0x196>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004d1a:	68e2      	ldr	r2, [r4, #12]
 8004d1c:	4b4e      	ldr	r3, [pc, #312]	; (8004e58 <HAL_RCC_OscConfig+0x2e8>)
 8004d1e:	4013      	ands	r3, r2
 8004d20:	60e3      	str	r3, [r4, #12]
 8004d22:	e035      	b.n	8004d90 <HAL_RCC_OscConfig+0x220>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d24:	4a4a      	ldr	r2, [pc, #296]	; (8004e50 <HAL_RCC_OscConfig+0x2e0>)
 8004d26:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d28:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d2a:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004d2e:	2b0c      	cmp	r3, #12
 8004d30:	d045      	beq.n	8004dbe <HAL_RCC_OscConfig+0x24e>
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d047      	beq.n	8004dc6 <HAL_RCC_OscConfig+0x256>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d36:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8004d38:	4d45      	ldr	r5, [pc, #276]	; (8004e50 <HAL_RCC_OscConfig+0x2e0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	f000 80c9 	beq.w	8004ed2 <HAL_RCC_OscConfig+0x362>
        __HAL_RCC_HSI_ENABLE();
 8004d40:	682b      	ldr	r3, [r5, #0]
 8004d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d46:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004d48:	f7fe fdc0 	bl	80038cc <HAL_GetTick>
 8004d4c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d4e:	e004      	b.n	8004d5a <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d50:	f7fe fdbc 	bl	80038cc <HAL_GetTick>
 8004d54:	1b80      	subs	r0, r0, r6
 8004d56:	2802      	cmp	r0, #2
 8004d58:	d86f      	bhi.n	8004e3a <HAL_RCC_OscConfig+0x2ca>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004d5a:	682b      	ldr	r3, [r5, #0]
 8004d5c:	0558      	lsls	r0, r3, #21
 8004d5e:	d5f7      	bpl.n	8004d50 <HAL_RCC_OscConfig+0x1e0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d60:	686b      	ldr	r3, [r5, #4]
 8004d62:	6922      	ldr	r2, [r4, #16]
 8004d64:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004d68:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8004d6c:	606b      	str	r3, [r5, #4]
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	e739      	b.n	8004be6 <HAL_RCC_OscConfig+0x76>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d72:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004d76:	2903      	cmp	r1, #3
 8004d78:	f47f af0f 	bne.w	8004b9a <HAL_RCC_OscConfig+0x2a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d7c:	4a34      	ldr	r2, [pc, #208]	; (8004e50 <HAL_RCC_OscConfig+0x2e0>)
 8004d7e:	6812      	ldr	r2, [r2, #0]
 8004d80:	0392      	lsls	r2, r2, #14
 8004d82:	f57f af2d 	bpl.w	8004be0 <HAL_RCC_OscConfig+0x70>
 8004d86:	6862      	ldr	r2, [r4, #4]
 8004d88:	2a00      	cmp	r2, #0
 8004d8a:	f47f af29 	bne.w	8004be0 <HAL_RCC_OscConfig+0x70>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8004d8e:	2001      	movs	r0, #1
    }
  }
  }

  return HAL_OK;
}
 8004d90:	b002      	add	sp, #8
 8004d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004d96:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004d9a:	f023 0301 	bic.w	r3, r3, #1
 8004d9e:	f8c5 3094 	str.w	r3, [r5, #148]	; 0x94
      tickstart = HAL_GetTick();
 8004da2:	f7fe fd93 	bl	80038cc <HAL_GetTick>
 8004da6:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004da8:	e004      	b.n	8004db4 <HAL_RCC_OscConfig+0x244>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004daa:	f7fe fd8f 	bl	80038cc <HAL_GetTick>
 8004dae:	1b80      	subs	r0, r0, r6
 8004db0:	2802      	cmp	r0, #2
 8004db2:	d842      	bhi.n	8004e3a <HAL_RCC_OscConfig+0x2ca>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004db4:	f8d5 3094 	ldr.w	r3, [r5, #148]	; 0x94
 8004db8:	079f      	lsls	r7, r3, #30
 8004dba:	d4f6      	bmi.n	8004daa <HAL_RCC_OscConfig+0x23a>
 8004dbc:	e72e      	b.n	8004c1c <HAL_RCC_OscConfig+0xac>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004dbe:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004dc2:	2a02      	cmp	r2, #2
 8004dc4:	d1b7      	bne.n	8004d36 <HAL_RCC_OscConfig+0x1c6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004dc6:	4b22      	ldr	r3, [pc, #136]	; (8004e50 <HAL_RCC_OscConfig+0x2e0>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	055d      	lsls	r5, r3, #21
 8004dcc:	d502      	bpl.n	8004dd4 <HAL_RCC_OscConfig+0x264>
 8004dce:	68e3      	ldr	r3, [r4, #12]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d0dc      	beq.n	8004d8e <HAL_RCC_OscConfig+0x21e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd4:	4a1e      	ldr	r2, [pc, #120]	; (8004e50 <HAL_RCC_OscConfig+0x2e0>)
 8004dd6:	6920      	ldr	r0, [r4, #16]
 8004dd8:	6853      	ldr	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004dda:	4920      	ldr	r1, [pc, #128]	; (8004e5c <HAL_RCC_OscConfig+0x2ec>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ddc:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8004de0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8004de4:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004de6:	6808      	ldr	r0, [r1, #0]
 8004de8:	f7fe fd22 	bl	8003830 <HAL_InitTick>
 8004dec:	2800      	cmp	r0, #0
 8004dee:	d1ce      	bne.n	8004d8e <HAL_RCC_OscConfig+0x21e>
 8004df0:	6823      	ldr	r3, [r4, #0]
 8004df2:	e6f8      	b.n	8004be6 <HAL_RCC_OscConfig+0x76>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004df4:	4a16      	ldr	r2, [pc, #88]	; (8004e50 <HAL_RCC_OscConfig+0x2e0>)
 8004df6:	6813      	ldr	r3, [r2, #0]
 8004df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dfc:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004dfe:	f7fe fd65 	bl	80038cc <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e02:	4d13      	ldr	r5, [pc, #76]	; (8004e50 <HAL_RCC_OscConfig+0x2e0>)
        tickstart = HAL_GetTick();
 8004e04:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e06:	e004      	b.n	8004e12 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e08:	f7fe fd60 	bl	80038cc <HAL_GetTick>
 8004e0c:	1b80      	subs	r0, r0, r6
 8004e0e:	2864      	cmp	r0, #100	; 0x64
 8004e10:	d813      	bhi.n	8004e3a <HAL_RCC_OscConfig+0x2ca>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e12:	682b      	ldr	r3, [r5, #0]
 8004e14:	039b      	lsls	r3, r3, #14
 8004e16:	d5f7      	bpl.n	8004e08 <HAL_RCC_OscConfig+0x298>
 8004e18:	e6e1      	b.n	8004bde <HAL_RCC_OscConfig+0x6e>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e1a:	682a      	ldr	r2, [r5, #0]
 8004e1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e20:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8004e22:	f7fe fd53 	bl	80038cc <HAL_GetTick>
 8004e26:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e28:	682b      	ldr	r3, [r5, #0]
 8004e2a:	05d9      	lsls	r1, r3, #23
 8004e2c:	f53f af0d 	bmi.w	8004c4a <HAL_RCC_OscConfig+0xda>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e30:	f7fe fd4c 	bl	80038cc <HAL_GetTick>
 8004e34:	1bc0      	subs	r0, r0, r7
 8004e36:	2802      	cmp	r0, #2
 8004e38:	d9f6      	bls.n	8004e28 <HAL_RCC_OscConfig+0x2b8>
            return HAL_TIMEOUT;
 8004e3a:	2003      	movs	r0, #3
}
 8004e3c:	b002      	add	sp, #8
 8004e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8004e42:	2001      	movs	r0, #1
}
 8004e44:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8004e46:	f7fe fd41 	bl	80038cc <HAL_GetTick>
 8004e4a:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e4c:	e00d      	b.n	8004e6a <HAL_RCC_OscConfig+0x2fa>
 8004e4e:	bf00      	nop
 8004e50:	40021000 	.word	0x40021000
 8004e54:	40007000 	.word	0x40007000
 8004e58:	feeefffc 	.word	0xfeeefffc
 8004e5c:	200003e0 	.word	0x200003e0
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e60:	f7fe fd34 	bl	80038cc <HAL_GetTick>
 8004e64:	1b80      	subs	r0, r0, r6
 8004e66:	2802      	cmp	r0, #2
 8004e68:	d8e7      	bhi.n	8004e3a <HAL_RCC_OscConfig+0x2ca>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e6a:	682b      	ldr	r3, [r5, #0]
 8004e6c:	019a      	lsls	r2, r3, #6
 8004e6e:	d4f7      	bmi.n	8004e60 <HAL_RCC_OscConfig+0x2f0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004e70:	68e9      	ldr	r1, [r5, #12]
 8004e72:	4b64      	ldr	r3, [pc, #400]	; (8005004 <HAL_RCC_OscConfig+0x494>)
 8004e74:	6a22      	ldr	r2, [r4, #32]
 8004e76:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8004e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004e7a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004e7c:	400b      	ands	r3, r1
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	; 0x30
 8004e84:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8004e88:	3801      	subs	r0, #1
 8004e8a:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
 8004e8e:	0849      	lsrs	r1, r1, #1
 8004e90:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8004e94:	3901      	subs	r1, #1
 8004e96:	0852      	lsrs	r2, r2, #1
 8004e98:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8004e9c:	3a01      	subs	r2, #1
 8004e9e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8004ea2:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8004ea4:	682b      	ldr	r3, [r5, #0]
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ea6:	4c58      	ldr	r4, [pc, #352]	; (8005008 <HAL_RCC_OscConfig+0x498>)
        __HAL_RCC_PLL_ENABLE();
 8004ea8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eac:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004eae:	68eb      	ldr	r3, [r5, #12]
 8004eb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004eb4:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8004eb6:	f7fe fd09 	bl	80038cc <HAL_GetTick>
 8004eba:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ebc:	e004      	b.n	8004ec8 <HAL_RCC_OscConfig+0x358>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ebe:	f7fe fd05 	bl	80038cc <HAL_GetTick>
 8004ec2:	1b40      	subs	r0, r0, r5
 8004ec4:	2802      	cmp	r0, #2
 8004ec6:	d8b8      	bhi.n	8004e3a <HAL_RCC_OscConfig+0x2ca>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	019b      	lsls	r3, r3, #6
 8004ecc:	d5f7      	bpl.n	8004ebe <HAL_RCC_OscConfig+0x34e>
  return HAL_OK;
 8004ece:	2000      	movs	r0, #0
 8004ed0:	e75e      	b.n	8004d90 <HAL_RCC_OscConfig+0x220>
        __HAL_RCC_HSI_DISABLE();
 8004ed2:	682b      	ldr	r3, [r5, #0]
 8004ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ed8:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8004eda:	f7fe fcf7 	bl	80038cc <HAL_GetTick>
 8004ede:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ee0:	e004      	b.n	8004eec <HAL_RCC_OscConfig+0x37c>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ee2:	f7fe fcf3 	bl	80038cc <HAL_GetTick>
 8004ee6:	1b80      	subs	r0, r0, r6
 8004ee8:	2802      	cmp	r0, #2
 8004eea:	d8a6      	bhi.n	8004e3a <HAL_RCC_OscConfig+0x2ca>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004eec:	682b      	ldr	r3, [r5, #0]
 8004eee:	0559      	lsls	r1, r3, #21
 8004ef0:	d4f7      	bmi.n	8004ee2 <HAL_RCC_OscConfig+0x372>
 8004ef2:	e77d      	b.n	8004df0 <HAL_RCC_OscConfig+0x280>
    FlagStatus       pwrclkchanged = RESET;
 8004ef4:	2600      	movs	r6, #0
 8004ef6:	e6a3      	b.n	8004c40 <HAL_RCC_OscConfig+0xd0>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ef8:	4a43      	ldr	r2, [pc, #268]	; (8005008 <HAL_RCC_OscConfig+0x498>)
 8004efa:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8004efe:	f043 0301 	orr.w	r3, r3, #1
 8004f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 8004f06:	f7fe fce1 	bl	80038cc <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f0a:	4d3f      	ldr	r5, [pc, #252]	; (8005008 <HAL_RCC_OscConfig+0x498>)
      tickstart = HAL_GetTick();
 8004f0c:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f0e:	f241 3788 	movw	r7, #5000	; 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f12:	e005      	b.n	8004f20 <HAL_RCC_OscConfig+0x3b0>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f14:	f7fe fcda 	bl	80038cc <HAL_GetTick>
 8004f18:	eba0 0008 	sub.w	r0, r0, r8
 8004f1c:	42b8      	cmp	r0, r7
 8004f1e:	d88c      	bhi.n	8004e3a <HAL_RCC_OscConfig+0x2ca>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004f20:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8004f24:	079a      	lsls	r2, r3, #30
 8004f26:	d5f5      	bpl.n	8004f14 <HAL_RCC_OscConfig+0x3a4>
    if (pwrclkchanged == SET)
 8004f28:	2e00      	cmp	r6, #0
 8004f2a:	f43f aeb9 	beq.w	8004ca0 <HAL_RCC_OscConfig+0x130>
 8004f2e:	e014      	b.n	8004f5a <HAL_RCC_OscConfig+0x3ea>
      __HAL_RCC_HSI48_DISABLE();
 8004f30:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004f34:	f023 0301 	bic.w	r3, r3, #1
 8004f38:	f8c5 3098 	str.w	r3, [r5, #152]	; 0x98
      tickstart = HAL_GetTick();
 8004f3c:	f7fe fcc6 	bl	80038cc <HAL_GetTick>
 8004f40:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f42:	e005      	b.n	8004f50 <HAL_RCC_OscConfig+0x3e0>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004f44:	f7fe fcc2 	bl	80038cc <HAL_GetTick>
 8004f48:	1b80      	subs	r0, r0, r6
 8004f4a:	2802      	cmp	r0, #2
 8004f4c:	f63f af75 	bhi.w	8004e3a <HAL_RCC_OscConfig+0x2ca>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004f50:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
 8004f54:	0799      	lsls	r1, r3, #30
 8004f56:	d4f5      	bmi.n	8004f44 <HAL_RCC_OscConfig+0x3d4>
 8004f58:	e6be      	b.n	8004cd8 <HAL_RCC_OscConfig+0x168>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f5a:	4a2b      	ldr	r2, [pc, #172]	; (8005008 <HAL_RCC_OscConfig+0x498>)
 8004f5c:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8004f5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f62:	6593      	str	r3, [r2, #88]	; 0x58
 8004f64:	e69c      	b.n	8004ca0 <HAL_RCC_OscConfig+0x130>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f6a:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004f74:	601a      	str	r2, [r3, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004f7c:	601a      	str	r2, [r3, #0]
 8004f7e:	e73e      	b.n	8004dfe <HAL_RCC_OscConfig+0x28e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f80:	2801      	cmp	r0, #1
 8004f82:	f43f af05 	beq.w	8004d90 <HAL_RCC_OscConfig+0x220>
      temp_pllckcfg = RCC->PLLCFGR;
 8004f86:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f88:	6a22      	ldr	r2, [r4, #32]
 8004f8a:	f003 0103 	and.w	r1, r3, #3
 8004f8e:	4291      	cmp	r1, r2
 8004f90:	f47f aefd 	bne.w	8004d8e <HAL_RCC_OscConfig+0x21e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f94:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004f96:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004f9a:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9c:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8004fa0:	f47f aef5 	bne.w	8004d8e <HAL_RCC_OscConfig+0x21e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fa4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004fa6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004faa:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8004fae:	f47f aeee 	bne.w	8004d8e <HAL_RCC_OscConfig+0x21e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fb2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004fb4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fb8:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8004fbc:	f47f aee7 	bne.w	8004d8e <HAL_RCC_OscConfig+0x21e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fc0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8004fc2:	0852      	lsrs	r2, r2, #1
 8004fc4:	3a01      	subs	r2, #1
 8004fc6:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004fca:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8004fce:	f47f aede 	bne.w	8004d8e <HAL_RCC_OscConfig+0x21e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004fd2:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8004fd4:	0852      	lsrs	r2, r2, #1
 8004fd6:	3a01      	subs	r2, #1
 8004fd8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004fdc:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
    return HAL_ERROR;
 8004fe0:	bf14      	ite	ne
 8004fe2:	2001      	movne	r0, #1
 8004fe4:	2000      	moveq	r0, #0
 8004fe6:	e6d3      	b.n	8004d90 <HAL_RCC_OscConfig+0x220>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe8:	4b07      	ldr	r3, [pc, #28]	; (8005008 <HAL_RCC_OscConfig+0x498>)
 8004fea:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004fee:	f042 0204 	orr.w	r2, r2, #4
 8004ff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8004ff6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8004ffa:	f042 0201 	orr.w	r2, r2, #1
 8004ffe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005002:	e780      	b.n	8004f06 <HAL_RCC_OscConfig+0x396>
 8005004:	019f800c 	.word	0x019f800c
 8005008:	40021000 	.word	0x40021000

0800500c <HAL_RCC_ClockConfig>:
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800500c:	2800      	cmp	r0, #0
 800500e:	f000 8105 	beq.w	800521c <HAL_RCC_ClockConfig+0x210>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005012:	4aad      	ldr	r2, [pc, #692]	; (80052c8 <HAL_RCC_ClockConfig+0x2bc>)
{
 8005014:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005018:	6813      	ldr	r3, [r2, #0]
 800501a:	f003 030f 	and.w	r3, r3, #15
 800501e:	428b      	cmp	r3, r1
 8005020:	d20c      	bcs.n	800503c <HAL_RCC_ClockConfig+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005022:	6813      	ldr	r3, [r2, #0]
 8005024:	f023 030f 	bic.w	r3, r3, #15
 8005028:	430b      	orrs	r3, r1
 800502a:	6013      	str	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800502c:	6813      	ldr	r3, [r2, #0]
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	428b      	cmp	r3, r1
 8005034:	d002      	beq.n	800503c <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8005036:	2001      	movs	r0, #1
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
}
 8005038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800503c:	6803      	ldr	r3, [r0, #0]
 800503e:	07df      	lsls	r7, r3, #31
 8005040:	4604      	mov	r4, r0
 8005042:	460d      	mov	r5, r1
 8005044:	f140 8088 	bpl.w	8005158 <HAL_RCC_ClockConfig+0x14c>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005048:	6842      	ldr	r2, [r0, #4]
 800504a:	2a03      	cmp	r2, #3
 800504c:	f000 80ad 	beq.w	80051aa <HAL_RCC_ClockConfig+0x19e>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005050:	4b9e      	ldr	r3, [pc, #632]	; (80052cc <HAL_RCC_ClockConfig+0x2c0>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005052:	2a02      	cmp	r2, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005054:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005056:	f000 80ff 	beq.w	8005258 <HAL_RCC_ClockConfig+0x24c>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800505a:	055b      	lsls	r3, r3, #21
 800505c:	d5eb      	bpl.n	8005036 <HAL_RCC_ClockConfig+0x2a>
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800505e:	4b9b      	ldr	r3, [pc, #620]	; (80052cc <HAL_RCC_ClockConfig+0x2c0>)
 8005060:	6899      	ldr	r1, [r3, #8]
 8005062:	f001 010c 	and.w	r1, r1, #12
 8005066:	2904      	cmp	r1, #4
 8005068:	d00a      	beq.n	8005080 <HAL_RCC_ClockConfig+0x74>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800506a:	6899      	ldr	r1, [r3, #8]
 800506c:	f001 010c 	and.w	r1, r1, #12
 8005070:	2908      	cmp	r1, #8
 8005072:	d005      	beq.n	8005080 <HAL_RCC_ClockConfig+0x74>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005074:	6899      	ldr	r1, [r3, #8]
 8005076:	f001 010c 	and.w	r1, r1, #12
 800507a:	290c      	cmp	r1, #12
 800507c:	f000 80fb 	beq.w	8005276 <HAL_RCC_ClockConfig+0x26a>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005080:	f04f 0800 	mov.w	r8, #0
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005084:	4e91      	ldr	r6, [pc, #580]	; (80052cc <HAL_RCC_ClockConfig+0x2c0>)
 8005086:	68b3      	ldr	r3, [r6, #8]
 8005088:	f023 0303 	bic.w	r3, r3, #3
 800508c:	431a      	orrs	r2, r3
 800508e:	60b2      	str	r2, [r6, #8]
    tickstart = HAL_GetTick();
 8005090:	f7fe fc1c 	bl	80038cc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005094:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005098:	4681      	mov	r9, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800509a:	e005      	b.n	80050a8 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800509c:	f7fe fc16 	bl	80038cc <HAL_GetTick>
 80050a0:	eba0 0009 	sub.w	r0, r0, r9
 80050a4:	42b8      	cmp	r0, r7
 80050a6:	d874      	bhi.n	8005192 <HAL_RCC_ClockConfig+0x186>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050a8:	68b3      	ldr	r3, [r6, #8]
 80050aa:	6862      	ldr	r2, [r4, #4]
 80050ac:	f003 030c 	and.w	r3, r3, #12
 80050b0:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80050b4:	d1f2      	bne.n	800509c <HAL_RCC_ClockConfig+0x90>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	079f      	lsls	r7, r3, #30
 80050ba:	f140 80d3 	bpl.w	8005264 <HAL_RCC_ClockConfig+0x258>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050be:	0758      	lsls	r0, r3, #29
 80050c0:	d504      	bpl.n	80050cc <HAL_RCC_ClockConfig+0xc0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050c2:	4982      	ldr	r1, [pc, #520]	; (80052cc <HAL_RCC_ClockConfig+0x2c0>)
 80050c4:	688a      	ldr	r2, [r1, #8]
 80050c6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80050ca:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050cc:	0719      	lsls	r1, r3, #28
 80050ce:	d506      	bpl.n	80050de <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80050d0:	4a7e      	ldr	r2, [pc, #504]	; (80052cc <HAL_RCC_ClockConfig+0x2c0>)
 80050d2:	6893      	ldr	r3, [r2, #8]
 80050d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80050d8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80050dc:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050de:	4a7b      	ldr	r2, [pc, #492]	; (80052cc <HAL_RCC_ClockConfig+0x2c0>)
 80050e0:	68a1      	ldr	r1, [r4, #8]
 80050e2:	6893      	ldr	r3, [r2, #8]
 80050e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050e8:	430b      	orrs	r3, r1
 80050ea:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050ec:	4e76      	ldr	r6, [pc, #472]	; (80052c8 <HAL_RCC_ClockConfig+0x2bc>)
 80050ee:	6832      	ldr	r2, [r6, #0]
 80050f0:	f002 020f 	and.w	r2, r2, #15
 80050f4:	42aa      	cmp	r2, r5
 80050f6:	d837      	bhi.n	8005168 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	075a      	lsls	r2, r3, #29
 80050fc:	d506      	bpl.n	800510c <HAL_RCC_ClockConfig+0x100>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050fe:	4973      	ldr	r1, [pc, #460]	; (80052cc <HAL_RCC_ClockConfig+0x2c0>)
 8005100:	68e0      	ldr	r0, [r4, #12]
 8005102:	688a      	ldr	r2, [r1, #8]
 8005104:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005108:	4302      	orrs	r2, r0
 800510a:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800510c:	071b      	lsls	r3, r3, #28
 800510e:	d443      	bmi.n	8005198 <HAL_RCC_ClockConfig+0x18c>
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005110:	4a6e      	ldr	r2, [pc, #440]	; (80052cc <HAL_RCC_ClockConfig+0x2c0>)
 8005112:	6893      	ldr	r3, [r2, #8]
 8005114:	f003 030c 	and.w	r3, r3, #12
 8005118:	2b04      	cmp	r3, #4
 800511a:	f000 80d3 	beq.w	80052c4 <HAL_RCC_ClockConfig+0x2b8>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800511e:	6893      	ldr	r3, [r2, #8]
 8005120:	f003 030c 	and.w	r3, r3, #12
 8005124:	2b08      	cmp	r3, #8
 8005126:	f000 809b 	beq.w	8005260 <HAL_RCC_ClockConfig+0x254>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800512a:	6893      	ldr	r3, [r2, #8]
 800512c:	f003 030c 	and.w	r3, r3, #12
 8005130:	2b0c      	cmp	r3, #12
 8005132:	d075      	beq.n	8005220 <HAL_RCC_ClockConfig+0x214>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8005134:	2300      	movs	r3, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005136:	4a65      	ldr	r2, [pc, #404]	; (80052cc <HAL_RCC_ClockConfig+0x2c0>)
 8005138:	4c65      	ldr	r4, [pc, #404]	; (80052d0 <HAL_RCC_ClockConfig+0x2c4>)
 800513a:	6892      	ldr	r2, [r2, #8]
  return HAL_InitTick(uwTickPrio);
 800513c:	4865      	ldr	r0, [pc, #404]	; (80052d4 <HAL_RCC_ClockConfig+0x2c8>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800513e:	4966      	ldr	r1, [pc, #408]	; (80052d8 <HAL_RCC_ClockConfig+0x2cc>)
  return HAL_InitTick(uwTickPrio);
 8005140:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005142:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005146:	5ca2      	ldrb	r2, [r4, r2]
 8005148:	f002 021f 	and.w	r2, r2, #31
 800514c:	40d3      	lsrs	r3, r2
 800514e:	600b      	str	r3, [r1, #0]
}
 8005150:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005154:	f7fe bb6c 	b.w	8003830 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005158:	079e      	lsls	r6, r3, #30
 800515a:	d4b0      	bmi.n	80050be <HAL_RCC_ClockConfig+0xb2>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800515c:	4e5a      	ldr	r6, [pc, #360]	; (80052c8 <HAL_RCC_ClockConfig+0x2bc>)
 800515e:	6832      	ldr	r2, [r6, #0]
 8005160:	f002 020f 	and.w	r2, r2, #15
 8005164:	42aa      	cmp	r2, r5
 8005166:	d9c7      	bls.n	80050f8 <HAL_RCC_ClockConfig+0xec>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005168:	6832      	ldr	r2, [r6, #0]
 800516a:	f022 020f 	bic.w	r2, r2, #15
 800516e:	432a      	orrs	r2, r5
 8005170:	6032      	str	r2, [r6, #0]
    tickstart = HAL_GetTick();
 8005172:	f7fe fbab 	bl	80038cc <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005176:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800517a:	4680      	mov	r8, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800517c:	6833      	ldr	r3, [r6, #0]
 800517e:	f003 030f 	and.w	r3, r3, #15
 8005182:	42ab      	cmp	r3, r5
 8005184:	d0b8      	beq.n	80050f8 <HAL_RCC_ClockConfig+0xec>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005186:	f7fe fba1 	bl	80038cc <HAL_GetTick>
 800518a:	eba0 0008 	sub.w	r0, r0, r8
 800518e:	42b8      	cmp	r0, r7
 8005190:	d9f4      	bls.n	800517c <HAL_RCC_ClockConfig+0x170>
        return HAL_TIMEOUT;
 8005192:	2003      	movs	r0, #3
}
 8005194:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005198:	4a4c      	ldr	r2, [pc, #304]	; (80052cc <HAL_RCC_ClockConfig+0x2c0>)
 800519a:	6921      	ldr	r1, [r4, #16]
 800519c:	6893      	ldr	r3, [r2, #8]
 800519e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80051a2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80051a6:	6093      	str	r3, [r2, #8]
 80051a8:	e7b2      	b.n	8005110 <HAL_RCC_ClockConfig+0x104>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051aa:	4948      	ldr	r1, [pc, #288]	; (80052cc <HAL_RCC_ClockConfig+0x2c0>)
 80051ac:	6808      	ldr	r0, [r1, #0]
 80051ae:	0180      	lsls	r0, r0, #6
 80051b0:	f57f af41 	bpl.w	8005036 <HAL_RCC_ClockConfig+0x2a>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051b4:	68ce      	ldr	r6, [r1, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051b6:	68c8      	ldr	r0, [r1, #12]
      if(pllfreq > 80000000U)
 80051b8:	4f48      	ldr	r7, [pc, #288]	; (80052dc <HAL_RCC_ClockConfig+0x2d0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80051ba:	f006 0603 	and.w	r6, r6, #3

  switch (pllsource)
 80051be:	2e03      	cmp	r6, #3
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051c0:	68ce      	ldr	r6, [r1, #12]
 80051c2:	bf0c      	ite	eq
 80051c4:	4946      	ldreq	r1, [pc, #280]	; (80052e0 <HAL_RCC_ClockConfig+0x2d4>)
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051c6:	4947      	ldrne	r1, [pc, #284]	; (80052e4 <HAL_RCC_ClockConfig+0x2d8>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051c8:	f3c0 1003 	ubfx	r0, r0, #4, #4
 80051cc:	3001      	adds	r0, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051ce:	fbb1 f1f0 	udiv	r1, r1, r0
 80051d2:	f3c6 2006 	ubfx	r0, r6, #8, #7
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051d6:	4e3d      	ldr	r6, [pc, #244]	; (80052cc <HAL_RCC_ClockConfig+0x2c0>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051d8:	fb01 f100 	mul.w	r1, r1, r0
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051dc:	68f0      	ldr	r0, [r6, #12]
 80051de:	f3c0 6041 	ubfx	r0, r0, #25, #2
 80051e2:	3001      	adds	r0, #1
 80051e4:	0040      	lsls	r0, r0, #1
  sysclockfreq = pllvco/pllr;
 80051e6:	fbb1 f1f0 	udiv	r1, r1, r0
      if(pllfreq > 80000000U)
 80051ea:	42b9      	cmp	r1, r7
 80051ec:	f67f af48 	bls.w	8005080 <HAL_RCC_ClockConfig+0x74>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80051f0:	68b1      	ldr	r1, [r6, #8]
 80051f2:	f011 0ff0 	tst.w	r1, #240	; 0xf0
 80051f6:	d007      	beq.n	8005208 <HAL_RCC_ClockConfig+0x1fc>
 80051f8:	f013 0802 	ands.w	r8, r3, #2
 80051fc:	f43f af42 	beq.w	8005084 <HAL_RCC_ClockConfig+0x78>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005200:	68a3      	ldr	r3, [r4, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	f47f af3c 	bne.w	8005080 <HAL_RCC_ClockConfig+0x74>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005208:	4930      	ldr	r1, [pc, #192]	; (80052cc <HAL_RCC_ClockConfig+0x2c0>)
 800520a:	688b      	ldr	r3, [r1, #8]
 800520c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005210:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005214:	608b      	str	r3, [r1, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005216:	f04f 0880 	mov.w	r8, #128	; 0x80
 800521a:	e733      	b.n	8005084 <HAL_RCC_ClockConfig+0x78>
    return HAL_ERROR;
 800521c:	2001      	movs	r0, #1
}
 800521e:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005220:	68d0      	ldr	r0, [r2, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005222:	68d3      	ldr	r3, [r2, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005224:	68d2      	ldr	r2, [r2, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005226:	f000 0003 	and.w	r0, r0, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800522a:	f3c3 1303 	ubfx	r3, r3, #4, #4
    switch (pllsource)
 800522e:	2803      	cmp	r0, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005230:	f3c2 2206 	ubfx	r2, r2, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005234:	f103 0101 	add.w	r1, r3, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005238:	bf0c      	ite	eq
 800523a:	4b29      	ldreq	r3, [pc, #164]	; (80052e0 <HAL_RCC_ClockConfig+0x2d4>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800523c:	4b29      	ldrne	r3, [pc, #164]	; (80052e4 <HAL_RCC_ClockConfig+0x2d8>)
 800523e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005242:	fb03 f302 	mul.w	r3, r3, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005246:	4a21      	ldr	r2, [pc, #132]	; (80052cc <HAL_RCC_ClockConfig+0x2c0>)
 8005248:	68d2      	ldr	r2, [r2, #12]
 800524a:	f3c2 6241 	ubfx	r2, r2, #25, #2
 800524e:	3201      	adds	r2, #1
 8005250:	0052      	lsls	r2, r2, #1
    sysclockfreq = pllvco/pllr;
 8005252:	fbb3 f3f2 	udiv	r3, r3, r2
 8005256:	e76e      	b.n	8005136 <HAL_RCC_ClockConfig+0x12a>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005258:	0399      	lsls	r1, r3, #14
 800525a:	f53f af00 	bmi.w	800505e <HAL_RCC_ClockConfig+0x52>
 800525e:	e6ea      	b.n	8005036 <HAL_RCC_ClockConfig+0x2a>
    sysclockfreq = HSE_VALUE;
 8005260:	4b1f      	ldr	r3, [pc, #124]	; (80052e0 <HAL_RCC_ClockConfig+0x2d4>)
 8005262:	e768      	b.n	8005136 <HAL_RCC_ClockConfig+0x12a>
    if(hpre == RCC_SYSCLK_DIV2)
 8005264:	f1b8 0f00 	cmp.w	r8, #0
 8005268:	f43f af40 	beq.w	80050ec <HAL_RCC_ClockConfig+0xe0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800526c:	68b3      	ldr	r3, [r6, #8]
 800526e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005272:	60b3      	str	r3, [r6, #8]
 8005274:	e73a      	b.n	80050ec <HAL_RCC_ClockConfig+0xe0>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005276:	68d8      	ldr	r0, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005278:	68d9      	ldr	r1, [r3, #12]
      if(pllfreq > 80000000U)
 800527a:	4e18      	ldr	r6, [pc, #96]	; (80052dc <HAL_RCC_ClockConfig+0x2d0>)
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800527c:	f000 0003 	and.w	r0, r0, #3
    switch (pllsource)
 8005280:	2803      	cmp	r0, #3
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005282:	68d8      	ldr	r0, [r3, #12]
 8005284:	bf0c      	ite	eq
 8005286:	4b16      	ldreq	r3, [pc, #88]	; (80052e0 <HAL_RCC_ClockConfig+0x2d4>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005288:	4b16      	ldrne	r3, [pc, #88]	; (80052e4 <HAL_RCC_ClockConfig+0x2d8>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800528a:	f3c1 1103 	ubfx	r1, r1, #4, #4
 800528e:	3101      	adds	r1, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005290:	fbb3 f3f1 	udiv	r3, r3, r1
 8005294:	f3c0 2106 	ubfx	r1, r0, #8, #7
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005298:	480c      	ldr	r0, [pc, #48]	; (80052cc <HAL_RCC_ClockConfig+0x2c0>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800529a:	fb03 f301 	mul.w	r3, r3, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800529e:	68c1      	ldr	r1, [r0, #12]
 80052a0:	f3c1 6141 	ubfx	r1, r1, #25, #2
 80052a4:	3101      	adds	r1, #1
 80052a6:	0049      	lsls	r1, r1, #1
    sysclockfreq = pllvco/pllr;
 80052a8:	fbb3 f3f1 	udiv	r3, r3, r1
      if(pllfreq > 80000000U)
 80052ac:	42b3      	cmp	r3, r6
 80052ae:	f67f aee7 	bls.w	8005080 <HAL_RCC_ClockConfig+0x74>
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80052b2:	6883      	ldr	r3, [r0, #8]
 80052b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80052b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052bc:	6083      	str	r3, [r0, #8]
        hpre = RCC_SYSCLK_DIV2;
 80052be:	f04f 0880 	mov.w	r8, #128	; 0x80
 80052c2:	e6df      	b.n	8005084 <HAL_RCC_ClockConfig+0x78>
    sysclockfreq = HSI_VALUE;
 80052c4:	4b07      	ldr	r3, [pc, #28]	; (80052e4 <HAL_RCC_ClockConfig+0x2d8>)
 80052c6:	e736      	b.n	8005136 <HAL_RCC_ClockConfig+0x12a>
 80052c8:	40022000 	.word	0x40022000
 80052cc:	40021000 	.word	0x40021000
 80052d0:	08008b44 	.word	0x08008b44
 80052d4:	200003e0 	.word	0x200003e0
 80052d8:	200003d8 	.word	0x200003d8
 80052dc:	04c4b400 	.word	0x04c4b400
 80052e0:	016e3600 	.word	0x016e3600
 80052e4:	00f42400 	.word	0x00f42400

080052e8 <HAL_RCC_GetSysClockFreq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80052e8:	4b18      	ldr	r3, [pc, #96]	; (800534c <HAL_RCC_GetSysClockFreq+0x64>)
 80052ea:	689a      	ldr	r2, [r3, #8]
 80052ec:	f002 020c 	and.w	r2, r2, #12
 80052f0:	2a04      	cmp	r2, #4
 80052f2:	d027      	beq.n	8005344 <HAL_RCC_GetSysClockFreq+0x5c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	f002 020c 	and.w	r2, r2, #12
 80052fa:	2a08      	cmp	r2, #8
 80052fc:	d024      	beq.n	8005348 <HAL_RCC_GetSysClockFreq+0x60>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	f002 020c 	and.w	r2, r2, #12
 8005304:	2a0c      	cmp	r2, #12
 8005306:	d001      	beq.n	800530c <HAL_RCC_GetSysClockFreq+0x24>
    sysclockfreq = 0U;
 8005308:	2000      	movs	r0, #0
}
 800530a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800530c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800530e:	68d8      	ldr	r0, [r3, #12]
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005310:	68db      	ldr	r3, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005312:	f001 0103 	and.w	r1, r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005316:	f3c0 1003 	ubfx	r0, r0, #4, #4
    switch (pllsource)
 800531a:	2903      	cmp	r1, #3
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800531c:	f3c3 2306 	ubfx	r3, r3, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005320:	f100 0201 	add.w	r2, r0, #1
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005324:	bf0c      	ite	eq
 8005326:	480a      	ldreq	r0, [pc, #40]	; (8005350 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005328:	480a      	ldrne	r0, [pc, #40]	; (8005354 <HAL_RCC_GetSysClockFreq+0x6c>)
 800532a:	fbb0 f0f2 	udiv	r0, r0, r2
 800532e:	fb00 f003 	mul.w	r0, r0, r3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005332:	4b06      	ldr	r3, [pc, #24]	; (800534c <HAL_RCC_GetSysClockFreq+0x64>)
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	f3c3 6341 	ubfx	r3, r3, #25, #2
 800533a:	3301      	adds	r3, #1
 800533c:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800533e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005342:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005344:	4803      	ldr	r0, [pc, #12]	; (8005354 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005346:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8005348:	4801      	ldr	r0, [pc, #4]	; (8005350 <HAL_RCC_GetSysClockFreq+0x68>)
 800534a:	4770      	bx	lr
 800534c:	40021000 	.word	0x40021000
 8005350:	016e3600 	.word	0x016e3600
 8005354:	00f42400 	.word	0x00f42400

08005358 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8005358:	4b01      	ldr	r3, [pc, #4]	; (8005360 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800535a:	6818      	ldr	r0, [r3, #0]
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	200003d8 	.word	0x200003d8

08005364 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005364:	4b05      	ldr	r3, [pc, #20]	; (800537c <HAL_RCC_GetPCLK1Freq+0x18>)
 8005366:	4a06      	ldr	r2, [pc, #24]	; (8005380 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005368:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800536a:	4906      	ldr	r1, [pc, #24]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800536c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005370:	6808      	ldr	r0, [r1, #0]
 8005372:	5cd3      	ldrb	r3, [r2, r3]
 8005374:	f003 031f 	and.w	r3, r3, #31
}
 8005378:	40d8      	lsrs	r0, r3
 800537a:	4770      	bx	lr
 800537c:	40021000 	.word	0x40021000
 8005380:	08008b54 	.word	0x08008b54
 8005384:	200003d8 	.word	0x200003d8

08005388 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005388:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800538a:	4a06      	ldr	r2, [pc, #24]	; (80053a4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800538c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800538e:	4906      	ldr	r1, [pc, #24]	; (80053a8 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005390:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005394:	6808      	ldr	r0, [r1, #0]
 8005396:	5cd3      	ldrb	r3, [r2, r3]
 8005398:	f003 031f 	and.w	r3, r3, #31
}
 800539c:	40d8      	lsrs	r0, r3
 800539e:	4770      	bx	lr
 80053a0:	40021000 	.word	0x40021000
 80053a4:	08008b54 	.word	0x08008b54
 80053a8:	200003d8 	.word	0x200003d8

080053ac <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80053ac:	4a02      	ldr	r2, [pc, #8]	; (80053b8 <HAL_RCC_EnableCSS+0xc>)
 80053ae:	6813      	ldr	r3, [r2, #0]
 80053b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053b4:	6013      	str	r3, [r2, #0]
}
 80053b6:	4770      	bx	lr
 80053b8:	40021000 	.word	0x40021000

080053bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c0:	6803      	ldr	r3, [r0, #0]
{
 80053c2:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053c4:	f413 2000 	ands.w	r0, r3, #524288	; 0x80000
{
 80053c8:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80053ca:	d057      	beq.n	800547c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053cc:	4bb8      	ldr	r3, [pc, #736]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80053d0:	00d0      	lsls	r0, r2, #3
 80053d2:	f140 813f 	bpl.w	8005654 <HAL_RCCEx_PeriphCLKConfig+0x298>
    FlagStatus       pwrclkchanged = RESET;
 80053d6:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053d8:	4db6      	ldr	r5, [pc, #728]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>)
 80053da:	682b      	ldr	r3, [r5, #0]
 80053dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053e0:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80053e2:	f7fe fa73 	bl	80038cc <HAL_GetTick>
 80053e6:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053e8:	e005      	b.n	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053ea:	f7fe fa6f 	bl	80038cc <HAL_GetTick>
 80053ee:	1b80      	subs	r0, r0, r6
 80053f0:	2802      	cmp	r0, #2
 80053f2:	f200 8141 	bhi.w	8005678 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80053f6:	682b      	ldr	r3, [r5, #0]
 80053f8:	05d9      	lsls	r1, r3, #23
 80053fa:	d5f6      	bpl.n	80053ea <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80053fc:	4bac      	ldr	r3, [pc, #688]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80053fe:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8005400:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005404:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8005408:	d028      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800540a:	428a      	cmp	r2, r1
 800540c:	d026      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800540e:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005412:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005416:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800541a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800541e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005422:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005426:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800542a:	f420 7540 	bic.w	r5, r0, #768	; 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800542e:	07c2      	lsls	r2, r0, #31
        RCC->BDCR = tmpregister;
 8005430:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005434:	d512      	bpl.n	800545c <HAL_RCCEx_PeriphCLKConfig+0xa0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005436:	461d      	mov	r5, r3
        tickstart = HAL_GetTick();
 8005438:	f7fe fa48 	bl	80038cc <HAL_GetTick>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800543c:	f241 3688 	movw	r6, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8005440:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005442:	e006      	b.n	8005452 <HAL_RCCEx_PeriphCLKConfig+0x96>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005444:	f7fe fa42 	bl	80038cc <HAL_GetTick>
 8005448:	eba0 0008 	sub.w	r0, r0, r8
 800544c:	42b0      	cmp	r0, r6
 800544e:	f200 8113 	bhi.w	8005678 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005452:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 8005456:	079b      	lsls	r3, r3, #30
 8005458:	d5f4      	bpl.n	8005444 <HAL_RCCEx_PeriphCLKConfig+0x88>
 800545a:	6d21      	ldr	r1, [r4, #80]	; 0x50
      }
      
      if(ret == HAL_OK)
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800545c:	4a94      	ldr	r2, [pc, #592]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800545e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005462:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005466:	430b      	orrs	r3, r1
 8005468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800546c:	2000      	movs	r0, #0
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800546e:	b127      	cbz	r7, 800547a <HAL_RCCEx_PeriphCLKConfig+0xbe>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005470:	4a8f      	ldr	r2, [pc, #572]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005472:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005478:	6593      	str	r3, [r2, #88]	; 0x58
 800547a:	6823      	ldr	r3, [r4, #0]
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800547c:	07dd      	lsls	r5, r3, #31
 800547e:	d508      	bpl.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005480:	498b      	ldr	r1, [pc, #556]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005482:	6865      	ldr	r5, [r4, #4]
 8005484:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005488:	f022 0203 	bic.w	r2, r2, #3
 800548c:	432a      	orrs	r2, r5
 800548e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005492:	0799      	lsls	r1, r3, #30
 8005494:	d508      	bpl.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005496:	4986      	ldr	r1, [pc, #536]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005498:	68a5      	ldr	r5, [r4, #8]
 800549a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800549e:	f022 020c 	bic.w	r2, r2, #12
 80054a2:	432a      	orrs	r2, r5
 80054a4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054a8:	075a      	lsls	r2, r3, #29
 80054aa:	d508      	bpl.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054ac:	4980      	ldr	r1, [pc, #512]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054ae:	68e5      	ldr	r5, [r4, #12]
 80054b0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054b4:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80054b8:	432a      	orrs	r2, r5
 80054ba:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054be:	071f      	lsls	r7, r3, #28
 80054c0:	d508      	bpl.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054c2:	497b      	ldr	r1, [pc, #492]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054c4:	6925      	ldr	r5, [r4, #16]
 80054c6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054ca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80054ce:	432a      	orrs	r2, r5
 80054d0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054d4:	06de      	lsls	r6, r3, #27
 80054d6:	d508      	bpl.n	80054ea <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054d8:	4975      	ldr	r1, [pc, #468]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054da:	6965      	ldr	r5, [r4, #20]
 80054dc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054e0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80054e4:	432a      	orrs	r2, r5
 80054e6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80054ea:	069d      	lsls	r5, r3, #26
 80054ec:	d508      	bpl.n	8005500 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80054ee:	4970      	ldr	r1, [pc, #448]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80054f0:	69a5      	ldr	r5, [r4, #24]
 80054f2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80054f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054fa:	432a      	orrs	r2, r5
 80054fc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005500:	0659      	lsls	r1, r3, #25
 8005502:	d508      	bpl.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005504:	496a      	ldr	r1, [pc, #424]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005506:	69e5      	ldr	r5, [r4, #28]
 8005508:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800550c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8005510:	432a      	orrs	r2, r5
 8005512:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005516:	061a      	lsls	r2, r3, #24
 8005518:	d508      	bpl.n	800552c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800551a:	4965      	ldr	r1, [pc, #404]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800551c:	6a25      	ldr	r5, [r4, #32]
 800551e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005522:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8005526:	432a      	orrs	r2, r5
 8005528:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800552c:	05df      	lsls	r7, r3, #23
 800552e:	d508      	bpl.n	8005542 <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005530:	495f      	ldr	r1, [pc, #380]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005532:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005534:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005538:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800553c:	432a      	orrs	r2, r5
 800553e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005542:	039e      	lsls	r6, r3, #14
 8005544:	d508      	bpl.n	8005558 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005546:	495a      	ldr	r1, [pc, #360]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005548:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800554a:	f8d1 209c 	ldr.w	r2, [r1, #156]	; 0x9c
 800554e:	f022 0203 	bic.w	r2, r2, #3
 8005552:	432a      	orrs	r2, r5
 8005554:	f8c1 209c 	str.w	r2, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005558:	059d      	lsls	r5, r3, #22
 800555a:	d508      	bpl.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800555c:	4954      	ldr	r1, [pc, #336]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800555e:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 8005560:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005564:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8005568:	432a      	orrs	r2, r5
 800556a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800556e:	0559      	lsls	r1, r3, #21
 8005570:	d50b      	bpl.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005572:	494f      	ldr	r1, [pc, #316]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005574:	6b25      	ldr	r5, [r4, #48]	; 0x30
 8005576:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800557a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800557e:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005580:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005584:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005588:	d078      	beq.n	800567c <HAL_RCCEx_PeriphCLKConfig+0x2c0>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800558a:	051a      	lsls	r2, r3, #20
 800558c:	d50b      	bpl.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800558e:	4948      	ldr	r1, [pc, #288]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005590:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8005592:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005596:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 800559a:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800559c:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80055a0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80055a4:	d06f      	beq.n	8005686 <HAL_RCCEx_PeriphCLKConfig+0x2ca>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80055a6:	04df      	lsls	r7, r3, #19
 80055a8:	d50b      	bpl.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055aa:	4941      	ldr	r1, [pc, #260]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055ac:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80055ae:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80055b2:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80055b6:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055b8:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80055bc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80055c0:	d066      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80055c2:	049e      	lsls	r6, r3, #18
 80055c4:	d50b      	bpl.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055c6:	493a      	ldr	r1, [pc, #232]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055c8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80055ca:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80055ce:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80055d2:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055d4:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80055d8:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055dc:	d05d      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055de:	045d      	lsls	r5, r3, #17
 80055e0:	d50b      	bpl.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x23e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055e2:	4933      	ldr	r1, [pc, #204]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80055e4:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80055e6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80055ea:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 80055ee:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055f0:	f1b5 6f00 	cmp.w	r5, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055f4:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055f8:	d054      	beq.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x2e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80055fa:	0419      	lsls	r1, r3, #16
 80055fc:	d50b      	bpl.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80055fe:	492c      	ldr	r1, [pc, #176]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005600:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8005602:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005606:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800560a:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800560c:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005610:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005614:	d050      	beq.n	80056b8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005616:	03da      	lsls	r2, r3, #15
 8005618:	d50b      	bpl.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800561a:	4925      	ldr	r1, [pc, #148]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800561c:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 800561e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005622:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8005626:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005628:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800562c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005630:	d047      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x306>
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005632:	035b      	lsls	r3, r3, #13
 8005634:	d50b      	bpl.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005636:	4a1e      	ldr	r2, [pc, #120]	; (80056b0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8005638:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800563a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
 800563e:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005642:	430b      	orrs	r3, r1

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005644:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005648:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800564c:	d00d      	beq.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  }

#endif /* QUADSPI */

  return status;
}
 800564e:	b002      	add	sp, #8
 8005650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8005654:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005656:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800565a:	659a      	str	r2, [r3, #88]	; 0x58
 800565c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800565e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005662:	9301      	str	r3, [sp, #4]
 8005664:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005666:	2701      	movs	r7, #1
 8005668:	e6b6      	b.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800566a:	68d3      	ldr	r3, [r2, #12]
 800566c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005670:	60d3      	str	r3, [r2, #12]
}
 8005672:	b002      	add	sp, #8
 8005674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        ret = HAL_TIMEOUT;
 8005678:	2003      	movs	r0, #3
 800567a:	e6f8      	b.n	800546e <HAL_RCCEx_PeriphCLKConfig+0xb2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800567c:	68ca      	ldr	r2, [r1, #12]
 800567e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005682:	60ca      	str	r2, [r1, #12]
 8005684:	e781      	b.n	800558a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005686:	68ca      	ldr	r2, [r1, #12]
 8005688:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800568c:	60ca      	str	r2, [r1, #12]
 800568e:	e78a      	b.n	80055a6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005690:	68ca      	ldr	r2, [r1, #12]
 8005692:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005696:	60ca      	str	r2, [r1, #12]
 8005698:	e793      	b.n	80055c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800569a:	68ca      	ldr	r2, [r1, #12]
 800569c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80056a0:	60ca      	str	r2, [r1, #12]
 80056a2:	e79c      	b.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x222>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80056a4:	68ca      	ldr	r2, [r1, #12]
 80056a6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80056aa:	60ca      	str	r2, [r1, #12]
 80056ac:	e7a5      	b.n	80055fa <HAL_RCCEx_PeriphCLKConfig+0x23e>
 80056ae:	bf00      	nop
 80056b0:	40021000 	.word	0x40021000
 80056b4:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056b8:	68ca      	ldr	r2, [r1, #12]
 80056ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80056be:	60ca      	str	r2, [r1, #12]
 80056c0:	e7a9      	b.n	8005616 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80056c2:	68ca      	ldr	r2, [r1, #12]
 80056c4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80056c8:	60ca      	str	r2, [r1, #12]
 80056ca:	e7b2      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x276>

080056cc <HAL_TIM_PWM_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056cc:	2800      	cmp	r0, #0
 80056ce:	f000 809c 	beq.w	800580a <HAL_TIM_PWM_Init+0x13e>
{
 80056d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056d4:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80056d8:	4604      	mov	r4, r0
 80056da:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d039      	beq.n	8005756 <HAL_TIM_PWM_Init+0x8a>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e2:	6823      	ldr	r3, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056e4:	4e55      	ldr	r6, [pc, #340]	; (800583c <HAL_TIM_PWM_Init+0x170>)
 80056e6:	69a5      	ldr	r5, [r4, #24]
 80056e8:	68e0      	ldr	r0, [r4, #12]
 80056ea:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 80056ec:	2202      	movs	r2, #2
 80056ee:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f2:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 80056f4:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056f6:	f000 808a 	beq.w	800580e <HAL_TIM_PWM_Init+0x142>
 80056fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056fe:	d066      	beq.n	80057ce <HAL_TIM_PWM_Init+0x102>
 8005700:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8005704:	42b3      	cmp	r3, r6
 8005706:	d02b      	beq.n	8005760 <HAL_TIM_PWM_Init+0x94>
 8005708:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800570c:	42b3      	cmp	r3, r6
 800570e:	d027      	beq.n	8005760 <HAL_TIM_PWM_Init+0x94>
 8005710:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005714:	42b3      	cmp	r3, r6
 8005716:	d023      	beq.n	8005760 <HAL_TIM_PWM_Init+0x94>
 8005718:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 800571c:	42b3      	cmp	r3, r6
 800571e:	d01f      	beq.n	8005760 <HAL_TIM_PWM_Init+0x94>
 8005720:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8005724:	42b3      	cmp	r3, r6
 8005726:	f000 8083 	beq.w	8005830 <HAL_TIM_PWM_Init+0x164>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800572a:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 800572e:	42b3      	cmp	r3, r6
 8005730:	d07c      	beq.n	800582c <HAL_TIM_PWM_Init+0x160>
 8005732:	4e43      	ldr	r6, [pc, #268]	; (8005840 <HAL_TIM_PWM_Init+0x174>)
 8005734:	42b3      	cmp	r3, r6
 8005736:	d079      	beq.n	800582c <HAL_TIM_PWM_Init+0x160>
 8005738:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800573c:	42b3      	cmp	r3, r6
 800573e:	d075      	beq.n	800582c <HAL_TIM_PWM_Init+0x160>
 8005740:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005744:	42b3      	cmp	r3, r6
 8005746:	d071      	beq.n	800582c <HAL_TIM_PWM_Init+0x160>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800574c:	432a      	orrs	r2, r5

  TIMx->CR1 = tmpcr1;
 800574e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005750:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005752:	6299      	str	r1, [r3, #40]	; 0x28
 8005754:	e017      	b.n	8005786 <HAL_TIM_PWM_Init+0xba>
    htim->Lock = HAL_UNLOCKED;
 8005756:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800575a:	f7fd ff21 	bl	80035a0 <HAL_TIM_PWM_MspInit>
 800575e:	e7c0      	b.n	80056e2 <HAL_TIM_PWM_Init+0x16>
    tmpcr1 |= Structure->CounterMode;
 8005760:	68a6      	ldr	r6, [r4, #8]

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005762:	4f38      	ldr	r7, [pc, #224]	; (8005844 <HAL_TIM_PWM_Init+0x178>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005764:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005768:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800576a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800576c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005770:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005772:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005776:	432a      	orrs	r2, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005778:	42bb      	cmp	r3, r7
  TIMx->CR1 = tmpcr1;
 800577a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800577c:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800577e:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005780:	d133      	bne.n	80057ea <HAL_TIM_PWM_Init+0x11e>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005782:	6962      	ldr	r2, [r4, #20]
 8005784:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005786:	2201      	movs	r2, #1
 8005788:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800578a:	691a      	ldr	r2, [r3, #16]
 800578c:	07d2      	lsls	r2, r2, #31
 800578e:	d503      	bpl.n	8005798 <HAL_TIM_PWM_Init+0xcc>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005790:	691a      	ldr	r2, [r3, #16]
 8005792:	f022 0201 	bic.w	r2, r2, #1
 8005796:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005798:	2301      	movs	r3, #1
 800579a:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  return HAL_OK;
 800579e:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80057a4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80057a8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80057ac:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 80057b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80057b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 80057bc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80057c0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 80057c4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 80057c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 80057cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 80057ce:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057d0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80057d6:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80057d8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057dc:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057e2:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80057e4:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057e6:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80057e8:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057ea:	4a17      	ldr	r2, [pc, #92]	; (8005848 <HAL_TIM_PWM_Init+0x17c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d0c8      	beq.n	8005782 <HAL_TIM_PWM_Init+0xb6>
 80057f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d0c4      	beq.n	8005782 <HAL_TIM_PWM_Init+0xb6>
 80057f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d0c0      	beq.n	8005782 <HAL_TIM_PWM_Init+0xb6>
 8005800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005804:	4293      	cmp	r3, r2
 8005806:	d1be      	bne.n	8005786 <HAL_TIM_PWM_Init+0xba>
 8005808:	e7bb      	b.n	8005782 <HAL_TIM_PWM_Init+0xb6>
    return HAL_ERROR;
 800580a:	2001      	movs	r0, #1
}
 800580c:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800580e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005810:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005812:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005816:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8005818:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800581c:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800581e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005822:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8005824:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005826:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005828:	6299      	str	r1, [r3, #40]	; 0x28
 800582a:	e7aa      	b.n	8005782 <HAL_TIM_PWM_Init+0xb6>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800582c:	6926      	ldr	r6, [r4, #16]
 800582e:	e7f3      	b.n	8005818 <HAL_TIM_PWM_Init+0x14c>
    tmpcr1 |= Structure->CounterMode;
 8005830:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005832:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005836:	4332      	orrs	r2, r6
 8005838:	e77b      	b.n	8005732 <HAL_TIM_PWM_Init+0x66>
 800583a:	bf00      	nop
 800583c:	40012c00 	.word	0x40012c00
 8005840:	40014400 	.word	0x40014400
 8005844:	40013400 	.word	0x40013400
 8005848:	40014000 	.word	0x40014000

0800584c <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800584c:	2800      	cmp	r0, #0
 800584e:	f000 80ca 	beq.w	80059e6 <HAL_TIM_Encoder_Init+0x19a>
{
 8005852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8005854:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005858:	4604      	mov	r4, r0
 800585a:	460d      	mov	r5, r1
 800585c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005860:	2b00      	cmp	r3, #0
 8005862:	d046      	beq.n	80058f2 <HAL_TIM_Encoder_Init+0xa6>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005864:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005866:	4e6c      	ldr	r6, [pc, #432]	; (8005a18 <HAL_TIM_Encoder_Init+0x1cc>)
 8005868:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800586c:	68e0      	ldr	r0, [r4, #12]
 800586e:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	2202      	movs	r2, #2
 8005872:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005876:	689a      	ldr	r2, [r3, #8]
 8005878:	f422 32a0 	bic.w	r2, r2, #81920	; 0x14000
 800587c:	f022 0207 	bic.w	r2, r2, #7
 8005880:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005882:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8005884:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005886:	f000 80b0 	beq.w	80059ea <HAL_TIM_Encoder_Init+0x19e>
 800588a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588e:	f000 808b 	beq.w	80059a8 <HAL_TIM_Encoder_Init+0x15c>
 8005892:	f5a6 3694 	sub.w	r6, r6, #75776	; 0x12800
 8005896:	42b3      	cmp	r3, r6
 8005898:	d030      	beq.n	80058fc <HAL_TIM_Encoder_Init+0xb0>
 800589a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800589e:	42b3      	cmp	r3, r6
 80058a0:	d02c      	beq.n	80058fc <HAL_TIM_Encoder_Init+0xb0>
 80058a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80058a6:	42b3      	cmp	r3, r6
 80058a8:	d028      	beq.n	80058fc <HAL_TIM_Encoder_Init+0xb0>
 80058aa:	f506 3694 	add.w	r6, r6, #75776	; 0x12800
 80058ae:	42b3      	cmp	r3, r6
 80058b0:	d024      	beq.n	80058fc <HAL_TIM_Encoder_Init+0xb0>
 80058b2:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 80058b6:	42b3      	cmp	r3, r6
 80058b8:	f000 80a9 	beq.w	8005a0e <HAL_TIM_Encoder_Init+0x1c2>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058bc:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 80058c0:	42b3      	cmp	r3, r6
 80058c2:	f000 80a2 	beq.w	8005a0a <HAL_TIM_Encoder_Init+0x1be>
 80058c6:	4e55      	ldr	r6, [pc, #340]	; (8005a1c <HAL_TIM_Encoder_Init+0x1d0>)
 80058c8:	42b3      	cmp	r3, r6
 80058ca:	f000 809e 	beq.w	8005a0a <HAL_TIM_Encoder_Init+0x1be>
 80058ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80058d2:	42b3      	cmp	r3, r6
 80058d4:	f000 8099 	beq.w	8005a0a <HAL_TIM_Encoder_Init+0x1be>
 80058d8:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 80058dc:	42b3      	cmp	r3, r6
 80058de:	f000 8094 	beq.w	8005a0a <HAL_TIM_Encoder_Init+0x1be>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80058e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80058e6:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 80058ea:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80058ec:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80058ee:	6299      	str	r1, [r3, #40]	; 0x28
 80058f0:	e018      	b.n	8005924 <HAL_TIM_Encoder_Init+0xd8>
    htim->Lock = HAL_UNLOCKED;
 80058f2:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80058f6:	f7fd fe89 	bl	800360c <HAL_TIM_Encoder_MspInit>
 80058fa:	e7b3      	b.n	8005864 <HAL_TIM_Encoder_Init+0x18>
    tmpcr1 |= Structure->CounterMode;
 80058fc:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80058fe:	4f48      	ldr	r7, [pc, #288]	; (8005a20 <HAL_TIM_Encoder_Init+0x1d4>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005900:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005904:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005906:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005908:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800590c:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800590e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005912:	ea42 020c 	orr.w	r2, r2, ip
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005916:	42bb      	cmp	r3, r7
  TIMx->CR1 = tmpcr1;
 8005918:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800591a:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800591c:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800591e:	d152      	bne.n	80059c6 <HAL_TIM_Encoder_Init+0x17a>
    TIMx->RCR = Structure->RepetitionCounter;
 8005920:	6962      	ldr	r2, [r4, #20]
 8005922:	631a      	str	r2, [r3, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005924:	2201      	movs	r2, #1
 8005926:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005928:	691a      	ldr	r2, [r3, #16]
 800592a:	07d2      	lsls	r2, r2, #31
 800592c:	d503      	bpl.n	8005936 <HAL_TIM_Encoder_Init+0xea>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800592e:	691a      	ldr	r2, [r3, #16]
 8005930:	f022 0201 	bic.w	r2, r2, #1
 8005934:	611a      	str	r2, [r3, #16]
  tmpsmcr = htim->Instance->SMCR;
 8005936:	689e      	ldr	r6, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8005938:	699f      	ldr	r7, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800593a:	68a8      	ldr	r0, [r5, #8]
 800593c:	69a9      	ldr	r1, [r5, #24]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800593e:	692a      	ldr	r2, [r5, #16]
  tmpsmcr |= sConfig->EncoderMode;
 8005940:	f8d5 c000 	ldr.w	ip, [r5]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005944:	f8d5 e020 	ldr.w	lr, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005948:	f427 7740 	bic.w	r7, r7, #768	; 0x300
 800594c:	f027 0703 	bic.w	r7, r7, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005950:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005954:	69e8      	ldr	r0, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005956:	4339      	orrs	r1, r7
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005958:	0112      	lsls	r2, r2, #4
 800595a:	68ef      	ldr	r7, [r5, #12]
 800595c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8005960:	433a      	orrs	r2, r7
  tmpccer = htim->Instance->CCER;
 8005962:	6a18      	ldr	r0, [r3, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005964:	696f      	ldr	r7, [r5, #20]
 8005966:	686d      	ldr	r5, [r5, #4]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005968:	f421 417c 	bic.w	r1, r1, #64512	; 0xfc00
 800596c:	f021 01fc 	bic.w	r1, r1, #252	; 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005970:	ea42 320e 	orr.w	r2, r2, lr, lsl #12
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005974:	f020 00aa 	bic.w	r0, r0, #170	; 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005978:	ea45 1507 	orr.w	r5, r5, r7, lsl #4
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800597c:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800597e:	4305      	orrs	r5, r0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005980:	2101      	movs	r1, #1
  tmpsmcr |= sConfig->EncoderMode;
 8005982:	ea46 060c 	orr.w	r6, r6, ip
  htim->Instance->SMCR = tmpsmcr;
 8005986:	609e      	str	r6, [r3, #8]
  return HAL_OK;
 8005988:	2000      	movs	r0, #0
  htim->Instance->CCMR1 = tmpccmr1;
 800598a:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800598c:	621d      	str	r5, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800598e:	f884 1048 	strb.w	r1, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005992:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005996:	f884 103f 	strb.w	r1, [r4, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800599a:	f884 1044 	strb.w	r1, [r4, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800599e:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 80059a2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
}
 80059a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 80059a8:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059aa:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059ac:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80059b0:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80059b2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059b6:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059bc:	ea4c 0202 	orr.w	r2, ip, r2
  TIMx->CR1 = tmpcr1;
 80059c0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059c2:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80059c4:	6299      	str	r1, [r3, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059c6:	4a17      	ldr	r2, [pc, #92]	; (8005a24 <HAL_TIM_Encoder_Init+0x1d8>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d0a9      	beq.n	8005920 <HAL_TIM_Encoder_Init+0xd4>
 80059cc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d0a5      	beq.n	8005920 <HAL_TIM_Encoder_Init+0xd4>
 80059d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059d8:	4293      	cmp	r3, r2
 80059da:	d0a1      	beq.n	8005920 <HAL_TIM_Encoder_Init+0xd4>
 80059dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059e0:	4293      	cmp	r3, r2
 80059e2:	d19f      	bne.n	8005924 <HAL_TIM_Encoder_Init+0xd8>
 80059e4:	e79c      	b.n	8005920 <HAL_TIM_Encoder_Init+0xd4>
    return HAL_ERROR;
 80059e6:	2001      	movs	r0, #1
}
 80059e8:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 80059ea:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ec:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059ee:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80059f2:	433a      	orrs	r2, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 80059f4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059f8:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059fe:	ea42 020c 	orr.w	r2, r2, ip
  TIMx->CR1 = tmpcr1;
 8005a02:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a04:	62d8      	str	r0, [r3, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005a06:	6299      	str	r1, [r3, #40]	; 0x28
 8005a08:	e78a      	b.n	8005920 <HAL_TIM_Encoder_Init+0xd4>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a0a:	6926      	ldr	r6, [r4, #16]
 8005a0c:	e7f2      	b.n	80059f4 <HAL_TIM_Encoder_Init+0x1a8>
    tmpcr1 |= Structure->CounterMode;
 8005a0e:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a10:	f022 0270 	bic.w	r2, r2, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005a14:	4332      	orrs	r2, r6
 8005a16:	e756      	b.n	80058c6 <HAL_TIM_Encoder_Init+0x7a>
 8005a18:	40012c00 	.word	0x40012c00
 8005a1c:	40014400 	.word	0x40014400
 8005a20:	40013400 	.word	0x40013400
 8005a24:	40014000 	.word	0x40014000

08005a28 <HAL_TIM_PWM_ConfigChannel>:
{
 8005a28:	4603      	mov	r3, r0
  __HAL_LOCK(htim);
 8005a2a:	f890 003c 	ldrb.w	r0, [r0, #60]	; 0x3c
 8005a2e:	2801      	cmp	r0, #1
 8005a30:	f000 81a9 	beq.w	8005d86 <HAL_TIM_PWM_ConfigChannel+0x35e>
 8005a34:	2001      	movs	r0, #1
{
 8005a36:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8005a38:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  switch (Channel)
 8005a3c:	2a14      	cmp	r2, #20
 8005a3e:	f200 819c 	bhi.w	8005d7a <HAL_TIM_PWM_ConfigChannel+0x352>
 8005a42:	e8df f012 	tbh	[pc, r2, lsl #1]
 8005a46:	005e      	.short	0x005e
 8005a48:	019a019a 	.word	0x019a019a
 8005a4c:	00ad019a 	.word	0x00ad019a
 8005a50:	019a019a 	.word	0x019a019a
 8005a54:	011b019a 	.word	0x011b019a
 8005a58:	019a019a 	.word	0x019a019a
 8005a5c:	00e4019a 	.word	0x00e4019a
 8005a60:	019a019a 	.word	0x019a019a
 8005a64:	0152019a 	.word	0x0152019a
 8005a68:	019a019a 	.word	0x019a019a
 8005a6c:	0015019a 	.word	0x0015019a
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005a70:	681a      	ldr	r2, [r3, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a72:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer = TIMx->CCER;
 8005a76:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a78:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a7a:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a7c:	4ec3      	ldr	r6, [pc, #780]	; (8005d8c <HAL_TIM_PWM_ConfigChannel+0x364>)
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a7e:	f425 1580 	bic.w	r5, r5, #1048576	; 0x100000
 8005a82:	6215      	str	r5, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005a84:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8005a86:	6d10      	ldr	r0, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a88:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a8c:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a90:	f420 40e0 	bic.w	r0, r0, #28672	; 0x7000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a94:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a96:	ea44 540c 	orr.w	r4, r4, ip, lsl #20
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a9a:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9e:	d013      	beq.n	8005ac8 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8005aa0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005aa4:	42b2      	cmp	r2, r6
 8005aa6:	d00f      	beq.n	8005ac8 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8005aa8:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005aac:	42b2      	cmp	r2, r6
 8005aae:	d00b      	beq.n	8005ac8 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8005ab0:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005ab4:	42b2      	cmp	r2, r6
 8005ab6:	d007      	beq.n	8005ac8 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8005ab8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005abc:	42b2      	cmp	r2, r6
 8005abe:	d003      	beq.n	8005ac8 <HAL_TIM_PWM_ConfigChannel+0xa0>
 8005ac0:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005ac4:	42b2      	cmp	r2, r6
 8005ac6:	d104      	bne.n	8005ad2 <HAL_TIM_PWM_ConfigChannel+0xaa>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ac8:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005aca:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ace:	ea45 2586 	orr.w	r5, r5, r6, lsl #10

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ad2:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005ad4:	6055      	str	r5, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005ad6:	6510      	str	r0, [r2, #80]	; 0x50
  TIMx->CCR6 = OC_Config->Pulse;
 8005ad8:	64d6      	str	r6, [r2, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ada:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005adc:	6d10      	ldr	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005ade:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005ae0:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8005ae4:	6510      	str	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005ae6:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8005ae8:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8005aec:	6510      	str	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005aee:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8005af0:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8005af4:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8005af6:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005af8:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005afe:	bcf0      	pop	{r4, r5, r6, r7}
 8005b00:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b02:	681a      	ldr	r2, [r3, #0]
  tmpccer |= OC_Config->OCPolarity;
 8005b04:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer = TIMx->CCER;
 8005b08:	6a10      	ldr	r0, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b0a:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005b0c:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b0e:	4e9f      	ldr	r6, [pc, #636]	; (8005d8c <HAL_TIM_PWM_ConfigChannel+0x364>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b10:	f025 0501 	bic.w	r5, r5, #1
 8005b14:	6215      	str	r5, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005b16:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8005b18:	6994      	ldr	r4, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b1a:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC1P;
 8005b1e:	f020 0002 	bic.w	r0, r0, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b22:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b26:	42b2      	cmp	r2, r6
  tmpccer |= OC_Config->OCPolarity;
 8005b28:	ea40 000c 	orr.w	r0, r0, ip
  tmpccmrx |= OC_Config->OCMode;
 8005b2c:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b30:	d013      	beq.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x132>
 8005b32:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005b36:	42b2      	cmp	r2, r6
 8005b38:	d00f      	beq.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x132>
 8005b3a:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005b3e:	42b2      	cmp	r2, r6
 8005b40:	d00b      	beq.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x132>
 8005b42:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005b46:	42b2      	cmp	r2, r6
 8005b48:	d007      	beq.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x132>
 8005b4a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005b4e:	42b2      	cmp	r2, r6
 8005b50:	d003      	beq.n	8005b5a <HAL_TIM_PWM_ConfigChannel+0x132>
 8005b52:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005b56:	42b2      	cmp	r2, r6
 8005b58:	d10b      	bne.n	8005b72 <HAL_TIM_PWM_ConfigChannel+0x14a>
    tmpccer |= OC_Config->OCNPolarity;
 8005b5a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b5c:	f020 0008 	bic.w	r0, r0, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005b60:	4330      	orrs	r0, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b62:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b66:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b6a:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8005b6c:	f020 0004 	bic.w	r0, r0, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b70:	4335      	orrs	r5, r6
  TIMx->CCR1 = OC_Config->Pulse;
 8005b72:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005b74:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005b76:	6194      	str	r4, [r2, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8005b78:	6356      	str	r6, [r2, #52]	; 0x34
  TIMx->CCER = tmpccer;
 8005b7a:	6210      	str	r0, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b7c:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b7e:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b80:	f040 0008 	orr.w	r0, r0, #8
 8005b84:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b86:	6990      	ldr	r0, [r2, #24]
 8005b88:	f020 0004 	bic.w	r0, r0, #4
 8005b8c:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005b8e:	6991      	ldr	r1, [r2, #24]
 8005b90:	4321      	orrs	r1, r4
 8005b92:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8005b94:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005b96:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8005b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005b9c:	bcf0      	pop	{r4, r5, r6, r7}
 8005b9e:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ba0:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005ba2:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer = TIMx->CCER;
 8005ba6:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ba8:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005baa:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bac:	4e77      	ldr	r6, [pc, #476]	; (8005d8c <HAL_TIM_PWM_ConfigChannel+0x364>)
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bae:	f025 0510 	bic.w	r5, r5, #16
 8005bb2:	6215      	str	r5, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005bb4:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR1;
 8005bb6:	6990      	ldr	r0, [r2, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bb8:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC2P;
 8005bbc:	f024 0420 	bic.w	r4, r4, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005bc0:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bc4:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005bc6:	ea44 140c 	orr.w	r4, r4, ip, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bca:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005bce:	f000 8107 	beq.w	8005de0 <HAL_TIM_PWM_ConfigChannel+0x3b8>
 8005bd2:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005bd6:	42b2      	cmp	r2, r6
 8005bd8:	f000 8102 	beq.w	8005de0 <HAL_TIM_PWM_ConfigChannel+0x3b8>
 8005bdc:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8005be0:	42b2      	cmp	r2, r6
 8005be2:	f000 8148 	beq.w	8005e76 <HAL_TIM_PWM_ConfigChannel+0x44e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be6:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8005bea:	42b2      	cmp	r2, r6
 8005bec:	f000 80ff 	beq.w	8005dee <HAL_TIM_PWM_ConfigChannel+0x3c6>
 8005bf0:	4e67      	ldr	r6, [pc, #412]	; (8005d90 <HAL_TIM_PWM_ConfigChannel+0x368>)
 8005bf2:	42b2      	cmp	r2, r6
 8005bf4:	f000 80fb 	beq.w	8005dee <HAL_TIM_PWM_ConfigChannel+0x3c6>
 8005bf8:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005bfc:	42b2      	cmp	r2, r6
 8005bfe:	f000 80f6 	beq.w	8005dee <HAL_TIM_PWM_ConfigChannel+0x3c6>
 8005c02:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005c06:	42b2      	cmp	r2, r6
 8005c08:	f040 80f8 	bne.w	8005dfc <HAL_TIM_PWM_ConfigChannel+0x3d4>
 8005c0c:	e0ef      	b.n	8005dee <HAL_TIM_PWM_ConfigChannel+0x3c6>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c0e:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c10:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer = TIMx->CCER;
 8005c14:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c16:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c18:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005c1a:	4e5c      	ldr	r6, [pc, #368]	; (8005d8c <HAL_TIM_PWM_ConfigChannel+0x364>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c1c:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 8005c20:	6215      	str	r5, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005c22:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8005c24:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c26:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
  tmpccer &= ~TIM_CCER_CC4P;
 8005c2a:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c2e:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005c32:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c34:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c38:	ea40 2007 	orr.w	r0, r0, r7, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005c3c:	f000 80aa 	beq.w	8005d94 <HAL_TIM_PWM_ConfigChannel+0x36c>
 8005c40:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005c44:	42b2      	cmp	r2, r6
 8005c46:	f000 80a5 	beq.w	8005d94 <HAL_TIM_PWM_ConfigChannel+0x36c>
 8005c4a:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8005c4e:	42b2      	cmp	r2, r6
 8005c50:	f000 8121 	beq.w	8005e96 <HAL_TIM_PWM_ConfigChannel+0x46e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c54:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8005c58:	42b2      	cmp	r2, r6
 8005c5a:	f000 80a2 	beq.w	8005da2 <HAL_TIM_PWM_ConfigChannel+0x37a>
 8005c5e:	4e4c      	ldr	r6, [pc, #304]	; (8005d90 <HAL_TIM_PWM_ConfigChannel+0x368>)
 8005c60:	42b2      	cmp	r2, r6
 8005c62:	f000 809e 	beq.w	8005da2 <HAL_TIM_PWM_ConfigChannel+0x37a>
 8005c66:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005c6a:	42b2      	cmp	r2, r6
 8005c6c:	f000 8099 	beq.w	8005da2 <HAL_TIM_PWM_ConfigChannel+0x37a>
 8005c70:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005c74:	42b2      	cmp	r2, r6
 8005c76:	f040 809b 	bne.w	8005db0 <HAL_TIM_PWM_ConfigChannel+0x388>
 8005c7a:	e092      	b.n	8005da2 <HAL_TIM_PWM_ConfigChannel+0x37a>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c7c:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c7e:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer = TIMx->CCER;
 8005c82:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c84:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005c86:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c88:	4e40      	ldr	r6, [pc, #256]	; (8005d8c <HAL_TIM_PWM_ConfigChannel+0x364>)
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c8a:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8005c8e:	6215      	str	r5, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005c90:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR2;
 8005c92:	69d0      	ldr	r0, [r2, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c94:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC3P;
 8005c98:	f424 7400 	bic.w	r4, r4, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c9c:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ca0:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ca2:	ea44 240c 	orr.w	r4, r4, ip, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8005ca6:	ea40 0007 	orr.w	r0, r0, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005caa:	f000 80bf 	beq.w	8005e2c <HAL_TIM_PWM_ConfigChannel+0x404>
 8005cae:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005cb2:	42b2      	cmp	r2, r6
 8005cb4:	f000 80ba 	beq.w	8005e2c <HAL_TIM_PWM_ConfigChannel+0x404>
 8005cb8:	f506 56e0 	add.w	r6, r6, #7168	; 0x1c00
 8005cbc:	42b2      	cmp	r2, r6
 8005cbe:	f000 80e2 	beq.w	8005e86 <HAL_TIM_PWM_ConfigChannel+0x45e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cc2:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
 8005cc6:	42b2      	cmp	r2, r6
 8005cc8:	f000 80b7 	beq.w	8005e3a <HAL_TIM_PWM_ConfigChannel+0x412>
 8005ccc:	4e30      	ldr	r6, [pc, #192]	; (8005d90 <HAL_TIM_PWM_ConfigChannel+0x368>)
 8005cce:	42b2      	cmp	r2, r6
 8005cd0:	f000 80b3 	beq.w	8005e3a <HAL_TIM_PWM_ConfigChannel+0x412>
 8005cd4:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005cd8:	42b2      	cmp	r2, r6
 8005cda:	f000 80ae 	beq.w	8005e3a <HAL_TIM_PWM_ConfigChannel+0x412>
 8005cde:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005ce2:	42b2      	cmp	r2, r6
 8005ce4:	f040 80b0 	bne.w	8005e48 <HAL_TIM_PWM_ConfigChannel+0x420>
 8005ce8:	e0a7      	b.n	8005e3a <HAL_TIM_PWM_ConfigChannel+0x412>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005cea:	681a      	ldr	r2, [r3, #0]
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cec:	f8d1 c008 	ldr.w	ip, [r1, #8]
  tmpccer = TIMx->CCER;
 8005cf0:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cf2:	6a15      	ldr	r5, [r2, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005cf4:	680f      	ldr	r7, [r1, #0]
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cf6:	4e25      	ldr	r6, [pc, #148]	; (8005d8c <HAL_TIM_PWM_ConfigChannel+0x364>)
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005cf8:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
 8005cfc:	6215      	str	r5, [r2, #32]
  tmpcr2 =  TIMx->CR2;
 8005cfe:	6855      	ldr	r5, [r2, #4]
  tmpccmrx = TIMx->CCMR3;
 8005d00:	6d10      	ldr	r0, [r2, #80]	; 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d02:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
  tmpccer &= ~TIM_CCER_CC5P;
 8005d06:	f424 3400 	bic.w	r4, r4, #131072	; 0x20000
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d0a:	f020 0070 	bic.w	r0, r0, #112	; 0x70
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d0e:	42b2      	cmp	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d10:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
  tmpccmrx |= OC_Config->OCMode;
 8005d14:	ea40 0007 	orr.w	r0, r0, r7
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d18:	d013      	beq.n	8005d42 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005d1a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005d1e:	42b2      	cmp	r2, r6
 8005d20:	d00f      	beq.n	8005d42 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005d22:	f506 6640 	add.w	r6, r6, #3072	; 0xc00
 8005d26:	42b2      	cmp	r2, r6
 8005d28:	d00b      	beq.n	8005d42 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005d2a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005d2e:	42b2      	cmp	r2, r6
 8005d30:	d007      	beq.n	8005d42 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005d32:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005d36:	42b2      	cmp	r2, r6
 8005d38:	d003      	beq.n	8005d42 <HAL_TIM_PWM_ConfigChannel+0x31a>
 8005d3a:	f506 6600 	add.w	r6, r6, #2048	; 0x800
 8005d3e:	42b2      	cmp	r2, r6
 8005d40:	d104      	bne.n	8005d4c <HAL_TIM_PWM_ConfigChannel+0x324>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d42:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d44:	f425 3580 	bic.w	r5, r5, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d48:	ea45 2506 	orr.w	r5, r5, r6, lsl #8
  TIMx->CCR5 = OC_Config->Pulse;
 8005d4c:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005d4e:	6055      	str	r5, [r2, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005d50:	6510      	str	r0, [r2, #80]	; 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8005d52:	6496      	str	r6, [r2, #72]	; 0x48
  TIMx->CCER = tmpccer;
 8005d54:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d56:	6d10      	ldr	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d58:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d5a:	f040 0008 	orr.w	r0, r0, #8
 8005d5e:	6510      	str	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d60:	6d10      	ldr	r0, [r2, #80]	; 0x50
 8005d62:	f020 0004 	bic.w	r0, r0, #4
 8005d66:	6510      	str	r0, [r2, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d68:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8005d6a:	4321      	orrs	r1, r4
 8005d6c:	6511      	str	r1, [r2, #80]	; 0x50
  __HAL_UNLOCK(htim);
 8005d6e:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005d70:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005d76:	bcf0      	pop	{r4, r5, r6, r7}
 8005d78:	4770      	bx	lr
  __HAL_UNLOCK(htim);
 8005d7a:	2200      	movs	r2, #0
      status = HAL_ERROR;
 8005d7c:	2001      	movs	r0, #1
  __HAL_UNLOCK(htim);
 8005d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005d82:	bcf0      	pop	{r4, r5, r6, r7}
 8005d84:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005d86:	2002      	movs	r0, #2
}
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	40012c00 	.word	0x40012c00
 8005d90:	40014400 	.word	0x40014400
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d94:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8005d96:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005d9a:	ea44 3406 	orr.w	r4, r4, r6, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8005d9e:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005da2:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005da6:	f425 4540 	bic.w	r5, r5, #49152	; 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005daa:	433e      	orrs	r6, r7
 8005dac:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
  TIMx->CCR4 = OC_Config->Pulse;
 8005db0:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005db2:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005db4:	61d0      	str	r0, [r2, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005db6:	6416      	str	r6, [r2, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8005db8:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dba:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dbc:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dbe:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8005dc2:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dc4:	69d0      	ldr	r0, [r2, #28]
 8005dc6:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8005dca:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005dcc:	69d1      	ldr	r1, [r2, #28]
 8005dce:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8005dd2:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8005dd4:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005dd6:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005ddc:	bcf0      	pop	{r4, r5, r6, r7}
 8005dde:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005de0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005de2:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005de6:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005dea:	f024 0440 	bic.w	r4, r4, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005dee:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005df2:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005df6:	433e      	orrs	r6, r7
 8005df8:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8005dfc:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005dfe:	6055      	str	r5, [r2, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005e00:	6190      	str	r0, [r2, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005e02:	6396      	str	r6, [r2, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005e04:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e06:	6990      	ldr	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e08:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005e0a:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 8005e0e:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005e10:	6990      	ldr	r0, [r2, #24]
 8005e12:	f420 6080 	bic.w	r0, r0, #1024	; 0x400
 8005e16:	6190      	str	r0, [r2, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005e18:	6991      	ldr	r1, [r2, #24]
 8005e1a:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
 8005e1e:	6191      	str	r1, [r2, #24]
  __HAL_UNLOCK(htim);
 8005e20:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e22:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8005e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005e28:	bcf0      	pop	{r4, r5, r6, r7}
 8005e2a:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e2c:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e2e:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e32:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e36:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e3a:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e3e:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e42:	433e      	orrs	r6, r7
 8005e44:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
  TIMx->CCR3 = OC_Config->Pulse;
 8005e48:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005e4a:	6055      	str	r5, [r2, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005e4c:	61d0      	str	r0, [r2, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005e4e:	63d6      	str	r6, [r2, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005e50:	6214      	str	r4, [r2, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e52:	69d0      	ldr	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e54:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e56:	f040 0008 	orr.w	r0, r0, #8
 8005e5a:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e5c:	69d0      	ldr	r0, [r2, #28]
 8005e5e:	f020 0004 	bic.w	r0, r0, #4
 8005e62:	61d0      	str	r0, [r2, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e64:	69d1      	ldr	r1, [r2, #28]
 8005e66:	4321      	orrs	r1, r4
 8005e68:	61d1      	str	r1, [r2, #28]
  __HAL_UNLOCK(htim);
 8005e6a:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005e6c:	2000      	movs	r0, #0
  __HAL_UNLOCK(htim);
 8005e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005e72:	bcf0      	pop	{r4, r5, r6, r7}
 8005e74:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e76:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005e78:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005e7c:	ea44 1406 	orr.w	r4, r4, r6, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8005e80:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8005e84:	e6b4      	b.n	8005bf0 <HAL_TIM_PWM_ConfigChannel+0x1c8>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e86:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e88:	f424 6400 	bic.w	r4, r4, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e8c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e90:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8005e94:	e71a      	b.n	8005ccc <HAL_TIM_PWM_ConfigChannel+0x2a4>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005e96:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8005e98:	f424 4400 	bic.w	r4, r4, #32768	; 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005e9c:	ea44 3406 	orr.w	r4, r4, r6, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8005ea0:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
 8005ea4:	e6db      	b.n	8005c5e <HAL_TIM_PWM_ConfigChannel+0x236>
 8005ea6:	bf00      	nop

08005ea8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ea8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	d053      	beq.n	8005f58 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
{
 8005eb0:	b4f0      	push	{r4, r5, r6, r7}

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005eb2:	4a2a      	ldr	r2, [pc, #168]	; (8005f5c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
  tmpcr2 = htim->Instance->CR2;
 8005eb4:	6804      	ldr	r4, [r0, #0]
 8005eb6:	680e      	ldr	r6, [r1, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb8:	2302      	movs	r3, #2
 8005eba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8005ebe:	2501      	movs	r5, #1
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ec0:	4294      	cmp	r4, r2
  tmpcr2 = htim->Instance->CR2;
 8005ec2:	6863      	ldr	r3, [r4, #4]
  __HAL_LOCK(htim);
 8005ec4:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8005ec8:	68a5      	ldr	r5, [r4, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005eca:	d03a      	beq.n	8005f42 <HAL_TIMEx_MasterConfigSynchronization+0x9a>
 8005ecc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ed0:	4294      	cmp	r4, r2
 8005ed2:	d031      	beq.n	8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x90>
 8005ed4:	f502 52e0 	add.w	r2, r2, #7168	; 0x1c00
 8005ed8:	4294      	cmp	r4, r2
 8005eda:	d02d      	beq.n	8005f38 <HAL_TIMEx_MasterConfigSynchronization+0x90>
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005edc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005ee0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ee4:	4333      	orrs	r3, r6

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8005eea:	6063      	str	r3, [r4, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eec:	d016      	beq.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8005eee:	4b1c      	ldr	r3, [pc, #112]	; (8005f60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005ef0:	429c      	cmp	r4, r3
 8005ef2:	d013      	beq.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8005ef4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005ef8:	429c      	cmp	r4, r3
 8005efa:	d00f      	beq.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8005efc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f00:	429c      	cmp	r4, r3
 8005f02:	d00b      	beq.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8005f04:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8005f08:	429c      	cmp	r4, r3
 8005f0a:	d007      	beq.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8005f0c:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8005f10:	429c      	cmp	r4, r3
 8005f12:	d003      	beq.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x74>
 8005f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f18:	429c      	cmp	r4, r3
 8005f1a:	d104      	bne.n	8005f26 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f1c:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f1e:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f22:	431d      	orrs	r5, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f24:	60a5      	str	r5, [r4, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005f26:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005f28:	2201      	movs	r2, #1
 8005f2a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005f2e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005f32:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8005f34:	4618      	mov	r0, r3
}
 8005f36:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f38:	684a      	ldr	r2, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f3a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	e7cc      	b.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8005f42:	684f      	ldr	r7, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f44:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f48:	433a      	orrs	r2, r7
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f4a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8005f4e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f52:	4332      	orrs	r2, r6
  htim->Instance->CR2 = tmpcr2;
 8005f54:	6062      	str	r2, [r4, #4]
 8005f56:	e7e1      	b.n	8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x74>
  __HAL_LOCK(htim);
 8005f58:	2002      	movs	r0, #2
}
 8005f5a:	4770      	bx	lr
 8005f5c:	40012c00 	.word	0x40012c00
 8005f60:	40000400 	.word	0x40000400

08005f64 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f64:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d047      	beq.n	8005ffc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
{
 8005f6c:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f6e:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
 8005f72:	4602      	mov	r2, r0
 8005f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f78:	e9d1 0400 	ldrd	r0, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f7c:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f82:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f84:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f88:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f8c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f8e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f92:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f94:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f98:	6b08      	ldr	r0, [r1, #48]	; 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f9a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fa0:	e9d1 5406 	ldrd	r5, r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005fa4:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fa6:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
 8005faa:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fae:	6810      	ldr	r0, [r2, #0]
 8005fb0:	4d13      	ldr	r5, [pc, #76]	; (8006000 <HAL_TIMEx_ConfigBreakDeadTime+0x9c>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fb6:	42a8      	cmp	r0, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fb8:	ea43 0304 	orr.w	r3, r3, r4
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fbc:	d006      	beq.n	8005fcc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8005fbe:	4c11      	ldr	r4, [pc, #68]	; (8006004 <HAL_TIMEx_ConfigBreakDeadTime+0xa0>)
 8005fc0:	42a0      	cmp	r0, r4
 8005fc2:	d003      	beq.n	8005fcc <HAL_TIMEx_ConfigBreakDeadTime+0x68>
 8005fc4:	f504 54e0 	add.w	r4, r4, #7168	; 0x1c00
 8005fc8:	42a0      	cmp	r0, r4
 8005fca:	d110      	bne.n	8005fee <HAL_TIMEx_ConfigBreakDeadTime+0x8a>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005fcc:	6a8d      	ldr	r5, [r1, #40]	; 0x28
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005fce:	6a0c      	ldr	r4, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005fd0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fd4:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005fd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005fdc:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fde:	6a4c      	ldr	r4, [r1, #36]	; 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005fe0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005fe2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005fe6:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005fe8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005fec:	430b      	orrs	r3, r1
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8005fee:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8005ff0:	6443      	str	r3, [r0, #68]	; 0x44

  return HAL_OK;
}
 8005ff2:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8005ff4:	4608      	mov	r0, r1
  __HAL_UNLOCK(htim);
 8005ff6:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
}
 8005ffa:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005ffc:	2002      	movs	r0, #2
}
 8005ffe:	4770      	bx	lr
 8006000:	40012c00 	.word	0x40012c00
 8006004:	40013400 	.word	0x40013400

08006008 <HAL_TIMEx_ConfigBreakInput>:
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006008:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800600c:	2b01      	cmp	r3, #1
 800600e:	d063      	beq.n	80060d8 <HAL_TIMEx_ConfigBreakInput+0xd0>

  switch (sBreakInputConfig->Source)
 8006010:	6813      	ldr	r3, [r2, #0]
{
 8006012:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (sBreakInputConfig->Source)
 8006014:	2b08      	cmp	r3, #8
  __HAL_LOCK(htim);
 8006016:	f04f 0401 	mov.w	r4, #1
 800601a:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  switch (sBreakInputConfig->Source)
 800601e:	d066      	beq.n	80060ee <HAL_TIMEx_ConfigBreakInput+0xe6>
 8006020:	d90b      	bls.n	800603a <HAL_TIMEx_ConfigBreakInput+0x32>
 8006022:	2b20      	cmp	r3, #32
 8006024:	d069      	beq.n	80060fa <HAL_TIMEx_ConfigBreakInput+0xf2>
 8006026:	d95a      	bls.n	80060de <HAL_TIMEx_ConfigBreakInput+0xd6>
 8006028:	2b40      	cmp	r3, #64	; 0x40
 800602a:	d032      	beq.n	8006092 <HAL_TIMEx_ConfigBreakInput+0x8a>
 800602c:	2b80      	cmp	r3, #128	; 0x80
 800602e:	d10a      	bne.n	8006046 <HAL_TIMEx_ConfigBreakInput+0x3e>
    {
      bkin_enable_mask = TIM1_AF1_BKCMP7E;
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
      /* No palarity bit for this COMP. Variable bkin_polarity_mask keeps its default value 0 */
      bkin_polarity_mask = 0U;
      bkin_polarity_bitpos = 0U;
 8006030:	2500      	movs	r5, #0
      bkin_polarity_mask = 0U;
 8006032:	462c      	mov	r4, r5
      bkin_enable_bitpos = TIM1_AF1_BKCMP7E_Pos;
 8006034:	f04f 0c07 	mov.w	ip, #7
      break;
 8006038:	e009      	b.n	800604e <HAL_TIMEx_ConfigBreakInput+0x46>
  switch (sBreakInputConfig->Source)
 800603a:	2b02      	cmp	r3, #2
 800603c:	d062      	beq.n	8006104 <HAL_TIMEx_ConfigBreakInput+0xfc>
 800603e:	2b04      	cmp	r3, #4
 8006040:	d021      	beq.n	8006086 <HAL_TIMEx_ConfigBreakInput+0x7e>
 8006042:	42a3      	cmp	r3, r4
 8006044:	d063      	beq.n	800610e <HAL_TIMEx_ConfigBreakInput+0x106>
    default:
    {
      bkin_enable_mask = 0U;
      bkin_polarity_mask = 0U;
      bkin_enable_bitpos = 0U;
      bkin_polarity_bitpos = 0U;
 8006046:	2500      	movs	r5, #0
      bkin_enable_bitpos = 0U;
 8006048:	46ac      	mov	ip, r5
      bkin_polarity_mask = 0U;
 800604a:	462c      	mov	r4, r5
      bkin_enable_mask = 0U;
 800604c:	462b      	mov	r3, r5
      break;
    }
  }

  switch (BreakInput)
 800604e:	2901      	cmp	r1, #1
 8006050:	d02a      	beq.n	80060a8 <HAL_TIMEx_ConfigBreakInput+0xa0>
 8006052:	2902      	cmp	r1, #2
 8006054:	d122      	bne.n	800609c <HAL_TIMEx_ConfigBreakInput+0x94>
      break;
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 8006056:	6806      	ldr	r6, [r0, #0]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006058:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF2;
 800605a:	f8d6 e064 	ldr.w	lr, [r6, #100]	; 0x64

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800605e:	6897      	ldr	r7, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006060:	fa01 f20c 	lsl.w	r2, r1, ip
 8006064:	ea82 020e 	eor.w	r2, r2, lr
 8006068:	4013      	ands	r3, r2
 800606a:	ea83 030e 	eor.w	r3, r3, lr
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800606e:	fa07 f205 	lsl.w	r2, r7, r5
 8006072:	405a      	eors	r2, r3
 8006074:	4022      	ands	r2, r4
 8006076:	4053      	eors	r3, r2

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 8006078:	6673      	str	r3, [r6, #100]	; 0x64
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 800607a:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 800607c:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 800607e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

  return status;
}
 8006082:	4618      	mov	r0, r3
 8006084:	bdf0      	pop	{r4, r5, r6, r7, pc}
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 8006086:	250b      	movs	r5, #11
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 8006088:	f04f 0c02 	mov.w	ip, #2
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800608c:	f44f 6400 	mov.w	r4, #2048	; 0x800
      break;
 8006090:	e7dd      	b.n	800604e <HAL_TIMEx_ConfigBreakInput+0x46>
      bkin_polarity_bitpos = 0U;
 8006092:	2500      	movs	r5, #0
      bkin_polarity_mask = 0U;
 8006094:	462c      	mov	r4, r5
      bkin_enable_bitpos = TIM1_AF1_BKCMP6E_Pos;
 8006096:	f04f 0c06 	mov.w	ip, #6
      break;
 800609a:	e7d8      	b.n	800604e <HAL_TIMEx_ConfigBreakInput+0x46>
      status = HAL_ERROR;
 800609c:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 800609e:	2200      	movs	r2, #0
 80060a0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      tmporx = htim->Instance->AF1;
 80060a8:	6806      	ldr	r6, [r0, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80060aa:	6851      	ldr	r1, [r2, #4]
      tmporx = htim->Instance->AF1;
 80060ac:	f8d6 e060 	ldr.w	lr, [r6, #96]	; 0x60
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80060b0:	6897      	ldr	r7, [r2, #8]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80060b2:	fa01 f20c 	lsl.w	r2, r1, ip
 80060b6:	ea82 020e 	eor.w	r2, r2, lr
 80060ba:	4013      	ands	r3, r2
 80060bc:	ea83 030e 	eor.w	r3, r3, lr
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80060c0:	fa07 f205 	lsl.w	r2, r7, r5
 80060c4:	405a      	eors	r2, r3
 80060c6:	4022      	ands	r2, r4
 80060c8:	4053      	eors	r3, r2
      htim->Instance->AF1 = tmporx;
 80060ca:	6633      	str	r3, [r6, #96]	; 0x60
  __HAL_UNLOCK(htim);
 80060cc:	2200      	movs	r2, #0
  HAL_StatusTypeDef status = HAL_OK;
 80060ce:	2300      	movs	r3, #0
  __HAL_UNLOCK(htim);
 80060d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(htim);
 80060d8:	2302      	movs	r3, #2
}
 80060da:	4618      	mov	r0, r3
 80060dc:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 80060de:	2b10      	cmp	r3, #16
 80060e0:	d1b1      	bne.n	8006046 <HAL_TIMEx_ConfigBreakInput+0x3e>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 80060e2:	250d      	movs	r5, #13
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 80060e4:	f04f 0c04 	mov.w	ip, #4
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 80060e8:	f44f 5400 	mov.w	r4, #8192	; 0x2000
      break;
 80060ec:	e7af      	b.n	800604e <HAL_TIMEx_ConfigBreakInput+0x46>
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 80060ee:	250c      	movs	r5, #12
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 80060f0:	f04f 0c03 	mov.w	ip, #3
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 80060f4:	f44f 5480 	mov.w	r4, #4096	; 0x1000
      break;
 80060f8:	e7a9      	b.n	800604e <HAL_TIMEx_ConfigBreakInput+0x46>
      bkin_polarity_bitpos = 0U;
 80060fa:	2500      	movs	r5, #0
      bkin_polarity_mask = 0U;
 80060fc:	462c      	mov	r4, r5
      bkin_enable_bitpos = TIM1_AF1_BKCMP5E_Pos;
 80060fe:	f04f 0c05 	mov.w	ip, #5
      break;
 8006102:	e7a4      	b.n	800604e <HAL_TIMEx_ConfigBreakInput+0x46>
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 8006104:	46a4      	mov	ip, r4
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 8006106:	250a      	movs	r5, #10
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 8006108:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800610c:	e79f      	b.n	800604e <HAL_TIMEx_ConfigBreakInput+0x46>
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800610e:	2509      	movs	r5, #9
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 8006110:	f04f 0c00 	mov.w	ip, #0
      bkin_polarity_mask = TIM1_AF1_BKINP;
 8006114:	f44f 7400 	mov.w	r4, #512	; 0x200
 8006118:	e799      	b.n	800604e <HAL_TIMEx_ConfigBreakInput+0x46>
 800611a:	bf00      	nop

0800611c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800611c:	b410      	push	{r4}
 800611e:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006120:	e852 3f00 	ldrex	r3, [r2]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006124:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006128:	e842 3100 	strex	r1, r3, [r2]
 800612c:	2900      	cmp	r1, #0
 800612e:	d1f7      	bne.n	8006120 <UART_EndRxTransfer+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006130:	4c14      	ldr	r4, [pc, #80]	; (8006184 <UART_EndRxTransfer+0x68>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006132:	f102 0308 	add.w	r3, r2, #8
 8006136:	e853 3f00 	ldrex	r3, [r3]
 800613a:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800613c:	f102 0c08 	add.w	ip, r2, #8
 8006140:	e84c 3100 	strex	r1, r3, [ip]
 8006144:	2900      	cmp	r1, #0
 8006146:	d1f4      	bne.n	8006132 <UART_EndRxTransfer+0x16>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006148:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800614a:	2b01      	cmp	r3, #1
 800614c:	d008      	beq.n	8006160 <UART_EndRxTransfer+0x44>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800614e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8006150:	2220      	movs	r2, #32
 8006152:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006156:	6743      	str	r3, [r0, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006158:	66c3      	str	r3, [r0, #108]	; 0x6c
}
 800615a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800615e:	4770      	bx	lr
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	e852 3f00 	ldrex	r3, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006164:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006168:	e842 3100 	strex	r1, r3, [r2]
 800616c:	2900      	cmp	r1, #0
 800616e:	d0ee      	beq.n	800614e <UART_EndRxTransfer+0x32>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006170:	e852 3f00 	ldrex	r3, [r2]
 8006174:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006178:	e842 3100 	strex	r1, r3, [r2]
 800617c:	2900      	cmp	r1, #0
 800617e:	d1ef      	bne.n	8006160 <UART_EndRxTransfer+0x44>
 8006180:	e7e5      	b.n	800614e <UART_EndRxTransfer+0x32>
 8006182:	bf00      	nop
 8006184:	effffffe 	.word	0xeffffffe

08006188 <HAL_UART_Init>:
  if (huart == NULL)
 8006188:	2800      	cmp	r0, #0
 800618a:	f000 80b4 	beq.w	80062f6 <HAL_UART_Init+0x16e>
  if (huart->gState == HAL_UART_STATE_RESET)
 800618e:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
{
 8006192:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006196:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8006198:	2b00      	cmp	r3, #0
 800619a:	f000 80a7 	beq.w	80062ec <HAL_UART_Init+0x164>
  huart->gState = HAL_UART_STATE_BUSY;
 800619e:	2224      	movs	r2, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80061a0:	6823      	ldr	r3, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80061a2:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 80061a6:	681a      	ldr	r2, [r3, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061a8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  __HAL_UART_DISABLE(huart);
 80061aa:	f022 0201 	bic.w	r2, r2, #1
 80061ae:	601a      	str	r2, [r3, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80061b0:	2900      	cmp	r1, #0
 80061b2:	d155      	bne.n	8006260 <HAL_UART_Init+0xd8>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061b4:	e9d4 1604 	ldrd	r1, r6, [r4, #16]
 80061b8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061ba:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061bc:	69e0      	ldr	r0, [r4, #28]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061be:	69a7      	ldr	r7, [r4, #24]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061c0:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061c2:	49ae      	ldr	r1, [pc, #696]	; (800647c <HAL_UART_Init+0x2f4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061c4:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061c6:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061c8:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061ca:	430a      	orrs	r2, r1
 80061cc:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	68e1      	ldr	r1, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061d2:	4eab      	ldr	r6, [pc, #684]	; (8006480 <HAL_UART_Init+0x2f8>)
 80061d4:	6a65      	ldr	r5, [r4, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061d6:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061de:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061e0:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061e2:	f000 808a 	beq.w	80062fa <HAL_UART_Init+0x172>
    tmpreg |= huart->Init.OneBitSampling;
 80061e6:	6a22      	ldr	r2, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061e8:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80061ec:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 80061f0:	433a      	orrs	r2, r7
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061f2:	430a      	orrs	r2, r1
 80061f4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061f8:	f506 4638 	add.w	r6, r6, #47104	; 0xb800
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061fc:	f022 020f 	bic.w	r2, r2, #15
 8006200:	432a      	orrs	r2, r5
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006202:	42b3      	cmp	r3, r6
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006204:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006206:	f000 8098 	beq.w	800633a <HAL_UART_Init+0x1b2>
 800620a:	4a9e      	ldr	r2, [pc, #632]	; (8006484 <HAL_UART_Init+0x2fc>)
 800620c:	4293      	cmp	r3, r2
 800620e:	f000 80b7 	beq.w	8006380 <HAL_UART_Init+0x1f8>
 8006212:	4a9d      	ldr	r2, [pc, #628]	; (8006488 <HAL_UART_Init+0x300>)
 8006214:	4293      	cmp	r3, r2
 8006216:	f000 81d3 	beq.w	80065c0 <HAL_UART_Init+0x438>
 800621a:	4a9c      	ldr	r2, [pc, #624]	; (800648c <HAL_UART_Init+0x304>)
 800621c:	4293      	cmp	r3, r2
 800621e:	f000 8188 	beq.w	8006532 <HAL_UART_Init+0x3aa>
 8006222:	4a9b      	ldr	r2, [pc, #620]	; (8006490 <HAL_UART_Init+0x308>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d112      	bne.n	800624e <HAL_UART_Init+0xc6>
 8006228:	4b9a      	ldr	r3, [pc, #616]	; (8006494 <HAL_UART_Init+0x30c>)
 800622a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800622e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006232:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006236:	f000 8175 	beq.w	8006524 <HAL_UART_Init+0x39c>
 800623a:	f240 81af 	bls.w	800659c <HAL_UART_Init+0x414>
 800623e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006242:	f000 8230 	beq.w	80066a6 <HAL_UART_Init+0x51e>
 8006246:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800624a:	f000 81c6 	beq.w	80065da <HAL_UART_Init+0x452>
  huart->NbRxDataToProcess = 1;
 800624e:	f04f 1201 	mov.w	r2, #65537	; 0x10001
  huart->RxISR = NULL;
 8006252:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 8006254:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8006256:	e9c4 331d 	strd	r3, r3, [r4, #116]	; 0x74
    return HAL_ERROR;
 800625a:	2001      	movs	r0, #1
}
 800625c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006260:	070d      	lsls	r5, r1, #28
 8006262:	d505      	bpl.n	8006270 <HAL_UART_Init+0xe8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006268:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800626c:	4302      	orrs	r2, r0
 800626e:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006270:	07c8      	lsls	r0, r1, #31
 8006272:	d505      	bpl.n	8006280 <HAL_UART_Init+0xf8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8006278:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800627c:	4302      	orrs	r2, r0
 800627e:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006280:	078a      	lsls	r2, r1, #30
 8006282:	d505      	bpl.n	8006290 <HAL_UART_Init+0x108>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006284:	685a      	ldr	r2, [r3, #4]
 8006286:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006288:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800628c:	4302      	orrs	r2, r0
 800628e:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006290:	074f      	lsls	r7, r1, #29
 8006292:	d505      	bpl.n	80062a0 <HAL_UART_Init+0x118>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006298:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800629c:	4302      	orrs	r2, r0
 800629e:	605a      	str	r2, [r3, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062a0:	06ce      	lsls	r6, r1, #27
 80062a2:	d505      	bpl.n	80062b0 <HAL_UART_Init+0x128>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062a4:	689a      	ldr	r2, [r3, #8]
 80062a6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80062a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062ac:	4302      	orrs	r2, r0
 80062ae:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062b0:	068d      	lsls	r5, r1, #26
 80062b2:	d505      	bpl.n	80062c0 <HAL_UART_Init+0x138>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062b4:	689a      	ldr	r2, [r3, #8]
 80062b6:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80062b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80062bc:	4302      	orrs	r2, r0
 80062be:	609a      	str	r2, [r3, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062c0:	0648      	lsls	r0, r1, #25
 80062c2:	d509      	bpl.n	80062d8 <HAL_UART_Init+0x150>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062c4:	685a      	ldr	r2, [r3, #4]
 80062c6:	6c60      	ldr	r0, [r4, #68]	; 0x44
 80062c8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80062cc:	4302      	orrs	r2, r0
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062ce:	f5b0 1f80 	cmp.w	r0, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80062d2:	605a      	str	r2, [r3, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062d4:	f000 81db 	beq.w	800668e <HAL_UART_Init+0x506>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062d8:	0609      	lsls	r1, r1, #24
 80062da:	f57f af6b 	bpl.w	80061b4 <HAL_UART_Init+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80062e2:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80062e6:	430a      	orrs	r2, r1
 80062e8:	605a      	str	r2, [r3, #4]
 80062ea:	e763      	b.n	80061b4 <HAL_UART_Init+0x2c>
    huart->Lock = HAL_UNLOCKED;
 80062ec:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 80062f0:	f7fd fa20 	bl	8003734 <HAL_UART_MspInit>
 80062f4:	e753      	b.n	800619e <HAL_UART_Init+0x16>
    return HAL_ERROR;
 80062f6:	2001      	movs	r0, #1
}
 80062f8:	4770      	bx	lr
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80062fa:	f021 416e 	bic.w	r1, r1, #3992977408	; 0xee000000
 80062fe:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 8006302:	4339      	orrs	r1, r7
 8006304:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006308:	4862      	ldr	r0, [pc, #392]	; (8006494 <HAL_UART_Init+0x30c>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800630a:	f022 020f 	bic.w	r2, r2, #15
 800630e:	432a      	orrs	r2, r5
 8006310:	62da      	str	r2, [r3, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006312:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8006316:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800631a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800631e:	f000 81b3 	beq.w	8006688 <HAL_UART_Init+0x500>
 8006322:	f240 8179 	bls.w	8006618 <HAL_UART_Init+0x490>
 8006326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800632a:	f000 81ca 	beq.w	80066c2 <HAL_UART_Init+0x53a>
 800632e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006332:	d18c      	bne.n	800624e <HAL_UART_Init+0xc6>
        pclk = (uint32_t) LSE_VALUE;
 8006334:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006338:	e176      	b.n	8006628 <HAL_UART_Init+0x4a0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800633a:	4b56      	ldr	r3, [pc, #344]	; (8006494 <HAL_UART_Init+0x30c>)
 800633c:	4a56      	ldr	r2, [pc, #344]	; (8006498 <HAL_UART_Init+0x310>)
 800633e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006342:	f003 0303 	and.w	r3, r3, #3
 8006346:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006348:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800634c:	f000 814b 	beq.w	80065e6 <HAL_UART_Init+0x45e>
    switch (clocksource)
 8006350:	2b08      	cmp	r3, #8
 8006352:	f63f af7c 	bhi.w	800624e <HAL_UART_Init+0xc6>
 8006356:	a201      	add	r2, pc, #4	; (adr r2, 800635c <HAL_UART_Init+0x1d4>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	0800651f 	.word	0x0800651f
 8006360:	08006391 	.word	0x08006391
 8006364:	080066a3 	.word	0x080066a3
 8006368:	0800624f 	.word	0x0800624f
 800636c:	0800652d 	.word	0x0800652d
 8006370:	0800624f 	.word	0x0800624f
 8006374:	0800624f 	.word	0x0800624f
 8006378:	0800624f 	.word	0x0800624f
 800637c:	080065e1 	.word	0x080065e1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006380:	4b44      	ldr	r3, [pc, #272]	; (8006494 <HAL_UART_Init+0x30c>)
 8006382:	4a46      	ldr	r2, [pc, #280]	; (800649c <HAL_UART_Init+0x314>)
 8006384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006388:	f003 030c 	and.w	r3, r3, #12
 800638c:	5cd3      	ldrb	r3, [r2, r3]
 800638e:	e7db      	b.n	8006348 <HAL_UART_Init+0x1c0>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006390:	f7fe fffa 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8006394:	2800      	cmp	r0, #0
 8006396:	f000 810c 	beq.w	80065b2 <HAL_UART_Init+0x42a>
 800639a:	6a65      	ldr	r5, [r4, #36]	; 0x24
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800639c:	6863      	ldr	r3, [r4, #4]
 800639e:	4a40      	ldr	r2, [pc, #256]	; (80064a0 <HAL_UART_Init+0x318>)
 80063a0:	f832 2015 	ldrh.w	r2, [r2, r5, lsl #1]
 80063a4:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063a8:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063ac:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80063b0:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063b4:	f1a0 0310 	sub.w	r3, r0, #16
 80063b8:	4293      	cmp	r3, r2
 80063ba:	f63f af48 	bhi.w	800624e <HAL_UART_Init+0xc6>
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063be:	6823      	ldr	r3, [r4, #0]
  huart->RxISR = NULL;
 80063c0:	2200      	movs	r2, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 80063c2:	60d8      	str	r0, [r3, #12]
  huart->TxISR = NULL;
 80063c4:	e9c4 221d 	strd	r2, r2, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 80063c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80063cc:	66a1      	str	r1, [r4, #104]	; 0x68
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063ce:	685a      	ldr	r2, [r3, #4]
 80063d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063d4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063dc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80063de:	681a      	ldr	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e0:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 80063e2:	f042 0201 	orr.w	r2, r2, #1
 80063e6:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063e8:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
  tickstart = HAL_GetTick();
 80063ec:	f7fd fa6e 	bl	80038cc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063f0:	6823      	ldr	r3, [r4, #0]
 80063f2:	681a      	ldr	r2, [r3, #0]
 80063f4:	0712      	lsls	r2, r2, #28
  tickstart = HAL_GetTick();
 80063f6:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80063f8:	d40f      	bmi.n	800641a <HAL_UART_Init+0x292>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	0750      	lsls	r0, r2, #29
 80063fe:	d451      	bmi.n	80064a4 <HAL_UART_Init+0x31c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006400:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8006402:	2220      	movs	r2, #32
 8006404:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006408:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800640c:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  return HAL_OK;
 8006410:	4618      	mov	r0, r3
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006412:	66e3      	str	r3, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006414:	6723      	str	r3, [r4, #112]	; 0x70
}
 8006416:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800641a:	69dd      	ldr	r5, [r3, #28]
 800641c:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8006420:	d1eb      	bne.n	80063fa <HAL_UART_Init+0x272>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006422:	f7fd fa53 	bl	80038cc <HAL_GetTick>
 8006426:	1b80      	subs	r0, r0, r6
 8006428:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 800642c:	d216      	bcs.n	800645c <HAL_UART_Init+0x2d4>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800642e:	6823      	ldr	r3, [r4, #0]
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	0757      	lsls	r7, r2, #29
 8006434:	d5f1      	bpl.n	800641a <HAL_UART_Init+0x292>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006436:	69df      	ldr	r7, [r3, #28]
 8006438:	f017 0708 	ands.w	r7, r7, #8
 800643c:	f040 814a 	bne.w	80066d4 <HAL_UART_Init+0x54c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006440:	69da      	ldr	r2, [r3, #28]
 8006442:	0515      	lsls	r5, r2, #20
 8006444:	d5e9      	bpl.n	800641a <HAL_UART_Init+0x292>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006446:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800644a:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 800644c:	4620      	mov	r0, r4
 800644e:	f7ff fe65 	bl	800611c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006452:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 8006454:	f884 7084 	strb.w	r7, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006458:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800645c:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645e:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006462:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006466:	e843 2100 	strex	r1, r2, [r3]
 800646a:	2900      	cmp	r1, #0
 800646c:	d1f7      	bne.n	800645e <HAL_UART_Init+0x2d6>
      huart->gState = HAL_UART_STATE_READY;
 800646e:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8006470:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 8006474:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 8006478:	2003      	movs	r0, #3
 800647a:	e7cc      	b.n	8006416 <HAL_UART_Init+0x28e>
 800647c:	cfff69f3 	.word	0xcfff69f3
 8006480:	40008000 	.word	0x40008000
 8006484:	40004400 	.word	0x40004400
 8006488:	40004800 	.word	0x40004800
 800648c:	40004c00 	.word	0x40004c00
 8006490:	40005000 	.word	0x40005000
 8006494:	40021000 	.word	0x40021000
 8006498:	08008b5c 	.word	0x08008b5c
 800649c:	08008b60 	.word	0x08008b60
 80064a0:	08008b70 	.word	0x08008b70
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064a4:	69dd      	ldr	r5, [r3, #28]
 80064a6:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 80064aa:	d1a9      	bne.n	8006400 <HAL_UART_Init+0x278>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ac:	f7fd fa0e 	bl	80038cc <HAL_GetTick>
 80064b0:	1b80      	subs	r0, r0, r6
 80064b2:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
 80064b6:	d216      	bcs.n	80064e6 <HAL_UART_Init+0x35e>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064b8:	6823      	ldr	r3, [r4, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	0751      	lsls	r1, r2, #29
 80064be:	d5f1      	bpl.n	80064a4 <HAL_UART_Init+0x31c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064c0:	69df      	ldr	r7, [r3, #28]
 80064c2:	f017 0708 	ands.w	r7, r7, #8
 80064c6:	f040 810f 	bne.w	80066e8 <HAL_UART_Init+0x560>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064ca:	69da      	ldr	r2, [r3, #28]
 80064cc:	0512      	lsls	r2, r2, #20
 80064ce:	d5e9      	bpl.n	80064a4 <HAL_UART_Init+0x31c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064d4:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 80064d6:	4620      	mov	r0, r4
 80064d8:	f7ff fe20 	bl	800611c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064dc:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 80064de:	f884 7084 	strb.w	r7, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064e2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80064e6:	6823      	ldr	r3, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064e8:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064ec:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f0:	e843 2100 	strex	r1, r2, [r3]
 80064f4:	2900      	cmp	r1, #0
 80064f6:	d1f7      	bne.n	80064e8 <HAL_UART_Init+0x360>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	f103 0208 	add.w	r2, r3, #8
 80064fc:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006500:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006504:	f103 0008 	add.w	r0, r3, #8
 8006508:	e840 2100 	strex	r1, r2, [r0]
 800650c:	2900      	cmp	r1, #0
 800650e:	d1f3      	bne.n	80064f8 <HAL_UART_Init+0x370>
      huart->RxState = HAL_UART_STATE_READY;
 8006510:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8006512:	f884 1084 	strb.w	r1, [r4, #132]	; 0x84
      huart->RxState = HAL_UART_STATE_READY;
 8006516:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
      return HAL_TIMEOUT;
 800651a:	2003      	movs	r0, #3
 800651c:	e77b      	b.n	8006416 <HAL_UART_Init+0x28e>
        pclk = HAL_RCC_GetPCLK1Freq();
 800651e:	f7fe ff21 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
 8006522:	e737      	b.n	8006394 <HAL_UART_Init+0x20c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006524:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006528:	f000 80c8 	beq.w	80066bc <HAL_UART_Init+0x534>
        pclk = HAL_RCC_GetSysClockFreq();
 800652c:	f7fe fedc 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 8006530:	e730      	b.n	8006394 <HAL_UART_Init+0x20c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006532:	4b72      	ldr	r3, [pc, #456]	; (80066fc <HAL_UART_Init+0x574>)
 8006534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006538:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800653c:	2b40      	cmp	r3, #64	; 0x40
 800653e:	d0f1      	beq.n	8006524 <HAL_UART_Init+0x39c>
 8006540:	d92c      	bls.n	800659c <HAL_UART_Init+0x414>
 8006542:	2b80      	cmp	r3, #128	; 0x80
 8006544:	f000 80af 	beq.w	80066a6 <HAL_UART_Init+0x51e>
 8006548:	2bc0      	cmp	r3, #192	; 0xc0
 800654a:	f47f ae80 	bne.w	800624e <HAL_UART_Init+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800654e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) LSE_VALUE;
 8006552:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006556:	f47f af21 	bne.w	800639c <HAL_UART_Init+0x214>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800655a:	6862      	ldr	r2, [r4, #4]
 800655c:	4968      	ldr	r1, [pc, #416]	; (8006700 <HAL_UART_Init+0x578>)
 800655e:	0853      	lsrs	r3, r2, #1
 8006560:	f831 1015 	ldrh.w	r1, [r1, r5, lsl #1]
 8006564:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006568:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800656c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8006570:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006574:	f1a3 0210 	sub.w	r2, r3, #16
 8006578:	428a      	cmp	r2, r1
 800657a:	f63f ae68 	bhi.w	800624e <HAL_UART_Init+0xc6>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800657e:	f023 020f 	bic.w	r2, r3, #15
 8006582:	b291      	uxth	r1, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006584:	f3c3 0242 	ubfx	r2, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8006588:	6823      	ldr	r3, [r4, #0]
 800658a:	430a      	orrs	r2, r1
  huart->NbRxDataToProcess = 1;
 800658c:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  huart->RxISR = NULL;
 8006590:	2100      	movs	r1, #0
        huart->Instance->BRR = brrtemp;
 8006592:	60da      	str	r2, [r3, #12]
  huart->NbRxDataToProcess = 1;
 8006594:	66a0      	str	r0, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 8006596:	e9c4 111d 	strd	r1, r1, [r4, #116]	; 0x74
 800659a:	e718      	b.n	80063ce <HAL_UART_Init+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800659c:	2b00      	cmp	r3, #0
 800659e:	f47f ae56 	bne.w	800624e <HAL_UART_Init+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065a2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80065a6:	d1ba      	bne.n	800651e <HAL_UART_Init+0x396>
        pclk = HAL_RCC_GetPCLK1Freq();
 80065a8:	f7fe fedc 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80065ac:	b108      	cbz	r0, 80065b2 <HAL_UART_Init+0x42a>
 80065ae:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80065b0:	e7d3      	b.n	800655a <HAL_UART_Init+0x3d2>
  huart->NbRxDataToProcess = 1;
 80065b2:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80065b6:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80065b8:	e9c4 001d 	strd	r0, r0, [r4, #116]	; 0x74
 80065bc:	6823      	ldr	r3, [r4, #0]
 80065be:	e706      	b.n	80063ce <HAL_UART_Init+0x246>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065c0:	4b4e      	ldr	r3, [pc, #312]	; (80066fc <HAL_UART_Init+0x574>)
 80065c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80065ca:	2b10      	cmp	r3, #16
 80065cc:	d0aa      	beq.n	8006524 <HAL_UART_Init+0x39c>
 80065ce:	d9e5      	bls.n	800659c <HAL_UART_Init+0x414>
 80065d0:	2b20      	cmp	r3, #32
 80065d2:	d068      	beq.n	80066a6 <HAL_UART_Init+0x51e>
 80065d4:	2b30      	cmp	r3, #48	; 0x30
 80065d6:	f47f ae3a 	bne.w	800624e <HAL_UART_Init+0xc6>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065da:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80065de:	d0bc      	beq.n	800655a <HAL_UART_Init+0x3d2>
        pclk = (uint32_t) LSE_VALUE;
 80065e0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80065e4:	e6da      	b.n	800639c <HAL_UART_Init+0x214>
    switch (clocksource)
 80065e6:	2b08      	cmp	r3, #8
 80065e8:	f63f ae31 	bhi.w	800624e <HAL_UART_Init+0xc6>
 80065ec:	a201      	add	r2, pc, #4	; (adr r2, 80065f4 <HAL_UART_Init+0x46c>)
 80065ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065f2:	bf00      	nop
 80065f4:	080065a9 	.word	0x080065a9
 80065f8:	0800669d 	.word	0x0800669d
 80065fc:	080066b9 	.word	0x080066b9
 8006600:	0800624f 	.word	0x0800624f
 8006604:	080066bd 	.word	0x080066bd
 8006608:	0800624f 	.word	0x0800624f
 800660c:	0800624f 	.word	0x0800624f
 8006610:	0800624f 	.word	0x0800624f
 8006614:	080066b3 	.word	0x080066b3
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006618:	2b00      	cmp	r3, #0
 800661a:	f47f ae18 	bne.w	800624e <HAL_UART_Init+0xc6>
        pclk = HAL_RCC_GetPCLK1Freq();
 800661e:	f7fe fea1 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8006622:	2800      	cmp	r0, #0
 8006624:	d04f      	beq.n	80066c6 <HAL_UART_Init+0x53e>
 8006626:	6a65      	ldr	r5, [r4, #36]	; 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006628:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800662a:	4b35      	ldr	r3, [pc, #212]	; (8006700 <HAL_UART_Init+0x578>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800662c:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006630:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8006634:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006638:	428b      	cmp	r3, r1
 800663a:	f4ff ae08 	bcc.w	800624e <HAL_UART_Init+0xc6>
 800663e:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8006642:	f63f ae04 	bhi.w	800624e <HAL_UART_Init+0xc6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006646:	2500      	movs	r5, #0
 8006648:	2300      	movs	r3, #0
 800664a:	4629      	mov	r1, r5
 800664c:	f7fa fa0a 	bl	8000a64 <__aeabi_uldivmod>
 8006650:	020b      	lsls	r3, r1, #8
 8006652:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006656:	0202      	lsls	r2, r0, #8
 8006658:	0870      	lsrs	r0, r6, #1
 800665a:	1817      	adds	r7, r2, r0
 800665c:	f143 0800 	adc.w	r8, r3, #0
 8006660:	4632      	mov	r2, r6
 8006662:	462b      	mov	r3, r5
 8006664:	4638      	mov	r0, r7
 8006666:	4641      	mov	r1, r8
 8006668:	f7fa f9fc 	bl	8000a64 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800666c:	4b25      	ldr	r3, [pc, #148]	; (8006704 <HAL_UART_Init+0x57c>)
 800666e:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 8006672:	429a      	cmp	r2, r3
 8006674:	f63f adeb 	bhi.w	800624e <HAL_UART_Init+0xc6>
          huart->Instance->BRR = usartdiv;
 8006678:	6823      	ldr	r3, [r4, #0]
  huart->NbRxDataToProcess = 1;
 800667a:	f04f 1201 	mov.w	r2, #65537	; 0x10001
          huart->Instance->BRR = usartdiv;
 800667e:	60d8      	str	r0, [r3, #12]
  huart->TxISR = NULL;
 8006680:	e9c4 551d 	strd	r5, r5, [r4, #116]	; 0x74
  huart->NbRxDataToProcess = 1;
 8006684:	66a2      	str	r2, [r4, #104]	; 0x68
 8006686:	e6a2      	b.n	80063ce <HAL_UART_Init+0x246>
        pclk = HAL_RCC_GetSysClockFreq();
 8006688:	f7fe fe2e 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 800668c:	e7c9      	b.n	8006622 <HAL_UART_Init+0x49a>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006692:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006696:	4302      	orrs	r2, r0
 8006698:	605a      	str	r2, [r3, #4]
 800669a:	e61d      	b.n	80062d8 <HAL_UART_Init+0x150>
        pclk = HAL_RCC_GetPCLK2Freq();
 800669c:	f7fe fe74 	bl	8005388 <HAL_RCC_GetPCLK2Freq>
 80066a0:	e784      	b.n	80065ac <HAL_UART_Init+0x424>
        pclk = (uint32_t) HSI_VALUE;
 80066a2:	4819      	ldr	r0, [pc, #100]	; (8006708 <HAL_UART_Init+0x580>)
 80066a4:	e67a      	b.n	800639c <HAL_UART_Init+0x214>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066a6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80066aa:	4817      	ldr	r0, [pc, #92]	; (8006708 <HAL_UART_Init+0x580>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ac:	f47f ae76 	bne.w	800639c <HAL_UART_Init+0x214>
 80066b0:	e753      	b.n	800655a <HAL_UART_Init+0x3d2>
        pclk = (uint32_t) LSE_VALUE;
 80066b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80066b6:	e750      	b.n	800655a <HAL_UART_Init+0x3d2>
        pclk = (uint32_t) HSI_VALUE;
 80066b8:	4813      	ldr	r0, [pc, #76]	; (8006708 <HAL_UART_Init+0x580>)
 80066ba:	e74e      	b.n	800655a <HAL_UART_Init+0x3d2>
        pclk = HAL_RCC_GetSysClockFreq();
 80066bc:	f7fe fe14 	bl	80052e8 <HAL_RCC_GetSysClockFreq>
 80066c0:	e774      	b.n	80065ac <HAL_UART_Init+0x424>
        pclk = (uint32_t) HSI_VALUE;
 80066c2:	4811      	ldr	r0, [pc, #68]	; (8006708 <HAL_UART_Init+0x580>)
 80066c4:	e7b0      	b.n	8006628 <HAL_UART_Init+0x4a0>
  huart->NbRxDataToProcess = 1;
 80066c6:	f04f 1201 	mov.w	r2, #65537	; 0x10001
 80066ca:	6823      	ldr	r3, [r4, #0]
 80066cc:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->TxISR = NULL;
 80066ce:	e9c4 001d 	strd	r0, r0, [r4, #116]	; 0x74
 80066d2:	e67c      	b.n	80063ce <HAL_UART_Init+0x246>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066d4:	2608      	movs	r6, #8
 80066d6:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 80066d8:	4620      	mov	r0, r4
 80066da:	f7ff fd1f 	bl	800611c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066de:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
          __HAL_UNLOCK(huart);
 80066e2:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
 80066e6:	e6b9      	b.n	800645c <HAL_UART_Init+0x2d4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80066e8:	2608      	movs	r6, #8
 80066ea:	621e      	str	r6, [r3, #32]
          UART_EndRxTransfer(huart);
 80066ec:	4620      	mov	r0, r4
 80066ee:	f7ff fd15 	bl	800611c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80066f2:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
          __HAL_UNLOCK(huart);
 80066f6:	f884 5084 	strb.w	r5, [r4, #132]	; 0x84
 80066fa:	e6f4      	b.n	80064e6 <HAL_UART_Init+0x35e>
 80066fc:	40021000 	.word	0x40021000
 8006700:	08008b70 	.word	0x08008b70
 8006704:	000ffcff 	.word	0x000ffcff
 8006708:	00f42400 	.word	0x00f42400

0800670c <HAL_UART_Transmit>:
{
 800670c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006710:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8006712:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8006716:	2920      	cmp	r1, #32
{
 8006718:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 800671a:	d105      	bne.n	8006728 <HAL_UART_Transmit+0x1c>
    if ((pData == NULL) || (Size == 0U))
 800671c:	b106      	cbz	r6, 8006720 <HAL_UART_Transmit+0x14>
 800671e:	b93a      	cbnz	r2, 8006730 <HAL_UART_Transmit+0x24>
      return  HAL_ERROR;
 8006720:	2001      	movs	r0, #1
}
 8006722:	b002      	add	sp, #8
 8006724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006728:	2002      	movs	r0, #2
}
 800672a:	b002      	add	sp, #8
 800672c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006730:	4604      	mov	r4, r0
 8006732:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006734:	2700      	movs	r7, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006736:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006738:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800673c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8006740:	9201      	str	r2, [sp, #4]
    tickstart = HAL_GetTick();
 8006742:	f7fd f8c3 	bl	80038cc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006746:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8006748:	9a01      	ldr	r2, [sp, #4]
 800674a:	f8a4 2054 	strh.w	r2, [r4, #84]	; 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800674e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8006752:	4680      	mov	r8, r0
    huart->TxXferCount = Size;
 8006754:	f8a4 2056 	strh.w	r2, [r4, #86]	; 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006758:	d046      	beq.n	80067e8 <HAL_UART_Transmit+0xdc>
    while (huart->TxXferCount > 0U)
 800675a:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800675e:	6820      	ldr	r0, [r4, #0]
 8006760:	b29b      	uxth	r3, r3
 8006762:	b19b      	cbz	r3, 800678c <HAL_UART_Transmit+0x80>
 8006764:	1c69      	adds	r1, r5, #1
 8006766:	d11b      	bne.n	80067a0 <HAL_UART_Transmit+0x94>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006768:	69c2      	ldr	r2, [r0, #28]
 800676a:	0612      	lsls	r2, r2, #24
 800676c:	d5fc      	bpl.n	8006768 <HAL_UART_Transmit+0x5c>
      if (pdata8bits == NULL)
 800676e:	b326      	cbz	r6, 80067ba <HAL_UART_Transmit+0xae>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006770:	f816 3b01 	ldrb.w	r3, [r6], #1
 8006774:	6283      	str	r3, [r0, #40]	; 0x28
      huart->TxXferCount--;
 8006776:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 800677a:	3b01      	subs	r3, #1
 800677c:	b29b      	uxth	r3, r3
 800677e:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006782:	f8b4 3056 	ldrh.w	r3, [r4, #86]	; 0x56
 8006786:	b29b      	uxth	r3, r3
 8006788:	2b00      	cmp	r3, #0
 800678a:	d1eb      	bne.n	8006764 <HAL_UART_Transmit+0x58>
 800678c:	1c69      	adds	r1, r5, #1
 800678e:	d119      	bne.n	80067c4 <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006790:	69c3      	ldr	r3, [r0, #28]
 8006792:	065a      	lsls	r2, r3, #25
 8006794:	d5fc      	bpl.n	8006790 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8006796:	2320      	movs	r3, #32
 8006798:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
    return HAL_OK;
 800679c:	2000      	movs	r0, #0
 800679e:	e7c0      	b.n	8006722 <HAL_UART_Transmit+0x16>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a0:	69c3      	ldr	r3, [r0, #28]
 80067a2:	061b      	lsls	r3, r3, #24
 80067a4:	d4e3      	bmi.n	800676e <HAL_UART_Transmit+0x62>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067a6:	f7fd f891 	bl	80038cc <HAL_GetTick>
 80067aa:	eba0 0008 	sub.w	r0, r0, r8
 80067ae:	4285      	cmp	r5, r0
 80067b0:	d315      	bcc.n	80067de <HAL_UART_Transmit+0xd2>
 80067b2:	b1a5      	cbz	r5, 80067de <HAL_UART_Transmit+0xd2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067b4:	6820      	ldr	r0, [r4, #0]
 80067b6:	6803      	ldr	r3, [r0, #0]
 80067b8:	e7d4      	b.n	8006764 <HAL_UART_Transmit+0x58>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80067ba:	f837 3b02 	ldrh.w	r3, [r7], #2
 80067be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067c2:	e7d7      	b.n	8006774 <HAL_UART_Transmit+0x68>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c4:	69c3      	ldr	r3, [r0, #28]
 80067c6:	065b      	lsls	r3, r3, #25
 80067c8:	d4e5      	bmi.n	8006796 <HAL_UART_Transmit+0x8a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ca:	f7fd f87f 	bl	80038cc <HAL_GetTick>
 80067ce:	eba0 0008 	sub.w	r0, r0, r8
 80067d2:	4285      	cmp	r5, r0
 80067d4:	d303      	bcc.n	80067de <HAL_UART_Transmit+0xd2>
 80067d6:	b115      	cbz	r5, 80067de <HAL_UART_Transmit+0xd2>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80067d8:	6820      	ldr	r0, [r4, #0]
 80067da:	6803      	ldr	r3, [r0, #0]
 80067dc:	e7d6      	b.n	800678c <HAL_UART_Transmit+0x80>
      huart->gState = HAL_UART_STATE_READY;
 80067de:	2320      	movs	r3, #32
 80067e0:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
      return HAL_TIMEOUT;
 80067e4:	2003      	movs	r0, #3
 80067e6:	e79c      	b.n	8006722 <HAL_UART_Transmit+0x16>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067e8:	6923      	ldr	r3, [r4, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1b5      	bne.n	800675a <HAL_UART_Transmit+0x4e>
 80067ee:	4637      	mov	r7, r6
      pdata8bits  = NULL;
 80067f0:	461e      	mov	r6, r3
 80067f2:	e7b2      	b.n	800675a <HAL_UART_Transmit+0x4e>

080067f4 <HAL_UART_Receive>:
{
 80067f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80067f8:	460e      	mov	r6, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 80067fa:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 80067fe:	2920      	cmp	r1, #32
{
 8006800:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 8006802:	d105      	bne.n	8006810 <HAL_UART_Receive+0x1c>
    if ((pData == NULL) || (Size == 0U))
 8006804:	b106      	cbz	r6, 8006808 <HAL_UART_Receive+0x14>
 8006806:	b93a      	cbnz	r2, 8006818 <HAL_UART_Receive+0x24>
      return  HAL_ERROR;
 8006808:	2001      	movs	r0, #1
}
 800680a:	b003      	add	sp, #12
 800680c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_BUSY;
 8006810:	2002      	movs	r0, #2
}
 8006812:	b003      	add	sp, #12
 8006814:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006818:	4604      	mov	r4, r0
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800681a:	2700      	movs	r7, #0
 800681c:	461d      	mov	r5, r3
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800681e:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006820:	f8c0 7090 	str.w	r7, [r0, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006824:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006828:	66c7      	str	r7, [r0, #108]	; 0x6c
 800682a:	9201      	str	r2, [sp, #4]
    tickstart = HAL_GetTick();
 800682c:	f7fd f84e 	bl	80038cc <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8006830:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8006832:	9a01      	ldr	r2, [sp, #4]
 8006834:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 8006838:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800683c:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 800683e:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
    UART_MASK_COMPUTATION(huart);
 8006842:	f000 8082 	beq.w	800694a <HAL_UART_Receive+0x156>
 8006846:	b1fb      	cbz	r3, 8006888 <HAL_UART_Receive+0x94>
 8006848:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800684c:	f000 8090 	beq.w	8006970 <HAL_UART_Receive+0x17c>
 8006850:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
      pdata16bits = NULL;
 8006854:	f04f 0800 	mov.w	r8, #0
    while (huart->RxXferCount > 0U)
 8006858:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800685c:	b29b      	uxth	r3, r3
 800685e:	2b00      	cmp	r3, #0
 8006860:	d06e      	beq.n	8006940 <HAL_UART_Receive+0x14c>
 8006862:	6820      	ldr	r0, [r4, #0]
 8006864:	1c69      	adds	r1, r5, #1
 8006866:	d116      	bne.n	8006896 <HAL_UART_Receive+0xa2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006868:	69c2      	ldr	r2, [r0, #28]
 800686a:	0692      	lsls	r2, r2, #26
 800686c:	d5fc      	bpl.n	8006868 <HAL_UART_Receive+0x74>
      if (pdata8bits == NULL)
 800686e:	2e00      	cmp	r6, #0
 8006870:	d057      	beq.n	8006922 <HAL_UART_Receive+0x12e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006872:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006874:	403b      	ands	r3, r7
 8006876:	f806 3b01 	strb.w	r3, [r6], #1
      huart->RxXferCount--;
 800687a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800687e:	3b01      	subs	r3, #1
 8006880:	b29b      	uxth	r3, r3
 8006882:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8006886:	e7e7      	b.n	8006858 <HAL_UART_Receive+0x64>
    UART_MASK_COMPUTATION(huart);
 8006888:	6923      	ldr	r3, [r4, #16]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d166      	bne.n	800695c <HAL_UART_Receive+0x168>
 800688e:	27ff      	movs	r7, #255	; 0xff
 8006890:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
 8006894:	e7de      	b.n	8006854 <HAL_UART_Receive+0x60>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006896:	69c3      	ldr	r3, [r0, #28]
 8006898:	069b      	lsls	r3, r3, #26
 800689a:	d4e8      	bmi.n	800686e <HAL_UART_Receive+0x7a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800689c:	f7fd f816 	bl	80038cc <HAL_GetTick>
 80068a0:	eba0 0009 	sub.w	r0, r0, r9
 80068a4:	4285      	cmp	r5, r0
 80068a6:	d32e      	bcc.n	8006906 <HAL_UART_Receive+0x112>
 80068a8:	b36d      	cbz	r5, 8006906 <HAL_UART_Receive+0x112>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068aa:	6820      	ldr	r0, [r4, #0]
 80068ac:	6803      	ldr	r3, [r0, #0]
 80068ae:	0759      	lsls	r1, r3, #29
 80068b0:	d5d8      	bpl.n	8006864 <HAL_UART_Receive+0x70>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068b2:	69c3      	ldr	r3, [r0, #28]
 80068b4:	071a      	lsls	r2, r3, #28
 80068b6:	d462      	bmi.n	800697e <HAL_UART_Receive+0x18a>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068b8:	69c3      	ldr	r3, [r0, #28]
 80068ba:	051b      	lsls	r3, r3, #20
 80068bc:	d5d2      	bpl.n	8006864 <HAL_UART_Receive+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80068c2:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c4:	e850 3f00 	ldrex	r3, [r0]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068cc:	e840 3200 	strex	r2, r3, [r0]
 80068d0:	2a00      	cmp	r2, #0
 80068d2:	d1f7      	bne.n	80068c4 <HAL_UART_Receive+0xd0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068d4:	4941      	ldr	r1, [pc, #260]	; (80069dc <HAL_UART_Receive+0x1e8>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d6:	f100 0308 	add.w	r3, r0, #8
 80068da:	e853 3f00 	ldrex	r3, [r3]
 80068de:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e0:	f100 0508 	add.w	r5, r0, #8
 80068e4:	e845 3200 	strex	r2, r3, [r5]
 80068e8:	2a00      	cmp	r2, #0
 80068ea:	d1f4      	bne.n	80068d6 <HAL_UART_Receive+0xe2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d00e      	beq.n	8006910 <HAL_UART_Receive+0x11c>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068f2:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80068f4:	2220      	movs	r2, #32
 80068f6:	f8c4 208c 	str.w	r2, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 80068fa:	6763      	str	r3, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068fc:	66e3      	str	r3, [r4, #108]	; 0x6c
          __HAL_UNLOCK(huart);
 80068fe:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006902:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
        huart->RxState = HAL_UART_STATE_READY;
 8006906:	2320      	movs	r3, #32
 8006908:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        return HAL_TIMEOUT;
 800690c:	2003      	movs	r0, #3
 800690e:	e77c      	b.n	800680a <HAL_UART_Receive+0x16>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006910:	e850 3f00 	ldrex	r3, [r0]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006914:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	e840 3200 	strex	r2, r3, [r0]
 800691c:	2a00      	cmp	r2, #0
 800691e:	d1f7      	bne.n	8006910 <HAL_UART_Receive+0x11c>
 8006920:	e7e7      	b.n	80068f2 <HAL_UART_Receive+0xfe>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006922:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006924:	403b      	ands	r3, r7
 8006926:	f828 3b02 	strh.w	r3, [r8], #2
      huart->RxXferCount--;
 800692a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800692e:	3b01      	subs	r3, #1
 8006930:	b29b      	uxth	r3, r3
 8006932:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006936:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800693a:	b29b      	uxth	r3, r3
 800693c:	2b00      	cmp	r3, #0
 800693e:	d191      	bne.n	8006864 <HAL_UART_Receive+0x70>
    huart->RxState = HAL_UART_STATE_READY;
 8006940:	2320      	movs	r3, #32
 8006942:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
    return HAL_OK;
 8006946:	2000      	movs	r0, #0
 8006948:	e75f      	b.n	800680a <HAL_UART_Receive+0x16>
    UART_MASK_COMPUTATION(huart);
 800694a:	6923      	ldr	r3, [r4, #16]
 800694c:	b953      	cbnz	r3, 8006964 <HAL_UART_Receive+0x170>
 800694e:	f240 17ff 	movw	r7, #511	; 0x1ff
 8006952:	46b0      	mov	r8, r6
 8006954:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
      pdata8bits  = NULL;
 8006958:	461e      	mov	r6, r3
 800695a:	e77d      	b.n	8006858 <HAL_UART_Receive+0x64>
    UART_MASK_COMPUTATION(huart);
 800695c:	277f      	movs	r7, #127	; 0x7f
 800695e:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
 8006962:	e777      	b.n	8006854 <HAL_UART_Receive+0x60>
 8006964:	23ff      	movs	r3, #255	; 0xff
      pdata16bits = NULL;
 8006966:	46b8      	mov	r8, r7
 8006968:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 800696c:	461f      	mov	r7, r3
 800696e:	e773      	b.n	8006858 <HAL_UART_Receive+0x64>
 8006970:	6923      	ldr	r3, [r4, #16]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0f2      	beq.n	800695c <HAL_UART_Receive+0x168>
 8006976:	273f      	movs	r7, #63	; 0x3f
 8006978:	f8a4 7060 	strh.w	r7, [r4, #96]	; 0x60
 800697c:	e76a      	b.n	8006854 <HAL_UART_Receive+0x60>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800697e:	2308      	movs	r3, #8
 8006980:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	e850 3f00 	ldrex	r3, [r0]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006986:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	e840 3200 	strex	r2, r3, [r0]
 800698e:	2a00      	cmp	r2, #0
 8006990:	d1f7      	bne.n	8006982 <HAL_UART_Receive+0x18e>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006992:	4912      	ldr	r1, [pc, #72]	; (80069dc <HAL_UART_Receive+0x1e8>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	f100 0308 	add.w	r3, r0, #8
 8006998:	e853 3f00 	ldrex	r3, [r3]
 800699c:	400b      	ands	r3, r1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	f100 0508 	add.w	r5, r0, #8
 80069a2:	e845 3200 	strex	r2, r3, [r5]
 80069a6:	2a00      	cmp	r2, #0
 80069a8:	d1f4      	bne.n	8006994 <HAL_UART_Receive+0x1a0>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069aa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d00b      	beq.n	80069c8 <HAL_UART_Receive+0x1d4>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069b0:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 80069b2:	2120      	movs	r1, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069b4:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 80069b6:	f8c4 108c 	str.w	r1, [r4, #140]	; 0x8c
  huart->RxISR = NULL;
 80069ba:	6763      	str	r3, [r4, #116]	; 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069bc:	66e3      	str	r3, [r4, #108]	; 0x6c
          __HAL_UNLOCK(huart);
 80069be:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069c2:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 80069c6:	e79e      	b.n	8006906 <HAL_UART_Receive+0x112>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069c8:	e850 3f00 	ldrex	r3, [r0]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069cc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d0:	e840 3200 	strex	r2, r3, [r0]
 80069d4:	2a00      	cmp	r2, #0
 80069d6:	d1f7      	bne.n	80069c8 <HAL_UART_Receive+0x1d4>
 80069d8:	e7ea      	b.n	80069b0 <HAL_UART_Receive+0x1bc>
 80069da:	bf00      	nop
 80069dc:	effffffe 	.word	0xeffffffe

080069e0 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069e0:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 80069e4:	2a01      	cmp	r2, #1
 80069e6:	d017      	beq.n	8006a18 <HAL_UARTEx_DisableFifoMode+0x38>
{
 80069e8:	b430      	push	{r4, r5}

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069ea:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80069ec:	2124      	movs	r1, #36	; 0x24
 80069ee:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 80069f2:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069f4:	6810      	ldr	r0, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069f6:	6814      	ldr	r4, [r2, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80069f8:	2100      	movs	r1, #0
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80069fa:	f020 5000 	bic.w	r0, r0, #536870912	; 0x20000000
  __HAL_UART_DISABLE(huart);
 80069fe:	f024 0401 	bic.w	r4, r4, #1

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);

  huart->gState = HAL_UART_STATE_READY;
 8006a02:	2520      	movs	r5, #32
  __HAL_UART_DISABLE(huart);
 8006a04:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a06:	6659      	str	r1, [r3, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a08:	6010      	str	r0, [r2, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
 8006a0a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006a0c:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006a10:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8006a14:	bc30      	pop	{r4, r5}
 8006a16:	4770      	bx	lr
  __HAL_LOCK(huart);
 8006a18:	2002      	movs	r0, #2
}
 8006a1a:	4770      	bx	lr

08006a1c <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a1c:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 8006a20:	2a01      	cmp	r2, #1
 8006a22:	d033      	beq.n	8006a8c <HAL_UARTEx_SetTxFifoThreshold+0x70>
 8006a24:	4603      	mov	r3, r0

  huart->gState = HAL_UART_STATE_BUSY;
 8006a26:	2024      	movs	r0, #36	; 0x24

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a28:	681a      	ldr	r2, [r3, #0]
{
 8006a2a:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8006a2c:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a30:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a32:	6810      	ldr	r0, [r2, #0]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a34:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8006a36:	f020 0001 	bic.w	r0, r0, #1
 8006a3a:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006a3c:	6890      	ldr	r0, [r2, #8]
 8006a3e:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
 8006a42:	4301      	orrs	r1, r0
 8006a44:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a46:	b97d      	cbnz	r5, 8006a68 <HAL_UARTEx_SetTxFifoThreshold+0x4c>
  {
    huart->NbTxDataToProcess = 1U;
    huart->NbRxDataToProcess = 1U;
 8006a48:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006a4a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006a4c:	2520      	movs	r5, #32
 8006a4e:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8006a52:	2100      	movs	r1, #0
 8006a54:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a58:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8006a5a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006a5c:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006a60:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8006a64:	bcf0      	pop	{r4, r5, r6, r7}
 8006a66:	4770      	bx	lr
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006a68:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a6a:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a6c:	4808      	ldr	r0, [pc, #32]	; (8006a90 <HAL_UARTEx_SetTxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a6e:	4f09      	ldr	r7, [pc, #36]	; (8006a94 <HAL_UARTEx_SetTxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a70:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006a74:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a76:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a78:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a7a:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006a7c:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a7e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a80:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a82:	fb91 f1f6 	sdiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006a86:	fb90 f0f5 	sdiv	r0, r0, r5
 8006a8a:	e7df      	b.n	8006a4c <HAL_UARTEx_SetTxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 8006a8c:	2002      	movs	r0, #2
}
 8006a8e:	4770      	bx	lr
 8006a90:	08008b90 	.word	0x08008b90
 8006a94:	08008b88 	.word	0x08008b88

08006a98 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8006a98:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 8006a9c:	2a01      	cmp	r2, #1
 8006a9e:	d033      	beq.n	8006b08 <HAL_UARTEx_SetRxFifoThreshold+0x70>
 8006aa0:	4603      	mov	r3, r0
  huart->gState = HAL_UART_STATE_BUSY;
 8006aa2:	2024      	movs	r0, #36	; 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aa4:	681a      	ldr	r2, [r3, #0]
{
 8006aa6:	b4f0      	push	{r4, r5, r6, r7}
  huart->gState = HAL_UART_STATE_BUSY;
 8006aa8:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006aac:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8006aae:	6810      	ldr	r0, [r2, #0]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ab0:	6e5d      	ldr	r5, [r3, #100]	; 0x64
  __HAL_UART_DISABLE(huart);
 8006ab2:	f020 0001 	bic.w	r0, r0, #1
 8006ab6:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006ab8:	6890      	ldr	r0, [r2, #8]
 8006aba:	f020 6060 	bic.w	r0, r0, #234881024	; 0xe000000
 8006abe:	4301      	orrs	r1, r0
 8006ac0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ac2:	b97d      	cbnz	r5, 8006ae4 <HAL_UARTEx_SetRxFifoThreshold+0x4c>
    huart->NbRxDataToProcess = 1U;
 8006ac4:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8006ac6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006ac8:	2520      	movs	r5, #32
 8006aca:	f8a3 1068 	strh.w	r1, [r3, #104]	; 0x68
  __HAL_UNLOCK(huart);
 8006ace:	2100      	movs	r1, #0
 8006ad0:	f8a3 006a 	strh.w	r0, [r3, #106]	; 0x6a
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ad4:	6014      	str	r4, [r2, #0]
  return HAL_OK;
 8006ad6:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8006ad8:	f8c3 5088 	str.w	r5, [r3, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8006adc:	f883 1084 	strb.w	r1, [r3, #132]	; 0x84
}
 8006ae0:	bcf0      	pop	{r4, r5, r6, r7}
 8006ae2:	4770      	bx	lr
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ae4:	6896      	ldr	r6, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ae6:	6895      	ldr	r5, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ae8:	4808      	ldr	r0, [pc, #32]	; (8006b0c <HAL_UARTEx_SetRxFifoThreshold+0x74>)
                               (uint16_t)denominator[tx_fifo_threshold];
 8006aea:	4f09      	ldr	r7, [pc, #36]	; (8006b10 <HAL_UARTEx_SetRxFifoThreshold+0x78>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006aec:	f3c6 6642 	ubfx	r6, r6, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006af0:	0f6d      	lsrs	r5, r5, #29
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006af2:	5d81      	ldrb	r1, [r0, r6]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006af4:	5d40      	ldrb	r0, [r0, r5]
                               (uint16_t)denominator[rx_fifo_threshold];
 8006af6:	5dbe      	ldrb	r6, [r7, r6]
                               (uint16_t)denominator[tx_fifo_threshold];
 8006af8:	5d7d      	ldrb	r5, [r7, r5]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006afa:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006afc:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006afe:	fb91 f1f6 	sdiv	r1, r1, r6
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b02:	fb90 f0f5 	sdiv	r0, r0, r5
 8006b06:	e7df      	b.n	8006ac8 <HAL_UARTEx_SetRxFifoThreshold+0x30>
  __HAL_LOCK(huart);
 8006b08:	2002      	movs	r0, #2
}
 8006b0a:	4770      	bx	lr
 8006b0c:	08008b90 	.word	0x08008b90
 8006b10:	08008b88 	.word	0x08008b88

08006b14 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8006b14:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8006b16:	8803      	ldrh	r3, [r0, #0]
 8006b18:	140c      	asrs	r4, r1, #16
{
 8006b1a:	b084      	sub	sp, #16
 8006b1c:	b20d      	sxth	r5, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8006b1e:	fb04 f204 	mul.w	r2, r4, r4
{
 8006b22:	9101      	str	r1, [sp, #4]
    square_limit = maxModule * maxModule;
 8006b24:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8006b28:	fb05 2105 	mla	r1, r5, r5, r2

    if (square_sum > square_limit)
 8006b2c:	428b      	cmp	r3, r1
 8006b2e:	da10      	bge.n	8006b52 <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8006b30:	8846      	ldrh	r6, [r0, #2]
 8006b32:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8006b36:	4282      	cmp	r2, r0
 8006b38:	dd14      	ble.n	8006b64 <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8006b3a:	2c00      	cmp	r4, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8006b3c:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8006b40:	bfb8      	it	lt
 8006b42:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8006b44:	f7fb fad0 	bl	80020e8 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8006b48:	2d00      	cmp	r5, #0
 8006b4a:	da00      	bge.n	8006b4e <Circle_Limitation+0x3a>
        {
          new_q = - new_q;
 8006b4c:	4240      	negs	r0, r0
        else
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
 8006b4e:	b205      	sxth	r5, r0
      local_vqd.d = (int16_t)new_d;
 8006b50:	b234      	sxth	r4, r6
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8006b52:	b2ad      	uxth	r5, r5
 8006b54:	2000      	movs	r0, #0
 8006b56:	b2a4      	uxth	r4, r4
 8006b58:	f365 000f 	bfi	r0, r5, #0, #16
 8006b5c:	f364 401f 	bfi	r0, r4, #16, #16
}
 8006b60:	b004      	add	sp, #16
 8006b62:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8006b64:	1a98      	subs	r0, r3, r2
 8006b66:	f7fb fabf 	bl	80020e8 <MCM_Sqrt>
        if (Vqd.q < 0)
 8006b6a:	2d00      	cmp	r5, #0
 8006b6c:	db03      	blt.n	8006b76 <Circle_Limitation+0x62>
        new_d = Vqd.d;
 8006b6e:	4626      	mov	r6, r4
      local_vqd.q = (int16_t)new_q;
 8006b70:	b205      	sxth	r5, r0
      local_vqd.d = (int16_t)new_d;
 8006b72:	b234      	sxth	r4, r6
 8006b74:	e7ed      	b.n	8006b52 <Circle_Limitation+0x3e>
          new_q = -new_q;
 8006b76:	4240      	negs	r0, r0
        new_d = Vqd.d;
 8006b78:	4626      	mov	r6, r4
 8006b7a:	e7e8      	b.n	8006b4e <Circle_Limitation+0x3a>

08006b7c <EAC_Init>:
  * @param  pVSS: Pointer to Virtual Speed Sensor structure used by the EAC.
  * @param  pENC: Pointer to ENCoder structure used by the EAC.
  */
__weak void EAC_Init(EncAlign_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, VirtualSpeedSensor_Handle_t *pVSS,
                     ENCODER_Handle_t *pENC)
{
 8006b7c:	b410      	push	{r4}
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
    pHandle->EncAligned = false;
 8006b7e:	2400      	movs	r4, #0
 8006b80:	7384      	strb	r4, [r0, #14]
    pHandle->EncRestart = false;
 8006b82:	73c4      	strb	r4, [r0, #15]
    pHandle->pVSS = pVSS;
 8006b84:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pENC = pENC;
 8006b88:	6083      	str	r3, [r0, #8]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8006b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <EAC_StartAlignment>:
  * It configures the VSS (Virtual Speed Sensor) with the required angle and sets the
  * STC (Speed and Torque Controller) to execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak void EAC_StartAlignment(EncAlign_Handle_t *pHandle)
{
 8006b90:	b510      	push	{r4, lr}
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero */
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8006b92:	2200      	movs	r2, #0
{
 8006b94:	4604      	mov	r4, r0
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8006b96:	4611      	mov	r1, r2
 8006b98:	6840      	ldr	r0, [r0, #4]
 8006b9a:	f001 fe2d 	bl	80087f8 <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle */
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 8006b9e:	6863      	ldr	r3, [r4, #4]
 8006ba0:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006ba4:	785a      	ldrb	r2, [r3, #1]
    pHandle->hElAngleAccu = hMecAngle;
 8006ba6:	8619      	strh	r1, [r3, #48]	; 0x30
    pHandle->_Super.hElAngle = hMecAngle;
 8006ba8:	8099      	strh	r1, [r3, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006baa:	fb91 f2f2 	sdiv	r2, r1, r2

    /* Set pSTC in MCM_TORQUE_MODE */
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8006bae:	6820      	ldr	r0, [r4, #0]
 8006bb0:	80da      	strh	r2, [r3, #6]
 8006bb2:	2104      	movs	r1, #4
 8006bb4:	f001 fb50 	bl	8008258 <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 8006bb8:	2200      	movs	r2, #0
 8006bba:	4611      	mov	r1, r2
 8006bbc:	6820      	ldr	r0, [r4, #0]
 8006bbe:	f001 fb4f 	bl	8008260 <STC_ExecRamp>

    /* Execute the torque ramp */
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 8006bc2:	8ae2      	ldrh	r2, [r4, #22]
 8006bc4:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8006bc8:	6820      	ldr	r0, [r4, #0]
 8006bca:	f001 fb49 	bl	8008260 <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase */
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8006bce:	8ae1      	ldrh	r1, [r4, #22]
 8006bd0:	8a23      	ldrh	r3, [r4, #16]
    wAux /= 1000U;
 8006bd2:	4a04      	ldr	r2, [pc, #16]	; (8006be4 <EAC_StartAlignment+0x54>)
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8006bd4:	fb03 f301 	mul.w	r3, r3, r1
    wAux /= 1000U;
 8006bd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006bdc:	099b      	lsrs	r3, r3, #6
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 8006bde:	3301      	adds	r3, #1
 8006be0:	81a3      	strh	r3, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8006be2:	bd10      	pop	{r4, pc}
 8006be4:	10624dd3 	.word	0x10624dd3

08006be8 <EAC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 8006be8:	8983      	ldrh	r3, [r0, #12]
 8006bea:	b12b      	cbz	r3, 8006bf8 <EAC_Exec+0x10>
    {
      pHandle->hRemainingTicks--;
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	8183      	strh	r3, [r0, #12]

      if (0U == pHandle->hRemainingTicks)
 8006bf2:	b11b      	cbz	r3, 8006bfc <EAC_Exec+0x14>
        pHandle->EncAligned = true;
        retVal = true;
      }
      else
      {
        retVal = false;
 8006bf4:	2000      	movs	r0, #0
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif

  return (retVal);
}
 8006bf6:	4770      	bx	lr
  bool retVal = true;
 8006bf8:	2001      	movs	r0, #1
 8006bfa:	4770      	bx	lr
{
 8006bfc:	b510      	push	{r4, lr}
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 8006bfe:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 8006c02:	7e03      	ldrb	r3, [r0, #24]
 8006c04:	fb91 f1f3 	sdiv	r1, r1, r3
 8006c08:	4604      	mov	r4, r0
 8006c0a:	6880      	ldr	r0, [r0, #8]
 8006c0c:	f000 f946 	bl	8006e9c <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 8006c10:	2001      	movs	r0, #1
 8006c12:	73a0      	strb	r0, [r4, #14]
}
 8006c14:	bd10      	pop	{r4, pc}
 8006c16:	bf00      	nop

08006c18 <ENC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8006c18:	6a03      	ldr	r3, [r0, #32]
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8006c1a:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
{
 8006c1e:	b470      	push	{r4, r5, r6}
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8006c20:	681d      	ldr	r5, [r3, #0]
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8006c22:	f8b0 606e 	ldrh.w	r6, [r0, #110]	; 0x6e
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8006c26:	ebc2 1202 	rsb	r2, r2, r2, lsl #4
 8006c2a:	0092      	lsls	r2, r2, #2
  WRITE_REG(TIMx->CNT, Counter);
 8006c2c:	2100      	movs	r1, #0
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8006c2e:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
 8006c32:	601d      	str	r5, [r3, #0]
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8006c34:	f04f 34ff 	mov.w	r4, #4294967295
  WRITE_REG(TIMx->CNT, Counter);
 8006c38:	6259      	str	r1, [r3, #36]	; 0x24
 8006c3a:	fbb4 f4f6 	udiv	r4, r4, r6
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8006c3e:	6242      	str	r2, [r0, #36]	; 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8006c40:	6684      	str	r4, [r0, #104]	; 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8006c42:	699c      	ldr	r4, [r3, #24]
 8006c44:	f8b0 207a 	ldrh.w	r2, [r0, #122]	; 0x7a
 8006c48:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8006c4c:	4322      	orrs	r2, r4
 8006c4e:	619a      	str	r2, [r3, #24]
 8006c50:	699a      	ldr	r2, [r3, #24]
 8006c52:	f8b0 407a 	ldrh.w	r4, [r0, #122]	; 0x7a
 8006c56:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8006c5a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006c5e:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8006c62:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006c64:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006c66:	68da      	ldr	r2, [r3, #12]
 8006c68:	f042 0201 	orr.w	r2, r2, #1
 8006c6c:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	f042 0201 	orr.w	r2, r2, #1
 8006c74:	601a      	str	r2, [r3, #0]

    /* Enable the counting timer */
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;
 8006c76:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74

    for (index = 0U; index < bufferSize; index++)
 8006c7a:	b13a      	cbz	r2, 8006c8c <ENC_Init+0x74>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8006c7c:	3a01      	subs	r2, #1
 8006c7e:	b2d2      	uxtb	r2, r2
 8006c80:	3201      	adds	r2, #1
 8006c82:	0092      	lsls	r2, r2, #2
 8006c84:	3028      	adds	r0, #40	; 0x28
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8006c86:	bc70      	pop	{r4, r5, r6}
 8006c88:	f001 be39 	b.w	80088fe <memset>
 8006c8c:	bc70      	pop	{r4, r5, r6}
 8006c8e:	4770      	bx	lr

08006c90 <ENC_Clear>:
  *         This function must be called before starting the motor to initialize
  *         the speed measurement process.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Clear(ENCODER_Handle_t *pHandle)
{
 8006c90:	b510      	push	{r4, lr}
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8006c92:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
{
 8006c96:	4604      	mov	r4, r0
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8006c98:	b13a      	cbz	r2, 8006caa <ENC_Clear+0x1a>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8006c9a:	3a01      	subs	r2, #1
 8006c9c:	b2d2      	uxtb	r2, r2
 8006c9e:	3201      	adds	r2, #1
 8006ca0:	0092      	lsls	r2, r2, #2
 8006ca2:	2100      	movs	r1, #0
 8006ca4:	3028      	adds	r0, #40	; 0x28
 8006ca6:	f001 fe2a 	bl	80088fe <memset>
    }
    pHandle->SensorIsReliable = true;
 8006caa:	2301      	movs	r3, #1
 8006cac:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8006cb0:	bd10      	pop	{r4, pc}
 8006cb2:	bf00      	nop

08006cb4 <ENC_CalcAngle>:
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8006cb4:	6a01      	ldr	r1, [r0, #32]
 8006cb6:	6e82      	ldr	r2, [r0, #104]	; 0x68
{
 8006cb8:	b430      	push	{r4, r5}
  return (uint32_t)(READ_REG(TIMx->CNT));
 8006cba:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /* Computes and stores the rotor mechanical angle */
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 8006cbc:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8006cc0:	b2ad      	uxth	r5, r5
{
 8006cc2:	4603      	mov	r3, r0
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 8006cc4:	fb02 f205 	mul.w	r2, r2, r5

    pHandle->_Super.hMecAngle = mecAngle;

    /* Computes and stores the rotor electrical angle */
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006cc8:	7840      	ldrb	r0, [r0, #1]

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8006cca:	689c      	ldr	r4, [r3, #8]
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8006ccc:	1412      	asrs	r2, r2, #16
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006cce:	b295      	uxth	r5, r2
    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8006cd0:	1a69      	subs	r1, r5, r1
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006cd2:	fb10 f005 	smulbb	r0, r0, r5
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8006cd6:	fa04 f181 	sxtah	r1, r4, r1
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006cda:	b200      	sxth	r0, r0
    mecAngle = (int16_t)wtemp1;
 8006cdc:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8006cde:	6099      	str	r1, [r3, #8]
    pHandle->_Super.hElAngle = elAngle;
 8006ce0:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 8006ce2:	bc30      	pop	{r4, r5}
 8006ce4:	4770      	bx	lr
 8006ce6:	bf00      	nop

08006ce8 <ENC_CalcAvrgMecSpeedUnit>:
  * @param  pMecSpeedUnit pointer used to return the rotor average mechanical speed
  *         expressed in the unit defined by #SPEED_UNIT
  * @retval true = sensor information is reliable. false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit(ENCODER_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 8006ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int32_t wtemp2;
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8006cec:	6a04      	ldr	r4, [r0, #32]
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8006cee:	f890 7074 	ldrb.w	r7, [r0, #116]	; 0x74
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006cf2:	68e3      	ldr	r3, [r4, #12]
 8006cf4:	f023 0301 	bic.w	r3, r3, #1
 8006cf8:	60e3      	str	r3, [r4, #12]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8006cfa:	6a62      	ldr	r2, [r4, #36]	; 0x24
#ifdef TIM_CNT_UIFCPY
    /* disable Interrupt generation */
    LL_TIM_DisableIT_UPDATE(TIMx);
#endif
    CntCapture = LL_TIM_GetCounter(TIMx);
    OverflowCntSample = pHandle->TimerOverflowNb;
 8006cfc:	f8b0 5070 	ldrh.w	r5, [r0, #112]	; 0x70
    pHandle->TimerOverflowNb = 0;
    directionSample = LL_TIM_GetDirection(TIMx);
#ifdef TIM_CNT_UIFCPY
    OFbit = __LL_TIM_GETFLAG_UIFCPY(CntCapture);
    if (0U == OFbit)
 8006d00:	ea5f 7cd2 	movs.w	ip, r2, lsr #31
    pHandle->TimerOverflowNb = 0;
 8006d04:	f04f 0600 	mov.w	r6, #0
 8006d08:	f8a0 6070 	strh.w	r6, [r0, #112]	; 0x70
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006d0c:	bf18      	it	ne
 8006d0e:	f06f 0601 	mvnne.w	r6, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8006d12:	6823      	ldr	r3, [r4, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006d14:	bf18      	it	ne
 8006d16:	6126      	strne	r6, [r4, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006d18:	68e6      	ldr	r6, [r4, #12]
    OverflowCntSample = pHandle->TimerOverflowNb;
 8006d1a:	b2ad      	uxth	r5, r5
 8006d1c:	f046 0601 	orr.w	r6, r6, #1

    /* If UIFCPY is not present, OverflowCntSample can not be used safely for
    speed computation, but we still use it to check that we do not exceed one overflow
    (sample frequency not less than mechanical motor speed */

    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 8006d20:	4465      	add	r5, ip
 8006d22:	60e6      	str	r6, [r4, #12]
 8006d24:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8006d28:	f8b0 4072 	ldrh.w	r4, [r0, #114]	; 0x72
 8006d2c:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	; 0x6e
 8006d30:	bf98      	it	ls
 8006d32:	f890 607d 	ldrbls.w	r6, [r0, #125]	; 0x7d
    CLEAR_BIT(CntCapture, TIM_CNT_UIFCPY);
 8006d36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    {
      pHandle->TimerOverflowError = true;
 8006d3a:	bf88      	it	hi
 8006d3c:	2601      	movhi	r6, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8006d3e:	f003 0310 	and.w	r3, r3, #16
 8006d42:	bf88      	it	hi
 8006d44:	f880 607d 	strbhi.w	r6, [r0, #125]	; 0x7d
 8006d48:	1b14      	subs	r4, r2, r4
 8006d4a:	fb0c f505 	mul.w	r5, ip, r5
    {
      /* Nothing to do */
    }

    /* Calculation of delta angle */
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	f000 8093 	beq.w	8006e7a <ENC_CalcAvrgMecSpeedUnit+0x192>
      /* Encoder timer down-counting */
      /* If UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF */
#ifndef TIM_CNT_UIFCPY
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
#endif
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8006d54:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8006d58:	330a      	adds	r3, #10
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8006d5a:	1b64      	subs	r4, r4, r5
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8006d5c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
    }


    /* Computes & returns average mechanical speed */
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d60:	2f00      	cmp	r7, #0
 8006d62:	f000 8093 	beq.w	8006e8c <ENC_CalcAvrgMecSpeedUnit+0x1a4>
 8006d66:	2f01      	cmp	r7, #1
    {
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d68:	6a83      	ldr	r3, [r0, #40]	; 0x28
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d6a:	d939      	bls.n	8006de0 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d6c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d6e:	2f02      	cmp	r7, #2
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d70:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d72:	d035      	beq.n	8006de0 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d74:	6b04      	ldr	r4, [r0, #48]	; 0x30
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d76:	2f03      	cmp	r7, #3
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d78:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d7a:	d031      	beq.n	8006de0 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d7c:	6b44      	ldr	r4, [r0, #52]	; 0x34
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d7e:	2f04      	cmp	r7, #4
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d80:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d82:	d02d      	beq.n	8006de0 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d84:	6b84      	ldr	r4, [r0, #56]	; 0x38
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d86:	2f05      	cmp	r7, #5
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d88:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d8a:	d029      	beq.n	8006de0 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d8c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d8e:	2f06      	cmp	r7, #6
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d90:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d92:	d025      	beq.n	8006de0 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d94:	6c04      	ldr	r4, [r0, #64]	; 0x40
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d96:	2f07      	cmp	r7, #7
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d98:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d9a:	d021      	beq.n	8006de0 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d9c:	6c44      	ldr	r4, [r0, #68]	; 0x44
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d9e:	2f08      	cmp	r7, #8
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006da0:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006da2:	d01d      	beq.n	8006de0 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006da4:	6c84      	ldr	r4, [r0, #72]	; 0x48
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006da6:	2f09      	cmp	r7, #9
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006da8:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006daa:	d019      	beq.n	8006de0 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006dac:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006dae:	2f0a      	cmp	r7, #10
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006db0:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006db2:	d015      	beq.n	8006de0 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006db4:	6d04      	ldr	r4, [r0, #80]	; 0x50
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006db6:	2f0b      	cmp	r7, #11
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006db8:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006dba:	d011      	beq.n	8006de0 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006dbc:	6d44      	ldr	r4, [r0, #84]	; 0x54
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006dbe:	2f0c      	cmp	r7, #12
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006dc0:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006dc2:	d00d      	beq.n	8006de0 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006dc4:	6d84      	ldr	r4, [r0, #88]	; 0x58
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006dc6:	2f0d      	cmp	r7, #13
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006dc8:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006dca:	d009      	beq.n	8006de0 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006dcc:	6dc4      	ldr	r4, [r0, #92]	; 0x5c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006dce:	2f0e      	cmp	r7, #14
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006dd0:	4423      	add	r3, r4
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006dd2:	d005      	beq.n	8006de0 <ENC_CalcAvrgMecSpeedUnit+0xf8>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006dd4:	6e04      	ldr	r4, [r0, #96]	; 0x60
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006dd6:	2f0f      	cmp	r7, #15
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006dd8:	4423      	add	r3, r4
 8006dda:	bf1c      	itt	ne
 8006ddc:	6e44      	ldrne	r4, [r0, #100]	; 0x64
 8006dde:	191b      	addne	r3, r3, r4
    }
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 8006de0:	6a44      	ldr	r4, [r0, #36]	; 0x24
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 8006de2:	fb0c f707 	mul.w	r7, ip, r7
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 8006de6:	fb04 f303 	mul.w	r3, r4, r3
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 8006dea:	b10f      	cbz	r7, 8006df0 <ENC_CalcAvrgMecSpeedUnit+0x108>
 8006dec:	fb93 f3f7 	sdiv	r3, r3, r7
 8006df0:	fa0f fc83 	sxth.w	ip, r3
 8006df4:	b29b      	uxth	r3, r3

    *pMecSpeedUnit = (int16_t)wtemp1;
 8006df6:	f8a1 c000 	strh.w	ip, [r1]

    /* Stores average mechanical speed */
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;

    /* Computes & stores the instantaneous electrical speed [dpp], var wtemp1 */
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006dfa:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;

    /* Last captured value update */
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
    /*Buffer index update*/
    pHandle->DeltaCapturesIndex++;
 8006dfe:	f890 507c 	ldrb.w	r5, [r0, #124]	; 0x7c
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006e02:	f8b0 e06c 	ldrh.w	lr, [r0, #108]	; 0x6c
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8006e06:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006e0a:	340a      	adds	r4, #10
    pHandle->DeltaCapturesIndex++;
 8006e0c:	3501      	adds	r5, #1
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006e0e:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 8006e12:	f8a0 c00c 	strh.w	ip, [r0, #12]
    pHandle->DeltaCapturesIndex++;
 8006e16:	b2ed      	uxtb	r5, r5
 8006e18:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 8006e1c:	7845      	ldrb	r5, [r0, #1]

    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8006e1e:	f890 c07c 	ldrb.w	ip, [r0, #124]	; 0x7c
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8006e22:	69c4      	ldr	r4, [r0, #28]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006e24:	fb07 f70e 	mul.w	r7, r7, lr
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8006e28:	eba3 0308 	sub.w	r3, r3, r8
 8006e2c:	8243      	strh	r3, [r0, #18]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8006e2e:	f64f 7efe 	movw	lr, #65534	; 0xfffe
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006e32:	fb05 f307 	mul.w	r3, r5, r7
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8006e36:	f64f 75ff 	movw	r5, #65535	; 0xffff
 8006e3a:	4572      	cmp	r2, lr
 8006e3c:	bf88      	it	hi
 8006e3e:	462a      	movhi	r2, r5
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8006e40:	f890 5074 	ldrb.w	r5, [r0, #116]	; 0x74
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 8006e44:	f8b0 706e 	ldrh.w	r7, [r0, #110]	; 0x6e
 8006e48:	fb93 f3f7 	sdiv	r3, r3, r7
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8006e4c:	4565      	cmp	r5, ip
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8006e4e:	fb04 f403 	mul.w	r4, r4, r3
    {
      pHandle->DeltaCapturesIndex = 0U;
 8006e52:	bf98      	it	ls
 8006e54:	2300      	movls	r3, #0
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8006e56:	f8a0 2072 	strh.w	r2, [r0, #114]	; 0x72
      pHandle->DeltaCapturesIndex = 0U;
 8006e5a:	bf98      	it	ls
 8006e5c:	f880 307c 	strbls.w	r3, [r0, #124]	; 0x7c
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8006e60:	8b42      	ldrh	r2, [r0, #26]
 8006e62:	fb94 f4f2 	sdiv	r4, r4, r2
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 8006e66:	81c4      	strh	r4, [r0, #14]
    {
      /* Nothing to do */
    }

    /* Checks the reliability status, then stores and returns it */
    if (pHandle->TimerOverflowError)
 8006e68:	b19e      	cbz	r6, 8006e92 <ENC_CalcAvrgMecSpeedUnit+0x1aa>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8006e6a:	78c2      	ldrb	r2, [r0, #3]
 8006e6c:	7002      	strb	r2, [r0, #0]
      pHandle->SensorIsReliable = false;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8006e7a:	f890 307c 	ldrb.w	r3, [r0, #124]	; 0x7c
 8006e7e:	330a      	adds	r3, #10
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8006e80:	442c      	add	r4, r5
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8006e82:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006e86:	2f00      	cmp	r7, #0
 8006e88:	f47f af6d 	bne.w	8006d66 <ENC_CalcAvrgMecSpeedUnit+0x7e>
 8006e8c:	463b      	mov	r3, r7
 8006e8e:	46bc      	mov	ip, r7
 8006e90:	e7b1      	b.n	8006df6 <ENC_CalcAvrgMecSpeedUnit+0x10e>
}
 8006e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8006e96:	f001 b991 	b.w	80081bc <SPD_IsMecSpeedReliable>
 8006e9a:	bf00      	nop

08006e9c <ENC_SetMecAngle>:
    uint16_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8006e9c:	7842      	ldrb	r2, [r0, #1]
    pHandle->_Super.hMecAngle = localhMecAngle;
 8006e9e:	80c1      	strh	r1, [r0, #6]
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8006ea0:	b28b      	uxth	r3, r1
 8006ea2:	fb12 f203 	smulbb	r2, r2, r3
    if (localhMecAngle < 0)
 8006ea6:	2900      	cmp	r1, #0
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8006ea8:	8082      	strh	r2, [r0, #4]
 8006eaa:	bfb8      	it	lt
 8006eac:	f103 33ff 	addlt.w	r3, r3, #4294967295
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8006eb0:	6a02      	ldr	r2, [r0, #32]
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8006eb2:	f8b0 006e 	ldrh.w	r0, [r0, #110]	; 0x6e
 8006eb6:	4905      	ldr	r1, [pc, #20]	; (8006ecc <ENC_SetMecAngle+0x30>)
 8006eb8:	bfb8      	it	lt
 8006eba:	b29b      	uxthlt	r3, r3
 8006ebc:	fb03 f300 	mul.w	r3, r3, r0
 8006ec0:	fba1 1303 	umull	r1, r3, r1, r3
 8006ec4:	0bdb      	lsrs	r3, r3, #15

    TIMx->CNT = (uint16_t)hAngleCounts;
 8006ec6:	6253      	str	r3, [r2, #36]	; 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	80008001 	.word	0x80008001

08006ed0 <ENC_IRQHandler>:
/**
  * @brief  TIMER ENCODER Overflow interrupt counter update
  * @param  pHandleVoid: handler of the current instance of the encoder component
  */
__weak void *ENC_IRQHandler(void *pHandleVoid)
{
 8006ed0:	4602      	mov	r2, r0
  /* Updates the number of overflows occurred */
  /* The handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;

  return (MC_NULL);
}
 8006ed2:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1U;
 8006ed4:	f8b2 3070 	ldrh.w	r3, [r2, #112]	; 0x70
 8006ed8:	3301      	adds	r3, #1
 8006eda:	b29b      	uxth	r3, r3
 8006edc:	f8a2 3070 	strh.w	r3, [r2, #112]	; 0x70
}
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop

08006ee4 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 )
 8006ee4:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
 8006ee8:	8843      	ldrh	r3, [r0, #2]
 8006eea:	8982      	ldrh	r2, [r0, #12]
 8006eec:	2900      	cmp	r1, #0
 8006eee:	dd08      	ble.n	8006f02 <NTC_SetFaultState+0x1e>
    {
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d804      	bhi.n	8006efe <NTC_SetFaultState+0x1a>
      {
        hFault = MC_OVER_TEMP;
      }
      else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8006ef4:	89c2      	ldrh	r2, [r0, #14]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d808      	bhi.n	8006f0c <NTC_SetFaultState+0x28>
      {
        hFault = MC_NO_ERROR;
      }
      else
      {
        hFault = pHandle->hFaultState;
 8006efa:	8900      	ldrh	r0, [r0, #8]
 8006efc:	4770      	bx	lr
        hFault = MC_OVER_TEMP;
 8006efe:	2008      	movs	r0, #8
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (hFault);
}
 8006f00:	4770      	bx	lr
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d3fb      	bcc.n	8006efe <NTC_SetFaultState+0x1a>
      else if (pHandle->hAvTemp_d > pHandle->hOverTempDeactThreshold)
 8006f06:	89c2      	ldrh	r2, [r0, #14]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d2f6      	bcs.n	8006efa <NTC_SetFaultState+0x16>
        hFault = MC_NO_ERROR;
 8006f0c:	2000      	movs	r0, #0
 8006f0e:	4770      	bx	lr

08006f10 <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8006f10:	7803      	ldrb	r3, [r0, #0]
 8006f12:	b92b      	cbnz	r3, 8006f20 <NTC_Init+0x10>
    /* nothing to do */
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 ) 
 8006f14:	f9b0 2010 	ldrsh.w	r2, [r0, #16]
 8006f18:	2a00      	cmp	r2, #0
 8006f1a:	dd06      	ble.n	8006f2a <NTC_Init+0x1a>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8006f1c:	8043      	strh	r3, [r0, #2]
}
 8006f1e:	4770      	bx	lr
      pHandle->hFaultState = MC_NO_ERROR;
 8006f20:	2200      	movs	r2, #0
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8006f22:	8883      	ldrh	r3, [r0, #4]
      pHandle->hFaultState = MC_NO_ERROR;
 8006f24:	8102      	strh	r2, [r0, #8]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8006f26:	8043      	strh	r3, [r0, #2]
}
 8006f28:	4770      	bx	lr
    {
      pHandle->hAvTemp_d = 0U;
    }
    else
    {
      pHandle->hAvTemp_d = 0xFFFFU;
 8006f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f2e:	8043      	strh	r3, [r0, #2]
 8006f30:	4770      	bx	lr
 8006f32:	bf00      	nop

08006f34 <NTC_CalcAvTemp>:
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8006f34:	7803      	ldrb	r3, [r0, #0]
 8006f36:	b98b      	cbnz	r3, 8006f5c <NTC_CalcAvTemp+0x28>
    {
      uint16_t hAux;
      hAux = rawValue;

      if (0xFFFFU == hAux)
 8006f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f3c:	4299      	cmp	r1, r3
{
 8006f3e:	b510      	push	{r4, lr}
      if (0xFFFFU == hAux)
 8006f40:	d007      	beq.n	8006f52 <NTC_CalcAvTemp+0x1e>
        /* Nothing to do */
      }
      else
      {
        uint32_t wtemp;
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8006f42:	8942      	ldrh	r2, [r0, #10]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8006f44:	8843      	ldrh	r3, [r0, #2]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8006f46:	1e54      	subs	r4, r2, #1
        wtemp += hAux;
 8006f48:	fb04 1103 	mla	r1, r4, r3, r1
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8006f4c:	fbb1 f1f2 	udiv	r1, r1, r2

        pHandle->hAvTemp_d = (uint16_t)wtemp;
 8006f50:	8041      	strh	r1, [r0, #2]
 8006f52:	4604      	mov	r4, r0
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8006f54:	f7ff ffc6 	bl	8006ee4 <NTC_SetFaultState>
 8006f58:	8120      	strh	r0, [r4, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8006f5a:	bd10      	pop	{r4, pc}
      pHandle->hFaultState = MC_NO_ERROR;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	8103      	strh	r3, [r0, #8]
 8006f60:	4618      	mov	r0, r3
}
 8006f62:	4770      	bx	lr

08006f64 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8006f64:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8006f66:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8006f68:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8006f6a:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8006f6c:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8006f6e:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8006f70:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006f72:	4770      	bx	lr

08006f74 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8006f74:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8006f76:	4770      	bx	lr

08006f78 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006f78:	f9b0 2004 	ldrsh.w	r2, [r0, #4]

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8006f7c:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
{
 8006f80:	b4f0      	push	{r4, r5, r6, r7}
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006f82:	fb01 f202 	mul.w	r2, r1, r2
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8006f86:	f9b0 5014 	ldrsh.w	r5, [r0, #20]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8006f8a:	f9b0 6016 	ldrsh.w	r6, [r0, #22]
    if (0 == pHandle->hKiGain)
 8006f8e:	b18b      	cbz	r3, 8006fb4 <PI_Controller+0x3c>
 8006f90:	e9d0 7402 	ldrd	r7, r4, [r0, #8]
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006f94:	fb01 f103 	mul.w	r1, r1, r3
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;

      if (wIntegral_sum_temp < 0)
 8006f98:	187b      	adds	r3, r7, r1
 8006f9a:	d424      	bmi.n	8006fe6 <PI_Controller+0x6e>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 8006f9c:	2f00      	cmp	r7, #0
 8006f9e:	da04      	bge.n	8006faa <PI_Controller+0x32>
        {
          if (wIntegral_Term < 0)
          {
            wIntegral_sum_temp = -INT32_MAX;
 8006fa0:	4f16      	ldr	r7, [pc, #88]	; (8006ffc <PI_Controller+0x84>)
 8006fa2:	ea33 0321 	bics.w	r3, r3, r1, asr #32
 8006fa6:	bf28      	it	cs
 8006fa8:	463b      	movcs	r3, r7
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8006faa:	42a3      	cmp	r3, r4
 8006fac:	dc03      	bgt.n	8006fb6 <PI_Controller+0x3e>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8006fae:	6904      	ldr	r4, [r0, #16]
 8006fb0:	429c      	cmp	r4, r3
 8006fb2:	dc00      	bgt.n	8006fb6 <PI_Controller+0x3e>
 8006fb4:	461c      	mov	r4, r3
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8006fb6:	8b81      	ldrh	r1, [r0, #28]
 8006fb8:	8bc3      	ldrh	r3, [r0, #30]
 8006fba:	410a      	asrs	r2, r1
 8006fbc:	fa44 f303 	asr.w	r3, r4, r3
 8006fc0:	4413      	add	r3, r2
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8006fc2:	429d      	cmp	r5, r3
 8006fc4:	db08      	blt.n	8006fd8 <PI_Controller+0x60>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
      wOutput_32 = hUpperOutputLimit;
    }
    else if (wOutput_32 < hLowerOutputLimit)
 8006fc6:	429e      	cmp	r6, r3
 8006fc8:	dd02      	ble.n	8006fd0 <PI_Controller+0x58>
    {
      wDischarge = hLowerOutputLimit - wOutput_32;
 8006fca:	1af3      	subs	r3, r6, r3
 8006fcc:	441c      	add	r4, r3
 8006fce:	4633      	mov	r3, r6
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8006fd0:	6084      	str	r4, [r0, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
 8006fd2:	b218      	sxth	r0, r3
}
 8006fd4:	bcf0      	pop	{r4, r5, r6, r7}
 8006fd6:	4770      	bx	lr
      wDischarge = hUpperOutputLimit - wOutput_32;
 8006fd8:	1aeb      	subs	r3, r5, r3
 8006fda:	441c      	add	r4, r3
 8006fdc:	462b      	mov	r3, r5
    pHandle->wIntegralTerm += wDischarge;
 8006fde:	6084      	str	r4, [r0, #8]
  return (returnValue);
 8006fe0:	b218      	sxth	r0, r3
}
 8006fe2:	bcf0      	pop	{r4, r5, r6, r7}
 8006fe4:	4770      	bx	lr
        if (pHandle->wIntegralTerm > 0)
 8006fe6:	2f00      	cmp	r7, #0
 8006fe8:	dddf      	ble.n	8006faa <PI_Controller+0x32>
          if (wIntegral_Term > 0)
 8006fea:	2900      	cmp	r1, #0
 8006fec:	dddd      	ble.n	8006faa <PI_Controller+0x32>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8006fee:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006ff2:	429c      	cmp	r4, r3
 8006ff4:	d1df      	bne.n	8006fb6 <PI_Controller+0x3e>
            wIntegral_sum_temp = INT32_MAX;
 8006ff6:	4623      	mov	r3, r4
 8006ff8:	e7dc      	b.n	8006fb4 <PI_Controller+0x3c>
 8006ffa:	bf00      	nop
 8006ffc:	80000001 	.word	0x80000001

08007000 <PID_Controller>:
#endif
    int32_t wDifferential_Term;
    int32_t wDeltaError;
    int32_t wTemp_output;

    if (0 == pHandle->hKdGain) /* derivative terms not used */
 8007000:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
{
 8007004:	b570      	push	{r4, r5, r6, lr}
    if (0 == pHandle->hKdGain) /* derivative terms not used */
 8007006:	b1b3      	cbz	r3, 8007036 <PID_Controller+0x36>
    {
      wTemp_output = PI_Controller(pHandle, wProcessVarError);
    }
    else
    {
      wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8007008:	6a84      	ldr	r4, [r0, #40]	; 0x28
      /* WARNING: the below instruction is not MISRA compliant, user should verify
         that Cortex-M3 assembly instruction ASR (arithmetic shift right)
         is used by the compiler to perform the shifts (instead of LSR
         logical shift right)*/
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 800700a:	8cc6      	ldrh	r6, [r0, #38]	; 0x26
 800700c:	4605      	mov	r5, r0
      wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 800700e:	1b0c      	subs	r4, r1, r4
      wDifferential_Term = pHandle->hKdGain * wDeltaError;
 8007010:	fb03 f304 	mul.w	r3, r3, r4
#else
      wDifferential_Term /= ((int32_t)pHandle->hKdDivisor);
#endif

      pHandle->wPrevProcessVarError = wProcessVarError;
 8007014:	62a9      	str	r1, [r5, #40]	; 0x28
      wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8007016:	fa43 f606 	asr.w	r6, r3, r6

      wTemp_output = PI_Controller(pHandle, wProcessVarError) + wDifferential_Term;
 800701a:	f7ff ffad 	bl	8006f78 <PI_Controller>

      if (wTemp_output > pHandle->hUpperOutputLimit)
 800701e:	f9b5 3014 	ldrsh.w	r3, [r5, #20]
      wTemp_output = PI_Controller(pHandle, wProcessVarError) + wDifferential_Term;
 8007022:	4430      	add	r0, r6
      if (wTemp_output > pHandle->hUpperOutputLimit)
 8007024:	4283      	cmp	r3, r0
 8007026:	db04      	blt.n	8007032 <PID_Controller+0x32>
      {
        wTemp_output = pHandle->hUpperOutputLimit;
      }
      else if (wTemp_output < pHandle->hLowerOutputLimit)
 8007028:	f9b5 3016 	ldrsh.w	r3, [r5, #22]
 800702c:	4283      	cmp	r3, r0
 800702e:	bfb8      	it	lt
 8007030:	4603      	movlt	r3, r0
    returnValue = (int16_t) wTemp_output;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8007032:	b218      	sxth	r0, r3
 8007034:	bd70      	pop	{r4, r5, r6, pc}
      wTemp_output = PI_Controller(pHandle, wProcessVarError);
 8007036:	f7ff ff9f 	bl	8006f78 <PI_Controller>
 800703a:	4603      	mov	r3, r0
}
 800703c:	b218      	sxth	r0, r3
 800703e:	bd70      	pop	{r4, r5, r6, pc}

08007040 <PQD_CalcElMotorPower>:
  * computed as an int16_t value.
  * 
  * @param pHandle Handle on the related PQD Motor Power Measurement component instance.
  */
__weak void PQD_CalcElMotorPower(PQD_MotorPowMeas_Handle_t *pHandle)
{
 8007040:	b430      	push	{r4, r5}
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8007042:	6884      	ldr	r4, [r0, #8]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
    wAux /= 65536;

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8007044:	f9b0 1000 	ldrsh.w	r1, [r0]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8007048:	8b25      	ldrh	r5, [r4, #24]
 800704a:	89e3      	ldrh	r3, [r4, #14]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800704c:	89a2      	ldrh	r2, [r4, #12]
 800704e:	8ae4      	ldrh	r4, [r4, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8007050:	fb13 f305 	smulbb	r3, r3, r5
    wAux /= 65536;
 8007054:	fb12 3304 	smlabb	r3, r2, r4, r3
 8007058:	2b00      	cmp	r3, #0
 800705a:	bfbc      	itt	lt
 800705c:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8007060:	33ff      	addlt	r3, #255	; 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8007062:	ebd1 4323 	rsbs	r3, r1, r3, asr #16
 8007066:	bf48      	it	mi
 8007068:	330f      	addmi	r3, #15
 800706a:	eb01 1323 	add.w	r3, r1, r3, asr #4
 800706e:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8007070:	bc30      	pop	{r4, r5}
 8007072:	4770      	bx	lr

08007074 <R3_1_GetPhaseCurrents>:
  * @brief  Computes and stores in the handler the latest converted motor phase currents in ab_t format.
  *
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8007074:	2900      	cmp	r1, #0
 8007076:	d041      	beq.n	80070fc <R3_1_GetPhaseCurrents+0x88>

    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007078:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800707c:	e9d2 3200 	ldrd	r3, r2, [r2]
{
 8007080:	b4f0      	push	{r4, r5, r6, r7}
    ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
    ADCDataReg1 = ADCx->JDR1;
 8007082:	f8d3 5080 	ldr.w	r5, [r3, #128]	; 0x80
    ADCDataReg2 = ADCx->JDR2;
 8007086:	f8d3 7084 	ldr.w	r7, [r3, #132]	; 0x84
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800708a:	6853      	ldr	r3, [r2, #4]
    Sector = (uint8_t)pHandle->_Super.Sector;
 800708c:	f890 407a 	ldrb.w	r4, [r0, #122]	; 0x7a
 8007090:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007098:	2c05      	cmp	r4, #5
 800709a:	6053      	str	r3, [r2, #4]
 800709c:	d910      	bls.n	80070c0 <R3_1_GetPhaseCurrents+0x4c>
 800709e:	f9b1 6000 	ldrsh.w	r6, [r1]
 80070a2:	f9b1 c002 	ldrsh.w	ip, [r1, #2]
 80070a6:	b2b3      	uxth	r3, r6
 80070a8:	fa1f f28c 	uxth.w	r2, ip
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80070ac:	4413      	add	r3, r2
 80070ae:	425b      	negs	r3, r3
    pHandle->_Super.Ia = Iab->a;
 80070b0:	f8a0 6062 	strh.w	r6, [r0, #98]	; 0x62
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80070b4:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    pHandle->_Super.Ib = Iab->b;
 80070b8:	f8a0 c064 	strh.w	ip, [r0, #100]	; 0x64
  }
}
 80070bc:	bcf0      	pop	{r4, r5, r6, r7}
 80070be:	4770      	bx	lr
 80070c0:	2301      	movs	r3, #1
 80070c2:	fa03 f404 	lsl.w	r4, r3, r4
 80070c6:	f014 0f21 	tst.w	r4, #33	; 0x21
 80070ca:	d018      	beq.n	80070fe <R3_1_GetPhaseCurrents+0x8a>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 80070cc:	f8d0 408c 	ldr.w	r4, [r0, #140]	; 0x8c
        if (Aux < -INT16_MAX)
 80070d0:	4b4e      	ldr	r3, [pc, #312]	; (800720c <R3_1_GetPhaseCurrents+0x198>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 80070d2:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 80070d4:	429c      	cmp	r4, r3
 80070d6:	da3a      	bge.n	800714e <R3_1_GetPhaseCurrents+0xda>
 80070d8:	461c      	mov	r4, r3
          Iab->b = -INT16_MAX;
 80070da:	804b      	strh	r3, [r1, #2]
 80070dc:	469c      	mov	ip, r3
 80070de:	f248 0201 	movw	r2, #32769	; 0x8001
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 80070e2:	f8d0 5090 	ldr.w	r5, [r0, #144]	; 0x90
 80070e6:	1b7d      	subs	r5, r7, r5
        Aux -= (int32_t)Iab->b;             /* Ia  */
 80070e8:	1b2c      	subs	r4, r5, r4
        if (Aux > INT16_MAX)
 80070ea:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 80070ee:	db27      	blt.n	8007140 <R3_1_GetPhaseCurrents+0xcc>
          Iab->a = INT16_MAX;
 80070f0:	f647 74ff 	movw	r4, #32767	; 0x7fff
 80070f4:	4623      	mov	r3, r4
 80070f6:	800c      	strh	r4, [r1, #0]
 80070f8:	4626      	mov	r6, r4
 80070fa:	e7d7      	b.n	80070ac <R3_1_GetPhaseCurrents+0x38>
 80070fc:	4770      	bx	lr
 80070fe:	f014 0f06 	tst.w	r4, #6
 8007102:	d12e      	bne.n	8007162 <R3_1_GetPhaseCurrents+0xee>
 8007104:	f014 0f18 	tst.w	r4, #24
 8007108:	d0c9      	beq.n	800709e <R3_1_GetPhaseCurrents+0x2a>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800710a:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
        if (Aux < -INT16_MAX)
 800710e:	f5a3 4300 	sub.w	r3, r3, #32768	; 0x8000
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007112:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8007114:	429c      	cmp	r4, r3
 8007116:	db04      	blt.n	8007122 <R3_1_GetPhaseCurrents+0xae>
        else  if (Aux > INT16_MAX)
 8007118:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800711c:	db6a      	blt.n	80071f4 <R3_1_GetPhaseCurrents+0x180>
          Iab->a = INT16_MAX;
 800711e:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007122:	800b      	strh	r3, [r1, #0]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8007124:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
        if (Aux < -INT16_MAX)
 8007128:	4b38      	ldr	r3, [pc, #224]	; (800720c <R3_1_GetPhaseCurrents+0x198>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 800712a:	1bd2      	subs	r2, r2, r7
        if (Aux < -INT16_MAX)
 800712c:	429a      	cmp	r2, r3
 800712e:	da50      	bge.n	80071d2 <R3_1_GetPhaseCurrents+0x15e>
 8007130:	f9b1 6000 	ldrsh.w	r6, [r1]
          Iab->b = -INT16_MAX;
 8007134:	804b      	strh	r3, [r1, #2]
 8007136:	469c      	mov	ip, r3
 8007138:	f248 0201 	movw	r2, #32769	; 0x8001
 800713c:	b2b3      	uxth	r3, r6
 800713e:	e7b5      	b.n	80070ac <R3_1_GetPhaseCurrents+0x38>
        else  if (Aux < -INT16_MAX)
 8007140:	4e32      	ldr	r6, [pc, #200]	; (800720c <R3_1_GetPhaseCurrents+0x198>)
 8007142:	42b4      	cmp	r4, r6
 8007144:	da35      	bge.n	80071b2 <R3_1_GetPhaseCurrents+0x13e>
          Iab->a = -INT16_MAX;
 8007146:	800e      	strh	r6, [r1, #0]
 8007148:	f248 0301 	movw	r3, #32769	; 0x8001
 800714c:	e7ae      	b.n	80070ac <R3_1_GetPhaseCurrents+0x38>
        else  if (Aux > INT16_MAX)
 800714e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007152:	db28      	blt.n	80071a6 <R3_1_GetPhaseCurrents+0x132>
          Iab->b = INT16_MAX;
 8007154:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8007158:	461a      	mov	r2, r3
 800715a:	804b      	strh	r3, [r1, #2]
 800715c:	461c      	mov	r4, r3
 800715e:	469c      	mov	ip, r3
 8007160:	e7bf      	b.n	80070e2 <R3_1_GetPhaseCurrents+0x6e>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007162:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88
        if (Aux < -INT16_MAX)
 8007166:	4b29      	ldr	r3, [pc, #164]	; (800720c <R3_1_GetPhaseCurrents+0x198>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007168:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 800716a:	429c      	cmp	r4, r3
 800716c:	db15      	blt.n	800719a <R3_1_GetPhaseCurrents+0x126>
        else  if (Aux > INT16_MAX)
 800716e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8007172:	db2a      	blt.n	80071ca <R3_1_GetPhaseCurrents+0x156>
          Iab->a = INT16_MAX;
 8007174:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8007178:	4613      	mov	r3, r2
 800717a:	800a      	strh	r2, [r1, #0]
 800717c:	4614      	mov	r4, r2
 800717e:	4616      	mov	r6, r2
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8007180:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8007184:	1aba      	subs	r2, r7, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 8007186:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 8007188:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800718c:	db15      	blt.n	80071ba <R3_1_GetPhaseCurrents+0x146>
          Iab->b = INT16_MAX;
 800718e:	f647 74ff 	movw	r4, #32767	; 0x7fff
 8007192:	4622      	mov	r2, r4
 8007194:	804c      	strh	r4, [r1, #2]
 8007196:	46a4      	mov	ip, r4
 8007198:	e788      	b.n	80070ac <R3_1_GetPhaseCurrents+0x38>
 800719a:	461c      	mov	r4, r3
          Iab->a = -INT16_MAX;
 800719c:	800b      	strh	r3, [r1, #0]
 800719e:	461e      	mov	r6, r3
 80071a0:	f248 0301 	movw	r3, #32769	; 0x8001
 80071a4:	e7ec      	b.n	8007180 <R3_1_GetPhaseCurrents+0x10c>
          Iab->b = (int16_t)Aux;
 80071a6:	fa0f fc84 	sxth.w	ip, r4
 80071aa:	f8a1 c002 	strh.w	ip, [r1, #2]
 80071ae:	b2a2      	uxth	r2, r4
 80071b0:	e797      	b.n	80070e2 <R3_1_GetPhaseCurrents+0x6e>
          Iab->a = (int16_t)Aux;
 80071b2:	b226      	sxth	r6, r4
 80071b4:	800e      	strh	r6, [r1, #0]
 80071b6:	b2a3      	uxth	r3, r4
 80071b8:	e778      	b.n	80070ac <R3_1_GetPhaseCurrents+0x38>
        else  if (Aux < -INT16_MAX)
 80071ba:	4c14      	ldr	r4, [pc, #80]	; (800720c <R3_1_GetPhaseCurrents+0x198>)
 80071bc:	42a2      	cmp	r2, r4
 80071be:	da13      	bge.n	80071e8 <R3_1_GetPhaseCurrents+0x174>
          Iab->b = -INT16_MAX;
 80071c0:	804c      	strh	r4, [r1, #2]
 80071c2:	46a4      	mov	ip, r4
 80071c4:	f248 0201 	movw	r2, #32769	; 0x8001
 80071c8:	e770      	b.n	80070ac <R3_1_GetPhaseCurrents+0x38>
          Iab->a = (int16_t)Aux;
 80071ca:	b226      	sxth	r6, r4
 80071cc:	800e      	strh	r6, [r1, #0]
 80071ce:	b2a3      	uxth	r3, r4
 80071d0:	e7d6      	b.n	8007180 <R3_1_GetPhaseCurrents+0x10c>
        else  if (Aux > INT16_MAX)
 80071d2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80071d6:	db0f      	blt.n	80071f8 <R3_1_GetPhaseCurrents+0x184>
 80071d8:	f9b1 6000 	ldrsh.w	r6, [r1]
          Iab->b = INT16_MAX;
 80071dc:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80071e0:	804a      	strh	r2, [r1, #2]
 80071e2:	4694      	mov	ip, r2
 80071e4:	b2b3      	uxth	r3, r6
 80071e6:	e761      	b.n	80070ac <R3_1_GetPhaseCurrents+0x38>
          Iab->b = (int16_t)Aux;
 80071e8:	fa0f fc82 	sxth.w	ip, r2
 80071ec:	f8a1 c002 	strh.w	ip, [r1, #2]
 80071f0:	b292      	uxth	r2, r2
 80071f2:	e75b      	b.n	80070ac <R3_1_GetPhaseCurrents+0x38>
          Iab->a = (int16_t)Aux;
 80071f4:	800c      	strh	r4, [r1, #0]
 80071f6:	e795      	b.n	8007124 <R3_1_GetPhaseCurrents+0xb0>
 80071f8:	f9b1 6000 	ldrsh.w	r6, [r1]
          Iab->b = (int16_t)Aux;
 80071fc:	fa0f fc82 	sxth.w	ip, r2
 8007200:	b2b3      	uxth	r3, r6
 8007202:	f8a1 c002 	strh.w	ip, [r1, #2]
 8007206:	b292      	uxth	r2, r2
 8007208:	e750      	b.n	80070ac <R3_1_GetPhaseCurrents+0x38>
 800720a:	bf00      	nop
 800720c:	ffff8001 	.word	0xffff8001

08007210 <R3_1_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns the return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_1_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 8007210:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007212:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8007216:	f890 4099 	ldrb.w	r4, [r0, #153]	; 0x99
 800721a:	f880 407a 	strb.w	r4, [r0, #122]	; 0x7a
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800721e:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007222:	685b      	ldr	r3, [r3, #4]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8007224:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007228:	635c      	str	r4, [r3, #52]	; 0x34
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800722a:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800722c:	f8b0 4052 	ldrh.w	r4, [r0, #82]	; 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8007230:	f8b0 0054 	ldrh.w	r0, [r0, #84]	; 0x54
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007234:	639c      	str	r4, [r3, #56]	; 0x38
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8007236:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007238:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800723a:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800723c:	4904      	ldr	r1, [pc, #16]	; (8007250 <R3_1_SetADCSampPointPolarization+0x40>)
 800723e:	685b      	ldr	r3, [r3, #4]
}
 8007240:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007244:	420b      	tst	r3, r1
}
 8007246:	bf14      	ite	ne
 8007248:	2001      	movne	r0, #1
 800724a:	2000      	moveq	r0, #0
 800724c:	4770      	bx	lr
 800724e:	bf00      	nop
 8007250:	02000070 	.word	0x02000070

08007254 <R3_1_HFCurrentsPolarizationAB>:
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_1_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 8007254:	b311      	cbz	r1, 800729c <R3_1_HFCurrentsPolarizationAB+0x48>
#endif /* __ICCARM__ */
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007256:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 800725a:	e9d2 3200 	ldrd	r3, r2, [r2]
{
 800725e:	b470      	push	{r4, r5, r6}
    ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
    uint32_t ADCDataReg1 = ADCx->JDR1;
 8007260:	f8d3 6080 	ldr.w	r6, [r3, #128]	; 0x80
    uint32_t ADCDataReg2 = ADCx->JDR2;
 8007264:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007268:	6853      	ldr	r3, [r2, #4]
 800726a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800726e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007272:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8007274:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 8007278:	2b0f      	cmp	r3, #15
 800727a:	d80b      	bhi.n	8007294 <R3_1_HFCurrentsPolarizationAB+0x40>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
      pHandle-> PhaseBOffset += ADCDataReg2;
 800727c:	e9d0 4222 	ldrd	r4, r2, [r0, #136]	; 0x88
      pHandle->PolarizationCounter++;
 8007280:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
      pHandle-> PhaseAOffset += ADCDataReg1;
 8007284:	4434      	add	r4, r6
      pHandle-> PhaseBOffset += ADCDataReg2;
 8007286:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 8007288:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 800728a:	e9c0 4222 	strd	r4, r2, [r0, #136]	; 0x88
      pHandle->PolarizationCounter++;
 800728e:	b2db      	uxtb	r3, r3
 8007290:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8007294:	2300      	movs	r3, #0
 8007296:	600b      	str	r3, [r1, #0]
    Iab->b = 0;
  }
}
 8007298:	bc70      	pop	{r4, r5, r6}
 800729a:	4770      	bx	lr
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop

080072a0 <R3_1_HFCurrentsPolarizationC>:
  *                Min value: 0 (low sides ON)
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
static void R3_1_HFCurrentsPolarizationC(PWMC_Handle_t *pHdl, ab_t *Iab)
{
  if (MC_NULL == Iab)
 80072a0:	b301      	cbz	r1, 80072e4 <R3_1_HFCurrentsPolarizationC+0x44>
#endif /* __ICCARM__ */
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80072a2:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
{
 80072a6:	b410      	push	{r4}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80072a8:	e9d3 4200 	ldrd	r4, r2, [r3]
    ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
    uint32_t ADCDataReg2 = ADCx->JDR2;
 80072ac:	f8d4 4084 	ldr.w	r4, [r4, #132]	; 0x84
 80072b0:	6853      	ldr	r3, [r2, #4]
 80072b2:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80072b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ba:	6053      	str	r3, [r2, #4]

    /* disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 80072bc:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
 80072c0:	2b0f      	cmp	r3, #15
 80072c2:	d80a      	bhi.n	80072da <R3_1_HFCurrentsPolarizationC+0x3a>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 80072c4:	f890 3098 	ldrb.w	r3, [r0, #152]	; 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 80072c8:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
      pHandle->PolarizationCounter++;
 80072cc:	3301      	adds	r3, #1
 80072ce:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 80072d0:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 80072d2:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 80072d6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    {
      /* Nothing to do */
    }

    /* during offset calibration no current is flowing in the phases */
    Iab->a = 0;
 80072da:	2300      	movs	r3, #0
 80072dc:	600b      	str	r3, [r1, #0]
    Iab->b = 0;
  }
}
 80072de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop

080072e8 <R3_1_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80072e8:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 80072ec:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80072f0:	685b      	ldr	r3, [r3, #4]
  pHandle->ADCRegularLocked = true;
 80072f2:	2101      	movs	r1, #1
{
 80072f4:	b4f0      	push	{r4, r5, r6, r7}
  pHandle->ADCRegularLocked = true;
 80072f6:	f880 10a0 	strb.w	r1, [r0, #160]	; 0xa0
  pHandle->_Super.TurnOnLowSidesAction = false;
 80072fa:	2500      	movs	r5, #0
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 80072fc:	fa22 f101 	lsr.w	r1, r2, r1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007300:	f06f 0401 	mvn.w	r4, #1
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 8007304:	3a05      	subs	r2, #5
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007306:	f880 507c 	strb.w	r5, [r0, #124]	; 0x7c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800730a:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800730c:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800730e:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007310:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007312:	611c      	str	r4, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007314:	691a      	ldr	r2, [r3, #16]
 8007316:	07d2      	lsls	r2, r2, #31
 8007318:	d5fc      	bpl.n	8007314 <R3_1_SwitchOnPWM+0x2c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800731a:	f06f 0201 	mvn.w	r2, #1
 800731e:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 8007322:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8007326:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800732a:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800732c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 800732e:	2902      	cmp	r1, #2
 8007330:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007334:	645a      	str	r2, [r3, #68]	; 0x44
 8007336:	d008      	beq.n	800734a <R3_1_SwitchOnPWM+0x62>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007338:	f06f 0201 	mvn.w	r2, #1
 800733c:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800733e:	68da      	ldr	r2, [r3, #12]
 8007340:	f042 0201 	orr.w	r2, r2, #1
 8007344:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 8007346:	bcf0      	pop	{r4, r5, r6, r7}
 8007348:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800734a:	f8d3 c020 	ldr.w	ip, [r3, #32]
 800734e:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8007350:	f8b0 7048 	ldrh.w	r7, [r0, #72]	; 0x48
 8007354:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007356:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
 800735a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800735c:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
 8007360:	f240 5055 	movw	r0, #1365	; 0x555
 8007364:	ea1c 0f00 	tst.w	ip, r0
 8007368:	d103      	bne.n	8007372 <R3_1_SwitchOnPWM+0x8a>
 800736a:	62b7      	str	r7, [r6, #40]	; 0x28
 800736c:	62a5      	str	r5, [r4, #40]	; 0x28
 800736e:	6291      	str	r1, [r2, #40]	; 0x28
 8007370:	e7e2      	b.n	8007338 <R3_1_SwitchOnPWM+0x50>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007372:	61b7      	str	r7, [r6, #24]
 8007374:	61a5      	str	r5, [r4, #24]
 8007376:	6191      	str	r1, [r2, #24]
 8007378:	e7de      	b.n	8007338 <R3_1_SwitchOnPWM+0x50>
 800737a:	bf00      	nop

0800737c <R3_1_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800737c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->_Super.BrakeActionLock)
 8007380:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007384:	685b      	ldr	r3, [r3, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8007386:	68da      	ldr	r2, [r3, #12]
 8007388:	f022 0201 	bic.w	r2, r2, #1
{
 800738c:	b430      	push	{r4, r5}
 800738e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007390:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007392:	2400      	movs	r4, #0
 8007394:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007398:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
 800739c:	645a      	str	r2, [r3, #68]	; 0x44
  if (true == pHandle->_Super.BrakeActionLock)
 800739e:	b919      	cbnz	r1, 80073a8 <R3_1_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 80073a0:	f890 207b 	ldrb.w	r2, [r0, #123]	; 0x7b
 80073a4:	2a02      	cmp	r2, #2
 80073a6:	d00d      	beq.n	80073c4 <R3_1_SwitchOffPWM+0x48>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80073a8:	f06f 0201 	mvn.w	r2, #1
 80073ac:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80073ae:	691a      	ldr	r2, [r3, #16]
 80073b0:	07d2      	lsls	r2, r2, #31
 80073b2:	d5fc      	bpl.n	80073ae <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80073b4:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick*/
  pHandle->ADCRegularLocked = false;
 80073b8:	2200      	movs	r2, #0
 80073ba:	6119      	str	r1, [r3, #16]
}
 80073bc:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked = false;
 80073be:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
}
 80073c2:	4770      	bx	lr
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80073c4:	e9d0 140f 	ldrd	r1, r4, [r0, #60]	; 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80073c8:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80073cc:	6c42      	ldr	r2, [r0, #68]	; 0x44
  WRITE_REG(GPIOx->BRR, PinMask);
 80073ce:	628d      	str	r5, [r1, #40]	; 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80073d0:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80073d4:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
 80073d8:	62a5      	str	r5, [r4, #40]	; 0x28
 80073da:	6291      	str	r1, [r2, #40]	; 0x28
 80073dc:	e7e4      	b.n	80073a8 <R3_1_SwitchOffPWM+0x2c>
 80073de:	bf00      	nop

080073e0 <R3_1_RLGetPhaseCurrents>:
  }
  else
  {
#endif
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80073e0:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    int32_t wAux;

    /* Disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset)
 80073e4:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
{
 80073e8:	b430      	push	{r4, r5}
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 80073ea:	e9d2 5000 	ldrd	r5, r0, [r2]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80073ee:	6842      	ldr	r2, [r0, #4]
         - (int32_t)ADCx->JDR2;

    /* Check saturation */
    if (wAux > -INT16_MAX)
 80073f0:	4c0f      	ldr	r4, [pc, #60]	; (8007430 <R3_1_RLGetPhaseCurrents+0x50>)
 80073f2:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 80073f6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80073fa:	6042      	str	r2, [r0, #4]
         - (int32_t)ADCx->JDR2;
 80073fc:	f8d5 2084 	ldr.w	r2, [r5, #132]	; 0x84
    wAux = ((int32_t)pHandle->PhaseBOffset)
 8007400:	1a9b      	subs	r3, r3, r2
    if (wAux > -INT16_MAX)
 8007402:	42a3      	cmp	r3, r4
 8007404:	db0e      	blt.n	8007424 <R3_1_RLGetPhaseCurrents+0x44>
    {
      if (wAux < INT16_MAX)
 8007406:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800740a:	4293      	cmp	r3, r2
 800740c:	dd05      	ble.n	800741a <R3_1_RLGetPhaseCurrents+0x3a>
 800740e:	f647 73ff 	movw	r3, #32767	; 0x7fff
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 8007412:	800b      	strh	r3, [r1, #0]
    pStator_Currents->b = (int16_t)wAux;
 8007414:	804b      	strh	r3, [r1, #2]
#ifdef NULL_PTR_CHECK_R3_1_PWM_CURR_FDB
  }
#endif
}
 8007416:	bc30      	pop	{r4, r5}
 8007418:	4770      	bx	lr
 800741a:	b21b      	sxth	r3, r3
    pStator_Currents->a = (int16_t)wAux;
 800741c:	800b      	strh	r3, [r1, #0]
    pStator_Currents->b = (int16_t)wAux;
 800741e:	804b      	strh	r3, [r1, #2]
}
 8007420:	bc30      	pop	{r4, r5}
 8007422:	4770      	bx	lr
 8007424:	4b03      	ldr	r3, [pc, #12]	; (8007434 <R3_1_RLGetPhaseCurrents+0x54>)
    pStator_Currents->a = (int16_t)wAux;
 8007426:	800b      	strh	r3, [r1, #0]
    pStator_Currents->b = (int16_t)wAux;
 8007428:	804b      	strh	r3, [r1, #2]
}
 800742a:	bc30      	pop	{r4, r5}
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	ffff8002 	.word	0xffff8002
 8007434:	ffff8001 	.word	0xffff8001

08007438 <R3_1_RLSwitchOnPWM>:
  }
  else
  {
#endif
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007438:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800743c:	e9d2 1300 	ldrd	r1, r3, [r2]
{
 8007440:	b5f0      	push	{r4, r5, r6, r7, lr}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007442:	f06f 0201 	mvn.w	r2, #1

    pHandle->ADCRegularLocked=true;
 8007446:	2401      	movs	r4, #1
 8007448:	f880 40a0 	strb.w	r4, [r0, #160]	; 0xa0
 800744c:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800744e:	691a      	ldr	r2, [r3, #16]
 8007450:	07d4      	lsls	r4, r2, #31
 8007452:	d5fc      	bpl.n	800744e <R3_1_RLSwitchOnPWM+0x16>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8007454:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007458:	f06f 0501 	mvn.w	r5, #1
 800745c:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800745e:	2401      	movs	r4, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007460:	611d      	str	r5, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007462:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007464:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007466:	691a      	ldr	r2, [r3, #16]
 8007468:	07d2      	lsls	r2, r2, #31
 800746a:	d5fc      	bpl.n	8007466 <R3_1_RLSwitchOnPWM+0x2e>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800746c:	68da      	ldr	r2, [r3, #12]

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 800746e:	f890 407b 	ldrb.w	r4, [r0, #123]	; 0x7b
 8007472:	f042 0201 	orr.w	r2, r2, #1
 8007476:	60da      	str	r2, [r3, #12]
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8007478:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800747a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800747e:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007480:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 8007482:	2c02      	cmp	r4, #2
 8007484:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007488:	645a      	str	r2, [r3, #68]	; 0x44
 800748a:	d114      	bne.n	80074b6 <R3_1_RLSwitchOnPWM+0x7e>
    {
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800748c:	f8d3 e020 	ldr.w	lr, [r3, #32]
 8007490:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 8007492:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007494:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007496:	f8b0 7048 	ldrh.w	r7, [r0, #72]	; 0x48
 800749a:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
 800749e:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 80074a2:	f240 5c55 	movw	ip, #1365	; 0x555
 80074a6:	ea1e 0f0c 	tst.w	lr, ip
  WRITE_REG(GPIOx->BSRR, PinMask);
 80074aa:	bf15      	itete	ne
 80074ac:	61b7      	strne	r7, [r6, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80074ae:	62b7      	streq	r7, [r6, #40]	; 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80074b0:	61a5      	strne	r5, [r4, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80074b2:	62a5      	streq	r5, [r4, #40]	; 0x28
 80074b4:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx */
    pHdl->Sector = SECTOR_4;
 80074b6:	2303      	movs	r3, #3
 80074b8:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
  MODIFY_REG(ADCx->CR,
 80074bc:	688b      	ldr	r3, [r1, #8]
 80074be:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80074c2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80074c6:	f043 0308 	orr.w	r3, r3, #8
 80074ca:	608b      	str	r3, [r1, #8]
    LL_ADC_INJ_StartConversion(ADCx);

#ifdef NULL_PTR_CHECK_R3_1_PWM_CURR_FDB
  }
#endif
}
 80074cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ce:	bf00      	nop

080074d0 <R3_1_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80074d0:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 80074d4:	685b      	ldr	r3, [r3, #4]
{
 80074d6:	b470      	push	{r4, r5, r6}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80074d8:	f06f 0201 	mvn.w	r2, #1
  pHandle->_Super.TurnOnLowSidesAction = true;
 80074dc:	2401      	movs	r4, #1
 80074de:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
 80074e2:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80074e4:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80074e6:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80074e8:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80074ea:	691a      	ldr	r2, [r3, #16]
 80074ec:	07d2      	lsls	r2, r2, #31
 80074ee:	d5fc      	bpl.n	80074ea <R3_1_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80074f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 80074f2:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
 80074f6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80074fa:	2902      	cmp	r1, #2
 80074fc:	645a      	str	r2, [r3, #68]	; 0x44
 80074fe:	d10b      	bne.n	8007518 <R3_1_TurnOnLowSides+0x48>
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007500:	e9d0 510f 	ldrd	r5, r1, [r0, #60]	; 0x3c
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007504:	6c43      	ldr	r3, [r0, #68]	; 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8007506:	f8b0 6048 	ldrh.w	r6, [r0, #72]	; 0x48
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800750a:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800750e:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007512:	61ae      	str	r6, [r5, #24]
 8007514:	618c      	str	r4, [r1, #24]
 8007516:	619a      	str	r2, [r3, #24]
}
 8007518:	bc70      	pop	{r4, r5, r6}
 800751a:	4770      	bx	lr

0800751c <R3_1_RLTurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800751c:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
  pHandle->ADCRegularLocked = true;
 8007520:	2301      	movs	r3, #1
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007522:	6852      	ldr	r2, [r2, #4]
  pHandle->ADCRegularLocked = true;
 8007524:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007528:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800752a:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800752e:	6351      	str	r1, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8007530:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8007532:	6913      	ldr	r3, [r2, #16]
 8007534:	07db      	lsls	r3, r3, #31
 8007536:	d5fc      	bpl.n	8007532 <R3_1_RLTurnOnLowSides+0x16>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007538:	6c53      	ldr	r3, [r2, #68]	; 0x44
  if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800753a:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
 800753e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007542:	2902      	cmp	r1, #2
 8007544:	6453      	str	r3, [r2, #68]	; 0x44
 8007546:	d000      	beq.n	800754a <R3_1_RLTurnOnLowSides+0x2e>
 8007548:	4770      	bx	lr
{
 800754a:	b470      	push	{r4, r5, r6}
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800754c:	e9d0 510f 	ldrd	r5, r1, [r0, #60]	; 0x3c
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007550:	6c43      	ldr	r3, [r0, #68]	; 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8007552:	f8b0 6048 	ldrh.w	r6, [r0, #72]	; 0x48
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007556:	f8b0 404a 	ldrh.w	r4, [r0, #74]	; 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800755a:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 800755e:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8007560:	628c      	str	r4, [r1, #40]	; 0x28
 8007562:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007564:	bc70      	pop	{r4, r5, r6}
 8007566:	4770      	bx	lr

08007568 <R3_1_Init>:
  if (MC_NULL == pHandle)
 8007568:	2800      	cmp	r0, #0
 800756a:	f000 81e1 	beq.w	8007930 <R3_1_Init+0x3c8>
{
 800756e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8007572:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
      if (TIM1 ==  TIMx)
 8007576:	f8df a508 	ldr.w	sl, [pc, #1288]	; 8007a80 <R3_1_Init+0x518>
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 800757a:	6819      	ldr	r1, [r3, #0]
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800757c:	f8d3 c008 	ldr.w	ip, [r3, #8]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8007580:	f8d1 9004 	ldr.w	r9, [r1, #4]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8007584:	e9d3 5205 	ldrd	r5, r2, [r3, #20]
{
 8007588:	b091      	sub	sp, #68	; 0x44
 800758a:	f029 0904 	bic.w	r9, r9, #4
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800758e:	9201      	str	r2, [sp, #4]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8007590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007592:	9202      	str	r2, [sp, #8]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 8007594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007596:	9203      	str	r2, [sp, #12]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8007598:	e9d3 7603 	ldrd	r7, r6, [r3, #12]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800759c:	685a      	ldr	r2, [r3, #4]
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800759e:	e9d3 8e07 	ldrd	r8, lr, [r3, #28]
 80075a2:	f8c1 9004 	str.w	r9, [r1, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80075a6:	f04f 0904 	mov.w	r9, #4
 80075aa:	f8c1 9000 	str.w	r9, [r1]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80075ae:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80075b2:	f029 0920 	bic.w	r9, r9, #32
 80075b6:	f8c1 9004 	str.w	r9, [r1, #4]
      if (TIM1 ==  TIMx)
 80075ba:	4552      	cmp	r2, sl
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80075bc:	f04f 0920 	mov.w	r9, #32
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80075c0:	f8df a4c0 	ldr.w	sl, [pc, #1216]	; 8007a84 <R3_1_Init+0x51c>
 80075c4:	f8c1 9000 	str.w	r9, [r1]
 80075c8:	f8da 9010 	ldr.w	r9, [sl, #16]
 80075cc:	bf0c      	ite	eq
 80075ce:	f449 6900 	orreq.w	r9, r9, #2048	; 0x800
 80075d2:	f449 5900 	orrne.w	r9, r9, #8192	; 0x2000
 80075d6:	f8ca 9010 	str.w	r9, [sl, #16]
      if (OPAMPParams != NULL)
 80075da:	f1bc 0f00 	cmp.w	ip, #0
 80075de:	d015      	beq.n	800760c <R3_1_Init+0xa4>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 80075e0:	e9dc ba00 	ldrd	fp, sl, [ip]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 80075e4:	f8db 9000 	ldr.w	r9, [fp]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 80075e8:	f8dc c018 	ldr.w	ip, [ip, #24]
 80075ec:	f049 0901 	orr.w	r9, r9, #1
 80075f0:	f8cb 9000 	str.w	r9, [fp]
 80075f4:	f8da 9000 	ldr.w	r9, [sl]
 80075f8:	f049 0901 	orr.w	r9, r9, #1
 80075fc:	f8ca 9000 	str.w	r9, [sl]
 8007600:	f8dc 9000 	ldr.w	r9, [ip]
 8007604:	f049 0901 	orr.w	r9, r9, #1
 8007608:	f8cc 9000 	str.w	r9, [ip]
      if (COMP_OCPAx != NULL)
 800760c:	2f00      	cmp	r7, #0
 800760e:	d063      	beq.n	80076d8 <R3_1_Init+0x170>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 8007610:	f893 c063 	ldrb.w	ip, [r3, #99]	; 0x63
 8007614:	f1bc 0f01 	cmp.w	ip, #1
 8007618:	d052      	beq.n	80076c0 <R3_1_Init+0x158>
 800761a:	f1b8 0f00 	cmp.w	r8, #0
 800761e:	d04f      	beq.n	80076c0 <R3_1_Init+0x158>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 8007620:	f8d3 a02c 	ldr.w	sl, [r3, #44]	; 0x2c
  LL_DAC_ConvertData12LeftAligned(DACx, DAC_Channel, hDACVref);
 8007624:	f8b3 405e 	ldrh.w	r4, [r3, #94]	; 0x5e
 8007628:	9404      	str	r4, [sp, #16]
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800762a:	ea4f 4b9a 	mov.w	fp, sl, lsr #18
 800762e:	f108 0908 	add.w	r9, r8, #8
 8007632:	f00b 0b3c 	and.w	fp, fp, #60	; 0x3c
  SET_BIT(DACx->SWTRIGR,
 8007636:	f00a 0c03 	and.w	ip, sl, #3
 800763a:	f8cd c014 	str.w	ip, [sp, #20]
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 800763e:	f85b c009 	ldr.w	ip, [fp, r9]
 8007642:	9c04      	ldr	r4, [sp, #16]
 8007644:	f42c 4c7f 	bic.w	ip, ip, #65280	; 0xff00
 8007648:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
 800764c:	ea44 0c0c 	orr.w	ip, r4, ip
 8007650:	f84b c009 	str.w	ip, [fp, r9]
  SET_BIT(DACx->SWTRIGR,
 8007654:	9c05      	ldr	r4, [sp, #20]
 8007656:	f8d8 c004 	ldr.w	ip, [r8, #4]
 800765a:	ea44 0c0c 	orr.w	ip, r4, ip
 800765e:	f8c8 c004 	str.w	ip, [r8, #4]
  return ((READ_BIT(DACx->CR,
 8007662:	f8d8 9000 	ldr.w	r9, [r8]
 8007666:	f00a 0c10 	and.w	ip, sl, #16
 800766a:	f04f 0a01 	mov.w	sl, #1
 800766e:	fa0a fc0c 	lsl.w	ip, sl, ip
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8007672:	ea3c 0409 	bics.w	r4, ip, r9
 8007676:	f000 821c 	beq.w	8007ab2 <R3_1_Init+0x54a>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 800767a:	f8df 93f4 	ldr.w	r9, [pc, #1012]	; 8007a70 <R3_1_Init+0x508>
 800767e:	f8df a3fc 	ldr.w	sl, [pc, #1020]	; 8007a7c <R3_1_Init+0x514>
 8007682:	f8d9 9000 	ldr.w	r9, [r9]
  SET_BIT(DACx->CR,
 8007686:	f8d8 b000 	ldr.w	fp, [r8]
 800768a:	fbaa 4909 	umull	r4, r9, sl, r9
 800768e:	ea4f 49d9 	mov.w	r9, r9, lsr #19
 8007692:	ea4c 0c0b 	orr.w	ip, ip, fp
 8007696:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 800769a:	f8c8 c000 	str.w	ip, [r8]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 800769e:	f8cd 9018 	str.w	r9, [sp, #24]
    while (wait_loop_index != 0UL)
 80076a2:	f8dd c018 	ldr.w	ip, [sp, #24]
 80076a6:	f1bc 0f00 	cmp.w	ip, #0
 80076aa:	d009      	beq.n	80076c0 <R3_1_Init+0x158>
 80076ac:	9c01      	ldr	r4, [sp, #4]
 80076ae:	469c      	mov	ip, r3
      wait_loop_index--;
 80076b0:	9b06      	ldr	r3, [sp, #24]
 80076b2:	3b01      	subs	r3, #1
 80076b4:	9306      	str	r3, [sp, #24]
    while (wait_loop_index != 0UL)
 80076b6:	9b06      	ldr	r3, [sp, #24]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1f9      	bne.n	80076b0 <R3_1_Init+0x148>
 80076bc:	4663      	mov	r3, ip
 80076be:	9401      	str	r4, [sp, #4]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80076c0:	f8d7 c000 	ldr.w	ip, [r7]
 80076c4:	f04c 0c01 	orr.w	ip, ip, #1
 80076c8:	f8c7 c000 	str.w	ip, [r7]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80076cc:	f8d7 c000 	ldr.w	ip, [r7]
 80076d0:	f04c 4c00 	orr.w	ip, ip, #2147483648	; 0x80000000
 80076d4:	f8c7 c000 	str.w	ip, [r7]
      if (COMP_OCPBx != NULL)
 80076d8:	2e00      	cmp	r6, #0
 80076da:	d053      	beq.n	8007784 <R3_1_Init+0x21c>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 80076dc:	f893 7064 	ldrb.w	r7, [r3, #100]	; 0x64
 80076e0:	2f01      	cmp	r7, #1
 80076e2:	d047      	beq.n	8007774 <R3_1_Init+0x20c>
 80076e4:	f1be 0f00 	cmp.w	lr, #0
 80076e8:	d044      	beq.n	8007774 <R3_1_Init+0x20c>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 80076ea:	6b1f      	ldr	r7, [r3, #48]	; 0x30
  LL_DAC_ConvertData12LeftAligned(DACx, DAC_Channel, hDACVref);
 80076ec:	f8b3 a05e 	ldrh.w	sl, [r3, #94]	; 0x5e
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 80076f0:	ea4f 4997 	mov.w	r9, r7, lsr #18
 80076f4:	f10e 0808 	add.w	r8, lr, #8
 80076f8:	f009 093c 	and.w	r9, r9, #60	; 0x3c
  SET_BIT(DACx->SWTRIGR,
 80076fc:	f007 0b03 	and.w	fp, r7, #3
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8007700:	f859 c008 	ldr.w	ip, [r9, r8]
 8007704:	f42c 4c7f 	bic.w	ip, ip, #65280	; 0xff00
 8007708:	f02c 0cf0 	bic.w	ip, ip, #240	; 0xf0
 800770c:	ea4a 0c0c 	orr.w	ip, sl, ip
 8007710:	f849 c008 	str.w	ip, [r9, r8]
  SET_BIT(DACx->SWTRIGR,
 8007714:	f8de c004 	ldr.w	ip, [lr, #4]
 8007718:	ea4b 0b0c 	orr.w	fp, fp, ip
 800771c:	f8ce b004 	str.w	fp, [lr, #4]
  return ((READ_BIT(DACx->CR,
 8007720:	f007 0710 	and.w	r7, r7, #16
 8007724:	f04f 0801 	mov.w	r8, #1
 8007728:	f8de c000 	ldr.w	ip, [lr]
 800772c:	fa08 f707 	lsl.w	r7, r8, r7
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8007730:	ea37 040c 	bics.w	r4, r7, ip
 8007734:	f000 81da 	beq.w	8007aec <R3_1_Init+0x584>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 8007738:	f8df c334 	ldr.w	ip, [pc, #820]	; 8007a70 <R3_1_Init+0x508>
 800773c:	f8df 933c 	ldr.w	r9, [pc, #828]	; 8007a7c <R3_1_Init+0x514>
 8007740:	f8dc c000 	ldr.w	ip, [ip]
  SET_BIT(DACx->CR,
 8007744:	f8de 8000 	ldr.w	r8, [lr]
 8007748:	fba9 4c0c 	umull	r4, ip, r9, ip
 800774c:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 8007750:	ea47 0708 	orr.w	r7, r7, r8
 8007754:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8007758:	f8ce 7000 	str.w	r7, [lr]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 800775c:	f8cd c020 	str.w	ip, [sp, #32]
    while (wait_loop_index != 0UL)
 8007760:	9f08      	ldr	r7, [sp, #32]
 8007762:	b13f      	cbz	r7, 8007774 <R3_1_Init+0x20c>
 8007764:	9c01      	ldr	r4, [sp, #4]
      wait_loop_index--;
 8007766:	9f08      	ldr	r7, [sp, #32]
 8007768:	3f01      	subs	r7, #1
 800776a:	9708      	str	r7, [sp, #32]
    while (wait_loop_index != 0UL)
 800776c:	9f08      	ldr	r7, [sp, #32]
 800776e:	2f00      	cmp	r7, #0
 8007770:	d1f9      	bne.n	8007766 <R3_1_Init+0x1fe>
 8007772:	9401      	str	r4, [sp, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007774:	6837      	ldr	r7, [r6, #0]
 8007776:	f047 0701 	orr.w	r7, r7, #1
 800777a:	6037      	str	r7, [r6, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800777c:	6837      	ldr	r7, [r6, #0]
 800777e:	f047 4700 	orr.w	r7, r7, #2147483648	; 0x80000000
 8007782:	6037      	str	r7, [r6, #0]
      if (COMP_OCPCx != NULL)
 8007784:	2d00      	cmp	r5, #0
 8007786:	d04d      	beq.n	8007824 <R3_1_Init+0x2bc>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 8007788:	f893 6065 	ldrb.w	r6, [r3, #101]	; 0x65
 800778c:	2e01      	cmp	r6, #1
 800778e:	d041      	beq.n	8007814 <R3_1_Init+0x2ac>
 8007790:	9e02      	ldr	r6, [sp, #8]
 8007792:	2e00      	cmp	r6, #0
 8007794:	d03e      	beq.n	8007814 <R3_1_Init+0x2ac>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 8007796:	6b5c      	ldr	r4, [r3, #52]	; 0x34
  LL_DAC_ConvertData12LeftAligned(DACx, DAC_Channel, hDACVref);
 8007798:	f8b3 905e 	ldrh.w	r9, [r3, #94]	; 0x5e
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800779c:	ea4f 4e94 	mov.w	lr, r4, lsr #18
 80077a0:	f106 0c08 	add.w	ip, r6, #8
 80077a4:	f00e 0e3c 	and.w	lr, lr, #60	; 0x3c
  SET_BIT(DACx->SWTRIGR,
 80077a8:	f004 0803 	and.w	r8, r4, #3
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 80077ac:	f85e 700c 	ldr.w	r7, [lr, ip]
 80077b0:	f427 477f 	bic.w	r7, r7, #65280	; 0xff00
 80077b4:	f027 07f0 	bic.w	r7, r7, #240	; 0xf0
 80077b8:	ea49 0707 	orr.w	r7, r9, r7
 80077bc:	f84e 700c 	str.w	r7, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 80077c0:	6877      	ldr	r7, [r6, #4]
 80077c2:	ea48 0707 	orr.w	r7, r8, r7
 80077c6:	6077      	str	r7, [r6, #4]
  return ((READ_BIT(DACx->CR,
 80077c8:	9f02      	ldr	r7, [sp, #8]
 80077ca:	f004 0610 	and.w	r6, r4, #16
 80077ce:	f04f 0c01 	mov.w	ip, #1
 80077d2:	683f      	ldr	r7, [r7, #0]
 80077d4:	fa0c f606 	lsl.w	r6, ip, r6
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 80077d8:	ea36 0407 	bics.w	r4, r6, r7
 80077dc:	f000 8133 	beq.w	8007a46 <R3_1_Init+0x4de>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 80077e0:	4fa3      	ldr	r7, [pc, #652]	; (8007a70 <R3_1_Init+0x508>)
  SET_BIT(DACx->CR,
 80077e2:	9c02      	ldr	r4, [sp, #8]
 80077e4:	f8d7 8000 	ldr.w	r8, [r7]
 80077e8:	f8df e290 	ldr.w	lr, [pc, #656]	; 8007a7c <R3_1_Init+0x514>
 80077ec:	f8d4 c000 	ldr.w	ip, [r4]
 80077f0:	fbae e708 	umull	lr, r7, lr, r8
 80077f4:	0cff      	lsrs	r7, r7, #19
 80077f6:	ea46 060c 	orr.w	r6, r6, ip
 80077fa:	00ff      	lsls	r7, r7, #3
 80077fc:	6026      	str	r6, [r4, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 80077fe:	970a      	str	r7, [sp, #40]	; 0x28
    while (wait_loop_index != 0UL)
 8007800:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007802:	b13e      	cbz	r6, 8007814 <R3_1_Init+0x2ac>
 8007804:	9c01      	ldr	r4, [sp, #4]
      wait_loop_index--;
 8007806:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007808:	3e01      	subs	r6, #1
 800780a:	960a      	str	r6, [sp, #40]	; 0x28
    while (wait_loop_index != 0UL)
 800780c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800780e:	2e00      	cmp	r6, #0
 8007810:	d1f9      	bne.n	8007806 <R3_1_Init+0x29e>
 8007812:	9401      	str	r4, [sp, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007814:	682e      	ldr	r6, [r5, #0]
 8007816:	f046 0601 	orr.w	r6, r6, #1
 800781a:	602e      	str	r6, [r5, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800781c:	682e      	ldr	r6, [r5, #0]
 800781e:	f046 4600 	orr.w	r6, r6, #2147483648	; 0x80000000
 8007822:	602e      	str	r6, [r5, #0]
      if (COMP_OVPx != NULL)
 8007824:	9c01      	ldr	r4, [sp, #4]
 8007826:	2c00      	cmp	r4, #0
 8007828:	d049      	beq.n	80078be <R3_1_Init+0x356>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 800782a:	f893 5066 	ldrb.w	r5, [r3, #102]	; 0x66
 800782e:	2d01      	cmp	r5, #1
 8007830:	d03c      	beq.n	80078ac <R3_1_Init+0x344>
 8007832:	9c03      	ldr	r4, [sp, #12]
 8007834:	2c00      	cmp	r4, #0
 8007836:	d039      	beq.n	80078ac <R3_1_Init+0x344>
          R3_1_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 8007838:	6b9d      	ldr	r5, [r3, #56]	; 0x38
  LL_DAC_ConvertData12LeftAligned(DACx, DAC_Channel, hDACVref);
 800783a:	f8b3 8060 	ldrh.w	r8, [r3, #96]	; 0x60
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800783e:	ea4f 4c95 	mov.w	ip, r5, lsr #18
 8007842:	f104 0708 	add.w	r7, r4, #8
 8007846:	f00c 0c3c 	and.w	ip, ip, #60	; 0x3c
  SET_BIT(DACx->SWTRIGR,
 800784a:	f005 0e03 	and.w	lr, r5, #3
  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 800784e:	f85c 6007 	ldr.w	r6, [ip, r7]
 8007852:	f426 467f 	bic.w	r6, r6, #65280	; 0xff00
 8007856:	f026 06f0 	bic.w	r6, r6, #240	; 0xf0
 800785a:	ea48 0606 	orr.w	r6, r8, r6
 800785e:	f84c 6007 	str.w	r6, [ip, r7]
  SET_BIT(DACx->SWTRIGR,
 8007862:	6866      	ldr	r6, [r4, #4]
 8007864:	ea4e 0606 	orr.w	r6, lr, r6
 8007868:	6066      	str	r6, [r4, #4]
  return ((READ_BIT(DACx->CR,
 800786a:	f005 0510 	and.w	r5, r5, #16
 800786e:	2701      	movs	r7, #1
 8007870:	6826      	ldr	r6, [r4, #0]
 8007872:	fa07 f505 	lsl.w	r5, r7, r5
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8007876:	ea35 0406 	bics.w	r4, r5, r6
 800787a:	f000 8105 	beq.w	8007a88 <R3_1_Init+0x520>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 800787e:	4e7c      	ldr	r6, [pc, #496]	; (8007a70 <R3_1_Init+0x508>)
  SET_BIT(DACx->CR,
 8007880:	9c03      	ldr	r4, [sp, #12]
 8007882:	6836      	ldr	r6, [r6, #0]
 8007884:	f8df c1f4 	ldr.w	ip, [pc, #500]	; 8007a7c <R3_1_Init+0x514>
 8007888:	6827      	ldr	r7, [r4, #0]
 800788a:	fbac c606 	umull	ip, r6, ip, r6
 800788e:	0cf6      	lsrs	r6, r6, #19
 8007890:	433d      	orrs	r5, r7
 8007892:	00f6      	lsls	r6, r6, #3
 8007894:	6025      	str	r5, [r4, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 8007896:	960c      	str	r6, [sp, #48]	; 0x30
    while (wait_loop_index != 0UL)
 8007898:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800789a:	b13d      	cbz	r5, 80078ac <R3_1_Init+0x344>
 800789c:	9c01      	ldr	r4, [sp, #4]
      wait_loop_index--;
 800789e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078a0:	3d01      	subs	r5, #1
 80078a2:	950c      	str	r5, [sp, #48]	; 0x30
    while (wait_loop_index != 0UL)
 80078a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80078a6:	2d00      	cmp	r5, #0
 80078a8:	d1f9      	bne.n	800789e <R3_1_Init+0x336>
 80078aa:	9401      	str	r4, [sp, #4]
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80078ac:	9c01      	ldr	r4, [sp, #4]
 80078ae:	6825      	ldr	r5, [r4, #0]
 80078b0:	f045 0501 	orr.w	r5, r5, #1
 80078b4:	6025      	str	r5, [r4, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80078b6:	6825      	ldr	r5, [r4, #0]
 80078b8:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80078bc:	6025      	str	r5, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80078be:	688c      	ldr	r4, [r1, #8]
 80078c0:	07e7      	lsls	r7, r4, #31
 80078c2:	d560      	bpl.n	8007986 <R3_1_Init+0x41e>
  volatile uint32_t Brk2Timeout = 1000;
 80078c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80078c8:	910f      	str	r1, [sp, #60]	; 0x3c
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80078ca:	6811      	ldr	r1, [r2, #0]
 80078cc:	f021 0101 	bic.w	r1, r1, #1
 80078d0:	6011      	str	r1, [r2, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80078d2:	6851      	ldr	r1, [r2, #4]
 80078d4:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 80078d8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80078dc:	6051      	str	r1, [r2, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80078de:	6991      	ldr	r1, [r2, #24]
 80078e0:	f041 0108 	orr.w	r1, r1, #8
 80078e4:	6191      	str	r1, [r2, #24]
 80078e6:	6991      	ldr	r1, [r2, #24]
 80078e8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80078ec:	6191      	str	r1, [r2, #24]
 80078ee:	69d1      	ldr	r1, [r2, #28]
 80078f0:	f041 0108 	orr.w	r1, r1, #8
 80078f4:	61d1      	str	r1, [r2, #28]
 80078f6:	69d1      	ldr	r1, [r2, #28]
 80078f8:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80078fc:	61d1      	str	r1, [r2, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80078fe:	6951      	ldr	r1, [r2, #20]
 8007900:	f041 0101 	orr.w	r1, r1, #1
 8007904:	6151      	str	r1, [r2, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 8007906:	f893 1067 	ldrb.w	r1, [r3, #103]	; 0x67
 800790a:	2902      	cmp	r1, #2
 800790c:	d011      	beq.n	8007932 <R3_1_Init+0x3ca>
    if (M1 == pHandle->_Super.Motor)
 800790e:	f890 1078 	ldrb.w	r1, [r0, #120]	; 0x78
 8007912:	b9b9      	cbnz	r1, 8007944 <R3_1_Init+0x3dc>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 8007914:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007918:	2b01      	cmp	r3, #1
 800791a:	d00f      	beq.n	800793c <R3_1_Init+0x3d4>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 800791c:	2b03      	cmp	r3, #3
 800791e:	d111      	bne.n	8007944 <R3_1_Init+0x3dc>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007920:	2101      	movs	r1, #1
 8007922:	6311      	str	r1, [r2, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007924:	6951      	ldr	r1, [r2, #20]
 8007926:	f041 0101 	orr.w	r1, r1, #1
 800792a:	6151      	str	r1, [r2, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800792c:	6313      	str	r3, [r2, #48]	; 0x30
 800792e:	e009      	b.n	8007944 <R3_1_Init+0x3dc>
 8007930:	4770      	bx	lr
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 8007932:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8007936:	2901      	cmp	r1, #1
 8007938:	f000 80ee 	beq.w	8007b18 <R3_1_Init+0x5b0>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 800793c:	f8b0 3094 	ldrh.w	r3, [r0, #148]	; 0x94
 8007940:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8007942:	6253      	str	r3, [r2, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8007944:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8007948:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800794a:	6913      	ldr	r3, [r2, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 800794c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800794e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007952:	b159      	cbz	r1, 800796c <R3_1_Init+0x404>
 8007954:	b153      	cbz	r3, 800796c <R3_1_Init+0x404>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8007956:	f46f 7180 	mvn.w	r1, #256	; 0x100
 800795a:	6111      	str	r1, [r2, #16]
    Brk2Timeout--;
 800795c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800795e:	3b01      	subs	r3, #1
 8007960:	930f      	str	r3, [sp, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8007962:	6913      	ldr	r3, [r2, #16]
 8007964:	f413 7f80 	tst.w	r3, #256	; 0x100
  while ((Brk2Timeout != 0u) && (1U == result))
 8007968:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800796a:	d14e      	bne.n	8007a0a <R3_1_Init+0x4a2>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800796c:	68d3      	ldr	r3, [r2, #12]
 800796e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007972:	60d3      	str	r3, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 8007974:	6a13      	ldr	r3, [r2, #32]
 8007976:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 800797a:	f043 0305 	orr.w	r3, r3, #5
 800797e:	6213      	str	r3, [r2, #32]
}
 8007980:	b011      	add	sp, #68	; 0x44
 8007982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007986:	688c      	ldr	r4, [r1, #8]
 8007988:	f024 4420 	bic.w	r4, r4, #2684354560	; 0xa0000000
 800798c:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8007990:	608c      	str	r4, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007992:	688c      	ldr	r4, [r1, #8]
 8007994:	00e6      	lsls	r6, r4, #3
 8007996:	d53b      	bpl.n	8007a10 <R3_1_Init+0x4a8>
  MODIFY_REG(ADCx->CR,
 8007998:	688c      	ldr	r4, [r1, #8]
 800799a:	f024 4440 	bic.w	r4, r4, #3221225472	; 0xc0000000
 800799e:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 80079a2:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80079a6:	608c      	str	r4, [r1, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80079a8:	688c      	ldr	r4, [r1, #8]
 80079aa:	2c00      	cmp	r4, #0
 80079ac:	dbfc      	blt.n	80079a8 <R3_1_Init+0x440>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80079ae:	680c      	ldr	r4, [r1, #0]
 80079b0:	07e5      	lsls	r5, r4, #31
 80079b2:	d408      	bmi.n	80079c6 <R3_1_Init+0x45e>
  MODIFY_REG(ADCx->CR,
 80079b4:	4d2f      	ldr	r5, [pc, #188]	; (8007a74 <R3_1_Init+0x50c>)
 80079b6:	688c      	ldr	r4, [r1, #8]
 80079b8:	402c      	ands	r4, r5
 80079ba:	f044 0401 	orr.w	r4, r4, #1
 80079be:	608c      	str	r4, [r1, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80079c0:	680c      	ldr	r4, [r1, #0]
 80079c2:	07e4      	lsls	r4, r4, #31
 80079c4:	d5f7      	bpl.n	80079b6 <R3_1_Init+0x44e>
  MODIFY_REG(ADCx->CR,
 80079c6:	688d      	ldr	r5, [r1, #8]
 80079c8:	4e2a      	ldr	r6, [pc, #168]	; (8007a74 <R3_1_Init+0x50c>)
 80079ca:	4035      	ands	r5, r6
 80079cc:	f045 0508 	orr.w	r5, r5, #8
 80079d0:	608d      	str	r5, [r1, #8]
  MODIFY_REG(ADCx->CR,
 80079d2:	688d      	ldr	r5, [r1, #8]
 80079d4:	4035      	ands	r5, r6
 80079d6:	f045 0520 	orr.w	r5, r5, #32
 80079da:	608d      	str	r5, [r1, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 80079dc:	68cc      	ldr	r4, [r1, #12]
 80079de:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 80079e2:	f424 1400 	bic.w	r4, r4, #2097152	; 0x200000
 80079e6:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 80079ea:	60cc      	str	r4, [r1, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80079ec:	6b0c      	ldr	r4, [r1, #48]	; 0x30
 80079ee:	f024 040f 	bic.w	r4, r4, #15
 80079f2:	630c      	str	r4, [r1, #48]	; 0x30
  MODIFY_REG(ADCx->CR,
 80079f4:	688c      	ldr	r4, [r1, #8]
 80079f6:	4034      	ands	r4, r6
 80079f8:	f044 0404 	orr.w	r4, r4, #4
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80079fc:	2540      	movs	r5, #64	; 0x40
  MODIFY_REG(ADCx->CR,
 80079fe:	608c      	str	r4, [r1, #8]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8007a00:	600d      	str	r5, [r1, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8007a02:	684c      	ldr	r4, [r1, #4]
 8007a04:	432c      	orrs	r4, r5
 8007a06:	604c      	str	r4, [r1, #4]
 8007a08:	e75c      	b.n	80078c4 <R3_1_Init+0x35c>
  while ((Brk2Timeout != 0u) && (1U == result))
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1a5      	bne.n	800795a <R3_1_Init+0x3f2>
 8007a0e:	e7ad      	b.n	800796c <R3_1_Init+0x404>
                                         * (SystemCoreClock / (100000UL * 2UL)));
 8007a10:	4c17      	ldr	r4, [pc, #92]	; (8007a70 <R3_1_Init+0x508>)
  MODIFY_REG(ADCx->CR,
 8007a12:	688d      	ldr	r5, [r1, #8]
 8007a14:	6824      	ldr	r4, [r4, #0]
 8007a16:	4e18      	ldr	r6, [pc, #96]	; (8007a78 <R3_1_Init+0x510>)
 8007a18:	09a4      	lsrs	r4, r4, #6
 8007a1a:	fba6 6404 	umull	r6, r4, r6, r4
 8007a1e:	f025 4510 	bic.w	r5, r5, #2415919104	; 0x90000000
 8007a22:	09a4      	lsrs	r4, r4, #6
 8007a24:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8007a28:	0064      	lsls	r4, r4, #1
 8007a2a:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8007a2e:	608d      	str	r5, [r1, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 8007a30:	940e      	str	r4, [sp, #56]	; 0x38
    while (wait_loop_index != 0UL)
 8007a32:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007a34:	2c00      	cmp	r4, #0
 8007a36:	d0af      	beq.n	8007998 <R3_1_Init+0x430>
      wait_loop_index--;
 8007a38:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007a3a:	3c01      	subs	r4, #1
 8007a3c:	940e      	str	r4, [sp, #56]	; 0x38
    while (wait_loop_index != 0UL)
 8007a3e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8007a40:	2c00      	cmp	r4, #0
 8007a42:	d1f9      	bne.n	8007a38 <R3_1_Init+0x4d0>
 8007a44:	e7a8      	b.n	8007998 <R3_1_Init+0x430>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007a46:	4e0a      	ldr	r6, [pc, #40]	; (8007a70 <R3_1_Init+0x508>)
 8007a48:	4f0c      	ldr	r7, [pc, #48]	; (8007a7c <R3_1_Init+0x514>)
 8007a4a:	6836      	ldr	r6, [r6, #0]
 8007a4c:	fba7 4606 	umull	r4, r6, r7, r6
 8007a50:	0cf6      	lsrs	r6, r6, #19
 8007a52:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8007a56:	960b      	str	r6, [sp, #44]	; 0x2c
    while (wait_loop_index != 0UL)
 8007a58:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007a5a:	2e00      	cmp	r6, #0
 8007a5c:	f43f aeda 	beq.w	8007814 <R3_1_Init+0x2ac>
 8007a60:	9c01      	ldr	r4, [sp, #4]
      wait_loop_index--;
 8007a62:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007a64:	3e01      	subs	r6, #1
 8007a66:	960b      	str	r6, [sp, #44]	; 0x2c
    while (wait_loop_index != 0UL)
 8007a68:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8007a6a:	2e00      	cmp	r6, #0
 8007a6c:	d1f9      	bne.n	8007a62 <R3_1_Init+0x4fa>
 8007a6e:	e6d0      	b.n	8007812 <R3_1_Init+0x2aa>
 8007a70:	200003d8 	.word	0x200003d8
 8007a74:	7fffffc0 	.word	0x7fffffc0
 8007a78:	053e2d63 	.word	0x053e2d63
 8007a7c:	431bde83 	.word	0x431bde83
 8007a80:	40012c00 	.word	0x40012c00
 8007a84:	e0042000 	.word	0xe0042000
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007a88:	4d29      	ldr	r5, [pc, #164]	; (8007b30 <R3_1_Init+0x5c8>)
 8007a8a:	4e2a      	ldr	r6, [pc, #168]	; (8007b34 <R3_1_Init+0x5cc>)
 8007a8c:	682d      	ldr	r5, [r5, #0]
 8007a8e:	fba6 4505 	umull	r4, r5, r6, r5
 8007a92:	0ced      	lsrs	r5, r5, #19
 8007a94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007a98:	950d      	str	r5, [sp, #52]	; 0x34
    while (wait_loop_index != 0UL)
 8007a9a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007a9c:	2d00      	cmp	r5, #0
 8007a9e:	f43f af05 	beq.w	80078ac <R3_1_Init+0x344>
 8007aa2:	9c01      	ldr	r4, [sp, #4]
      wait_loop_index--;
 8007aa4:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007aa6:	3d01      	subs	r5, #1
 8007aa8:	950d      	str	r5, [sp, #52]	; 0x34
    while (wait_loop_index != 0UL)
 8007aaa:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007aac:	2d00      	cmp	r5, #0
 8007aae:	d1f9      	bne.n	8007aa4 <R3_1_Init+0x53c>
 8007ab0:	e6fb      	b.n	80078aa <R3_1_Init+0x342>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007ab2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007b30 <R3_1_Init+0x5c8>
 8007ab6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8007b34 <R3_1_Init+0x5cc>
 8007aba:	f8dc c000 	ldr.w	ip, [ip]
 8007abe:	fba8 4c0c 	umull	r4, ip, r8, ip
 8007ac2:	ea4f 4cdc 	mov.w	ip, ip, lsr #19
 8007ac6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8007aca:	f8cd c01c 	str.w	ip, [sp, #28]
    while (wait_loop_index != 0UL)
 8007ace:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8007ad2:	f1bc 0f00 	cmp.w	ip, #0
 8007ad6:	f43f adf3 	beq.w	80076c0 <R3_1_Init+0x158>
 8007ada:	9c01      	ldr	r4, [sp, #4]
 8007adc:	469c      	mov	ip, r3
      wait_loop_index--;
 8007ade:	9b07      	ldr	r3, [sp, #28]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	9307      	str	r3, [sp, #28]
    while (wait_loop_index != 0UL)
 8007ae4:	9b07      	ldr	r3, [sp, #28]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d1f9      	bne.n	8007ade <R3_1_Init+0x576>
 8007aea:	e5e7      	b.n	80076bc <R3_1_Init+0x154>
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007aec:	4f10      	ldr	r7, [pc, #64]	; (8007b30 <R3_1_Init+0x5c8>)
 8007aee:	f8df c044 	ldr.w	ip, [pc, #68]	; 8007b34 <R3_1_Init+0x5cc>
 8007af2:	683f      	ldr	r7, [r7, #0]
 8007af4:	fbac 4707 	umull	r4, r7, ip, r7
 8007af8:	0cff      	lsrs	r7, r7, #19
 8007afa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8007afe:	9709      	str	r7, [sp, #36]	; 0x24
    while (wait_loop_index != 0UL)
 8007b00:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007b02:	2f00      	cmp	r7, #0
 8007b04:	f43f ae36 	beq.w	8007774 <R3_1_Init+0x20c>
 8007b08:	9c01      	ldr	r4, [sp, #4]
      wait_loop_index--;
 8007b0a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007b0c:	3f01      	subs	r7, #1
 8007b0e:	9709      	str	r7, [sp, #36]	; 0x24
    while (wait_loop_index != 0UL)
 8007b10:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007b12:	2f00      	cmp	r7, #0
 8007b14:	d1f9      	bne.n	8007b0a <R3_1_Init+0x5a2>
 8007b16:	e62c      	b.n	8007772 <R3_1_Init+0x20a>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 8007b18:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007b1c:	2b03      	cmp	r3, #3
 8007b1e:	f47f af0d 	bne.w	800793c <R3_1_Init+0x3d4>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007b22:	6311      	str	r1, [r2, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007b24:	6951      	ldr	r1, [r2, #20]
 8007b26:	f041 0101 	orr.w	r1, r1, #1
 8007b2a:	6151      	str	r1, [r2, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8007b2e:	e705      	b.n	800793c <R3_1_Init+0x3d4>
 8007b30:	200003d8 	.word	0x200003d8
 8007b34:	431bde83 	.word	0x431bde83

08007b38 <R3_1_SetOffsetCalib>:
{
 8007b38:	b410      	push	{r4}
  pHandle->PhaseBOffset = offsets->phaseBOffset;
 8007b3a:	e9d1 3400 	ldrd	r3, r4, [r1]
  pHandle->PhaseCOffset = offsets->phaseCOffset;
 8007b3e:	688a      	ldr	r2, [r1, #8]
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8007b40:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  pHdl->offsetCalibStatus = true;
 8007b44:	2301      	movs	r3, #1
  pHandle->PhaseCOffset = offsets->phaseCOffset;
 8007b46:	e9c0 4223 	strd	r4, r2, [r0, #140]	; 0x8c
  pHdl->offsetCalibStatus = true;
 8007b4a:	f880 307f 	strb.w	r3, [r0, #127]	; 0x7f
}
 8007b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b52:	4770      	bx	lr

08007b54 <R3_1_GetOffsetCalib>:
{
 8007b54:	b410      	push	{r4}
  offsets->phaseBOffset = pHandle->PhaseBOffset;
 8007b56:	e9d0 4222 	ldrd	r4, r2, [r0, #136]	; 0x88
  offsets->phaseCOffset = pHandle->PhaseCOffset;
 8007b5a:	f8d0 3090 	ldr.w	r3, [r0, #144]	; 0x90
 8007b5e:	608b      	str	r3, [r1, #8]
  offsets->phaseBOffset = pHandle->PhaseBOffset;
 8007b60:	e9c1 4200 	strd	r4, r2, [r1]
}
 8007b64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop

08007b6c <R3_1_CurrentReadingPolarization>:
{
 8007b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007b6e:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
  if (true == pHandle->_Super.offsetCalibStatus)
 8007b72:	f890 307f 	ldrb.w	r3, [r0, #127]	; 0x7f
  ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 8007b76:	6816      	ldr	r6, [r2, #0]
{
 8007b78:	b083      	sub	sp, #12
 8007b7a:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 8007b7c:	b193      	cbz	r3, 8007ba4 <R3_1_CurrentReadingPolarization+0x38>
  MODIFY_REG(ADCx->CR,
 8007b7e:	68b3      	ldr	r3, [r6, #8]
 8007b80:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007b88:	f043 0308 	orr.w	r3, r3, #8
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007b8c:	2280      	movs	r2, #128	; 0x80
 8007b8e:	60b3      	str	r3, [r6, #8]
 8007b90:	f8a0 2096 	strh.w	r2, [r0, #150]	; 0x96
  pHandle->_Super.Sector = SECTOR_5;
 8007b94:	2204      	movs	r2, #4
  pHandle->_Super.BrakeActionLock = false;
 8007b96:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 8007b98:	f884 207a 	strb.w	r2, [r4, #122]	; 0x7a
  pHandle->_Super.BrakeActionLock = false;
 8007b9c:	f884 3083 	strb.w	r3, [r4, #131]	; 0x83
}
 8007ba0:	b003      	add	sp, #12
 8007ba2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007ba4:	6855      	ldr	r5, [r2, #4]
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8007ba6:	6801      	ldr	r1, [r0, #0]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8007ba8:	6942      	ldr	r2, [r0, #20]
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8007baa:	9100      	str	r1, [sp, #0]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8007bac:	9201      	str	r2, [sp, #4]
    pHandle->PolarizationCounter = 0U;
 8007bae:	f880 3098 	strb.w	r3, [r0, #152]	; 0x98
  CLEAR_BIT(TIMx->CCER, Channels);
 8007bb2:	6a2a      	ldr	r2, [r5, #32]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 8007bb4:	4938      	ldr	r1, [pc, #224]	; (8007c98 <R3_1_CurrentReadingPolarization+0x12c>)
    pHandle->PhaseAOffset = 0U;
 8007bb6:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8007bba:	f422 62aa 	bic.w	r2, r2, #1360	; 0x550
 8007bbe:	f022 0205 	bic.w	r2, r2, #5
    pHandle->PhaseCOffset = 0U;
 8007bc2:	e9c0 3323 	strd	r3, r3, [r0, #140]	; 0x8c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 8007bc6:	4f35      	ldr	r7, [pc, #212]	; (8007c9c <R3_1_CurrentReadingPolarization+0x130>)
 8007bc8:	622a      	str	r2, [r5, #32]
  pHandle->PolarizationSector=SECTOR_5;
 8007bca:	2304      	movs	r3, #4
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007bcc:	2280      	movs	r2, #128	; 0x80
 8007bce:	f8a0 2096 	strh.w	r2, [r0, #150]	; 0x96
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 8007bd2:	6007      	str	r7, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 8007bd4:	6141      	str	r1, [r0, #20]
  pHandle->PolarizationSector=SECTOR_5;
 8007bd6:	f880 3099 	strb.w	r3, [r0, #153]	; 0x99
  pHandle->_Super.Sector = SECTOR_5;   
 8007bda:	f880 307a 	strb.w	r3, [r0, #122]	; 0x7a
    R3_1_SwitchOnPWM(&pHandle->_Super);
 8007bde:	f7ff fb83 	bl	80072e8 <R3_1_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 8007be2:	4a2f      	ldr	r2, [pc, #188]	; (8007ca0 <R3_1_CurrentReadingPolarization+0x134>)
 8007be4:	686b      	ldr	r3, [r5, #4]
 8007be6:	4013      	ands	r3, r2
 8007be8:	2b70      	cmp	r3, #112	; 0x70
 8007bea:	d1fb      	bne.n	8007be4 <R3_1_CurrentReadingPolarization+0x78>
 8007bec:	68b3      	ldr	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 8007bee:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8007bf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007bf6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007bfa:	f043 0308 	orr.w	r3, r3, #8
 8007bfe:	60b3      	str	r3, [r6, #8]
 8007c00:	f104 0798 	add.w	r7, r4, #152	; 0x98
 8007c04:	f104 0656 	add.w	r6, r4, #86	; 0x56
 8007c08:	4631      	mov	r1, r6
 8007c0a:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 8007c0e:	463b      	mov	r3, r7
 8007c10:	4628      	mov	r0, r5
 8007c12:	f7fa ff2f 	bl	8002a74 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM(&pHandle->_Super);
 8007c16:	4620      	mov	r0, r4
 8007c18:	f7ff fbb0 	bl	800737c <R3_1_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 8007c1c:	2300      	movs	r3, #0
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 8007c1e:	4a21      	ldr	r2, [pc, #132]	; (8007ca4 <R3_1_CurrentReadingPolarization+0x138>)
    pHandle->PolarizationCounter = 0U;
 8007c20:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
  pHandle->PolarizationSector=SECTOR_1;
 8007c24:	f884 3099 	strb.w	r3, [r4, #153]	; 0x99
  pHandle->_Super.Sector = SECTOR_1;   
 8007c28:	f884 307a 	strb.w	r3, [r4, #122]	; 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 8007c2c:	6022      	str	r2, [r4, #0]
    R3_1_SwitchOnPWM(&pHandle->_Super);
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f7ff fb5a 	bl	80072e8 <R3_1_SwitchOnPWM>
    waitForPolarizationEnd(TIMx,
 8007c34:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
 8007c38:	463b      	mov	r3, r7
 8007c3a:	4631      	mov	r1, r6
 8007c3c:	f892 2062 	ldrb.w	r2, [r2, #98]	; 0x62
 8007c40:	4628      	mov	r0, r5
 8007c42:	f7fa ff17 	bl	8002a74 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM(&pHandle->_Super);
 8007c46:	4620      	mov	r0, r4
 8007c48:	f7ff fb98 	bl	800737c <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8007c4c:	e9d4 1222 	ldrd	r1, r2, [r4, #136]	; 0x88
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8007c50:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    if (0U == pHandle->_Super.SWerror)
 8007c54:	f8b4 0056 	ldrh.w	r0, [r4, #86]	; 0x56
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8007c58:	0909      	lsrs	r1, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8007c5a:	0912      	lsrs	r2, r2, #4
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8007c5c:	091b      	lsrs	r3, r3, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8007c5e:	e9c4 1222 	strd	r1, r2, [r4, #136]	; 0x88
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8007c62:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    if (0U == pHandle->_Super.SWerror)
 8007c66:	b910      	cbnz	r0, 8007c6e <R3_1_CurrentReadingPolarization+0x102>
      pHandle->_Super.offsetCalibStatus = true;
 8007c68:	2301      	movs	r3, #1
 8007c6a:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 8007c6e:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8007c72:	9900      	ldr	r1, [sp, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8007c74:	9a01      	ldr	r2, [sp, #4]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8007c76:	6021      	str	r1, [r4, #0]
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 8007c78:	085b      	lsrs	r3, r3, #1
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8007c7a:	6162      	str	r2, [r4, #20]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007c7c:	636b      	str	r3, [r5, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007c7e:	63ab      	str	r3, [r5, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007c80:	63eb      	str	r3, [r5, #60]	; 0x3c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8007c82:	696b      	ldr	r3, [r5, #20]
 8007c84:	f043 0320 	orr.w	r3, r3, #32
 8007c88:	616b      	str	r3, [r5, #20]
  SET_BIT(TIMx->CCER, Channels);
 8007c8a:	6a2b      	ldr	r3, [r5, #32]
 8007c8c:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 8007c90:	f043 0305 	orr.w	r3, r3, #5
 8007c94:	622b      	str	r3, [r5, #32]
 8007c96:	e77d      	b.n	8007b94 <R3_1_CurrentReadingPolarization+0x28>
 8007c98:	08007211 	.word	0x08007211
 8007c9c:	08007255 	.word	0x08007255
 8007ca0:	02000070 	.word	0x02000070
 8007ca4:	080072a1 	.word	0x080072a1

08007ca8 <R3_1_SetADCSampPointSectX>:
  if (MC_NULL == pHdl)
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	d038      	beq.n	8007d1e <R3_1_SetADCSampPointSectX+0x76>
{
 8007cac:	b470      	push	{r4, r5, r6}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 8007cae:	f8b0 1094 	ldrh.w	r1, [r0, #148]	; 0x94
 8007cb2:	f8b0 3058 	ldrh.w	r3, [r0, #88]	; 0x58
 8007cb6:	f8d0 409c 	ldr.w	r4, [r0, #156]	; 0x9c
 8007cba:	1aca      	subs	r2, r1, r3
 8007cbc:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 8007cc0:	b292      	uxth	r2, r2
 8007cc2:	42b2      	cmp	r2, r6
 8007cc4:	d917      	bls.n	8007cf6 <R3_1_SetADCSampPointSectX+0x4e>
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8007cc6:	1e4b      	subs	r3, r1, #1
      pHandle->_Super.Sector = SECTOR_5;
 8007cc8:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8007cca:	b29b      	uxth	r3, r3
      pHandle->_Super.Sector = SECTOR_5;
 8007ccc:	f880 207a 	strb.w	r2, [r0, #122]	; 0x7a
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007cd0:	6862      	ldr	r2, [r4, #4]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8007cd2:	f8b0 5050 	ldrh.w	r5, [r0, #80]	; 0x50
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8007cd6:	f8b0 4052 	ldrh.w	r4, [r0, #82]	; 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8007cda:	f8b0 1054 	ldrh.w	r1, [r0, #84]	; 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007cde:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007ce0:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007ce2:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007ce4:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007ce6:	6852      	ldr	r2, [r2, #4]
 8007ce8:	4b10      	ldr	r3, [pc, #64]	; (8007d2c <R3_1_SetADCSampPointSectX+0x84>)
 8007cea:	421a      	tst	r2, r3
    returnValue = 0U;
 8007cec:	bf14      	ite	ne
 8007cee:	2001      	movne	r0, #1
 8007cf0:	2000      	moveq	r0, #0
}
 8007cf2:	bc70      	pop	{r4, r5, r6}
 8007cf4:	4770      	bx	lr
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 8007cf6:	f8b0 505a 	ldrh.w	r5, [r0, #90]	; 0x5a
 8007cfa:	1b5d      	subs	r5, r3, r5
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 8007cfc:	b2ad      	uxth	r5, r5
 8007cfe:	ebb5 0f42 	cmp.w	r5, r2, lsl #1
 8007d02:	d80d      	bhi.n	8007d20 <R3_1_SetADCSampPointSectX+0x78>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8007d04:	4433      	add	r3, r6
 8007d06:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 8007d08:	4299      	cmp	r1, r3
 8007d0a:	d8e1      	bhi.n	8007cd0 <R3_1_SetADCSampPointSectX+0x28>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8007d0c:	43db      	mvns	r3, r3
 8007d0e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 8007d12:	f44f 7280 	mov.w	r2, #256	; 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8007d16:	b29b      	uxth	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 8007d18:	f8a0 2096 	strh.w	r2, [r0, #150]	; 0x96
 8007d1c:	e7d8      	b.n	8007cd0 <R3_1_SetADCSampPointSectX+0x28>
}
 8007d1e:	4770      	bx	lr
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8007d20:	f8b4 2058 	ldrh.w	r2, [r4, #88]	; 0x58
 8007d24:	1a9b      	subs	r3, r3, r2
 8007d26:	b29b      	uxth	r3, r3
 8007d28:	e7d2      	b.n	8007cd0 <R3_1_SetADCSampPointSectX+0x28>
 8007d2a:	bf00      	nop
 8007d2c:	02000070 	.word	0x02000070

08007d30 <R3_1_TIMx_UP_IRQHandler>:
  if (MC_NULL == pHandle)
 8007d30:	4602      	mov	r2, r0
 8007d32:	2800      	cmp	r0, #0
 8007d34:	d039      	beq.n	8007daa <R3_1_TIMx_UP_IRQHandler+0x7a>
{
 8007d36:	b4f0      	push	{r4, r5, r6, r7}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007d38:	f8d0 109c 	ldr.w	r1, [r0, #156]	; 0x9c
 8007d3c:	f890 607a 	ldrb.w	r6, [r0, #122]	; 0x7a
    ADC_TypeDef *ADCx = pHandle->pParams_str->ADCx;
 8007d40:	6808      	ldr	r0, [r1, #0]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007d42:	e9d1 5401 	ldrd	r5, r4, [r1, #4]
    if (OPAMPParams != NULL)
 8007d46:	b1d4      	cbz	r4, 8007d7e <R3_1_TIMx_UP_IRQHandler+0x4e>
      while (ADCx->JSQR != 0x0u)
 8007d48:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d1fc      	bne.n	8007d48 <R3_1_TIMx_UP_IRQHandler+0x18>
 8007d4e:	b233      	sxth	r3, r6
 8007d50:	eb04 0783 	add.w	r7, r4, r3, lsl #2
      operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8007d54:	f854 c023 	ldr.w	ip, [r4, r3, lsl #2]
      if (operationAmp != NULL)
 8007d58:	f1bc 0f00 	cmp.w	ip, #0
 8007d5c:	d007      	beq.n	8007d6e <R3_1_TIMx_UP_IRQHandler+0x3e>
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8007d5e:	f8dc 3000 	ldr.w	r3, [ip]
 8007d62:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 8007d64:	f423 7386 	bic.w	r3, r3, #268	; 0x10c
 8007d68:	4323      	orrs	r3, r4
 8007d6a:	f8cc 3000 	str.w	r3, [ip]
      operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8007d6e:	69bc      	ldr	r4, [r7, #24]
      if (operationAmp != NULL)
 8007d70:	b12c      	cbz	r4, 8007d7e <R3_1_TIMx_UP_IRQHandler+0x4e>
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	6cbf      	ldr	r7, [r7, #72]	; 0x48
 8007d76:	f423 7386 	bic.w	r3, r3, #268	; 0x10c
 8007d7a:	433b      	orrs	r3, r7
 8007d7c:	6023      	str	r3, [r4, #0]
    ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8007d7e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8007d82:	f8b2 3096 	ldrh.w	r3, [r2, #150]	; 0x96
 8007d86:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8007d88:	430b      	orrs	r3, r1
 8007d8a:	64c3      	str	r3, [r0, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007d8c:	686b      	ldr	r3, [r5, #4]
 8007d8e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d96:	f043 0370 	orr.w	r3, r3, #112	; 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007d9a:	2180      	movs	r1, #128	; 0x80
 8007d9c:	606b      	str	r3, [r5, #4]
    tempPointer = &(pHandle->_Super.Motor);
 8007d9e:	f102 0078 	add.w	r0, r2, #120	; 0x78
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007da2:	f8a2 1096 	strh.w	r1, [r2, #150]	; 0x96
}
 8007da6:	bcf0      	pop	{r4, r5, r6, r7}
 8007da8:	4770      	bx	lr
 8007daa:	4770      	bx	lr

08007dac <R3_1_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 8007dac:	f890 107e 	ldrb.w	r1, [r0, #126]	; 0x7e
{
 8007db0:	b430      	push	{r4, r5}
  if (false == pHandle->_Super.RLDetectionMode)
 8007db2:	2900      	cmp	r1, #0
 8007db4:	d13f      	bne.n	8007e36 <R3_1_RLDetectionModeEnable+0x8a>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007db6:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 8007dba:	f890 507b 	ldrb.w	r5, [r0, #123]	; 0x7b
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007dbe:	685b      	ldr	r3, [r3, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007dc0:	699a      	ldr	r2, [r3, #24]
 8007dc2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007dc6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007dca:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007dce:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007dd0:	6a1a      	ldr	r2, [r3, #32]
 8007dd2:	f042 0201 	orr.w	r2, r2, #1
 8007dd6:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007dd8:	6a1a      	ldr	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 8007dda:	2d01      	cmp	r5, #1
 8007ddc:	f022 0204 	bic.w	r2, r2, #4
 8007de0:	621a      	str	r2, [r3, #32]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8007de2:	f103 0418 	add.w	r4, r3, #24
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007de6:	6359      	str	r1, [r3, #52]	; 0x34
 8007de8:	d032      	beq.n	8007e50 <R3_1_RLDetectionModeEnable+0xa4>
    else if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 8007dea:	2d02      	cmp	r5, #2
 8007dec:	d10f      	bne.n	8007e0e <R3_1_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007dee:	699a      	ldr	r2, [r3, #24]
 8007df0:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007df4:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007dfc:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007dfe:	6a1a      	ldr	r2, [r3, #32]
 8007e00:	f042 0210 	orr.w	r2, r2, #16
 8007e04:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007e06:	6a1a      	ldr	r2, [r3, #32]
 8007e08:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e0c:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007e0e:	6862      	ldr	r2, [r4, #4]
 8007e10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007e14:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8007e18:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8007e1c:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007e1e:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8007e20:	f8d0 108c 	ldr.w	r1, [r0, #140]	; 0x8c
 8007e24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e28:	621a      	str	r2, [r3, #32]
 8007e2a:	6a1a      	ldr	r2, [r3, #32]
 8007e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e30:	621a      	str	r2, [r3, #32]
 8007e32:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8007e36:	4b0f      	ldr	r3, [pc, #60]	; (8007e74 <R3_1_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 8007e38:	490f      	ldr	r1, [pc, #60]	; (8007e78 <R3_1_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8007e3a:	4a10      	ldr	r2, [pc, #64]	; (8007e7c <R3_1_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8007e3c:	4c10      	ldr	r4, [pc, #64]	; (8007e80 <R3_1_RLDetectionModeEnable+0xd4>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8007e3e:	6003      	str	r3, [r0, #0]
  pHandle->_Super.RLDetectionMode = true;
 8007e40:	2301      	movs	r3, #1
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8007e42:	6104      	str	r4, [r0, #16]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8007e44:	e9c0 2101 	strd	r2, r1, [r0, #4]
  pHandle->_Super.RLDetectionMode = true;
 8007e48:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
}
 8007e4c:	bc30      	pop	{r4, r5}
 8007e4e:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007e50:	699a      	ldr	r2, [r3, #24]
 8007e52:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8007e56:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8007e5a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e5e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007e60:	6a1a      	ldr	r2, [r3, #32]
 8007e62:	f022 0210 	bic.w	r2, r2, #16
 8007e66:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007e68:	6a1a      	ldr	r2, [r3, #32]
 8007e6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e6e:	621a      	str	r2, [r3, #32]
 8007e70:	e7cd      	b.n	8007e0e <R3_1_RLDetectionModeEnable+0x62>
 8007e72:	bf00      	nop
 8007e74:	080073e1 	.word	0x080073e1
 8007e78:	08007439 	.word	0x08007439
 8007e7c:	0800737d 	.word	0x0800737d
 8007e80:	0800751d 	.word	0x0800751d

08007e84 <R3_1_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 8007e84:	f890 307e 	ldrb.w	r3, [r0, #126]	; 0x7e
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d03c      	beq.n	8007f06 <R3_1_RLDetectionModeDisable+0x82>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007e8c:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
 8007e90:	685b      	ldr	r3, [r3, #4]
{
 8007e92:	b470      	push	{r4, r5, r6}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007e94:	699a      	ldr	r2, [r3, #24]
 8007e96:	4c40      	ldr	r4, [pc, #256]	; (8007f98 <R3_1_RLDetectionModeDisable+0x114>)
 8007e98:	f8b0 6094 	ldrh.w	r6, [r0, #148]	; 0x94
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 8007e9c:	f890 507b 	ldrb.w	r5, [r0, #123]	; 0x7b
 8007ea0:	4022      	ands	r2, r4
 8007ea2:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8007ea6:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007ea8:	6a19      	ldr	r1, [r3, #32]
 8007eaa:	2d01      	cmp	r5, #1
 8007eac:	f041 0101 	orr.w	r1, r1, #1
 8007eb0:	6219      	str	r1, [r3, #32]
 8007eb2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007eb6:	d027      	beq.n	8007f08 <R3_1_RLDetectionModeDisable+0x84>
    else if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 8007eb8:	2d02      	cmp	r5, #2
 8007eba:	d049      	beq.n	8007f50 <R3_1_RLDetectionModeDisable+0xcc>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ebc:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007ebe:	6999      	ldr	r1, [r3, #24]
 8007ec0:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007ec4:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8007ec8:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8007ecc:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007ece:	6a19      	ldr	r1, [r3, #32]
 8007ed0:	f041 0110 	orr.w	r1, r1, #16
 8007ed4:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007ed6:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007ed8:	69d9      	ldr	r1, [r3, #28]
 8007eda:	400c      	ands	r4, r1
 8007edc:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8007ee0:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007ee2:	6a19      	ldr	r1, [r3, #32]
 8007ee4:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007ee8:	6219      	str	r1, [r3, #32]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8007eea:	492c      	ldr	r1, [pc, #176]	; (8007f9c <R3_1_RLDetectionModeDisable+0x118>)
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8007eec:	4a2c      	ldr	r2, [pc, #176]	; (8007fa0 <R3_1_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007eee:	63de      	str	r6, [r3, #60]	; 0x3c
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8007ef0:	4d2c      	ldr	r5, [pc, #176]	; (8007fa4 <R3_1_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8007ef2:	4c2d      	ldr	r4, [pc, #180]	; (8007fa8 <R3_1_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8007ef4:	6005      	str	r5, [r0, #0]
    pHandle->_Super.RLDetectionMode = false;
 8007ef6:	2300      	movs	r3, #0
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8007ef8:	6104      	str	r4, [r0, #16]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8007efa:	e9c0 2101 	strd	r2, r1, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 8007efe:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
}
 8007f02:	bc70      	pop	{r4, r5, r6}
 8007f04:	4770      	bx	lr
 8007f06:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8007f08:	6a19      	ldr	r1, [r3, #32]
 8007f0a:	f041 0104 	orr.w	r1, r1, #4
 8007f0e:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007f10:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007f12:	6999      	ldr	r1, [r3, #24]
 8007f14:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007f18:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8007f1c:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8007f20:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007f22:	6a19      	ldr	r1, [r3, #32]
 8007f24:	f041 0110 	orr.w	r1, r1, #16
 8007f28:	6219      	str	r1, [r3, #32]
 8007f2a:	6a19      	ldr	r1, [r3, #32]
 8007f2c:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8007f30:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007f32:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007f34:	69d9      	ldr	r1, [r3, #28]
 8007f36:	400c      	ands	r4, r1
 8007f38:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8007f3c:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007f3e:	6a19      	ldr	r1, [r3, #32]
 8007f40:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007f44:	6219      	str	r1, [r3, #32]
 8007f46:	6a19      	ldr	r1, [r3, #32]
 8007f48:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 8007f4c:	6219      	str	r1, [r3, #32]
 8007f4e:	e7cc      	b.n	8007eea <R3_1_RLDetectionModeDisable+0x66>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007f50:	6a19      	ldr	r1, [r3, #32]
 8007f52:	f021 0104 	bic.w	r1, r1, #4
 8007f56:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007f58:	635e      	str	r6, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007f5a:	6999      	ldr	r1, [r3, #24]
 8007f5c:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8007f60:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
 8007f64:	f441 41c0 	orr.w	r1, r1, #24576	; 0x6000
 8007f68:	6199      	str	r1, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007f6a:	6a19      	ldr	r1, [r3, #32]
 8007f6c:	f041 0110 	orr.w	r1, r1, #16
 8007f70:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007f72:	6a19      	ldr	r1, [r3, #32]
 8007f74:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8007f78:	6219      	str	r1, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007f7a:	639e      	str	r6, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007f7c:	69d9      	ldr	r1, [r3, #28]
 8007f7e:	400c      	ands	r4, r1
 8007f80:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8007f84:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007f86:	6a19      	ldr	r1, [r3, #32]
 8007f88:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8007f8c:	6219      	str	r1, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007f8e:	6a19      	ldr	r1, [r3, #32]
 8007f90:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8007f94:	6219      	str	r1, [r3, #32]
 8007f96:	e7a8      	b.n	8007eea <R3_1_RLDetectionModeDisable+0x66>
 8007f98:	fffeff8c 	.word	0xfffeff8c
 8007f9c:	080072e9 	.word	0x080072e9
 8007fa0:	0800737d 	.word	0x0800737d
 8007fa4:	08007075 	.word	0x08007075
 8007fa8:	080074d1 	.word	0x080074d1

08007fac <R3_1_RLDetectionModeSetDuty>:
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007fac:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
 8007fb0:	6852      	ldr	r2, [r2, #4]
{
 8007fb2:	b470      	push	{r4, r5, r6}
 8007fb4:	4603      	mov	r3, r0
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8007fb6:	f8b0 4094 	ldrh.w	r4, [r0, #148]	; 0x94
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 8007fba:	f8b0 5074 	ldrh.w	r5, [r0, #116]	; 0x74
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007fbe:	69d0      	ldr	r0, [r2, #28]
 8007fc0:	f020 7080 	bic.w	r0, r0, #16777216	; 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8007fc4:	fb04 f101 	mul.w	r1, r4, r1
 8007fc8:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
 8007fcc:	0c09      	lsrs	r1, r1, #16
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 8007fce:	1b64      	subs	r4, r4, r5
    pHandle->ADCRegularLocked = true;
 8007fd0:	2601      	movs	r6, #1
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 8007fd2:	f8b3 5076 	ldrh.w	r5, [r3, #118]	; 0x76
    pHandle->_Super.CntPhA = (uint16_t)val;
 8007fd6:	f8a3 1050 	strh.w	r1, [r3, #80]	; 0x50
 8007fda:	f440 40e0 	orr.w	r0, r0, #28672	; 0x7000
    pHandle->ADCRegularLocked = true;
 8007fde:	f883 60a0 	strb.w	r6, [r3, #160]	; 0xa0
 8007fe2:	61d0      	str	r0, [r2, #28]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007fe4:	6414      	str	r4, [r2, #64]	; 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007fe6:	63d5      	str	r5, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007fe8:	6351      	str	r1, [r2, #52]	; 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007fea:	6851      	ldr	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8007fec:	f8b3 0056 	ldrh.w	r0, [r3, #86]	; 0x56
 8007ff0:	f021 7100 	bic.w	r1, r1, #33554432	; 0x2000000
 8007ff4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8007ff8:	f041 0170 	orr.w	r1, r1, #112	; 0x70
    pHdl->Sector = SECTOR_4;
 8007ffc:	2403      	movs	r4, #3
 8007ffe:	6051      	str	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8008000:	42b0      	cmp	r0, r6
    pHdl->Sector = SECTOR_4;
 8008002:	f883 407a 	strb.w	r4, [r3, #122]	; 0x7a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8008006:	6852      	ldr	r2, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8008008:	d006      	beq.n	8008018 <R3_1_RLDetectionModeSetDuty+0x6c>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800800a:	4b06      	ldr	r3, [pc, #24]	; (8008024 <R3_1_RLDetectionModeSetDuty+0x78>)
 800800c:	421a      	tst	r2, r3
      hAux = MC_DURATION;
 800800e:	bf14      	ite	ne
 8008010:	4630      	movne	r0, r6
 8008012:	2000      	moveq	r0, #0
}
 8008014:	bc70      	pop	{r4, r5, r6}
 8008016:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 8008018:	2200      	movs	r2, #0
 800801a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
}
 800801e:	bc70      	pop	{r4, r5, r6}
 8008020:	4770      	bx	lr
 8008022:	bf00      	nop
 8008024:	02000070 	.word	0x02000070

08008028 <R3_1_RLTurnOnLowSidesAndStart>:
  }
  else
  {
#endif
    PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8008028:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c

    pHandle->ADCRegularLocked=true;
 800802c:	2201      	movs	r2, #1
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800802e:	685b      	ldr	r3, [r3, #4]
    pHandle->ADCRegularLocked=true;
 8008030:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008034:	f06f 0201 	mvn.w	r2, #1
{
 8008038:	b430      	push	{r4, r5}
 800803a:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800803c:	691a      	ldr	r2, [r3, #16]
 800803e:	07d1      	lsls	r1, r2, #31
 8008040:	d5fc      	bpl.n	800803c <R3_1_RLTurnOnLowSidesAndStart+0x14>
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH2(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH3(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8008042:	f8b0 2094 	ldrh.w	r2, [r0, #148]	; 0x94
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008046:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8008048:	f06f 0401 	mvn.w	r4, #1
 800804c:	3a05      	subs	r2, #5
 800804e:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8008050:	6359      	str	r1, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8008052:	6399      	str	r1, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8008054:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8008056:	641a      	str	r2, [r3, #64]	; 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8008058:	691a      	ldr	r2, [r3, #16]
 800805a:	07d2      	lsls	r2, r2, #31
 800805c:	d5fc      	bpl.n	8008058 <R3_1_RLTurnOnLowSidesAndStart+0x30>
    {
      /* Nothing to do */
    }

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800805e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    LL_TIM_EnableAllOutputs (TIMx);

    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 8008060:	f890 107b 	ldrb.w	r1, [r0, #123]	; 0x7b
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8008064:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008068:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800806a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 800806c:	2902      	cmp	r1, #2
 800806e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008072:	645a      	str	r2, [r3, #68]	; 0x44
 8008074:	d10b      	bne.n	800808e <R3_1_RLTurnOnLowSidesAndStart+0x66>
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008076:	e9d0 140f 	ldrd	r1, r4, [r0, #60]	; 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800807a:	f8b0 5048 	ldrh.w	r5, [r0, #72]	; 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800807e:	6c42      	ldr	r2, [r0, #68]	; 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 8008080:	618d      	str	r5, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8008082:	f8b0 504a 	ldrh.w	r5, [r0, #74]	; 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8008086:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
 800808a:	61a5      	str	r5, [r4, #24]
 800808c:	6191      	str	r1, [r2, #24]
    else
    {
      /* Nothing to do */
    }

    pHdl->Sector = SECTOR_4;
 800808e:	2203      	movs	r2, #3
 8008090:	f880 207a 	strb.w	r2, [r0, #122]	; 0x7a
  SET_BIT(TIMx->CCER, Channels);
 8008094:	6a1a      	ldr	r2, [r3, #32]
 8008096:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800809a:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800809c:	68da      	ldr	r2, [r3, #12]
 800809e:	f042 0201 	orr.w	r2, r2, #1
 80080a2:	60da      	str	r2, [r3, #12]

    LL_TIM_EnableIT_UPDATE(TIMx);
#ifdef NULL_PTR_CHECK_R3_1_PWM_CURR_FDB
  }
#endif
}
 80080a4:	bc30      	pop	{r4, r5}
 80080a6:	4770      	bx	lr

080080a8 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80080a8:	8982      	ldrh	r2, [r0, #12]
 80080aa:	8a41      	ldrh	r1, [r0, #18]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80080ac:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 80080ae:	440a      	add	r2, r1
 80080b0:	0852      	lsrs	r2, r2, #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80080b2:	b183      	cbz	r3, 80080d6 <RVBS_Clear+0x2e>
{
 80080b4:	b410      	push	{r4}
    {
      pHandle->aBuffer[index] = aux;
 80080b6:	6944      	ldr	r4, [r0, #20]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80080b8:	2300      	movs	r3, #0
      pHandle->aBuffer[index] = aux;
 80080ba:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 80080be:	3301      	adds	r3, #1
 80080c0:	8941      	ldrh	r1, [r0, #10]
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	4299      	cmp	r1, r3
 80080c6:	d8f8      	bhi.n	80080ba <RVBS_Clear+0x12>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 80080c8:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 80080ca:	8082      	strh	r2, [r0, #4]
    pHandle->_Super.AvBusVoltage_d = aux;
 80080cc:	80c2      	strh	r2, [r0, #6]
    pHandle->index = 0U;
 80080ce:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 80080d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80080d4:	4770      	bx	lr
    pHandle->index = 0U;
 80080d6:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 80080d8:	8082      	strh	r2, [r0, #4]
    pHandle->_Super.AvBusVoltage_d = aux;
 80080da:	80c2      	strh	r2, [r0, #6]
    pHandle->index = 0U;
 80080dc:	7643      	strb	r3, [r0, #25]
 80080de:	4770      	bx	lr

080080e0 <RVBS_Init>:
{
 80080e0:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 80080e2:	f7ff ffe1 	bl	80080a8 <RVBS_Clear>
}
 80080e6:	bd08      	pop	{r3, pc}

080080e8 <RVBS_CheckFaultState>:
  *         bus voltage and protection threshold values
  * @param  pHandle related RDivider_Handle_t
  * @retval uint16_t Fault code error
  */
__weak uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
 80080e8:	b410      	push	{r4}
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 80080ea:	8981      	ldrh	r1, [r0, #12]
 80080ec:	89c4      	ldrh	r4, [r0, #14]
 80080ee:	88c2      	ldrh	r2, [r0, #6]
 80080f0:	42a1      	cmp	r1, r4
{
 80080f2:	4603      	mov	r3, r0
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 80080f4:	d00f      	beq.n	8008116 <RVBS_CheckFaultState+0x2e>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 80080f6:	8a40      	ldrh	r0, [r0, #18]
 80080f8:	4290      	cmp	r0, r2
 80080fa:	d808      	bhi.n	800810e <RVBS_CheckFaultState+0x26>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 80080fc:	7c18      	ldrb	r0, [r3, #16]
 80080fe:	b9a0      	cbnz	r0, 800812a <RVBS_CheckFaultState+0x42>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8008100:	4294      	cmp	r4, r2
 8008102:	d918      	bls.n	8008136 <RVBS_CheckFaultState+0x4e>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8008104:	2201      	movs	r2, #1
 8008106:	741a      	strb	r2, [r3, #16]
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8008108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800810c:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 800810e:	2004      	movs	r0, #4
}
 8008110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008114:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8008116:	4291      	cmp	r1, r2
 8008118:	d30d      	bcc.n	8008136 <RVBS_CheckFaultState+0x4e>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800811a:	8a40      	ldrh	r0, [r0, #18]
}
 800811c:	f85d 4b04 	ldr.w	r4, [sp], #4
        fault = MC_UNDER_VOLT;
 8008120:	4290      	cmp	r0, r2
 8008122:	bf8c      	ite	hi
 8008124:	2004      	movhi	r0, #4
 8008126:	2000      	movls	r0, #0
}
 8008128:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800812a:	4291      	cmp	r1, r2
 800812c:	d307      	bcc.n	800813e <RVBS_CheckFaultState+0x56>
        fault = MC_NO_ERROR;
 800812e:	2000      	movs	r0, #0
}
 8008130:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008134:	4770      	bx	lr
        fault = MC_OVER_VOLT;
 8008136:	2002      	movs	r0, #2
}
 8008138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800813c:	4770      	bx	lr
          pHandle->OverVoltageHysteresisUpDir = false;
 800813e:	2200      	movs	r2, #0
 8008140:	741a      	strb	r2, [r3, #16]
          fault = MC_OVER_VOLT;
 8008142:	2002      	movs	r0, #2
 8008144:	e7e4      	b.n	8008110 <RVBS_CheckFaultState+0x28>
 8008146:	bf00      	nop

08008148 <RVBS_CalcAvVbus>:
    if (0xFFFFU == hAux)
 8008148:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800814c:	4299      	cmp	r1, r3
{
 800814e:	b570      	push	{r4, r5, r6, lr}
 8008150:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 8008152:	d020      	beq.n	8008196 <RVBS_CalcAvVbus+0x4e>
      pHandle->aBuffer[pHandle->index] = hAux;
 8008154:	7e43      	ldrb	r3, [r0, #25]
 8008156:	6942      	ldr	r2, [r0, #20]
 8008158:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800815c:	8945      	ldrh	r5, [r0, #10]
 800815e:	f015 03ff 	ands.w	r3, r5, #255	; 0xff
 8008162:	d00d      	beq.n	8008180 <RVBS_CalcAvVbus+0x38>
 8008164:	3b01      	subs	r3, #1
 8008166:	b2db      	uxtb	r3, r3
 8008168:	eb02 0643 	add.w	r6, r2, r3, lsl #1
 800816c:	3a02      	subs	r2, #2
      wtemp = 0u;
 800816e:	2300      	movs	r3, #0
        wtemp += pHandle->aBuffer[i];
 8008170:	f832 0f02 	ldrh.w	r0, [r2, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8008174:	42b2      	cmp	r2, r6
        wtemp += pHandle->aBuffer[i];
 8008176:	4403      	add	r3, r0
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8008178:	d1fa      	bne.n	8008170 <RVBS_CalcAvVbus+0x28>
 800817a:	fbb3 f3f5 	udiv	r3, r3, r5
 800817e:	b29b      	uxth	r3, r3
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8008180:	7e62      	ldrb	r2, [r4, #25]
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8008182:	80e3      	strh	r3, [r4, #6]
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8008184:	3d01      	subs	r5, #1
 8008186:	42aa      	cmp	r2, r5
        pHandle->index++;
 8008188:	bf34      	ite	cc
 800818a:	3201      	addcc	r2, #1
        pHandle->index = 0U;
 800818c:	2300      	movcs	r3, #0
      pHandle->_Super.LatestConv = hAux;
 800818e:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 8008190:	bf34      	ite	cc
 8008192:	7662      	strbcc	r2, [r4, #25]
        pHandle->index = 0U;
 8008194:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8008196:	4620      	mov	r0, r4
 8008198:	f7ff ffa6 	bl	80080e8 <RVBS_CheckFaultState>
 800819c:	8120      	strh	r0, [r4, #8]
}
 800819e:	bd70      	pop	{r4, r5, r6, pc}

080081a0 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 80081a0:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 80081a2:	2201      	movs	r2, #1
 80081a4:	6142      	str	r2, [r0, #20]
    pHandle->TargetFinal = 0;
 80081a6:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 80081aa:	e9c0 3303 	strd	r3, r3, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 80081ae:	4770      	bx	lr

080081b0 <SPD_GetMecAngle>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->wMecAngle);
#else
  return (pHandle->wMecAngle);
#endif
}
 80081b0:	6880      	ldr	r0, [r0, #8]
 80081b2:	4770      	bx	lr

080081b4 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 80081b4:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop

080081bc <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 80081bc:	f9b1 1000 	ldrsh.w	r1, [r1]
{
 80081c0:	b430      	push	{r4, r5}
 80081c2:	b28a      	uxth	r2, r1
    if (*pMecSpeedUnit < 0)
 80081c4:	2900      	cmp	r1, #0
    {
      hAux = -(*pMecSpeedUnit);
 80081c6:	bfb8      	it	lt
 80081c8:	4252      	neglt	r2, r2
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 80081ca:	8ac5      	ldrh	r5, [r0, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 80081cc:	78c4      	ldrb	r4, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 80081ce:	7803      	ldrb	r3, [r0, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 80081d0:	8a81      	ldrh	r1, [r0, #20]
      hAux = -(*pMecSpeedUnit);
 80081d2:	bfb8      	it	lt
 80081d4:	b292      	uxthlt	r2, r2
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 80081d6:	4295      	cmp	r5, r2
 80081d8:	d819      	bhi.n	800820e <SPD_IsMecSpeedReliable+0x52>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 80081da:	4291      	cmp	r1, r2
 80081dc:	bf2c      	ite	cs
 80081de:	2200      	movcs	r2, #0
 80081e0:	2201      	movcc	r2, #1
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 80081e2:	f9b0 5012 	ldrsh.w	r5, [r0, #18]
 80081e6:	b2a9      	uxth	r1, r5
 80081e8:	2d00      	cmp	r5, #0
    {
      hAux = -(pHandle->hMecAccelUnitP);
 80081ea:	bfb8      	it	lt
 80081ec:	4249      	neglt	r1, r1
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80081ee:	8b05      	ldrh	r5, [r0, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 80081f0:	bfb8      	it	lt
 80081f2:	b289      	uxthlt	r1, r1
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 80081f4:	428d      	cmp	r5, r1
 80081f6:	d300      	bcc.n	80081fa <SPD_IsMecSpeedReliable+0x3e>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 80081f8:	b15a      	cbz	r2, 8008212 <SPD_IsMecSpeedReliable+0x56>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 80081fa:	429c      	cmp	r4, r3
 80081fc:	d901      	bls.n	8008202 <SPD_IsMecSpeedReliable+0x46>
      {
        bSpeedErrorNumber++;
 80081fe:	3301      	adds	r3, #1
 8008200:	b2db      	uxtb	r3, r3
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8008202:	7003      	strb	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8008204:	1b18      	subs	r0, r3, r4
 8008206:	bf18      	it	ne
 8008208:	2001      	movne	r0, #1
 800820a:	bc30      	pop	{r4, r5}
 800820c:	4770      	bx	lr
      SpeedError = true;
 800820e:	2201      	movs	r2, #1
 8008210:	e7e7      	b.n	80081e2 <SPD_IsMecSpeedReliable+0x26>
        bSpeedErrorNumber = 0u;
 8008212:	429c      	cmp	r4, r3
 8008214:	bf88      	it	hi
 8008216:	2300      	movhi	r3, #0
 8008218:	e7f3      	b.n	8008202 <SPD_IsMecSpeedReliable+0x46>
 800821a:	bf00      	nop

0800821c <STC_Init>:
  * @retval none.
  *
  * - Called once right after object creation at initialization of the whole MC core.
  */
__weak void STC_Init(SpeednTorqCtrl_Handle_t *pHandle, PID_Handle_t *pPI, SpeednPosFdbk_Handle_t *SPD_Handle)
{
 800821c:	b430      	push	{r4, r5}
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800821e:	f9b0 502c 	ldrsh.w	r5, [r0, #44]	; 0x2c
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8008222:	f9b0 402e 	ldrsh.w	r4, [r0, #46]	; 0x2e
    pHandle->PISpeed = pPI;
 8008226:	6101      	str	r1, [r0, #16]
    pHandle->TargetFinal = 0;
 8008228:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800822a:	042d      	lsls	r5, r5, #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800822c:	0424      	lsls	r4, r4, #16
    pHandle->Mode = pHandle->ModeDefault;
 800822e:	f890 102a 	ldrb.w	r1, [r0, #42]	; 0x2a
    pHandle->SPD = SPD_Handle;
 8008232:	6142      	str	r2, [r0, #20]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8008234:	e9c0 5401 	strd	r5, r4, [r0, #4]
    pHandle->Mode = pHandle->ModeDefault;
 8008238:	7001      	strb	r1, [r0, #0]
    pHandle->TargetFinal = 0;
 800823a:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 800823c:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800823e:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8008240:	bc30      	pop	{r4, r5}
 8008242:	4770      	bx	lr

08008244 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8008244:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8008246:	4770      	bx	lr

08008248 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8008248:	7803      	ldrb	r3, [r0, #0]
 800824a:	2b03      	cmp	r3, #3
 800824c:	d000      	beq.n	8008250 <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800824e:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8008250:	6900      	ldr	r0, [r0, #16]
 8008252:	2100      	movs	r1, #0
 8008254:	f7fe be8e 	b.w	8006f74 <PID_SetIntegralTerm>

08008258 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8008258:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800825a:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800825c:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800825e:	4770      	bx	lr

08008260 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8008260:	4603      	mov	r3, r0
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8008262:	7800      	ldrb	r0, [r0, #0]
 8008264:	2804      	cmp	r0, #4
{
 8008266:	b430      	push	{r4, r5}
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8008268:	d015      	beq.n	8008296 <STC_ExecRamp+0x36>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800826a:	8bdc      	ldrh	r4, [r3, #30]
 800826c:	428c      	cmp	r4, r1
 800826e:	db15      	blt.n	800829c <STC_ExecRamp+0x3c>
      {
        allowedRange = false;
      }
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8008270:	f9b3 4024 	ldrsh.w	r4, [r3, #36]	; 0x24
 8008274:	428c      	cmp	r4, r1
 8008276:	dc11      	bgt.n	800829c <STC_ExecRamp+0x3c>
      {
        allowedRange = false;
      }
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8008278:	8c1c      	ldrh	r4, [r3, #32]
 800827a:	428c      	cmp	r4, r1
 800827c:	dd03      	ble.n	8008286 <STC_ExecRamp+0x26>
      {
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800827e:	f9b3 4022 	ldrsh.w	r4, [r3, #34]	; 0x22
 8008282:	428c      	cmp	r4, r1
 8008284:	db0a      	blt.n	800829c <STC_ExecRamp+0x3c>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8008286:	685c      	ldr	r4, [r3, #4]
    }

    if (true == allowedRange)
    {
      /* Interrupts the execution of any previous ramp command */
      if (0U == hDurationms)
 8008288:	b9ca      	cbnz	r2, 80082be <STC_ExecRamp+0x5e>
      {
        if (MCM_SPEED_MODE == pHandle->Mode)
 800828a:	2803      	cmp	r0, #3
 800828c:	ea4f 4101 	mov.w	r1, r1, lsl #16
 8008290:	d10e      	bne.n	80082b0 <STC_ExecRamp+0x50>
        {
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8008292:	6059      	str	r1, [r3, #4]
 8008294:	e00d      	b.n	80082b2 <STC_ExecRamp+0x52>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8008296:	8cd8      	ldrh	r0, [r3, #38]	; 0x26
 8008298:	4288      	cmp	r0, r1
 800829a:	da02      	bge.n	80082a2 <STC_ExecRamp+0x42>
        allowedRange = false;
 800829c:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 800829e:	bc30      	pop	{r4, r5}
 80082a0:	4770      	bx	lr
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 80082a2:	f9b3 4028 	ldrsh.w	r4, [r3, #40]	; 0x28
      hCurrentReference = STC_GetTorqueRef(pHandle);
 80082a6:	6898      	ldr	r0, [r3, #8]
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 80082a8:	428c      	cmp	r4, r1
 80082aa:	dcf7      	bgt.n	800829c <STC_ExecRamp+0x3c>
      if (0U == hDurationms)
 80082ac:	b9d2      	cbnz	r2, 80082e4 <STC_ExecRamp+0x84>
 80082ae:	0409      	lsls	r1, r1, #16
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 80082b0:	6099      	str	r1, [r3, #8]
        pHandle->RampRemainingStep = 0U;
 80082b2:	2200      	movs	r2, #0
 80082b4:	2001      	movs	r0, #1
 80082b6:	60da      	str	r2, [r3, #12]
        pHandle->IncDecAmount = 0;
 80082b8:	619a      	str	r2, [r3, #24]
}
 80082ba:	bc30      	pop	{r4, r5}
 80082bc:	4770      	bx	lr
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 80082be:	1420      	asrs	r0, r4, #16
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 80082c0:	8b9c      	ldrh	r4, [r3, #28]
        wAux /= 1000U;
 80082c2:	4d09      	ldr	r5, [pc, #36]	; (80082e8 <STC_ExecRamp+0x88>)
        pHandle->TargetFinal = hTargetFinal;
 80082c4:	8059      	strh	r1, [r3, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 80082c6:	fb02 f204 	mul.w	r2, r2, r4
        wAux /= 1000U;
 80082ca:	fba5 4202 	umull	r4, r2, r5, r2
 80082ce:	0992      	lsrs	r2, r2, #6
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 80082d0:	1a09      	subs	r1, r1, r0
        pHandle->RampRemainingStep++;
 80082d2:	3201      	adds	r2, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 80082d4:	0409      	lsls	r1, r1, #16
        pHandle->IncDecAmount = wAux1;
 80082d6:	2001      	movs	r0, #1
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 80082d8:	fb91 f1f2 	sdiv	r1, r1, r2
        pHandle->RampRemainingStep++;
 80082dc:	60da      	str	r2, [r3, #12]
        pHandle->IncDecAmount = wAux1;
 80082de:	6199      	str	r1, [r3, #24]
}
 80082e0:	bc30      	pop	{r4, r5}
 80082e2:	4770      	bx	lr
  return ((int16_t)(pHandle->TorqueRef >> 16));
 80082e4:	1400      	asrs	r0, r0, #16
 80082e6:	e7eb      	b.n	80082c0 <STC_ExecRamp+0x60>
 80082e8:	10624dd3 	.word	0x10624dd3

080082ec <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 80082ec:	b570      	push	{r4, r5, r6, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 80082ee:	e9d0 1501 	ldrd	r1, r5, [r0, #4]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80082f2:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 80082f4:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->SpeedRefUnitExt;
 80082f6:	2a04      	cmp	r2, #4
 80082f8:	bf18      	it	ne
 80082fa:	460d      	movne	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d90a      	bls.n	8008316 <STC_CalcTorqueReference+0x2a>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 8008300:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8008302:	3b01      	subs	r3, #1
 8008304:	60c3      	str	r3, [r0, #12]
      wCurrentReference += pHandle->IncDecAmount;
 8008306:	440d      	add	r5, r1
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8008308:	2a03      	cmp	r2, #3
 800830a:	ea4f 4625 	mov.w	r6, r5, asr #16
 800830e:	d00c      	beq.n	800832a <STC_CalcTorqueReference+0x3e>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
    }
    else
    {
      pHandle->TorqueRef = wCurrentReference;
 8008310:	6085      	str	r5, [r0, #8]
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8008312:	b230      	sxth	r0, r6
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8008314:	bd70      	pop	{r4, r5, r6, pc}
    else if (1U == pHandle->RampRemainingStep)
 8008316:	d1f7      	bne.n	8008308 <STC_CalcTorqueReference+0x1c>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8008318:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800831c:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800831e:	042d      	lsls	r5, r5, #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 8008320:	2a03      	cmp	r2, #3
      pHandle->RampRemainingStep = 0U;
 8008322:	60c3      	str	r3, [r0, #12]
 8008324:	ea4f 4625 	mov.w	r6, r5, asr #16
    if (MCM_SPEED_MODE == pHandle->Mode)
 8008328:	d1f2      	bne.n	8008310 <STC_CalcTorqueReference+0x24>
 800832a:	4604      	mov	r4, r0
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800832c:	6940      	ldr	r0, [r0, #20]
 800832e:	f7ff ff41 	bl	80081b4 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8008332:	1a30      	subs	r0, r6, r0
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8008334:	b201      	sxth	r1, r0
 8008336:	6920      	ldr	r0, [r4, #16]
 8008338:	f7fe fe1e 	bl	8006f78 <PI_Controller>
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800833c:	0403      	lsls	r3, r0, #16
 800833e:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 8008342:	bd70      	pop	{r4, r5, r6, pc}

08008344 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8008344:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8008348:	4770      	bx	lr
 800834a:	bf00      	nop

0800834c <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 800834c:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8008350:	2000      	movs	r0, #0
 8008352:	b29a      	uxth	r2, r3
 8008354:	f362 000f 	bfi	r0, r2, #0, #16
 8008358:	0c1b      	lsrs	r3, r3, #16
{
 800835a:	b082      	sub	sp, #8
  return (IqdRefDefault);
 800835c:	f363 401f 	bfi	r0, r3, #16, #16
}
 8008360:	b002      	add	sp, #8
 8008362:	4770      	bx	lr

08008364 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8008364:	b510      	push	{r4, lr}
 8008366:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8008368:	6940      	ldr	r0, [r0, #20]
 800836a:	f7ff ff23 	bl	80081b4 <SPD_GetAvrgMecSpeedUnit>
 800836e:	0400      	lsls	r0, r0, #16
 8008370:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8008372:	bd10      	pop	{r4, pc}

08008374 <TC_Init>:
  * @param  pSTC pointer on the handler of the current instance of the SpeednTorqCtrl component.
  * @param  pENC handler of the current instance of the EncAlignCtrl component.
 
  */
void TC_Init(PosCtrl_Handle_t *pHandle, PID_Handle_t *pPIDPosReg, SpeednTorqCtrl_Handle_t *pSTC, ENCODER_Handle_t *pENC)
{
 8008374:	b410      	push	{r4}
  pHandle->ElapseTime = 0.0f;

  pHandle->PositionControlRegulation = DISABLE;
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;

  pHandle->pENC = pENC;
 8008376:	6643      	str	r3, [r0, #100]	; 0x64
  pHandle->MovementDuration = 0.0f;
 8008378:	2400      	movs	r4, #0
  pHandle->ReceivedTh = 0.0f;
 800837a:	2300      	movs	r3, #0
  pHandle->MovementDuration = 0.0f;
 800837c:	6004      	str	r4, [r0, #0]
  pHandle->AngleStep = 0.0f;
 800837e:	60c4      	str	r4, [r0, #12]
  pHandle->SubStep[0] = 0.0f;
 8008380:	6104      	str	r4, [r0, #16]
  pHandle->SubStep[1] = 0.0f;
 8008382:	6144      	str	r4, [r0, #20]
  pHandle->SubStep[2] = 0.0f;
 8008384:	6184      	str	r4, [r0, #24]
  pHandle->SubStep[3] = 0.0f;
 8008386:	61c4      	str	r4, [r0, #28]
  pHandle->SubStep[4] = 0.0f;
 8008388:	6204      	str	r4, [r0, #32]
  pHandle->SubStep[5] = 0.0f;
 800838a:	6244      	str	r4, [r0, #36]	; 0x24
  pHandle->SubStepDuration = 0;
 800838c:	6284      	str	r4, [r0, #40]	; 0x28
  pHandle->Jerk = 0.0f;
 800838e:	6344      	str	r4, [r0, #52]	; 0x34
  pHandle->CruiseSpeed = 0.0f;
 8008390:	6384      	str	r4, [r0, #56]	; 0x38
  pHandle->Acceleration = 0.0f;
 8008392:	63c4      	str	r4, [r0, #60]	; 0x3c
  pHandle->Omega = 0.0f;
 8008394:	6404      	str	r4, [r0, #64]	; 0x40
  pHandle->OmegaPrev = 0.0f;
 8008396:	6444      	str	r4, [r0, #68]	; 0x44
  pHandle->Theta = 0.0f;
 8008398:	6484      	str	r4, [r0, #72]	; 0x48
  pHandle->ThetaPrev = 0.0f;
 800839a:	64c4      	str	r4, [r0, #76]	; 0x4c
  pHandle->ElapseTime = 0.0f;
 800839c:	62c4      	str	r4, [r0, #44]	; 0x2c
  pHandle->pSTC = pSTC;
  pHandle->PIDPosRegulator = pPIDPosReg;
 800839e:	e9c0 211a 	strd	r2, r1, [r0, #104]	; 0x68
  pHandle->ReceivedTh = 0.0f;
 80083a2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  pHandle->TcTick = 0;
 80083a6:	6583      	str	r3, [r0, #88]	; 0x58
  pHandle->PositionControlRegulation = DISABLE;
 80083a8:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 80083ac:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60

  pHandle->MecAngleOffset = 0;
 80083b0:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
 80083b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083b8:	4770      	bx	lr
 80083ba:	bf00      	nop

080083bc <TC_MoveCommand>:
  * This function implements the Trajectory Control mode. When fDuration is different from 0,
  * the trajectory of the movement, and therefore its acceleration and speed, are computed. 
  * 
  */
bool TC_MoveCommand(PosCtrl_Handle_t *pHandle, float startingAngle, float angleStep, float movementDuration)
{
 80083bc:	4603      	mov	r3, r0

  bool RetConfigStatus = false;
  float fMinimumStepDuration;

  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 80083be:	f890 0060 	ldrb.w	r0, [r0, #96]	; 0x60
 80083c2:	2803      	cmp	r0, #3
 80083c4:	d050      	beq.n	8008468 <TC_MoveCommand+0xac>
  else
  {
    /* Nothing to do */
  }

  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 80083c6:	b108      	cbz	r0, 80083cc <TC_MoveCommand+0x10>
  bool RetConfigStatus = false;
 80083c8:	2000      	movs	r0, #0
  else
  {
    /* Nothing to do */
  }
  return (RetConfigStatus);
}
 80083ca:	4770      	bx	lr
  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 80083cc:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 80083d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d4:	ddf9      	ble.n	80083ca <TC_MoveCommand+0xe>
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80083d6:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80083da:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8008474 <TC_MoveCommand+0xb8>
    pHandle->StartingAngle = startingAngle;
 80083de:	ed83 0a01 	vstr	s0, [r3, #4]
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80083e2:	eef2 5a02 	vmov.f32	s11, #34	; 0x41100000  9.0
 80083e6:	ee67 5aa5 	vmul.f32	s11, s15, s11
    pHandle->FinalAngle = startingAngle + angleStep;
 80083ea:	ee30 5a20 	vadd.f32	s10, s0, s1
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80083ee:	eec1 7a25 	vdiv.f32	s15, s2, s11
    pHandle->SubStep[0] = 0 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 80083f2:	2200      	movs	r2, #0
    pHandle->PositionControlRegulation = ENABLE;
 80083f4:	2001      	movs	r0, #1
 80083f6:	f883 0051 	strb.w	r0, [r3, #81]	; 0x51
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 80083fa:	f883 0060 	strb.w	r0, [r3, #96]	; 0x60
    pHandle->SubStep[0] = 0 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 80083fe:	611a      	str	r2, [r3, #16]
    pHandle->SubStep[1] = 0 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 8008400:	615a      	str	r2, [r3, #20]
    pHandle->SubStep[2] = 0 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8008402:	619a      	str	r2, [r3, #24]
    pHandle->ElapseTime = 0.0f;
 8008404:	62da      	str	r2, [r3, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 8008406:	641a      	str	r2, [r3, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 8008408:	63da      	str	r2, [r3, #60]	; 0x3c
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800840a:	eeb2 6a08 	vmov.f32	s12, #40	; 0x41400000  12.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800840e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    pHandle->FinalAngle = startingAngle + angleStep;
 8008412:	ed83 5a02 	vstr	s10, [r3, #8]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008416:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pHandle->SubStep[3] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800841a:	eef2 6a03 	vmov.f32	s13, #35	; 0x41180000  9.5
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800841e:	ee67 7aa5 	vmul.f32	s15, s15, s11
    pHandle->AngleStep = angleStep;
 8008422:	edc3 0a03 	vstr	s1, [r3, #12]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008426:	ee27 7a87 	vmul.f32	s14, s15, s14
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800842a:	edc3 7a00 	vstr	s15, [r3]
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800842e:	ee27 5a07 	vmul.f32	s10, s14, s14
 8008432:	ee27 6a06 	vmul.f32	s12, s14, s12
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008436:	ee75 5a05 	vadd.f32	s11, s10, s10
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800843a:	ee26 6a05 	vmul.f32	s12, s12, s10
    pHandle->SubStep[3] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800843e:	ee67 6a26 	vmul.f32	s13, s14, s13
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008442:	ee80 5a86 	vdiv.f32	s10, s1, s12
    pHandle->Theta = startingAngle;
 8008446:	ed83 0a12 	vstr	s0, [r3, #72]	; 0x48
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800844a:	ee65 7a85 	vmul.f32	s15, s11, s10
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800844e:	ed83 7a0a 	vstr	s14, [r3, #40]	; 0x28
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008452:	ed83 5a0d 	vstr	s10, [r3, #52]	; 0x34
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008456:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
    pHandle->SubStep[3] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800845a:	edc3 6a07 	vstr	s13, [r3, #28]
    pHandle->SubStep[4] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800845e:	edc3 6a08 	vstr	s13, [r3, #32]
    pHandle->SubStep[5] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008462:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
 8008466:	4770      	bx	lr
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 8008468:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800846c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008470:	dcb1      	bgt.n	80083d6 <TC_MoveCommand+0x1a>
 8008472:	e7a9      	b.n	80083c8 <TC_MoveCommand+0xc>
 8008474:	3de38e39 	.word	0x3de38e39

08008478 <TC_FollowCommand>:
void TC_FollowCommand(PosCtrl_Handle_t *pHandle, float Angle)
{
  float omega = 0, acceleration = 0, dt = 0;

  /* Estimate speed */
  if (pHandle->ReceivedTh > 0)
 8008478:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 800847c:	b363      	cbz	r3, 80084d8 <TC_FollowCommand+0x60>
  {
    /* Calculate dt */
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 800847e:	edd0 7a16 	vldr	s15, [r0, #88]	; 0x58
 8008482:	ed90 7a17 	vldr	s14, [r0, #92]	; 0x5c
 8008486:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pHandle->TcTick = 0;
 800848a:	2200      	movs	r2, #0
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 800848c:	ee67 7a87 	vmul.f32	s15, s15, s14
    pHandle->TcTick = 0;
 8008490:	6582      	str	r2, [r0, #88]	; 0x58
    if (dt > 0)
 8008492:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8008496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800849a:	dd29      	ble.n	80084f0 <TC_FollowCommand+0x78>
    {
      omega = (Angle - pHandle->ThetaPrev) / dt;
 800849c:	edd0 6a13 	vldr	s13, [r0, #76]	; 0x4c
 80084a0:	ee70 6a66 	vsub.f32	s13, s0, s13
  {
    /* Nothing to do */
  }

  /* Estimated acceleration */
  if (pHandle->ReceivedTh > 1)
 80084a4:	2b01      	cmp	r3, #1
      omega = (Angle - pHandle->ThetaPrev) / dt;
 80084a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  if (pHandle->ReceivedTh > 1)
 80084aa:	d917      	bls.n	80084dc <TC_FollowCommand+0x64>
  {
    if (dt > 0)
    {
      acceleration = (omega - pHandle->OmegaPrev) / dt;
 80084ac:	ed90 6a11 	vldr	s12, [r0, #68]	; 0x44
 80084b0:	ee37 6a46 	vsub.f32	s12, s14, s12
 80084b4:	eec6 6a27 	vdiv.f32	s13, s12, s15
  {
    /* Nothing to do */
  }

  /* Update state variable */
  pHandle->ThetaPrev  = Angle;
 80084b8:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
  pHandle->OmegaPrev = omega;
 80084bc:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
  pHandle->Acceleration = acceleration;
  pHandle->Omega = omega;
  pHandle->Theta = Angle;

  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
  pHandle->MovementDuration = 0;
 80084c0:	2200      	movs	r2, #0
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 80084c2:	2303      	movs	r3, #3
  pHandle->Acceleration = acceleration;
 80084c4:	edc0 6a0f 	vstr	s13, [r0, #60]	; 0x3c
  pHandle->Omega = omega;
 80084c8:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
  pHandle->Theta = Angle;
 80084cc:	ed80 0a12 	vstr	s0, [r0, #72]	; 0x48
  pHandle->MovementDuration = 0;
 80084d0:	6002      	str	r2, [r0, #0]
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 80084d2:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
}
 80084d6:	4770      	bx	lr
  float omega = 0, acceleration = 0, dt = 0;
 80084d8:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8008500 <TC_FollowCommand+0x88>
  pHandle->ThetaPrev  = Angle;
 80084dc:	ed80 0a13 	vstr	s0, [r0, #76]	; 0x4c
    pHandle->ReceivedTh++;
 80084e0:	3301      	adds	r3, #1
 80084e2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  pHandle->OmegaPrev = omega;
 80084e6:	ed80 7a11 	vstr	s14, [r0, #68]	; 0x44
 80084ea:	eddf 6a05 	vldr	s13, [pc, #20]	; 8008500 <TC_FollowCommand+0x88>
 80084ee:	e7e7      	b.n	80084c0 <TC_FollowCommand+0x48>
  if (pHandle->ReceivedTh > 1)
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d9f1      	bls.n	80084d8 <TC_FollowCommand+0x60>
  float omega = 0, acceleration = 0, dt = 0;
 80084f4:	ed9f 7a02 	vldr	s14, [pc, #8]	; 8008500 <TC_FollowCommand+0x88>
 80084f8:	eef0 6a47 	vmov.f32	s13, s14
 80084fc:	e7dc      	b.n	80084b8 <TC_FollowCommand+0x40>
 80084fe:	bf00      	nop
 8008500:	00000000 	.word	0x00000000

08008504 <TC_PositionRegulation>:
/**
  * @brief  Proceeds on the position control loop.
  * @param  pHandle: handler of the current instance of the Position Control component.
  */
void TC_PositionRegulation(PosCtrl_Handle_t *pHandle)
{
 8008504:	b538      	push	{r3, r4, r5, lr}
  int32_t wMecAngleRef;
  int32_t wMecAngle;
  int32_t wError;
  int32_t hTorqueRef_Pos;

  if (pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING)
 8008506:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800850a:	2b01      	cmp	r3, #1
 800850c:	d038      	beq.n	8008580 <TC_PositionRegulation+0x7c>
  else
  {
    /* Nothing to do */
  }

  if (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING)
 800850e:	2b03      	cmp	r3, #3
 8008510:	d003      	beq.n	800851a <TC_PositionRegulation+0x16>
  else
  {
    /* Nothing to do */
  }

  if (pHandle->PositionControlRegulation == ENABLE)
 8008512:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8008516:	b9a3      	cbnz	r3, 8008542 <TC_PositionRegulation+0x3e>
  else
  {
    /* Nothing to do */
  }

}
 8008518:	bd38      	pop	{r3, r4, r5, pc}
  * @brief  Updates the angular position.
  * @param  pHandle handler of the current instance of the Position Control component.
  */
static inline void TC_FollowExecution(PosCtrl_Handle_t *pHandle)
{
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800851a:	edd0 6a0c 	vldr	s13, [r0, #48]	; 0x30
 800851e:	edd0 7a10 	vldr	s15, [r0, #64]	; 0x40
 8008522:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 8008526:	ed90 7a12 	vldr	s14, [r0, #72]	; 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 800852a:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800852e:	eee6 7a26 	vfma.f32	s15, s12, s13
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 8008532:	eea6 7aa7 	vfma.f32	s14, s13, s15
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 8008536:	edc0 7a10 	vstr	s15, [r0, #64]	; 0x40
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 800853a:	ed80 7a12 	vstr	s14, [r0, #72]	; 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 800853e:	2b00      	cmp	r3, #0
 8008540:	d0ea      	beq.n	8008518 <TC_PositionRegulation+0x14>
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 8008542:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8008698 <TC_PositionRegulation+0x194>
 8008546:	edd0 7a12 	vldr	s15, [r0, #72]	; 0x48
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800854a:	6e83      	ldr	r3, [r0, #104]	; 0x68
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 800854c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008550:	4604      	mov	r4, r0
 8008552:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 8008556:	6958      	ldr	r0, [r3, #20]
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 8008558:	ee17 5a90 	vmov	r5, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800855c:	f7ff fe28 	bl	80081b0 <SPD_GetMecAngle>
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 8008560:	1a29      	subs	r1, r5, r0
 8008562:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8008564:	f7fe fd4c 	bl	8007000 <PID_Controller>
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8008568:	2104      	movs	r1, #4
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 800856a:	4605      	mov	r5, r0
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 800856c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800856e:	f7ff fe73 	bl	8008258 <STC_SetControlMode>
    STC_ExecRamp(pHandle->pSTC, hTorqueRef_Pos, 0);
 8008572:	4629      	mov	r1, r5
 8008574:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8008576:	2200      	movs	r2, #0
}
 8008578:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    STC_ExecRamp(pHandle->pSTC, hTorqueRef_Pos, 0);
 800857c:	f7ff be70 	b.w	8008260 <STC_ExecRamp>
  if (pHandle->ElapseTime < pHandle->SubStep[0])            /* 1st Sub-Step interval time of acceleration phase */
 8008580:	ed90 7a0b 	vldr	s14, [r0, #44]	; 0x2c
 8008584:	edd0 5a04 	vldr	s11, [r0, #16]
 8008588:	edd0 7a0c 	vldr	s15, [r0, #48]	; 0x30
 800858c:	ed90 6a00 	vldr	s12, [r0]
 8008590:	eeb4 7ae5 	vcmpe.f32	s14, s11
 8008594:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008598:	ee77 6a27 	vadd.f32	s13, s14, s15
 800859c:	ee36 5a27 	vadd.f32	s10, s12, s15
 80085a0:	d529      	bpl.n	80085f6 <TC_PositionRegulation+0xf2>
 80085a2:	edd0 5a0d 	vldr	s11, [r0, #52]	; 0x34
 80085a6:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
 80085aa:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
 80085ae:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80085b2:	ee66 5a27 	vmul.f32	s11, s12, s15
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80085b6:	ee37 7a25 	vadd.f32	s14, s14, s11
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 80085ba:	edd0 5a12 	vldr	s11, [r0, #72]	; 0x48
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80085be:	ed80 7a10 	vstr	s14, [r0, #64]	; 0x40
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 80085c2:	eee7 5a27 	vfma.f32	s11, s14, s15
static inline bool TC_RampCompleted(PosCtrl_Handle_t *pHandle)
{
  bool retVal = false;

  /* Check that entire sequence (Acceleration - Cruise - Deceleration) is completed */
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 80085c6:	eef4 6ac5 	vcmpe.f32	s13, s10
 80085ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80085ce:	ed80 6a0f 	vstr	s12, [r0, #60]	; 0x3c
  pHandle->ElapseTime += pHandle->SamplingTime;
 80085d2:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 80085d6:	edc0 5a12 	vstr	s11, [r0, #72]	; 0x48
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 80085da:	dd9a      	ble.n	8008512 <TC_PositionRegulation+0xe>
    if (TC_ZERO_ALIGNMENT_START == pHandle->AlignmentStatus)
 80085dc:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 80085e0:	2b01      	cmp	r3, #1
      pHandle->AlignmentStatus = TC_ALIGNMENT_ERROR;
 80085e2:	bf04      	itt	eq
 80085e4:	2305      	moveq	r3, #5
 80085e6:	f880 3062 	strbeq.w	r3, [r0, #98]	; 0x62
    pHandle->ElapseTime = 0;
 80085ea:	2200      	movs	r2, #0
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 80085ec:	2300      	movs	r3, #0
    pHandle->ElapseTime = 0;
 80085ee:	62c2      	str	r2, [r0, #44]	; 0x2c
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 80085f0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80085f4:	e78d      	b.n	8008512 <TC_PositionRegulation+0xe>
  else if (pHandle->ElapseTime < pHandle->SubStep[1])       /* 2nd Sub-Step interval time of acceleration phase */
 80085f6:	edd0 5a05 	vldr	s11, [r0, #20]
 80085fa:	eeb4 7ae5 	vcmpe.f32	s14, s11
 80085fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008602:	d414      	bmi.n	800862e <TC_PositionRegulation+0x12a>
  else if (pHandle->ElapseTime < pHandle->SubStep[2])       /* 3rd Sub-Step interval time of acceleration phase */
 8008604:	edd0 5a06 	vldr	s11, [r0, #24]
 8008608:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800860c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008610:	d414      	bmi.n	800863c <TC_PositionRegulation+0x138>
  else if (pHandle->ElapseTime < pHandle->SubStep[3])       /* Speed Cruise phase (after acceleration and before
 8008612:	edd0 5a07 	vldr	s11, [r0, #28]
 8008616:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800861a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800861e:	d51a      	bpl.n	8008656 <TC_PositionRegulation+0x152>
    pHandle->Omega = pHandle->CruiseSpeed;
 8008620:	eddf 5a1e 	vldr	s11, [pc, #120]	; 800869c <TC_PositionRegulation+0x198>
 8008624:	ed90 7a0e 	vldr	s14, [r0, #56]	; 0x38
 8008628:	eeb0 6a65 	vmov.f32	s12, s11
 800862c:	e7c3      	b.n	80085b6 <TC_PositionRegulation+0xb2>
 800862e:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
 8008632:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
 8008636:	ee66 5a27 	vmul.f32	s11, s12, s15
 800863a:	e7bc      	b.n	80085b6 <TC_PositionRegulation+0xb2>
 800863c:	edd0 5a0d 	vldr	s11, [r0, #52]	; 0x34
 8008640:	ed90 6a0f 	vldr	s12, [r0, #60]	; 0x3c
 8008644:	ed90 7a10 	vldr	s14, [r0, #64]	; 0x40
 8008648:	ee67 5aa5 	vmul.f32	s11, s15, s11
 800864c:	ee36 6a65 	vsub.f32	s12, s12, s11
 8008650:	ee66 5a27 	vmul.f32	s11, s12, s15
 8008654:	e7af      	b.n	80085b6 <TC_PositionRegulation+0xb2>
  else if (pHandle->ElapseTime < pHandle->SubStep[4])       /* 1st Sub-Step interval time of deceleration phase */
 8008656:	edd0 5a08 	vldr	s11, [r0, #32]
 800865a:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800865e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008662:	d4eb      	bmi.n	800863c <TC_PositionRegulation+0x138>
  else if (pHandle->ElapseTime < pHandle->SubStep[5])       /* 2nd Sub-Step interval time of deceleration phase */
 8008664:	edd0 5a09 	vldr	s11, [r0, #36]	; 0x24
 8008668:	eeb4 7ae5 	vcmpe.f32	s14, s11
 800866c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008670:	d4dd      	bmi.n	800862e <TC_PositionRegulation+0x12a>
  else if (pHandle->ElapseTime < pHandle->MovementDuration) /* 3rd Sub-Step interval time of deceleration phase */
 8008672:	eeb4 7ac6 	vcmpe.f32	s14, s12
 8008676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800867a:	d492      	bmi.n	80085a2 <TC_PositionRegulation+0x9e>
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 800867c:	eef4 6ac5 	vcmpe.f32	s13, s10
    pHandle->Theta = pHandle->FinalAngle;
 8008680:	6882      	ldr	r2, [r0, #8]
  pHandle->ElapseTime += pHandle->SamplingTime;
 8008682:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 8008686:	2302      	movs	r3, #2
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 8008688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    pHandle->Theta = pHandle->FinalAngle;
 800868c:	6482      	str	r2, [r0, #72]	; 0x48
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 800868e:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 8008692:	dca3      	bgt.n	80085dc <TC_PositionRegulation+0xd8>
 8008694:	e73d      	b.n	8008512 <TC_PositionRegulation+0xe>
 8008696:	bf00      	nop
 8008698:	4622f983 	.word	0x4622f983
 800869c:	00000000 	.word	0x00000000

080086a0 <TC_EncAlignmentCommand>:
  if (TC_ALIGNMENT_COMPLETED == pHandle->AlignmentStatus)
 80086a0:	f890 3062 	ldrb.w	r3, [r0, #98]	; 0x62
 80086a4:	2b02      	cmp	r3, #2
 80086a6:	d012      	beq.n	80086ce <TC_EncAlignmentCommand+0x2e>
{
 80086a8:	b510      	push	{r4, lr}
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 80086aa:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
 80086ae:	2b04      	cmp	r3, #4
{
 80086b0:	b082      	sub	sp, #8
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 80086b2:	d010      	beq.n	80086d6 <TC_EncAlignmentCommand+0x36>
      pHandle->pENC->_Super.wMecAngle = 0;
 80086b4:	6e44      	ldr	r4, [r0, #100]	; 0x64
 80086b6:	2300      	movs	r3, #0
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 80086b8:	2102      	movs	r1, #2
      pHandle->PositionControlRegulation = ENABLE;
 80086ba:	2201      	movs	r2, #1
      pHandle->pENC->_Super.wMecAngle = 0;
 80086bc:	60a3      	str	r3, [r4, #8]
      pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 80086be:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 80086c2:	f880 1062 	strb.w	r1, [r0, #98]	; 0x62
      pHandle->PositionControlRegulation = ENABLE;
 80086c6:	f880 2051 	strb.w	r2, [r0, #81]	; 0x51
}
 80086ca:	b002      	add	sp, #8
 80086cc:	bd10      	pop	{r4, pc}
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 80086ce:	2300      	movs	r3, #0
 80086d0:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 80086d4:	4770      	bx	lr
 80086d6:	4604      	mov	r4, r0
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80086d8:	6e82      	ldr	r2, [r0, #104]	; 0x68
      pHandle->EncoderAbsoluteAligned = false;
 80086da:	2300      	movs	r3, #0
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80086dc:	6950      	ldr	r0, [r2, #20]
      pHandle->EncoderAbsoluteAligned = false;
 80086de:	f884 3052 	strb.w	r3, [r4, #82]	; 0x52
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80086e2:	f7ff fd65 	bl	80081b0 <SPD_GetMecAngle>
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 80086e6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80086ea:	9001      	str	r0, [sp, #4]
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 80086ec:	2b03      	cmp	r3, #3
 80086ee:	d005      	beq.n	80086fc <TC_EncAlignmentCommand+0x5c>
  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 80086f0:	b123      	cbz	r3, 80086fc <TC_EncAlignmentCommand+0x5c>
      pHandle->AlignmentStatus = TC_ZERO_ALIGNMENT_START;
 80086f2:	2301      	movs	r3, #1
 80086f4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 80086f8:	b002      	add	sp, #8
 80086fa:	bd10      	pop	{r4, pc}
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80086fc:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008700:	eddf 7a28 	vldr	s15, [pc, #160]	; 80087a4 <TC_EncAlignmentCommand+0x104>
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008704:	ed9f 6a28 	vldr	s12, [pc, #160]	; 80087a8 <TC_EncAlignmentCommand+0x108>
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008708:	eddf 3a28 	vldr	s7, [pc, #160]	; 80087ac <TC_EncAlignmentCommand+0x10c>
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800870c:	eddf 5a28 	vldr	s11, [pc, #160]	; 80087b0 <TC_EncAlignmentCommand+0x110>
    pHandle->AngleStep = angleStep;
 8008710:	ed9f 5a28 	vldr	s10, [pc, #160]	; 80087b4 <TC_EncAlignmentCommand+0x114>
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008714:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    pHandle->SubStep[0] = 0 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 8008718:	2300      	movs	r3, #0
    pHandle->PositionControlRegulation = ENABLE;
 800871a:	2201      	movs	r2, #1
 800871c:	f884 2051 	strb.w	r2, [r4, #81]	; 0x51
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 8008720:	f884 2060 	strb.w	r2, [r4, #96]	; 0x60
    pHandle->SubStep[0] = 0 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 8008724:	6123      	str	r3, [r4, #16]
    pHandle->SubStep[1] = 0 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 8008726:	6163      	str	r3, [r4, #20]
    pHandle->SubStep[2] = 0 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8008728:	61a3      	str	r3, [r4, #24]
    pHandle->ElapseTime = 0.0f;
 800872a:	62e3      	str	r3, [r4, #44]	; 0x2c
    pHandle->Omega = 0.0f;
 800872c:	6423      	str	r3, [r4, #64]	; 0x40
    pHandle->Acceleration = 0.0f;
 800872e:	63e3      	str	r3, [r4, #60]	; 0x3c
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 8008730:	eef2 7a02 	vmov.f32	s15, #34	; 0x41100000  9.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008734:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 8008738:	ee66 6aa7 	vmul.f32	s13, s13, s15
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800873c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 8008740:	eddd 7a01 	vldr	s15, [sp, #4]
    pHandle->AngleStep = angleStep;
 8008744:	ed84 5a03 	vstr	s10, [r4, #12]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008748:	ee27 7a26 	vmul.f32	s14, s14, s13
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800874c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008750:	ee27 6a06 	vmul.f32	s12, s14, s12
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 8008754:	ee67 7aa5 	vmul.f32	s15, s15, s11
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008758:	ee66 6a06 	vmul.f32	s13, s12, s12
    pHandle->SubStep[3] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800875c:	eef2 5a03 	vmov.f32	s11, #35	; 0x41180000  9.5
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008760:	ee26 4a86 	vmul.f32	s8, s13, s12
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008764:	ee76 6aa6 	vadd.f32	s13, s13, s13
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008768:	eec3 4a84 	vdiv.f32	s9, s7, s8
    pHandle->SubStep[3] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800876c:	ee66 5a25 	vmul.f32	s11, s12, s11
    pHandle->FinalAngle = startingAngle + angleStep;
 8008770:	ee37 5a85 	vadd.f32	s10, s15, s10
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008774:	ee66 6aa4 	vmul.f32	s13, s13, s9
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008778:	ed84 7a00 	vstr	s14, [r4]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800877c:	ed84 6a0a 	vstr	s12, [r4, #40]	; 0x28
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008780:	edc4 6a0e 	vstr	s13, [r4, #56]	; 0x38
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008784:	edc4 4a0d 	vstr	s9, [r4, #52]	; 0x34
    pHandle->SubStep[3] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8008788:	edc4 5a07 	vstr	s11, [r4, #28]
    pHandle->SubStep[4] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800878c:	edc4 5a08 	vstr	s11, [r4, #32]
    pHandle->SubStep[5] = 9.5 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008790:	edc4 5a09 	vstr	s11, [r4, #36]	; 0x24
    pHandle->StartingAngle = startingAngle;
 8008794:	edc4 7a01 	vstr	s15, [r4, #4]
    pHandle->Theta = startingAngle;
 8008798:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
    pHandle->FinalAngle = startingAngle + angleStep;
 800879c:	ed84 5a02 	vstr	s10, [r4, #8]
 80087a0:	e7a7      	b.n	80086f2 <TC_EncAlignmentCommand+0x52>
 80087a2:	bf00      	nop
 80087a4:	3e638e39 	.word	0x3e638e39
 80087a8:	3de38e39 	.word	0x3de38e39
 80087ac:	3f060a92 	.word	0x3f060a92
 80087b0:	38c90fdb 	.word	0x38c90fdb
 80087b4:	40c90fdb 	.word	0x40c90fdb

080087b8 <TC_GetAlignmentStatus>:
  * @param  pHandle handler of the current instance of the Position Control component.
  */
AlignStatus_t TC_GetAlignmentStatus(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->AlignmentStatus);
}
 80087b8:	f890 0062 	ldrb.w	r0, [r0, #98]	; 0x62
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop

080087c0 <TC_IncTick>:
  * @brief  Increments Tick counter used in follow mode.
  * @param  pHandle handler of the current instance of the Position Control component.
  */
void TC_IncTick(PosCtrl_Handle_t *pHandle)
{
  pHandle->TcTick++;
 80087c0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80087c2:	3301      	adds	r3, #1
 80087c4:	6583      	str	r3, [r0, #88]	; 0x58
}
 80087c6:	4770      	bx	lr

080087c8 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80087c8:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80087ca:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
 80087cc:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80087ce:	7003      	strb	r3, [r0, #0]
    pHandle->_Super.hElAngle = 0;
 80087d0:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 80087d2:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 80087d4:	8243      	strh	r3, [r0, #18]
    pHandle->wElSpeedDpp32 = 0;
 80087d6:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->hRemainingStep = 0U;
 80087da:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->hElAngleAccu = 0;
 80087dc:	8603      	strh	r3, [r0, #48]	; 0x30
    pHandle->bTransitionStarted = false;
 80087de:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
    pHandle->bTransitionEnded = false;
 80087e2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
    pHandle->bTransitionLocked = false;
 80087e6:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32

    pHandle->bCopyObserver = false;
 80087ea:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 80087ee:	4770      	bx	lr

080087f0 <VSS_Init>:
{
 80087f0:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 80087f2:	f7ff ffe9 	bl	80087c8 <VSS_Clear>
}
 80087f6:	bd08      	pop	{r3, pc}

080087f8 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 80087f8:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80087fc:	bb33      	cbnz	r3, 800884c <VSS_SetMecAcceleration+0x54>
 80087fe:	8b43      	ldrh	r3, [r0, #26]
{
 8008800:	b470      	push	{r4, r5, r6}
 8008802:	69c4      	ldr	r4, [r0, #28]
 8008804:	7845      	ldrb	r5, [r0, #1]
 8008806:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 800880a:	009b      	lsls	r3, r3, #2
 800880c:	fb04 f401 	mul.w	r4, r4, r1
 8008810:	fb94 f4f3 	sdiv	r4, r4, r3
    {
      if (0U == hDurationms)
 8008814:	b192      	cbz	r2, 800883c <VSS_SetMecAcceleration+0x44>

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
      }
      else
      {
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8008816:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8008818:	4e13      	ldr	r6, [pc, #76]	; (8008868 <VSS_SetMecAcceleration+0x70>)
 800881a:	fb02 f303 	mul.w	r3, r2, r3
 800881e:	fba6 2303 	umull	r2, r3, r6, r3
 8008822:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 8008826:	3301      	adds	r3, #1
 8008828:	b29b      	uxth	r3, r3
        pHandle->hRemainingStep = hNbrStep;
 800882a:	8503      	strh	r3, [r0, #40]	; 0x28
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800882c:	f9b0 600e 	ldrsh.w	r6, [r0, #14]
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));

        if (0U == hNbrStep)
 8008830:	b96b      	cbnz	r3, 800884e <VSS_SetMecAcceleration+0x56>
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
        }

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8008832:	0436      	lsls	r6, r6, #16
 8008834:	6246      	str	r6, [r0, #36]	; 0x24
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008836:	8541      	strh	r1, [r0, #42]	; 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8008838:	bc70      	pop	{r4, r5, r6}
 800883a:	4770      	bx	lr
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800883c:	fb14 f405 	smulbb	r4, r4, r5
 8008840:	81c4      	strh	r4, [r0, #14]
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8008842:	8181      	strh	r1, [r0, #12]
        pHandle->hRemainingStep = 0U;
 8008844:	8502      	strh	r2, [r0, #40]	; 0x28
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008846:	8541      	strh	r1, [r0, #42]	; 0x2a
}
 8008848:	bc70      	pop	{r4, r5, r6}
 800884a:	4770      	bx	lr
 800884c:	4770      	bx	lr
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800884e:	fb96 f2f5 	sdiv	r2, r6, r5
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8008852:	1aa4      	subs	r4, r4, r2
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8008854:	0422      	lsls	r2, r4, #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8008856:	0436      	lsls	r6, r6, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8008858:	fb92 f3f3 	sdiv	r3, r2, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800885c:	fb05 f303 	mul.w	r3, r5, r3
 8008860:	6203      	str	r3, [r0, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8008862:	6246      	str	r6, [r0, #36]	; 0x24
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008864:	8541      	strh	r1, [r0, #42]	; 0x2a
 8008866:	e7e7      	b.n	8008838 <VSS_SetMecAcceleration+0x40>
 8008868:	10624dd3 	.word	0x10624dd3

0800886c <__libc_init_array>:
 800886c:	b570      	push	{r4, r5, r6, lr}
 800886e:	4e0d      	ldr	r6, [pc, #52]	; (80088a4 <__libc_init_array+0x38>)
 8008870:	4c0d      	ldr	r4, [pc, #52]	; (80088a8 <__libc_init_array+0x3c>)
 8008872:	1ba4      	subs	r4, r4, r6
 8008874:	10a4      	asrs	r4, r4, #2
 8008876:	2500      	movs	r5, #0
 8008878:	42a5      	cmp	r5, r4
 800887a:	d109      	bne.n	8008890 <__libc_init_array+0x24>
 800887c:	4e0b      	ldr	r6, [pc, #44]	; (80088ac <__libc_init_array+0x40>)
 800887e:	4c0c      	ldr	r4, [pc, #48]	; (80088b0 <__libc_init_array+0x44>)
 8008880:	f000 f884 	bl	800898c <_init>
 8008884:	1ba4      	subs	r4, r4, r6
 8008886:	10a4      	asrs	r4, r4, #2
 8008888:	2500      	movs	r5, #0
 800888a:	42a5      	cmp	r5, r4
 800888c:	d105      	bne.n	800889a <__libc_init_array+0x2e>
 800888e:	bd70      	pop	{r4, r5, r6, pc}
 8008890:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008894:	4798      	blx	r3
 8008896:	3501      	adds	r5, #1
 8008898:	e7ee      	b.n	8008878 <__libc_init_array+0xc>
 800889a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800889e:	4798      	blx	r3
 80088a0:	3501      	adds	r5, #1
 80088a2:	e7f2      	b.n	800888a <__libc_init_array+0x1e>
 80088a4:	08008bc8 	.word	0x08008bc8
 80088a8:	08008bc8 	.word	0x08008bc8
 80088ac:	08008bc8 	.word	0x08008bc8
 80088b0:	08008bcc 	.word	0x08008bcc

080088b4 <__itoa>:
 80088b4:	1e93      	subs	r3, r2, #2
 80088b6:	2b22      	cmp	r3, #34	; 0x22
 80088b8:	b510      	push	{r4, lr}
 80088ba:	460c      	mov	r4, r1
 80088bc:	d904      	bls.n	80088c8 <__itoa+0x14>
 80088be:	2300      	movs	r3, #0
 80088c0:	700b      	strb	r3, [r1, #0]
 80088c2:	461c      	mov	r4, r3
 80088c4:	4620      	mov	r0, r4
 80088c6:	bd10      	pop	{r4, pc}
 80088c8:	2a0a      	cmp	r2, #10
 80088ca:	d109      	bne.n	80088e0 <__itoa+0x2c>
 80088cc:	2800      	cmp	r0, #0
 80088ce:	da07      	bge.n	80088e0 <__itoa+0x2c>
 80088d0:	232d      	movs	r3, #45	; 0x2d
 80088d2:	700b      	strb	r3, [r1, #0]
 80088d4:	4240      	negs	r0, r0
 80088d6:	2101      	movs	r1, #1
 80088d8:	4421      	add	r1, r4
 80088da:	f000 f819 	bl	8008910 <__utoa>
 80088de:	e7f1      	b.n	80088c4 <__itoa+0x10>
 80088e0:	2100      	movs	r1, #0
 80088e2:	e7f9      	b.n	80088d8 <__itoa+0x24>

080088e4 <itoa>:
 80088e4:	f7ff bfe6 	b.w	80088b4 <__itoa>

080088e8 <memcpy>:
 80088e8:	b510      	push	{r4, lr}
 80088ea:	1e43      	subs	r3, r0, #1
 80088ec:	440a      	add	r2, r1
 80088ee:	4291      	cmp	r1, r2
 80088f0:	d100      	bne.n	80088f4 <memcpy+0xc>
 80088f2:	bd10      	pop	{r4, pc}
 80088f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80088f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80088fc:	e7f7      	b.n	80088ee <memcpy+0x6>

080088fe <memset>:
 80088fe:	4402      	add	r2, r0
 8008900:	4603      	mov	r3, r0
 8008902:	4293      	cmp	r3, r2
 8008904:	d100      	bne.n	8008908 <memset+0xa>
 8008906:	4770      	bx	lr
 8008908:	f803 1b01 	strb.w	r1, [r3], #1
 800890c:	e7f9      	b.n	8008902 <memset+0x4>
	...

08008910 <__utoa>:
 8008910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008912:	4b1d      	ldr	r3, [pc, #116]	; (8008988 <__utoa+0x78>)
 8008914:	b08b      	sub	sp, #44	; 0x2c
 8008916:	4605      	mov	r5, r0
 8008918:	460c      	mov	r4, r1
 800891a:	466e      	mov	r6, sp
 800891c:	f103 0c20 	add.w	ip, r3, #32
 8008920:	6818      	ldr	r0, [r3, #0]
 8008922:	6859      	ldr	r1, [r3, #4]
 8008924:	4637      	mov	r7, r6
 8008926:	c703      	stmia	r7!, {r0, r1}
 8008928:	3308      	adds	r3, #8
 800892a:	4563      	cmp	r3, ip
 800892c:	463e      	mov	r6, r7
 800892e:	d1f7      	bne.n	8008920 <__utoa+0x10>
 8008930:	6818      	ldr	r0, [r3, #0]
 8008932:	791b      	ldrb	r3, [r3, #4]
 8008934:	713b      	strb	r3, [r7, #4]
 8008936:	1e93      	subs	r3, r2, #2
 8008938:	2b22      	cmp	r3, #34	; 0x22
 800893a:	6038      	str	r0, [r7, #0]
 800893c:	f04f 0300 	mov.w	r3, #0
 8008940:	d904      	bls.n	800894c <__utoa+0x3c>
 8008942:	7023      	strb	r3, [r4, #0]
 8008944:	461c      	mov	r4, r3
 8008946:	4620      	mov	r0, r4
 8008948:	b00b      	add	sp, #44	; 0x2c
 800894a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800894c:	1e66      	subs	r6, r4, #1
 800894e:	fbb5 f0f2 	udiv	r0, r5, r2
 8008952:	af0a      	add	r7, sp, #40	; 0x28
 8008954:	fb02 5510 	mls	r5, r2, r0, r5
 8008958:	443d      	add	r5, r7
 800895a:	1c59      	adds	r1, r3, #1
 800895c:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8008960:	f806 5f01 	strb.w	r5, [r6, #1]!
 8008964:	4605      	mov	r5, r0
 8008966:	b968      	cbnz	r0, 8008984 <__utoa+0x74>
 8008968:	5460      	strb	r0, [r4, r1]
 800896a:	4423      	add	r3, r4
 800896c:	4622      	mov	r2, r4
 800896e:	1b19      	subs	r1, r3, r4
 8008970:	1b10      	subs	r0, r2, r4
 8008972:	4281      	cmp	r1, r0
 8008974:	dde7      	ble.n	8008946 <__utoa+0x36>
 8008976:	7811      	ldrb	r1, [r2, #0]
 8008978:	7818      	ldrb	r0, [r3, #0]
 800897a:	f802 0b01 	strb.w	r0, [r2], #1
 800897e:	f803 1901 	strb.w	r1, [r3], #-1
 8008982:	e7f4      	b.n	800896e <__utoa+0x5e>
 8008984:	460b      	mov	r3, r1
 8008986:	e7e2      	b.n	800894e <__utoa+0x3e>
 8008988:	08008b98 	.word	0x08008b98

0800898c <_init>:
 800898c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800898e:	bf00      	nop
 8008990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008992:	bc08      	pop	{r3}
 8008994:	469e      	mov	lr, r3
 8008996:	4770      	bx	lr

08008998 <_fini>:
 8008998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800899a:	bf00      	nop
 800899c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800899e:	bc08      	pop	{r3}
 80089a0:	469e      	mov	lr, r3
 80089a2:	4770      	bx	lr
